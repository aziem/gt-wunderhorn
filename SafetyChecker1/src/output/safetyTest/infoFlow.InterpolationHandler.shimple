public class infoFlow.InterpolationHandler extends java.lang.Object
{
    private com.microsoft.z3.InterpolationContext ictx;
    private java.util.Map newSortMap;

    public void <init>()
    {
        infoFlow.InterpolationHandler r0;
        java.util.HashMap $r1;
        com.microsoft.z3.InterpolationContext $r2;

        r0 := @this: infoFlow.InterpolationHandler;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<java.util.HashMap: void <init>()>();

        r0.<infoFlow.InterpolationHandler: java.util.Map newSortMap> = $r1;

        $r2 = new com.microsoft.z3.InterpolationContext;

        specialinvoke $r2.<com.microsoft.z3.InterpolationContext: void <init>()>();

        r0.<infoFlow.InterpolationHandler: com.microsoft.z3.InterpolationContext ictx> = $r2;

        return;
    }

    public boolean createZ3Script(infoFlow.Edge)
    {
        infoFlow.InterpolationHandler r0;
        infoFlow.Edge r1;
        boolean $z0;

        r0 := @this: infoFlow.InterpolationHandler;

        r1 := @parameter0: infoFlow.Edge;

        $z0 = virtualinvoke r1.<infoFlow.Edge: boolean isSinkEdge()>();

        if $z0 == 0 goto label1;

        specialinvoke r0.<infoFlow.InterpolationHandler: boolean convertSinkInvoke2Z3(infoFlow.Edge)>(r1);

     label1:
        return 0;
    }

    private boolean convertSinkInvoke2Z3(infoFlow.Edge)
    {
        infoFlow.InterpolationHandler r0;
        infoFlow.Edge r1;
        java.lang.String r2, $r16, $r20, r22;
        int i0, $i1, i2, i2_1, i2_2;
        java.lang.String[] r3, $r5;
        soot.Unit $r4, $r6, $r14;
        boolean $z0;
        soot.jimple.InvokeStmt $r7;
        soot.jimple.InvokeExpr $r8;
        java.util.Map $r9;
        java.lang.Object $r10;
        java.lang.Integer $r11;
        java.lang.Object[] $r12, $r17;
        java.lang.StringBuilder $r13, $r15, $r18, $r19;
        soot.Value r21, r21_1, r21_2, r21_3;

        r0 := @this: infoFlow.InterpolationHandler;

        r1 := @parameter0: infoFlow.Edge;

        $r4 = virtualinvoke r1.<infoFlow.Edge: soot.Unit getUnit()>();

        r2 = staticinvoke <infoFlow.UnitController: java.lang.String getMethodSignature(soot.Unit)>($r4);

        r21 = null;

        $r5 = <infoFlow.UnitController: java.lang.String[] sinkSignatureDB>;

        r3 = $r5;

        i0 = lengthof $r5;

        i2 = 0;

(0)     goto label3;

     label1:
        r22 = r3[i2_1];

        $z0 = virtualinvoke r2.<java.lang.String: boolean contains(java.lang.CharSequence)>(r22);

(1)     if $z0 == 0 goto label2;

        $r6 = virtualinvoke r1.<infoFlow.Edge: soot.Unit getUnit()>();

        $r7 = (soot.jimple.InvokeStmt) $r6;

        $r8 = interfaceinvoke $r7.<soot.jimple.InvokeStmt: soot.jimple.InvokeExpr getInvokeExpr()>();

        $r9 = <infoFlow.UnitController: java.util.Map sensitiveParameterMap>;

        $r10 = interfaceinvoke $r9.<java.util.Map: java.lang.Object get(java.lang.Object)>(r22);

        $r11 = (java.lang.Integer) $r10;

        $i1 = virtualinvoke $r11.<java.lang.Integer: int intValue()>();

(2)     r21_2 = interfaceinvoke $r8.<soot.jimple.InvokeExpr: soot.Value getArg(int)>($i1);

     label2:
        r21_3 = Phi(r21_1 #1, r21_2 #2);

(3)     i2_2 = i2_1 + 1;

     label3:
        i2_1 = Phi(i2 #0, i2_2 #3);

        r21_1 = Phi(r21 #0, r21_3 #3);

        if i2_1 < i0 goto label1;

        $r12 = newarray (java.lang.Object)[1];

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>(java.lang.String)>("Unit : ");

        $r14 = virtualinvoke r1.<infoFlow.Edge: soot.Unit getUnit()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        $r12[0] = $r16;

        staticinvoke <infoFlow.LogUtils: void infoln(java.lang.Object[])>($r12);

        $r17 = newarray (java.lang.Object)[1];

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>(java.lang.String)>("leakCandidate : ");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r21_1);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        $r17[0] = $r20;

        staticinvoke <infoFlow.LogUtils: void infoln(java.lang.Object[])>($r17);

        specialinvoke r0.<infoFlow.InterpolationHandler: com.microsoft.z3.Expr convertValue(soot.Value,infoFlow.Edge)>(r21_1, r1);

        return 0;
    }

    private com.microsoft.z3.Expr convertValue(soot.Value, infoFlow.Edge)
    {
        infoFlow.InterpolationHandler r0;
        soot.Value r1;
        infoFlow.Edge r2;
        soot.Type r3;
        boolean $z0, $z1;
        java.lang.Object[] $r5;

        r0 := @this: infoFlow.InterpolationHandler;

        r1 := @parameter0: soot.Value;

        r2 := @parameter1: infoFlow.Edge;

        r3 = interfaceinvoke r1.<soot.Value: soot.Type getType()>();

        $z0 = r3 instanceof soot.PrimType;

        if $z0 == 0 goto label1;

        $r5 = newarray (java.lang.Object)[1];

        $r5[0] = "PrimitiveType";

        staticinvoke <infoFlow.LogUtils: void fatalln(java.lang.Object[])>($r5);

        staticinvoke <java.lang.System: void exit(int)>(0);

     label1:
        $z1 = r3 instanceof soot.RefLikeType;

        if $z1 == 0 goto label2;

        specialinvoke r0.<infoFlow.InterpolationHandler: com.microsoft.z3.Expr convertRefLikeValue(soot.Value,infoFlow.Edge)>(r1, r2);

     label2:
        return null;
    }

    private com.microsoft.z3.Expr convertRefLikeValue(soot.Value, infoFlow.Edge)
    {
        infoFlow.InterpolationHandler r0;
        soot.Value r1;
        infoFlow.Edge r2;
        soot.Type r3;
        soot.Local r4;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;
        java.lang.Object[] $r5, $r6, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r22;
        java.lang.StringBuilder $r7, $r9, $r10, $r11;
        soot.Unit $r8;
        java.lang.String $r12;
        com.microsoft.z3.Expr $r21;

        r0 := @this: infoFlow.InterpolationHandler;

        r1 := @parameter0: soot.Value;

        r2 := @parameter1: infoFlow.Edge;

        $z0 = r1 instanceof soot.shimple.PhiExpr;

        if $z0 == 0 goto label01;

        $r22 = newarray (java.lang.Object)[1];

        $r22[0] = "FATAL: PhiExpr is not supported yet!";

        staticinvoke <infoFlow.LogUtils: void fatalln(java.lang.Object[])>($r22);

        staticinvoke <java.lang.System: void exit(int)>(0);

     label01:
        $z1 = r1 instanceof soot.Local;

        if $z1 == 0 goto label03;

        r3 = interfaceinvoke r1.<soot.Value: soot.Type getType()>();

        r4 = (soot.Local) r1;

        $z9 = r3 instanceof soot.RefType;

        if $z9 == 0 goto label02;

        $r21 = specialinvoke r0.<infoFlow.InterpolationHandler: com.microsoft.z3.Expr createZ3Object(soot.Local,infoFlow.Edge)>(r4, r2);

        return $r21;

     label02:
        $z10 = r3 instanceof soot.ArrayType;

        if $z10 == 0 goto label03;

        $r20 = newarray (java.lang.Object)[1];

        $r20[0] = "FATAL: ArrayType is not supported yet!";

        staticinvoke <infoFlow.LogUtils: void fatalln(java.lang.Object[])>($r20);

        staticinvoke <java.lang.System: void exit(int)>(0);

     label03:
        $z2 = r1 instanceof soot.jimple.AnyNewExpr;

        if $z2 == 0 goto label04;

        $r19 = newarray (java.lang.Object)[1];

        $r19[0] = "FATAL: AnyNewExpr is not supported yet!";

        staticinvoke <infoFlow.LogUtils: void fatalln(java.lang.Object[])>($r19);

        staticinvoke <java.lang.System: void exit(int)>(0);

     label04:
        $z3 = r1 instanceof soot.jimple.StringConstant;

        if $z3 == 0 goto label05;

        $r18 = newarray (java.lang.Object)[1];

        $r18[0] = "FATAL: StringConstant. is not supported yet!";

        staticinvoke <infoFlow.LogUtils: void fatalln(java.lang.Object[])>($r18);

        staticinvoke <java.lang.System: void exit(int)>(0);

     label05:
        $z4 = r1 instanceof soot.jimple.ArrayRef;

        if $z4 == 0 goto label06;

        $r17 = newarray (java.lang.Object)[1];

        $r17[0] = "FATAL: ArrayRef is not supported yet!";

        staticinvoke <infoFlow.LogUtils: void fatalln(java.lang.Object[])>($r17);

        staticinvoke <java.lang.System: void exit(int)>(0);

     label06:
        $z5 = r1 instanceof soot.jimple.InstanceFieldRef;

        if $z5 == 0 goto label07;

        $r16 = newarray (java.lang.Object)[1];

        $r16[0] = "FATAL: InstanceFieldRef is not supported yet!";

        staticinvoke <infoFlow.LogUtils: void fatalln(java.lang.Object[])>($r16);

        staticinvoke <java.lang.System: void exit(int)>(0);

     label07:
        $z6 = r1 instanceof soot.jimple.CastExpr;

        if $z6 == 0 goto label08;

        $r15 = newarray (java.lang.Object)[1];

        $r15[0] = "FATAL: CastExpr is not supported yet!";

        staticinvoke <infoFlow.LogUtils: void fatalln(java.lang.Object[])>($r15);

        staticinvoke <java.lang.System: void exit(int)>(0);

     label08:
        $z7 = r1 instanceof soot.jimple.StaticFieldRef;

        if $z7 == 0 goto label09;

        $r14 = newarray (java.lang.Object)[1];

        $r14[0] = "FATAL: StaticFieldRef is not supported yet!";

        staticinvoke <infoFlow.LogUtils: void fatalln(java.lang.Object[])>($r14);

        staticinvoke <java.lang.System: void exit(int)>(0);

     label09:
        $z8 = r1 instanceof soot.jimple.NullConstant;

        if $z8 == 0 goto label10;

        $r13 = newarray (java.lang.Object)[1];

        $r13[0] = "FATAL: NullConstant is not supported yet!";

        staticinvoke <infoFlow.LogUtils: void fatalln(java.lang.Object[])>($r13);

        staticinvoke <java.lang.System: void exit(int)>(0);

     label10:
        $r5 = newarray (java.lang.Object)[1];

        $r5[0] = "FATAL: Conversion cannot be done";

        staticinvoke <infoFlow.LogUtils: void fatalln(java.lang.Object[])>($r5);

        $r6 = newarray (java.lang.Object)[1];

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>(java.lang.String)>("FATAL: Unit : ");

        $r8 = virtualinvoke r2.<infoFlow.Edge: soot.Unit getUnit()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" - Value : ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6[0] = $r12;

        staticinvoke <infoFlow.LogUtils: void fatalln(java.lang.Object[])>($r6);

        return null;
    }

    private com.microsoft.z3.Expr createZ3Object(soot.Local, infoFlow.Edge)
    {
        infoFlow.InterpolationHandler r0;
        soot.Local r1;
        infoFlow.Edge r2;
        soot.Type r3;
        java.lang.String r4, r5, $r13, $r14, $r16;
        com.microsoft.z3.Expr r6;
        java.util.Map $r7, $r11, $r22;
        boolean $z0;
        com.microsoft.z3.InterpolationContext $r8, $r9, $r18;
        com.microsoft.z3.StringSymbol $r10;
        infoFlow.ProgramTree $r15;
        java.lang.StringBuilder $r17, r25;
        java.lang.Object[] $r19, $r20, $r21;
        java.lang.Object $r23, r24, r24_1, r24_2;
        com.microsoft.z3.Sort r26;

        r0 := @this: infoFlow.InterpolationHandler;

        r1 := @parameter0: soot.Local;

        r2 := @parameter1: infoFlow.Edge;

        r3 = interfaceinvoke r1.<soot.Local: soot.Type getType()>();

        r4 = virtualinvoke r3.<soot.Type: java.lang.String toString()>();

        $r7 = r0.<infoFlow.InterpolationHandler: java.util.Map newSortMap>;

        $z0 = interfaceinvoke $r7.<java.util.Map: boolean containsKey(java.lang.Object)>(r4);

        if $z0 == 0 goto label1;

        $r22 = r0.<infoFlow.InterpolationHandler: java.util.Map newSortMap>;

        $r23 = interfaceinvoke $r22.<java.util.Map: java.lang.Object get(java.lang.Object)>(r4);

        r24 = (com.microsoft.z3.Sort) $r23;

(0)     goto label2;

     label1:
        $r9 = r0.<infoFlow.InterpolationHandler: com.microsoft.z3.InterpolationContext ictx>;

        $r8 = r0.<infoFlow.InterpolationHandler: com.microsoft.z3.InterpolationContext ictx>;

        $r10 = virtualinvoke $r8.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.StringSymbol mkSymbol(java.lang.String)>(r4);

        r24_1 = virtualinvoke $r9.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.UninterpretedSort mkUninterpretedSort(com.microsoft.z3.Symbol)>($r10);

        $r11 = r0.<infoFlow.InterpolationHandler: java.util.Map newSortMap>;

(1)     interfaceinvoke $r11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, r24_1);

     label2:
        r24_2 = Phi(r24 #0, r24_1 #1);

        r25 = new java.lang.StringBuilder;

        $r13 = interfaceinvoke r1.<soot.Local: java.lang.String getName()>();

        $r14 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r13);

        specialinvoke r25.<java.lang.StringBuilder: void <init>(java.lang.String)>($r14);

        $r15 = virtualinvoke r2.<infoFlow.Edge: infoFlow.ProgramTree getProgramTree()>();

        $r16 = virtualinvoke $r15.<infoFlow.ProgramTree: java.lang.String getProgramDefinition()>();

        $r17 = virtualinvoke r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        r5 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        $r18 = r0.<infoFlow.InterpolationHandler: com.microsoft.z3.InterpolationContext ictx>;

        r26 = (com.microsoft.z3.Sort) r24_2;

        r6 = virtualinvoke $r18.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.Expr mkConst(java.lang.String,com.microsoft.z3.Sort)>(r5, r26);

        $r19 = newarray (java.lang.Object)[1];

        $r19[0] = r5;

        staticinvoke <infoFlow.LogUtils: void infoln(java.lang.Object[])>($r19);

        $r20 = newarray (java.lang.Object)[1];

        $r20[0] = r24_2;

        staticinvoke <infoFlow.LogUtils: void infoln(java.lang.Object[])>($r20);

        $r21 = newarray (java.lang.Object)[1];

        $r21[0] = r6;

        staticinvoke <infoFlow.LogUtils: void infoln(java.lang.Object[])>($r21);

        staticinvoke <java.lang.System: void exit(int)>(0);

        return null;
    }
}
