public class infoFlow.UnitController extends java.lang.Object
{
    private infoFlow.InterpolationHandler itpHandler;
    public static final java.lang.String ERRORFUNCTION;
    public static final java.lang.String OBJECTINVOKE;
    private static final java.lang.String SEND_TEXT_MESSAGE_SIGNATURE;
    private static final java.lang.Integer SEND_TEXT_MESSAGE_PARAM_NO;
    private static final java.lang.String AND_UTIL_LOG_SIGNATURE;
    private static final java.lang.Integer AND_UTIL_LOG_PARAM_NO;
    public static final java.lang.String[] sinkSignatureDB;
    public static final java.lang.String[] sourceSignatureDB;
    public static final java.util.Map sensitiveParameterMap;

    static void <clinit>()
    {
        java.lang.Integer $r0, $r1;
        java.lang.String[] $r2, $r3;
        java.util.HashMap $r4;

        $r0 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        <infoFlow.UnitController: java.lang.Integer SEND_TEXT_MESSAGE_PARAM_NO> = $r0;

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        <infoFlow.UnitController: java.lang.Integer AND_UTIL_LOG_PARAM_NO> = $r1;

        $r2 = newarray (java.lang.String)[2];

        $r2[0] = "sendTextMessage";

        $r2[1] = "android.util.Log";

        <infoFlow.UnitController: java.lang.String[] sinkSignatureDB> = $r2;

        $r3 = newarray (java.lang.String)[2];

        $r3[0] = "getSimSerialNumber";

        $r3[1] = "getDeviceId";

        <infoFlow.UnitController: java.lang.String[] sourceSignatureDB> = $r3;

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        <infoFlow.UnitController: java.util.Map sensitiveParameterMap> = $r4;

        return;
    }

    public void <init>()
    {
        infoFlow.UnitController r0;
        infoFlow.InterpolationHandler $r1;
        java.lang.Integer $r2, $r5;
        java.util.Map $r3, $r6;

        r0 := @this: infoFlow.UnitController;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r1 = new infoFlow.InterpolationHandler;

        specialinvoke $r1.<infoFlow.InterpolationHandler: void <init>()>();

        r0.<infoFlow.UnitController: infoFlow.InterpolationHandler itpHandler> = $r1;

        $r3 = <infoFlow.UnitController: java.util.Map sensitiveParameterMap>;

        $r2 = <infoFlow.UnitController: java.lang.Integer SEND_TEXT_MESSAGE_PARAM_NO>;

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("sendTextMessage", $r2);

        $r6 = <infoFlow.UnitController: java.util.Map sensitiveParameterMap>;

        $r5 = <infoFlow.UnitController: java.lang.Integer AND_UTIL_LOG_PARAM_NO>;

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("android.util.Log", $r5);

        return;
    }

    public void analyzeEdge(infoFlow.Edge, java.util.Map) throws infoFlow.exception.MainFunctionNotFoundException, infoFlow.exception.ErrorLocationNotFoundException
    {
        infoFlow.UnitController r0;
        infoFlow.Edge r1;
        java.util.Map r2;
        java.lang.Error $r3;

        r0 := @this: infoFlow.UnitController;

        r1 := @parameter0: infoFlow.Edge;

        r2 := @parameter1: java.util.Map;

        $r3 = new java.lang.Error;

        specialinvoke $r3.<java.lang.Error: void <init>(java.lang.String)>("Unresolved compilation problems: \n\tSyntax error on token \"boolean\", delete this token\n\tconverted cannot be resolved or is not a field\n\tconverted cannot be resolved to a variable\n");

        throw $r3;
    }

    public void analyzeVertex(infoFlow.Vertex, java.util.Map) throws infoFlow.exception.MainFunctionNotFoundException, infoFlow.exception.ErrorLocationNotFoundException
    {
        infoFlow.UnitController r0;
        infoFlow.Vertex r1;
        java.util.Map r2;
        infoFlow.Edge r3;
        java.util.Iterator r4;
        soot.Unit r5;
        java.util.Set $r6;
        boolean $z0, $z1, $z2, $z3, $z4;
        java.lang.Object $r7;

        r0 := @this: infoFlow.UnitController;

        r1 := @parameter0: infoFlow.Vertex;

        r2 := @parameter1: java.util.Map;

        $r6 = virtualinvoke r1.<infoFlow.Vertex: java.util.Set getIncomingEdges()>();

        r4 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>();

        goto label5;

     label1:
        $r7 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r3 = (infoFlow.Edge) $r7;

        r5 = virtualinvoke r3.<infoFlow.Edge: soot.Unit getUnit()>();

        $z1 = virtualinvoke r0.<infoFlow.UnitController: boolean isErrorUnit(soot.Unit)>(r5);

        if $z1 == 0 goto label2;

        virtualinvoke r1.<infoFlow.Vertex: void setErrorLocation(boolean)>(1);

        virtualinvoke r3.<infoFlow.Edge: void setErrorEdge(boolean)>(1);

     label2:
        $z2 = specialinvoke r0.<infoFlow.UnitController: boolean isSubFunctionUnit(soot.Unit,java.util.Map,infoFlow.Edge)>(r5, r2, r3);

        if $z2 == 0 goto label3;

        virtualinvoke r1.<infoFlow.Vertex: void setSubFunction(boolean)>(1);

        virtualinvoke r3.<infoFlow.Edge: void setSubFunction(boolean)>(1);

     label3:
        $z3 = specialinvoke r0.<infoFlow.UnitController: boolean isSinkInvoke(soot.Unit)>(r5);

        if $z3 == 0 goto label4;

        virtualinvoke r1.<infoFlow.Vertex: void setSinkLocation(boolean)>(1);

        virtualinvoke r3.<infoFlow.Edge: void setSinkEdge(boolean)>(1);

     label4:
        $z4 = specialinvoke r0.<infoFlow.UnitController: boolean isSourceInvoke(soot.Unit)>(r5);

        if $z4 == 0 goto label5;

        virtualinvoke r1.<infoFlow.Vertex: void setSourceLocation(boolean)>(1);

        virtualinvoke r3.<infoFlow.Edge: void setSourceEdge(boolean)>(1);

     label5:
        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return;
    }

    private boolean isSourceInvoke(soot.Unit)
    {
        infoFlow.UnitController r0;
        soot.Unit r1;
        java.lang.String r2, r3;
        int i0, i1, i1_1, i1_2, i1_3;
        java.lang.String[] r4, $r5;
        boolean $z0, $z1;

        r0 := @this: infoFlow.UnitController;

        r1 := @parameter0: soot.Unit;

        $z0 = r1 instanceof soot.jimple.AssignStmt;

(0)     if $z0 == 0 goto label4;

        r2 = staticinvoke <infoFlow.UnitController: java.lang.String getMethodSignature(soot.Unit)>(r1);

        $r5 = <infoFlow.UnitController: java.lang.String[] sourceSignatureDB>;

        r4 = $r5;

        i0 = lengthof $r5;

        i1 = 0;

(1)     goto label3;

     label1:
        r3 = r4[i1_1];

        $z1 = virtualinvoke r2.<java.lang.String: boolean contains(java.lang.CharSequence)>(r3);

        if $z1 == 0 goto label2;

        return 1;

     label2:
(2)     i1_2 = i1_1 + 1;

     label3:
        i1_1 = Phi(i1 #1, i1_2 #2);

(3)     if i1_1 < i0 goto label1;

     label4:
        i1_3 = Phi(i1 #0, i1_1 #3);

        return 0;
    }

    private boolean isSinkInvoke(soot.Unit)
    {
        infoFlow.UnitController r0;
        soot.Unit r1;
        java.lang.String r2, r3, $r8;
        int i0, i1, i1_1, i1_2;
        java.lang.String[] r4, $r9;
        java.lang.Object[] $r5;
        java.lang.StringBuilder $r6, $r7;
        boolean $z0;

        r0 := @this: infoFlow.UnitController;

        r1 := @parameter0: soot.Unit;

        $r5 = newarray (java.lang.Object)[1];

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>("isSinkInvoke:");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $r5[0] = $r8;

        staticinvoke <infoFlow.LogUtils: void debugln(java.lang.Object[])>($r5);

        r2 = staticinvoke <infoFlow.UnitController: java.lang.String getMethodSignature(soot.Unit)>(r1);

        $r9 = <infoFlow.UnitController: java.lang.String[] sinkSignatureDB>;

        r4 = $r9;

        i0 = lengthof $r9;

        i1 = 0;

(0)     goto label3;

     label1:
        r3 = r4[i1_1];

        $z0 = virtualinvoke r2.<java.lang.String: boolean contains(java.lang.CharSequence)>(r3);

        if $z0 == 0 goto label2;

        return 1;

     label2:
(1)     i1_2 = i1_1 + 1;

     label3:
        i1_1 = Phi(i1 #0, i1_2 #1);

        if i1_1 < i0 goto label1;

        return 0;
    }

    private boolean isSubFunctionUnit(soot.Unit, java.util.Map, infoFlow.Edge) throws infoFlow.exception.MainFunctionNotFoundException, infoFlow.exception.ErrorLocationNotFoundException
    {
        infoFlow.UnitController r0;
        soot.Unit r1;
        java.util.Map r2;
        infoFlow.Edge r3;
        java.lang.String r4;
        boolean $z0, $z1;
        infoFlow.ProgramTree $r5;

        r0 := @this: infoFlow.UnitController;

        r1 := @parameter0: soot.Unit;

        r2 := @parameter1: java.util.Map;

        r3 := @parameter2: infoFlow.Edge;

        $z0 = r1 instanceof soot.jimple.InvokeStmt;

        if $z0 == 0 goto label1;

        r4 = staticinvoke <infoFlow.UnitController: java.lang.String getMethodSignature(soot.Unit)>(r1);

        $z1 = interfaceinvoke r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r4);

        if $z1 == 0 goto label1;

        $r5 = new infoFlow.ProgramTree;

        specialinvoke $r5.<infoFlow.ProgramTree: void <init>(java.util.Map,java.lang.String,boolean)>(r2, r4, 0);

        return 1;

     label1:
        return 0;
    }

    public boolean isErrorUnit(soot.Unit)
    {
        infoFlow.UnitController r0;
        soot.Unit r1;
        java.lang.String r2;
        boolean $z0, $z1;

        r0 := @this: infoFlow.UnitController;

        r1 := @parameter0: soot.Unit;

        $z0 = r1 instanceof soot.jimple.InvokeStmt;

        if $z0 == 0 goto label1;

        r2 = staticinvoke <infoFlow.UnitController: java.lang.String getMethodSignature(soot.Unit)>(r1);

        $z1 = virtualinvoke r2.<java.lang.String: boolean contains(java.lang.CharSequence)>("ErrorFunction");

        if $z1 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean isObjectInvoke(soot.Unit)
    {
        infoFlow.UnitController r0;
        soot.Unit r1;
        soot.jimple.InvokeStmt r2;
        java.lang.String r3;
        boolean $z0, $z1;
        soot.jimple.InvokeExpr $r4;
        soot.SootMethod $r5;

        r0 := @this: infoFlow.UnitController;

        r1 := @parameter0: soot.Unit;

        $z0 = r1 instanceof soot.jimple.InvokeStmt;

        if $z0 == 0 goto label1;

        r2 = (soot.jimple.InvokeStmt) r1;

        $r4 = interfaceinvoke r2.<soot.jimple.InvokeStmt: soot.jimple.InvokeExpr getInvokeExpr()>();

        $r5 = interfaceinvoke $r4.<soot.jimple.InvokeExpr: soot.SootMethod getMethod()>();

        r3 = virtualinvoke $r5.<soot.SootMethod: java.lang.String getSignature()>();

        $z1 = virtualinvoke r3.<java.lang.String: boolean contains(java.lang.CharSequence)>("<java.lang.Object: void <init>");

        if $z1 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean isNewInvoke(soot.Unit)
    {
        infoFlow.UnitController r0;
        soot.Unit r1;
        soot.jimple.AssignStmt r2;
        soot.Value r3;
        boolean $z0, $z1;
        java.io.PrintStream $r4;

        r0 := @this: infoFlow.UnitController;

        r1 := @parameter0: soot.Unit;

        $z0 = r1 instanceof soot.jimple.AssignStmt;

        if $z0 == 0 goto label1;

        r2 = (soot.jimple.AssignStmt) r1;

        r3 = interfaceinvoke r2.<soot.jimple.AssignStmt: soot.Value getRightOp()>();

        $z1 = r3 instanceof soot.jimple.NewExpr;

        if $z1 == 0 goto label1;

        $r4 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r4.<java.io.PrintStream: void println(java.lang.String)>("UnitController.isNewInvoke is not completed yet.");

        staticinvoke <java.lang.System: void exit(int)>(0);

     label1:
        return 0;
    }

    public static java.lang.String getMethodSignature(soot.Unit)
    {
        soot.Unit r0;
        soot.Value r1;
        boolean $z0, $z1, $z2;
        soot.jimple.AssignStmt $r2;
        soot.jimple.InvokeExpr $r3, $r6;
        soot.SootMethod $r4, $r7;
        soot.jimple.InvokeStmt $r5;
        java.lang.String r8, r8_1, r8_2, r8_3;

        r0 := @parameter0: soot.Unit;

        r8 = "";

        $z0 = r0 instanceof soot.jimple.InvokeStmt;

        if $z0 == 0 goto label1;

        $r5 = (soot.jimple.InvokeStmt) r0;

        $r6 = interfaceinvoke $r5.<soot.jimple.InvokeStmt: soot.jimple.InvokeExpr getInvokeExpr()>();

        $r7 = interfaceinvoke $r6.<soot.jimple.InvokeExpr: soot.SootMethod getMethod()>();

        r8_1 = virtualinvoke $r7.<soot.SootMethod: java.lang.String getSignature()>();

(0)     goto label2;

     label1:
        $z1 = r0 instanceof soot.jimple.AssignStmt;

(1)     if $z1 == 0 goto label2;

        $r2 = (soot.jimple.AssignStmt) r0;

        r1 = interfaceinvoke $r2.<soot.jimple.AssignStmt: soot.Value getRightOp()>();

        $z2 = r1 instanceof soot.jimple.InvokeExpr;

(2)     if $z2 == 0 goto label2;

        $r3 = (soot.jimple.InvokeExpr) r1;

        $r4 = interfaceinvoke $r3.<soot.jimple.InvokeExpr: soot.SootMethod getMethod()>();

(3)     r8_2 = virtualinvoke $r4.<soot.SootMethod: java.lang.String getSignature()>();

     label2:
        r8_3 = Phi(r8_1 #0, r8 #1, r8 #2, r8_2 #3);

        return r8_3;
    }
}
