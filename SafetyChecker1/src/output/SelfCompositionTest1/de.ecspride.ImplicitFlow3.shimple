public class de.ecspride.ImplicitFlow3 extends android.app.Activity
{

    public void <init>()
    {
        de.ecspride.ImplicitFlow3 r0;

        r0 := @this: de.ecspride.ImplicitFlow3;

        specialinvoke r0.<android.app.Activity: void <init>()>();

        return;
    }

    protected void onCreate(android.os.Bundle)
    {
        de.ecspride.ImplicitFlow3 r0;
        android.os.Bundle r1;
        android.telephony.SmsManager r2;
        java.lang.String r3, r6, r6_1, r6_2;
        byte b0;
        java.lang.Object $r4;
        android.telephony.TelephonyManager $r5;

        r0 := @this: de.ecspride.ImplicitFlow3;

        r1 := @parameter0: android.os.Bundle;

        specialinvoke r0.<android.app.Activity: void onCreate(android.os.Bundle)>(r1);

        virtualinvoke r0.<de.ecspride.ImplicitFlow3: void setContentView(int)>(2130903040);

        $r4 = virtualinvoke r0.<de.ecspride.ImplicitFlow3: java.lang.Object getSystemService(java.lang.String)>("phone");

        $r5 = (android.telephony.TelephonyManager) $r4;

        r6 = virtualinvoke $r5.<android.telephony.TelephonyManager: java.lang.String getDeviceId()>();

        r2 = staticinvoke <android.telephony.SmsManager: android.telephony.SmsManager getDefault()>();

        r3 = "huhu";

        b0 = 5;

(0)     if b0 != 5 goto label1;

(1)     r6_1 = "huhu";

     label1:
        r6_2 = Phi(r6 #0, r6_1 #1);

        virtualinvoke r2.<android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>("+1 1234567", null, r6_2, null, null);

        staticinvoke <toy_benchmark.ErrorFunction: void Error()>();

        return;
    }

    public void tester()
    {
        de.ecspride.ImplicitFlow3 r0;

        r0 := @this: de.ecspride.ImplicitFlow3;

        virtualinvoke r0.<de.ecspride.ImplicitFlow3: void onCreate(android.os.Bundle)>(null);

        virtualinvoke r0.<de.ecspride.ImplicitFlow3: void onCreate(android.os.Bundle)>(null);

        staticinvoke <toy_benchmark.ErrorFunction: void Error()>();

        return;
    }
}
