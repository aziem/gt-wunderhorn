public class dotty.CfgConverter extends java.lang.Object
{

    public void <init>()
    {
        dotty.CfgConverter r0;

        r0 := @this: dotty.CfgConverter;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    private static java.io.BufferedWriter getBufferedWriter(java.lang.String) throws java.io.IOException
    {
        java.lang.String r0;
        java.io.File r1, $r3;
        java.io.BufferedWriter r2, $r4;
        java.io.FileWriter $r5;

        r0 := @parameter0: java.lang.String;

        $r3 = new java.io.File;

        specialinvoke $r3.<java.io.File: void <init>(java.lang.String)>(r0);

        r1 = $r3;

        $r4 = new java.io.BufferedWriter;

        $r5 = new java.io.FileWriter;

        specialinvoke $r5.<java.io.FileWriter: void <init>(java.io.File)>(r1);

        specialinvoke $r4.<java.io.BufferedWriter: void <init>(java.io.Writer)>($r5);

        r2 = $r4;

        return r2;
    }

    public static void printErrorPaths(java.util.Queue, java.lang.String, safetyChecker.CoverRelation)
    {
        java.util.Queue r0;
        java.lang.String r1, $r22, $r24, $r26, $r31, $r34, $r37, $r43, $r57, $r59, $r61, $r66, $r68, r77, r79, r80, r81, r82, r83, r92, r93, r94, r95, r77_1, r77_2, r77_3, r79_1, r80_1, r81_1, r82_1, r82_2, r81_2, r81_3, r82_3, r79_2, r81_4, r82_4, r79_3, r83_1, r83_2, r83_3, r80_2, r83_4, r80_3, r81_5, r83_5, r80_4, r82_5, r79_4, r95_1, r93_1, r94_1, r92_1, r92_2, r93_2, r94_2, r94_3, r94_4, r92_3, r94_5, r92_4, r95_2, r95_3, r95_4, r93_3, r95_5, r93_4, r95_6, r81_6, r93_5, r83_6, r94_6, r80_5, r92_5, r82_6, r79_5, r77_4, r95_7, r81_7, r93_6, r83_7, r94_7, r80_6, r92_6, r82_7, r79_6, r77_5;
        safetyChecker.CoverRelation r2;
        java.io.BufferedWriter r3;
        boolean $z0, $z1, $z2, $z4, $z5, $z6, $z7, $z8, $z9, $z10;
        java.lang.Object $r4, $r5, $r46, $r47, $r48, $r49;
        int $i0;
        safetyChecker.Edge $r6, r76;
        com.microsoft.z3.BoolExpr $r7, $r8, $r18, $r23, $r29, $r30, $r33, $r44, $r50, $r51, $r58, $r64, $r65, $r71;
        java.lang.StringBuilder $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r19, $r20, $r21, $r25, $r27, $r28, $r32, $r35, $r36, $r38, $r39, $r40, $r41, $r42, $r52, $r53, $r54, $r55, $r56, $r60, $r62, $r63, $r67, $r69, $r70;
        java.util.Set $r45, r75, r89;
        java.lang.Exception $r72, r96;
        java.util.Map r73;
        safetyChecker.Vertex r74, r78, r85, r88, r91;
        java.util.Iterator r84, r86, r90;
        java.util.Map$Entry r87;

        r0 := @parameter0: java.util.Queue;

        r1 := @parameter1: java.lang.String;

(0)     r2 := @parameter2: safetyChecker.CoverRelation;

     label01:
        r73 = virtualinvoke r2.<safetyChecker.CoverRelation: java.util.Map getCoveredByMap()>();

        r3 = staticinvoke <dotty.CfgConverter: java.io.BufferedWriter getBufferedWriter(java.lang.String)>(r1);

        virtualinvoke r3.<java.io.BufferedWriter: void write(java.lang.String)>("digraph { \n");

        virtualinvoke r3.<java.io.BufferedWriter: void write(java.lang.String)>("\tratio=\"fill\";\n\tsize=\"8.3,10.7!\";\n\tmargin=0;\n");

(1)     goto label12;

     label02:
        $r4 = interfaceinvoke r0.<java.util.Queue: java.lang.Object remove()>();

        r74 = (safetyChecker.Vertex) $r4;

        r75 = virtualinvoke r74.<safetyChecker.Vertex: java.util.Set getPreviousVertexSet()>();

        r76 = virtualinvoke r74.<safetyChecker.Vertex: safetyChecker.Edge getOutgoingEdge()>();

(2)     r77_1 = "";

        $z1 = virtualinvoke r2.<safetyChecker.CoverRelation: boolean isAncestorCovered(safetyChecker.Vertex)>(r74);

(3)     if $z1 == 0 goto label03;

(4)     r77_2 = "color =green, ";

     label03:
        r77_3 = Phi(r77_1 #3, r77_2 #4);

(5)     $i0 = virtualinvoke r74.<safetyChecker.Vertex: int getDistance()>();

(6)     if $i0 == 0 goto label09;

        $r6 = virtualinvoke r74.<safetyChecker.Vertex: safetyChecker.Edge getOutgoingEdge()>();

        $z4 = virtualinvoke $r6.<safetyChecker.Edge: boolean isInErrorPath()>();

(7)     if $z4 == 0 goto label09;

        r78 = virtualinvoke r74.<safetyChecker.Vertex: safetyChecker.Vertex getNextVertex()>();

(8)     r79_1 = virtualinvoke r74.<safetyChecker.Vertex: java.lang.String toString()>();

(9)     r80_1 = virtualinvoke r78.<safetyChecker.Vertex: java.lang.String toString()>();

(10)    r81_1 = "";

        $r7 = virtualinvoke r74.<safetyChecker.Vertex: com.microsoft.z3.BoolExpr getInvariant()>();

(11)    if $r7 == null goto label06;

(12)    r82_1 = "**";

        $r30 = virtualinvoke r74.<safetyChecker.Vertex: com.microsoft.z3.BoolExpr getInvariant()>();

        $r31 = virtualinvoke $r30.<com.microsoft.z3.BoolExpr: java.lang.String toString()>();

        $z6 = virtualinvoke $r31.<java.lang.String: boolean contains(java.lang.CharSequence)>("\n");

        if $z6 != 0 goto label04;

        $r44 = virtualinvoke r74.<safetyChecker.Vertex: com.microsoft.z3.BoolExpr getInvariant()>();

(13)    r82_2 = virtualinvoke $r44.<com.microsoft.z3.BoolExpr: java.lang.String toString()>();

(14)    goto label05;

     label04:
        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<java.lang.StringBuilder: void <init>(java.lang.String)>("\n** ");

        $r33 = virtualinvoke r74.<safetyChecker.Vertex: com.microsoft.z3.BoolExpr getInvariant()>();

        $r34 = virtualinvoke $r33.<com.microsoft.z3.BoolExpr: java.lang.String toString()>();

        $r35 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r34);

(15)    r81_2 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>();

     label05:
        r81_3 = Phi(r81_1 #14, r81_2 #15);

        r82_3 = Phi(r82_2 #14, r82_1 #15);

(16)    $r36 = new java.lang.StringBuilder;

        $r37 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r79_1);

        specialinvoke $r36.<java.lang.StringBuilder: void <init>(java.lang.String)>($r37);

        $r38 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("--");

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r82_3);

(17)    r79_2 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>();

        $r40 = new java.lang.StringBuilder;

        specialinvoke $r40.<java.lang.StringBuilder: void <init>(java.lang.String)>("\t\"");

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r79_2);

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"[shape=polygon, sides=5, peripheries=2, color=turquoise, style=filled]");

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.String toString()>();

(18)    virtualinvoke r3.<java.io.BufferedWriter: void write(java.lang.String)>($r43);

     label06:
        r81_4 = Phi(r81_1 #11, r81_3 #18);

        r82_4 = Phi(r82 #11, r82_3 #18);

        r79_3 = Phi(r79_1 #11, r79_2 #18);

(19)    $r8 = virtualinvoke r78.<safetyChecker.Vertex: com.microsoft.z3.BoolExpr getInvariant()>();

(20)    if $r8 == null goto label08;

(21)    r83_1 = "**";

        $r23 = virtualinvoke r78.<safetyChecker.Vertex: com.microsoft.z3.BoolExpr getInvariant()>();

        $r24 = virtualinvoke $r23.<com.microsoft.z3.BoolExpr: java.lang.String toString()>();

        $z5 = virtualinvoke $r24.<java.lang.String: boolean contains(java.lang.CharSequence)>("\n");

(22)    if $z5 != 0 goto label07;

        $r29 = virtualinvoke r78.<safetyChecker.Vertex: com.microsoft.z3.BoolExpr getInvariant()>();

(23)    r83_2 = virtualinvoke $r29.<com.microsoft.z3.BoolExpr: java.lang.String toString()>();

     label07:
        r83_3 = Phi(r83_1 #22, r83_2 #23);

(24)    $r25 = new java.lang.StringBuilder;

        $r26 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r80_1);

        specialinvoke $r25.<java.lang.StringBuilder: void <init>(java.lang.String)>($r26);

        $r27 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("--");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r83_3);

(25)    r80_2 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

     label08:
        r83_4 = Phi(r83 #20, r83_3 #25);

        r80_3 = Phi(r80_1 #20, r80_2 #25);

(26)    $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>(java.lang.String)>("\t\"");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r79_3);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" -> \"");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r80_3);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"[");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r77_3);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("label=\"");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r76);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("--");

        $r18 = virtualinvoke r76.<safetyChecker.Edge: com.microsoft.z3.BoolExpr getZ3Expr()>();

        $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r81_4);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"];\n");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

(27)    virtualinvoke r3.<java.io.BufferedWriter: void write(java.lang.String)>($r22);

     label09:
        r81_5 = Phi(r81 #6, r81 #7, r81_4 #27);

        r83_5 = Phi(r83 #6, r83 #7, r83_4 #27);

        r80_4 = Phi(r80 #6, r80 #7, r80_3 #27);

        r82_5 = Phi(r82 #6, r82 #7, r82_4 #27);

        r79_4 = Phi(r79 #6, r79 #7, r79_3 #27);

(28)    r84 = interfaceinvoke r75.<java.util.Set: java.util.Iterator iterator()>();

        goto label11;

     label10:
        $r5 = interfaceinvoke r84.<java.util.Iterator: java.lang.Object next()>();

        r85 = (safetyChecker.Vertex) $r5;

        interfaceinvoke r0.<java.util.Queue: boolean add(java.lang.Object)>(r85);

     label11:
        $z2 = interfaceinvoke r84.<java.util.Iterator: boolean hasNext()>();

(29)    if $z2 != 0 goto label10;

     label12:
        r81 = Phi(r81 #1, r81_5 #29);

        r83 = Phi(r83 #1, r83_5 #29);

        r80 = Phi(r80 #1, r80_4 #29);

        r82 = Phi(r82 #1, r82_5 #29);

        r79 = Phi(r79 #1, r79_4 #29);

        r77 = Phi(r77 #1, r77_3 #29);

        $z0 = interfaceinvoke r0.<java.util.Queue: boolean isEmpty()>();

        if $z0 == 0 goto label02;

        $r45 = interfaceinvoke r73.<java.util.Map: java.util.Set entrySet()>();

        r86 = interfaceinvoke $r45.<java.util.Set: java.util.Iterator iterator()>();

(30)    goto label20;

     label13:
        $r46 = interfaceinvoke r86.<java.util.Iterator: java.lang.Object next()>();

        r87 = (java.util.Map$Entry) $r46;

        $r47 = interfaceinvoke r87.<java.util.Map$Entry: java.lang.Object getKey()>();

        r88 = (safetyChecker.Vertex) $r47;

        $r48 = interfaceinvoke r87.<java.util.Map$Entry: java.lang.Object getValue()>();

        r89 = (java.util.Set) $r48;

        r90 = interfaceinvoke r89.<java.util.Set: java.util.Iterator iterator()>();

(31)    goto label19;

     label14:
        $r49 = interfaceinvoke r90.<java.util.Iterator: java.lang.Object next()>();

        r91 = (safetyChecker.Vertex) $r49;

(32)    r92_2 = virtualinvoke r88.<safetyChecker.Vertex: java.lang.String toString()>();

(33)    r93_2 = virtualinvoke r91.<safetyChecker.Vertex: java.lang.String toString()>();

        $r50 = virtualinvoke r88.<safetyChecker.Vertex: com.microsoft.z3.BoolExpr getInvariant()>();

(34)    if $r50 == null goto label16;

(35)    r94_2 = "**";

        $r65 = virtualinvoke r88.<safetyChecker.Vertex: com.microsoft.z3.BoolExpr getInvariant()>();

        $r66 = virtualinvoke $r65.<com.microsoft.z3.BoolExpr: java.lang.String toString()>();

        $z10 = virtualinvoke $r66.<java.lang.String: boolean contains(java.lang.CharSequence)>("\n");

(36)    if $z10 != 0 goto label15;

        $r71 = virtualinvoke r88.<safetyChecker.Vertex: com.microsoft.z3.BoolExpr getInvariant()>();

(37)    r94_3 = virtualinvoke $r71.<com.microsoft.z3.BoolExpr: java.lang.String toString()>();

     label15:
        r94_4 = Phi(r94_2 #36, r94_3 #37);

(38)    $r67 = new java.lang.StringBuilder;

        $r68 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r92_2);

        specialinvoke $r67.<java.lang.StringBuilder: void <init>(java.lang.String)>($r68);

        $r69 = virtualinvoke $r67.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("--");

        $r70 = virtualinvoke $r69.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r94_4);

(39)    r92_3 = virtualinvoke $r70.<java.lang.StringBuilder: java.lang.String toString()>();

     label16:
        r94_5 = Phi(r94_1 #34, r94_4 #39);

        r92_4 = Phi(r92_2 #34, r92_3 #39);

(40)    $r51 = virtualinvoke r91.<safetyChecker.Vertex: com.microsoft.z3.BoolExpr getInvariant()>();

(41)    if $r51 == null goto label18;

(42)    r95_2 = "**";

        $r58 = virtualinvoke r91.<safetyChecker.Vertex: com.microsoft.z3.BoolExpr getInvariant()>();

        $r59 = virtualinvoke $r58.<com.microsoft.z3.BoolExpr: java.lang.String toString()>();

        $z9 = virtualinvoke $r59.<java.lang.String: boolean contains(java.lang.CharSequence)>("\n");

(43)    if $z9 != 0 goto label17;

        $r64 = virtualinvoke r91.<safetyChecker.Vertex: com.microsoft.z3.BoolExpr getInvariant()>();

(44)    r95_3 = virtualinvoke $r64.<com.microsoft.z3.BoolExpr: java.lang.String toString()>();

     label17:
        r95_4 = Phi(r95_2 #43, r95_3 #44);

(45)    $r60 = new java.lang.StringBuilder;

        $r61 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r93_2);

        specialinvoke $r60.<java.lang.StringBuilder: void <init>(java.lang.String)>($r61);

        $r62 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("--");

        $r63 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r95_4);

(46)    r93_3 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.String toString()>();

     label18:
        r95_5 = Phi(r95_1 #41, r95_4 #46);

        r93_4 = Phi(r93_2 #41, r93_3 #46);

(47)    $r52 = new java.lang.StringBuilder;

        specialinvoke $r52.<java.lang.StringBuilder: void <init>(java.lang.String)>("\t\"");

        $r53 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r92_4);

        $r54 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" -> \"");

        $r55 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r93_4);

        $r56 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"[color=red];\n");

        $r57 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.String toString()>();

(48)    virtualinvoke r3.<java.io.BufferedWriter: void write(java.lang.String)>($r57);

     label19:
        r95_1 = Phi(r95 #31, r95_5 #48);

        r93_1 = Phi(r93 #31, r93_4 #48);

        r94_1 = Phi(r94 #31, r94_5 #48);

        r92_1 = Phi(r92 #31, r92_4 #48);

(49)    $z8 = interfaceinvoke r90.<java.util.Iterator: boolean hasNext()>();

(50)    if $z8 != 0 goto label14;

     label20:
        r95 = Phi(r95 #30, r95_1 #50);

        r93 = Phi(r93 #30, r93_1 #50);

        r94 = Phi(r94 #30, r94_1 #50);

        r92 = Phi(r92 #30, r92_1 #50);

        $z7 = interfaceinvoke r86.<java.util.Iterator: boolean hasNext()>();

        if $z7 != 0 goto label13;

        virtualinvoke r3.<java.io.BufferedWriter: void write(java.lang.String)>("}");

        virtualinvoke r3.<java.io.BufferedWriter: void flush()>();

        virtualinvoke r3.<java.io.BufferedWriter: void close()>();

     label21:
(51)    goto label23;

     label22:
        $r72 := @caughtexception;

        r95_6 = Phi(r95 #0, r95_2 #42, r95_3 #44, r95_4 #45, r95_5 #47, r95_1 #49);

        r81_6 = Phi(r81 #0, r81_1 #10, r81_2 #15, r81_3 #16, r81_4 #19, r81_5 #28);

        r93_5 = Phi(r93 #0, r93_2 #33, r93_3 #46, r93_4 #47, r93_1 #49);

        r83_6 = Phi(r83 #0, r83_1 #21, r83_2 #23, r83_3 #24, r83_4 #26, r83_5 #28);

        r94_6 = Phi(r94 #0, r94_2 #35, r94_3 #37, r94_4 #38, r94_5 #40, r94_1 #49);

        r80_5 = Phi(r80 #0, r80_1 #9, r80_2 #25, r80_3 #26, r80_4 #28);

        r92_5 = Phi(r92 #0, r92_2 #32, r92_3 #39, r92_4 #40, r92_1 #49);

        r82_6 = Phi(r82 #0, r82_1 #12, r82_2 #13, r82_3 #16, r82_4 #19, r82_5 #28);

        r79_5 = Phi(r79 #0, r79_1 #8, r79_2 #17, r79_3 #19, r79_4 #28);

        r77_4 = Phi(r77 #0, r77_1 #2, r77_2 #4, r77_3 #5);

        r96 = $r72;

        virtualinvoke r96.<java.lang.Exception: void printStackTrace()>();

(52)    staticinvoke <java.lang.System: void exit(int)>(0);

     label23:
        r95_7 = Phi(r95 #51, r95_6 #52);

        r81_7 = Phi(r81 #51, r81_6 #52);

        r93_6 = Phi(r93 #51, r93_5 #52);

        r83_7 = Phi(r83 #51, r83_6 #52);

        r94_7 = Phi(r94 #51, r94_6 #52);

        r80_6 = Phi(r80 #51, r80_5 #52);

        r92_6 = Phi(r92 #51, r92_5 #52);

        r82_7 = Phi(r82 #51, r82_6 #52);

        r79_6 = Phi(r79 #51, r79_5 #52);

        r77_5 = Phi(r77 #51, r77_4 #52);

        return;

        catch java.lang.Exception from label01 to label21 with label22;
    }

    public static void printAllPaths(java.util.Queue, java.lang.String)
    {
        java.util.Queue r0;
        java.lang.String r1, $r17;
        safetyChecker.Vertex r2, r4, $r9;
        java.util.Set r3;
        java.util.Iterator r5;
        boolean $z0, $z1;
        java.lang.Object $r6, $r7;
        int $i0;
        java.lang.StringBuilder $r8, $r10, $r11, $r12, $r13, $r15, $r16;
        safetyChecker.Edge $r14;
        java.lang.Exception $r18, r20;
        java.io.BufferedWriter r19;

        r0 := @parameter0: java.util.Queue;

        r1 := @parameter1: java.lang.String;

     label1:
        r19 = staticinvoke <dotty.CfgConverter: java.io.BufferedWriter getBufferedWriter(java.lang.String)>(r1);

        virtualinvoke r19.<java.io.BufferedWriter: void write(java.lang.String)>("digraph { \n");

        virtualinvoke r19.<java.io.BufferedWriter: void write(java.lang.String)>("\tratio=\"fill\";\n\tsize=\"8.3,11.7!\";\n\tmargin=0;\n");

        goto label6;

     label2:
        $r6 = interfaceinvoke r0.<java.util.Queue: java.lang.Object remove()>();

        r2 = (safetyChecker.Vertex) $r6;

        r3 = virtualinvoke r2.<safetyChecker.Vertex: java.util.Set getPreviousVertexSet()>();

        $i0 = virtualinvoke r2.<safetyChecker.Vertex: int getDistance()>();

        if $i0 == 0 goto label3;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>(java.lang.String)>("\t\"");

        $r9 = virtualinvoke r2.<safetyChecker.Vertex: safetyChecker.Vertex getNextVertex()>();

        $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" -> \"");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"[label=\"");

        $r14 = virtualinvoke r2.<safetyChecker.Vertex: safetyChecker.Edge getOutgoingEdge()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"];\n");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r19.<java.io.BufferedWriter: void write(java.lang.String)>($r17);

     label3:
        r5 = interfaceinvoke r3.<java.util.Set: java.util.Iterator iterator()>();

        goto label5;

     label4:
        $r7 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r4 = (safetyChecker.Vertex) $r7;

        interfaceinvoke r0.<java.util.Queue: boolean add(java.lang.Object)>(r4);

     label5:
        $z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label4;

     label6:
        $z0 = interfaceinvoke r0.<java.util.Queue: boolean isEmpty()>();

        if $z0 == 0 goto label2;

        virtualinvoke r19.<java.io.BufferedWriter: void write(java.lang.String)>("}");

        virtualinvoke r19.<java.io.BufferedWriter: void flush()>();

        virtualinvoke r19.<java.io.BufferedWriter: void close()>();

     label7:
        goto label9;

     label8:
        $r18 := @caughtexception;

        r20 = $r18;

        virtualinvoke r20.<java.lang.Exception: void printStackTrace()>();

        staticinvoke <java.lang.System: void exit(int)>(0);

     label9:
        return;

        catch java.lang.Exception from label1 to label7 with label8;
    }

    public static void printAllPaths2(soot.toolkits.graph.ExceptionalUnitGraph)
    {
        soot.toolkits.graph.ExceptionalUnitGraph r0;
        java.util.LinkedList r1, r2, $r7, $r8, $r9, r30;
        java.util.List r3, $r17, $r19;
        java.util.Iterator r4, r31, r36;
        safetyChecker.Vertex r5, $r11, $r21, $r23, r33, r35, r38, r41;
        safetyChecker.Edge r6, $r12, $r22, r34, r37;
        boolean $z0, $z3, $z4, $z5, $z8;
        java.lang.Object $r10, $r13, $r15, $r20, $r28;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, i9, i8_1, i8_2, i8_3, i8_4, i8_5, i8_6, i8_7, i8_8, i9_1, i9_2, i8_9, i9_3, i8_10, i9_4;
        java.util.Set $r14;
        soot.Unit $r16, $r18, r32, r39;
        java.lang.StringBuilder $r24, $r25, $r26;
        java.lang.String $r27;
        java.lang.Exception $r29, r42;
        java.io.BufferedWriter r40;

        r0 := @parameter0: soot.toolkits.graph.ExceptionalUnitGraph;

     label01:
(0)     $r7 = new java.util.LinkedList;

        specialinvoke $r7.<java.util.LinkedList: void <init>()>();

        r30 = $r7;

        $r8 = new java.util.LinkedList;

        specialinvoke $r8.<java.util.LinkedList: void <init>()>();

        r1 = $r8;

        $r9 = new java.util.LinkedList;

        specialinvoke $r9.<java.util.LinkedList: void <init>()>();

        r2 = $r9;

        i8 = 0;

        r3 = virtualinvoke r0.<soot.toolkits.graph.ExceptionalUnitGraph: java.util.List getTails()>();

        r31 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>();

(1)     goto label03;

     label02:
        $r10 = interfaceinvoke r31.<java.util.Iterator: java.lang.Object next()>();

        r32 = (soot.Unit) $r10;

        $r11 = new safetyChecker.Vertex;

        specialinvoke $r11.<safetyChecker.Vertex: void <init>()>();

        r33 = $r11;

        $r12 = new safetyChecker.Edge;

        specialinvoke $r12.<safetyChecker.Edge: void <init>(soot.Unit)>(r32);

        r34 = $r12;

        virtualinvoke r33.<safetyChecker.Vertex: void addIncomingEdge(safetyChecker.Edge)>(r34);

        $i0 = i8_1;

(2)     i8_2 = i8_1 + 1;

        virtualinvoke r33.<safetyChecker.Vertex: void setLocationNumber(int)>($i0);

        interfaceinvoke r30.<java.util.Queue: boolean add(java.lang.Object)>(r33);

(3)     interfaceinvoke r1.<java.util.Queue: boolean add(java.lang.Object)>(r33);

     label03:
        i8_1 = Phi(i8 #1, i8_2 #3);

(4)     $z0 = interfaceinvoke r31.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label02;

(5)     goto label10;

     label04:
        $r13 = interfaceinvoke r30.<java.util.Queue: java.lang.Object remove()>();

        r35 = (safetyChecker.Vertex) $r13;

        $r14 = virtualinvoke r35.<safetyChecker.Vertex: java.util.Set getIncomingEdges()>();

        r36 = interfaceinvoke $r14.<java.util.Set: java.util.Iterator iterator()>();

(6)     goto label09;

     label05:
        $r15 = interfaceinvoke r36.<java.util.Iterator: java.lang.Object next()>();

        r37 = (safetyChecker.Edge) $r15;

        $r16 = virtualinvoke r37.<safetyChecker.Edge: soot.Unit getUnit()>();

        $r17 = virtualinvoke r0.<soot.toolkits.graph.ExceptionalUnitGraph: java.util.List getUnexceptionalPredsOf(soot.Unit)>($r16);

        $i1 = interfaceinvoke $r17.<java.util.List: int size()>();

(7)     if $i1 != 0 goto label06;

        $r23 = new safetyChecker.Vertex;

        specialinvoke $r23.<safetyChecker.Vertex: void <init>()>();

        r38 = $r23;

        virtualinvoke r38.<safetyChecker.Vertex: void setOutgoingEdge(safetyChecker.Edge)>(r37);

        virtualinvoke r38.<safetyChecker.Vertex: void setHeadLocation(boolean)>(1);

        virtualinvoke r38.<safetyChecker.Vertex: void setNextVertex(safetyChecker.Vertex)>(r35);

        virtualinvoke r35.<safetyChecker.Vertex: void addPreviousVertex(safetyChecker.Vertex)>(r38);

        $i5 = i8_4;

(8)     i8_5 = i8_4 + 1;

        virtualinvoke r38.<safetyChecker.Vertex: void setLocationNumber(int)>($i5);

        $i6 = virtualinvoke r35.<safetyChecker.Vertex: int getDistance()>();

        $i7 = $i6 + 1;

        virtualinvoke r38.<safetyChecker.Vertex: void setDistance(int)>($i7);

(9)     interfaceinvoke r2.<java.util.Queue: boolean add(java.lang.Object)>(r38);

     label06:
        i8_6 = Phi(i8_4 #7, i8_5 #9);

(10)    $r18 = virtualinvoke r37.<safetyChecker.Edge: soot.Unit getUnit()>();

        $r19 = virtualinvoke r0.<soot.toolkits.graph.ExceptionalUnitGraph: java.util.List getUnexceptionalPredsOf(soot.Unit)>($r18);

        r4 = interfaceinvoke $r19.<java.util.List: java.util.Iterator iterator()>();

(11)    goto label08;

     label07:
        $r20 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r39 = (soot.Unit) $r20;

        $r21 = new safetyChecker.Vertex;

        specialinvoke $r21.<safetyChecker.Vertex: void <init>()>();

        r5 = $r21;

        $r22 = new safetyChecker.Edge;

        specialinvoke $r22.<safetyChecker.Edge: void <init>(soot.Unit)>(r39);

        r6 = $r22;

        virtualinvoke r6.<safetyChecker.Edge: void setSource(safetyChecker.Vertex)>(r5);

        virtualinvoke r6.<safetyChecker.Edge: void setTarget(safetyChecker.Vertex)>(r35);

        virtualinvoke r5.<safetyChecker.Vertex: void setOutgoingEdge(safetyChecker.Edge)>(r37);

        virtualinvoke r5.<safetyChecker.Vertex: void addIncomingEdge(safetyChecker.Edge)>(r6);

        virtualinvoke r5.<safetyChecker.Vertex: void setNextVertex(safetyChecker.Vertex)>(r35);

        virtualinvoke r35.<safetyChecker.Vertex: void addPreviousVertex(safetyChecker.Vertex)>(r5);

        $i2 = virtualinvoke r35.<safetyChecker.Vertex: int getDistance()>();

        $i3 = $i2 + 1;

        virtualinvoke r5.<safetyChecker.Vertex: void setDistance(int)>($i3);

        $i4 = i8_7;

(12)    i8_8 = i8_7 + 1;

        virtualinvoke r5.<safetyChecker.Vertex: void setLocationNumber(int)>($i4);

(13)    interfaceinvoke r30.<java.util.Queue: boolean add(java.lang.Object)>(r5);

     label08:
        i8_7 = Phi(i8_6 #11, i8_8 #13);

(14)    $z5 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

(15)    if $z5 != 0 goto label07;

     label09:
        i8_4 = Phi(i8_3 #6, i8_7 #15);

(16)    $z4 = interfaceinvoke r36.<java.util.Iterator: boolean hasNext()>();

(17)    if $z4 != 0 goto label05;

     label10:
        i8_3 = Phi(i8_1 #5, i8_4 #17);

(18)    $z3 = interfaceinvoke r30.<java.util.Queue: boolean isEmpty()>();

        if $z3 == 0 goto label04;

        staticinvoke <dotty.CfgConverter: void printAllPaths(java.util.Queue,java.lang.String)>(r1, "AllPaths.dot");

        i9 = 0;

(19)    goto label12;

     label11:
        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>(java.lang.String)>("Path-");

(20)    i9_2 = i9_1 + 1;

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i9_2);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".dot");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        r40 = staticinvoke <dotty.CfgConverter: java.io.BufferedWriter getBufferedWriter(java.lang.String)>($r27);

        virtualinvoke r40.<java.io.BufferedWriter: void write(java.lang.String)>("digraph { \n");

        $r28 = interfaceinvoke r2.<java.util.Queue: java.lang.Object remove()>();

        r41 = (safetyChecker.Vertex) $r28;

        staticinvoke <dotty.CfgConverter: void printSinglePath(safetyChecker.Vertex,java.io.BufferedWriter)>(r41, r40);

        virtualinvoke r40.<java.io.BufferedWriter: void write(java.lang.String)>("}");

        virtualinvoke r40.<java.io.BufferedWriter: void flush()>();

(21)    virtualinvoke r40.<java.io.BufferedWriter: void close()>();

     label12:
        i9_1 = Phi(i9 #19, i9_2 #21);

(22)    $z8 = interfaceinvoke r2.<java.util.Queue: boolean isEmpty()>();

        if $z8 == 0 goto label11;

     label13:
(23)    goto label15;

     label14:
        $r29 := @caughtexception;

        i8_9 = Phi(i8 #0, i8_2 #2, i8_1 #4, i8_5 #8, i8_6 #10, i8_8 #12, i8_7 #14, i8_4 #16, i8_3 #18);

        i9_3 = Phi(i9 #0, i9_2 #20, i9_1 #22);

        r42 = $r29;

        virtualinvoke r42.<java.lang.Exception: void printStackTrace()>();

(24)    staticinvoke <java.lang.System: void exit(int)>(0);

     label15:
        i8_10 = Phi(i8_3 #23, i8_9 #24);

        i9_4 = Phi(i9_1 #23, i9_3 #24);

        return;

        catch java.lang.Exception from label01 to label13 with label14;
    }

    private static void printSinglePath(safetyChecker.Vertex, java.io.BufferedWriter) throws java.io.IOException
    {
        safetyChecker.Vertex r0, $r2, $r7, $r16, $r17;
        java.io.BufferedWriter r1;
        java.lang.StringBuilder $r3, $r5, $r6, $r9, $r10, $r13, $r14;
        java.lang.String $r4, $r8, $r12, $r15;
        safetyChecker.Edge $r11;

        r0 := @parameter0: safetyChecker.Vertex;

        r1 := @parameter1: java.io.BufferedWriter;

        $r2 = virtualinvoke r0.<safetyChecker.Vertex: safetyChecker.Vertex getNextVertex()>();

        if $r2 != null goto label1;

        return;

     label1:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("\t\"");

        $r4 = virtualinvoke r0.<safetyChecker.Vertex: java.lang.String toString()>();

        $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" -> \"");

        $r7 = virtualinvoke r0.<safetyChecker.Vertex: safetyChecker.Vertex getNextVertex()>();

        $r8 = virtualinvoke $r7.<safetyChecker.Vertex: java.lang.String toString()>();

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"[label=\"");

        $r11 = virtualinvoke r0.<safetyChecker.Vertex: safetyChecker.Edge getOutgoingEdge()>();

        $r12 = virtualinvoke $r11.<safetyChecker.Edge: java.lang.String toString()>();

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"];\n");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r1.<java.io.BufferedWriter: void write(java.lang.String)>($r15);

        $r16 = virtualinvoke r0.<safetyChecker.Vertex: safetyChecker.Vertex getNextVertex()>();

        if $r16 == null goto label2;

        $r17 = virtualinvoke r0.<safetyChecker.Vertex: safetyChecker.Vertex getNextVertex()>();

        staticinvoke <dotty.CfgConverter: void printSinglePath(safetyChecker.Vertex,java.io.BufferedWriter)>($r17, r1);

     label2:
        return;
    }

    public static void printCfg(soot.toolkits.graph.ExceptionalUnitGraph)
    {
        soot.toolkits.graph.ExceptionalUnitGraph r0;
        java.util.LinkedList r1, $r5;
        java.util.List r2, r20;
        soot.Unit r3, r18, r19;
        java.util.Iterator r4, r17;
        boolean $z0, $z2, $z3;
        java.lang.Object $r6, $r7, $r8;
        java.lang.StringBuilder $r9, $r10, $r11, $r12, $r13;
        java.lang.String $r14;
        java.lang.Exception $r15, r21;
        java.io.BufferedWriter r16;

        r0 := @parameter0: soot.toolkits.graph.ExceptionalUnitGraph;

     label01:
        r16 = staticinvoke <dotty.CfgConverter: java.io.BufferedWriter getBufferedWriter(java.lang.String)>("CFG.dot");

        $r5 = new java.util.LinkedList;

        specialinvoke $r5.<java.util.LinkedList: void <init>()>();

        r1 = $r5;

        r2 = virtualinvoke r0.<soot.toolkits.graph.ExceptionalUnitGraph: java.util.List getTails()>();

        r17 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

        goto label03;

     label02:
        $r6 = interfaceinvoke r17.<java.util.Iterator: java.lang.Object next()>();

        r18 = (soot.Unit) $r6;

        interfaceinvoke r1.<java.util.Queue: boolean add(java.lang.Object)>(r18);

     label03:
        $z0 = interfaceinvoke r17.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label02;

        virtualinvoke r16.<java.io.BufferedWriter: void write(java.lang.String)>("digraph { \n");

        goto label07;

     label04:
        $r7 = interfaceinvoke r1.<java.util.Queue: java.lang.Object remove()>();

        r19 = (soot.Unit) $r7;

        r20 = virtualinvoke r0.<soot.toolkits.graph.ExceptionalUnitGraph: java.util.List getUnexceptionalPredsOf(soot.Unit)>(r19);

        r4 = interfaceinvoke r20.<java.util.List: java.util.Iterator iterator()>();

        goto label06;

     label05:
        $r8 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r3 = (soot.Unit) $r8;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>(java.lang.String)>("\t\"");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r19);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\" -> \"");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\";\n");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke r16.<java.io.BufferedWriter: void write(java.lang.String)>($r14);

        interfaceinvoke r1.<java.util.Queue: boolean add(java.lang.Object)>(r3);

     label06:
        $z3 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z3 != 0 goto label05;

     label07:
        $z2 = interfaceinvoke r1.<java.util.Queue: boolean isEmpty()>();

        if $z2 == 0 goto label04;

        virtualinvoke r16.<java.io.BufferedWriter: void write(java.lang.String)>("}");

        virtualinvoke r16.<java.io.BufferedWriter: void flush()>();

        virtualinvoke r16.<java.io.BufferedWriter: void close()>();

     label08:
        goto label10;

     label09:
        $r15 := @caughtexception;

        r21 = $r15;

        virtualinvoke r21.<java.lang.Exception: void printStackTrace()>();

        staticinvoke <java.lang.System: void exit(int)>(0);

     label10:
        return;

        catch java.lang.Exception from label01 to label08 with label09;
    }
}
