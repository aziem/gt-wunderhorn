public class safetyChecker.z3ScriptManager.Z3JavaMathHandler extends java.lang.Object
{
    private int arg0Index;
    private int arg1Index;
    private static final java.lang.String MATH_MAX_METHOD;
    private static final java.lang.String MATH_MIN_METHOD;
    private static final java.util.HashSet MATH_LIBRARY_DB;

    static void <clinit>()
    {
        java.util.HashSet $r0;

        $r0 = new java.util.HashSet;

        specialinvoke $r0.<java.util.HashSet: void <init>()>();

        <safetyChecker.z3ScriptManager.Z3JavaMathHandler: java.util.HashSet MATH_LIBRARY_DB> = $r0;

        return;
    }

    public void <init>()
    {
        safetyChecker.z3ScriptManager.Z3JavaMathHandler r0;
        java.util.HashSet $r1, $r2;

        r0 := @this: safetyChecker.z3ScriptManager.Z3JavaMathHandler;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<safetyChecker.z3ScriptManager.Z3JavaMathHandler: int arg0Index> = 0;

        r0.<safetyChecker.z3ScriptManager.Z3JavaMathHandler: int arg1Index> = 1;

        $r1 = <safetyChecker.z3ScriptManager.Z3JavaMathHandler: java.util.HashSet MATH_LIBRARY_DB>;

        virtualinvoke $r1.<java.util.HashSet: boolean add(java.lang.Object)>("<java.lang.Math: int max(int,int)>");

        $r2 = <safetyChecker.z3ScriptManager.Z3JavaMathHandler: java.util.HashSet MATH_LIBRARY_DB>;

        virtualinvoke $r2.<java.util.HashSet: boolean add(java.lang.Object)>("<java.lang.Math: int min(int,int)>");

        return;
    }

    public boolean isJavaMathLibrary(soot.Value)
    {
        safetyChecker.z3ScriptManager.Z3JavaMathHandler r0;
        soot.Value r1;
        java.util.HashSet $r2;
        soot.SootMethod $r3;
        java.lang.String $r4;
        boolean $z0;

        r0 := @this: safetyChecker.z3ScriptManager.Z3JavaMathHandler;

        r1 := @parameter0: soot.Value;

        $r2 = <safetyChecker.z3ScriptManager.Z3JavaMathHandler: java.util.HashSet MATH_LIBRARY_DB>;

        $r3 = specialinvoke r0.<safetyChecker.z3ScriptManager.Z3JavaMathHandler: soot.SootMethod getSootMethod(soot.Value)>(r1);

        $r4 = virtualinvoke $r3.<soot.SootMethod: java.lang.String toString()>();

        $z0 = virtualinvoke $r2.<java.util.HashSet: boolean contains(java.lang.Object)>($r4);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private soot.SootMethod getSootMethod(soot.Value)
    {
        safetyChecker.z3ScriptManager.Z3JavaMathHandler r0;
        soot.Value r1;
        soot.jimple.InvokeExpr $r2;
        soot.SootMethod $r3;

        r0 := @this: safetyChecker.z3ScriptManager.Z3JavaMathHandler;

        r1 := @parameter0: soot.Value;

        $r2 = (soot.jimple.InvokeExpr) r1;

        $r3 = interfaceinvoke $r2.<soot.jimple.InvokeExpr: soot.SootMethod getMethod()>();

        return $r3;
    }

    public boolean isModulusInstruction(soot.Value)
    {
        safetyChecker.z3ScriptManager.Z3JavaMathHandler r0;
        soot.Value r1;
        soot.jimple.BinopExpr r2;
        boolean $z0, $z1;

        r0 := @this: safetyChecker.z3ScriptManager.Z3JavaMathHandler;

        r1 := @parameter0: soot.Value;

        $z0 = r1 instanceof soot.jimple.BinopExpr;

        if $z0 == 0 goto label1;

        r2 = (soot.jimple.BinopExpr) r1;

        $z1 = r2 instanceof soot.jimple.internal.JRemExpr;

        if $z1 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public com.microsoft.z3.BoolExpr createModuleExpr(com.microsoft.z3.Expr, soot.Value, safetyChecker.z3ScriptManager.Z3ScriptHandler, safetyChecker.Edge)
    {
        safetyChecker.z3ScriptManager.Z3JavaMathHandler r0;
        com.microsoft.z3.Expr r1, r11, r12;
        soot.Value r2, r8, r9;
        safetyChecker.z3ScriptManager.Z3ScriptHandler r3;
        safetyChecker.Edge r4;
        com.microsoft.z3.InterpolationContext r5;
        soot.jimple.BinopExpr r6;
        soot.jimple.internal.JRemExpr r7;
        com.microsoft.z3.IntExpr r10;
        com.microsoft.z3.BoolExpr r13, r14, r15;
        safetyChecker.Vertex $r16, $r17;
        int $i0, $i1;
        com.microsoft.z3.ArithExpr[] $r18, $r20;
        com.microsoft.z3.ArithExpr $r19, $r21, $r22, $r23, $r24, $r25, $r26;
        com.microsoft.z3.BoolExpr[] $r27;

        r0 := @this: safetyChecker.z3ScriptManager.Z3JavaMathHandler;

        r1 := @parameter0: com.microsoft.z3.Expr;

        r2 := @parameter1: soot.Value;

        r3 := @parameter2: safetyChecker.z3ScriptManager.Z3ScriptHandler;

        r4 := @parameter3: safetyChecker.Edge;

        r5 = virtualinvoke r3.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.InterpolationContext getIctx()>();

        r6 = (soot.jimple.BinopExpr) r2;

        r7 = (soot.jimple.internal.JRemExpr) r6;

        r8 = virtualinvoke r7.<soot.jimple.internal.JRemExpr: soot.Value getOp1()>();

        r9 = virtualinvoke r7.<soot.jimple.internal.JRemExpr: soot.Value getOp2()>();

        r10 = virtualinvoke r5.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.IntExpr mkIntConst(java.lang.String)>("fresh");

        $r16 = virtualinvoke r4.<safetyChecker.Edge: safetyChecker.Vertex getSource()>();

        $i0 = virtualinvoke $r16.<safetyChecker.Vertex: int getDistance()>();

        r11 = virtualinvoke r3.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.Expr convertValue(soot.Value,boolean,safetyChecker.Edge,int)>(r8, 0, r4, $i0);

        $r17 = virtualinvoke r4.<safetyChecker.Edge: safetyChecker.Vertex getSource()>();

        $i1 = virtualinvoke $r17.<safetyChecker.Vertex: int getDistance()>();

        r12 = virtualinvoke r3.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.Expr convertValue(soot.Value,boolean,safetyChecker.Edge,int)>(r9, 0, r4, $i1);

        $r18 = newarray (com.microsoft.z3.ArithExpr)[2];

        $r19 = (com.microsoft.z3.ArithExpr) r1;

        $r18[0] = $r19;

        $r20 = newarray (com.microsoft.z3.ArithExpr)[2];

        $r21 = (com.microsoft.z3.ArithExpr) r10;

        $r20[0] = $r21;

        $r22 = (com.microsoft.z3.ArithExpr) r12;

        $r20[1] = $r22;

        $r23 = virtualinvoke r5.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.ArithExpr mkMul(com.microsoft.z3.ArithExpr[])>($r20);

        $r18[1] = $r23;

        $r24 = virtualinvoke r5.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.ArithExpr mkAdd(com.microsoft.z3.ArithExpr[])>($r18);

        r13 = virtualinvoke r5.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.BoolExpr mkEq(com.microsoft.z3.Expr,com.microsoft.z3.Expr)>(r11, $r24);

        $r26 = (com.microsoft.z3.ArithExpr) r1;

        $r25 = (com.microsoft.z3.ArithExpr) r12;

        r14 = virtualinvoke r5.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.BoolExpr mkLt(com.microsoft.z3.ArithExpr,com.microsoft.z3.ArithExpr)>($r26, $r25);

        $r27 = newarray (com.microsoft.z3.BoolExpr)[2];

        $r27[0] = r13;

        $r27[1] = r14;

        r15 = virtualinvoke r5.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.BoolExpr mkAnd(com.microsoft.z3.BoolExpr[])>($r27);

        return r15;
    }

    public com.microsoft.z3.Expr createMathEquality(soot.Value, safetyChecker.z3ScriptManager.Z3ScriptHandler, safetyChecker.Edge)
    {
        safetyChecker.z3ScriptManager.Z3JavaMathHandler r0;
        soot.Value r1;
        safetyChecker.z3ScriptManager.Z3ScriptHandler r2;
        safetyChecker.Edge r3;
        soot.SootMethod $r4, $r6;
        java.lang.String $r5, $r7;
        boolean $z0, $z1;
        com.microsoft.z3.Expr $r8, $r9;

        r0 := @this: safetyChecker.z3ScriptManager.Z3JavaMathHandler;

        r1 := @parameter0: soot.Value;

        r2 := @parameter1: safetyChecker.z3ScriptManager.Z3ScriptHandler;

        r3 := @parameter2: safetyChecker.Edge;

        $r4 = specialinvoke r0.<safetyChecker.z3ScriptManager.Z3JavaMathHandler: soot.SootMethod getSootMethod(soot.Value)>(r1);

        $r5 = virtualinvoke $r4.<soot.SootMethod: java.lang.String toString()>();

        $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>("<java.lang.Math: int max(int,int)>");

        if $z0 == 0 goto label1;

        $r9 = specialinvoke r0.<safetyChecker.z3ScriptManager.Z3JavaMathHandler: com.microsoft.z3.Expr maxEquality(soot.Value,safetyChecker.z3ScriptManager.Z3ScriptHandler,safetyChecker.Edge)>(r1, r2, r3);

        return $r9;

     label1:
        $r6 = specialinvoke r0.<safetyChecker.z3ScriptManager.Z3JavaMathHandler: soot.SootMethod getSootMethod(soot.Value)>(r1);

        $r7 = virtualinvoke $r6.<soot.SootMethod: java.lang.String toString()>();

        $z1 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>("<java.lang.Math: int min(int,int)>");

        if $z1 == 0 goto label2;

        $r8 = specialinvoke r0.<safetyChecker.z3ScriptManager.Z3JavaMathHandler: com.microsoft.z3.Expr minEquality(soot.Value,safetyChecker.z3ScriptManager.Z3ScriptHandler,safetyChecker.Edge)>(r1, r2, r3);

        return $r8;

     label2:
        return null;
    }

    private com.microsoft.z3.Expr maxEquality(soot.Value, safetyChecker.z3ScriptManager.Z3ScriptHandler, safetyChecker.Edge)
    {
        safetyChecker.z3ScriptManager.Z3JavaMathHandler r0;
        soot.Value r1, r6, r7;
        safetyChecker.z3ScriptManager.Z3ScriptHandler r2;
        safetyChecker.Edge r3;
        com.microsoft.z3.InterpolationContext r4;
        soot.jimple.InvokeExpr r5;
        com.microsoft.z3.Expr r8, r9, $r15;
        int $i0, $i1, $i2, $i3;
        safetyChecker.Vertex $r10, $r11;
        com.microsoft.z3.ArithExpr $r12, $r13;
        com.microsoft.z3.BoolExpr $r14;

        r0 := @this: safetyChecker.z3ScriptManager.Z3JavaMathHandler;

        r1 := @parameter0: soot.Value;

        r2 := @parameter1: safetyChecker.z3ScriptManager.Z3ScriptHandler;

        r3 := @parameter2: safetyChecker.Edge;

        r4 = virtualinvoke r2.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.InterpolationContext getIctx()>();

        r5 = (soot.jimple.InvokeExpr) r1;

        $i0 = r0.<safetyChecker.z3ScriptManager.Z3JavaMathHandler: int arg0Index>;

        r6 = interfaceinvoke r5.<soot.jimple.InvokeExpr: soot.Value getArg(int)>($i0);

        $i1 = r0.<safetyChecker.z3ScriptManager.Z3JavaMathHandler: int arg1Index>;

        r7 = interfaceinvoke r5.<soot.jimple.InvokeExpr: soot.Value getArg(int)>($i1);

        $r10 = virtualinvoke r3.<safetyChecker.Edge: safetyChecker.Vertex getSource()>();

        $i2 = virtualinvoke $r10.<safetyChecker.Vertex: int getDistance()>();

        r8 = virtualinvoke r2.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.Expr convertValue(soot.Value,boolean,safetyChecker.Edge,int)>(r6, 0, r3, $i2);

        $r11 = virtualinvoke r3.<safetyChecker.Edge: safetyChecker.Vertex getSource()>();

        $i3 = virtualinvoke $r11.<safetyChecker.Vertex: int getDistance()>();

        r9 = virtualinvoke r2.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.Expr convertValue(soot.Value,boolean,safetyChecker.Edge,int)>(r7, 0, r3, $i3);

        $r13 = (com.microsoft.z3.ArithExpr) r8;

        $r12 = (com.microsoft.z3.ArithExpr) r9;

        $r14 = virtualinvoke r4.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.BoolExpr mkGe(com.microsoft.z3.ArithExpr,com.microsoft.z3.ArithExpr)>($r13, $r12);

        $r15 = virtualinvoke r4.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.Expr mkITE(com.microsoft.z3.BoolExpr,com.microsoft.z3.Expr,com.microsoft.z3.Expr)>($r14, r8, r9);

        return $r15;
    }

    private com.microsoft.z3.Expr minEquality(soot.Value, safetyChecker.z3ScriptManager.Z3ScriptHandler, safetyChecker.Edge)
    {
        safetyChecker.z3ScriptManager.Z3JavaMathHandler r0;
        soot.Value r1, r6, r7;
        safetyChecker.z3ScriptManager.Z3ScriptHandler r2;
        safetyChecker.Edge r3;
        com.microsoft.z3.InterpolationContext r4;
        soot.jimple.InvokeExpr r5;
        com.microsoft.z3.Expr r8, r9, $r15;
        int $i0, $i1, $i2, $i3;
        safetyChecker.Vertex $r10, $r11;
        com.microsoft.z3.ArithExpr $r12, $r13;
        com.microsoft.z3.BoolExpr $r14;

        r0 := @this: safetyChecker.z3ScriptManager.Z3JavaMathHandler;

        r1 := @parameter0: soot.Value;

        r2 := @parameter1: safetyChecker.z3ScriptManager.Z3ScriptHandler;

        r3 := @parameter2: safetyChecker.Edge;

        r4 = virtualinvoke r2.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.InterpolationContext getIctx()>();

        r5 = (soot.jimple.InvokeExpr) r1;

        $i0 = r0.<safetyChecker.z3ScriptManager.Z3JavaMathHandler: int arg0Index>;

        r6 = interfaceinvoke r5.<soot.jimple.InvokeExpr: soot.Value getArg(int)>($i0);

        $i1 = r0.<safetyChecker.z3ScriptManager.Z3JavaMathHandler: int arg1Index>;

        r7 = interfaceinvoke r5.<soot.jimple.InvokeExpr: soot.Value getArg(int)>($i1);

        $r10 = virtualinvoke r3.<safetyChecker.Edge: safetyChecker.Vertex getSource()>();

        $i2 = virtualinvoke $r10.<safetyChecker.Vertex: int getDistance()>();

        r8 = virtualinvoke r2.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.Expr convertValue(soot.Value,boolean,safetyChecker.Edge,int)>(r6, 0, r3, $i2);

        $r11 = virtualinvoke r3.<safetyChecker.Edge: safetyChecker.Vertex getSource()>();

        $i3 = virtualinvoke $r11.<safetyChecker.Vertex: int getDistance()>();

        r9 = virtualinvoke r2.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.Expr convertValue(soot.Value,boolean,safetyChecker.Edge,int)>(r7, 0, r3, $i3);

        $r13 = (com.microsoft.z3.ArithExpr) r8;

        $r12 = (com.microsoft.z3.ArithExpr) r9;

        $r14 = virtualinvoke r4.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.BoolExpr mkLe(com.microsoft.z3.ArithExpr,com.microsoft.z3.ArithExpr)>($r13, $r12);

        $r15 = virtualinvoke r4.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.Expr mkITE(com.microsoft.z3.BoolExpr,com.microsoft.z3.Expr,com.microsoft.z3.Expr)>($r14, r8, r9);

        return $r15;
    }
}
