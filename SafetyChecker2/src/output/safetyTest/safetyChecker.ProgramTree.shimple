public class safetyChecker.ProgramTree extends java.lang.Object
{
    private safetyChecker.Vertex returnLeaf;
    private java.util.Set liSet;
    private safetyChecker.Vertex lf;
    private java.util.Map stores;
    private java.util.Set vertexSet;
    private java.util.Set edgeSet;
    private java.util.Stack path;
    private com.microsoft.z3.InterpolationContext ictx;
    private safetyChecker.Z3ScriptHandler z3Handler;
    private safetyChecker.InterpolationHandler itpHandler;
    private boolean errorLocationFeasible;
    private boolean mainFunction;
    private boolean treeClosed;
    private java.util.LinkedList subFunctionList;
    private java.util.HashSet errorRootSet;
    private java.util.Queue errorRootQueue;
    private java.util.Queue returnRootQueue;
    private java.util.LinkedList returnPaths;
    private java.util.LinkedList errorPaths;
    private java.lang.String functionSignature;
    private java.lang.String functionName;
    private static java.util.Map functionNameInvokeCount;
    private soot.toolkits.graph.ExceptionalUnitGraph cfg;
    private java.lang.String signature;
    private safetyChecker.UnitController unitController;
    private safetyChecker.CoverRelation coverRelation;
    private java.util.Queue uncovered;
    private java.util.Queue errorSet;
    private int locationCounter;

    static void <clinit>()
    {
        java.util.HashMap $r0;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        <safetyChecker.ProgramTree: java.util.Map functionNameInvokeCount> = $r0;

        return;
    }

    public void <init>(java.util.Map, java.lang.String, boolean) throws safetyChecker.exception.MainFunctionNotFoundException, safetyChecker.exception.ErrorLocationNotFoundException
    {
        safetyChecker.ProgramTree r0;
        java.util.Map r1;
        java.lang.String r2, $r27, $r30, $r31, $r33, $r37;
        boolean z0, z1, $z2, $z3, $z4;
        java.util.HashSet $r3, $r4, $r10;
        java.util.Stack $r5;
        java.util.LinkedList $r6, $r7, $r9, $r11, $r12, $r13, $r14;
        java.lang.Object[] $r8, $r24, $r34;
        safetyChecker.UnitController $r15;
        com.microsoft.z3.InterpolationContext $r16, $r18, $r21, $r23;
        safetyChecker.Z3ScriptHandler $r17, $r20;
        safetyChecker.InterpolationHandler $r19;
        safetyChecker.CoverRelation $r22;
        java.lang.StringBuilder $r25, $r26, $r29, $r32, $r35, $r36;
        safetyChecker.exception.MainFunctionNotFoundException $r28;

        r0 := @this: safetyChecker.ProgramTree;

        r1 := @parameter0: java.util.Map;

        r2 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = new java.util.HashSet;

        specialinvoke $r3.<java.util.HashSet: void <init>()>();

        r0.<safetyChecker.ProgramTree: java.util.Set vertexSet> = $r3;

        $r4 = new java.util.HashSet;

        specialinvoke $r4.<java.util.HashSet: void <init>()>();

        r0.<safetyChecker.ProgramTree: java.util.Set edgeSet> = $r4;

        $r5 = new java.util.Stack;

        specialinvoke $r5.<java.util.Stack: void <init>()>();

        r0.<safetyChecker.ProgramTree: java.util.Stack path> = $r5;

        r0.<safetyChecker.ProgramTree: boolean errorLocationFeasible> = 0;

        $r6 = new java.util.LinkedList;

        specialinvoke $r6.<java.util.LinkedList: void <init>()>();

        r0.<safetyChecker.ProgramTree: java.util.Queue uncovered> = $r6;

        $r7 = new java.util.LinkedList;

        specialinvoke $r7.<java.util.LinkedList: void <init>()>();

        r0.<safetyChecker.ProgramTree: java.util.Queue errorSet> = $r7;

        r0.<safetyChecker.ProgramTree: int locationCounter> = 0;

        $r8 = newarray (java.lang.Object)[1];

        $r8[0] = "------->ProgramTree";

        staticinvoke <safetyChecker.LogUtils: void detailln(java.lang.Object[])>($r8);

        r0.<safetyChecker.ProgramTree: boolean errorLocationFeasible> = 0;

        $r9 = new java.util.LinkedList;

        specialinvoke $r9.<java.util.LinkedList: void <init>()>();

        r0.<safetyChecker.ProgramTree: java.util.LinkedList subFunctionList> = $r9;

        $r10 = new java.util.HashSet;

        specialinvoke $r10.<java.util.HashSet: void <init>()>();

        r0.<safetyChecker.ProgramTree: java.util.HashSet errorRootSet> = $r10;

        $r11 = new java.util.LinkedList;

        specialinvoke $r11.<java.util.LinkedList: void <init>()>();

        r0.<safetyChecker.ProgramTree: java.util.Queue errorRootQueue> = $r11;

        $r12 = new java.util.LinkedList;

        specialinvoke $r12.<java.util.LinkedList: void <init>()>();

        r0.<safetyChecker.ProgramTree: java.util.Queue returnRootQueue> = $r12;

        $r13 = new java.util.LinkedList;

        specialinvoke $r13.<java.util.LinkedList: void <init>()>();

        r0.<safetyChecker.ProgramTree: java.util.LinkedList returnPaths> = $r13;

        $r14 = new java.util.LinkedList;

        specialinvoke $r14.<java.util.LinkedList: void <init>()>();

        r0.<safetyChecker.ProgramTree: java.util.LinkedList errorPaths> = $r14;

        r0.<safetyChecker.ProgramTree: java.lang.String functionSignature> = r2;

        r0.<safetyChecker.ProgramTree: java.util.Map stores> = r1;

        $r15 = new safetyChecker.UnitController;

        specialinvoke $r15.<safetyChecker.UnitController: void <init>()>();

        r0.<safetyChecker.ProgramTree: safetyChecker.UnitController unitController> = $r15;

        r0.<safetyChecker.ProgramTree: boolean mainFunction> = z0;

        $r16 = new com.microsoft.z3.InterpolationContext;

        specialinvoke $r16.<com.microsoft.z3.InterpolationContext: void <init>()>();

        r0.<safetyChecker.ProgramTree: com.microsoft.z3.InterpolationContext ictx> = $r16;

        $r17 = new safetyChecker.Z3ScriptHandler;

        $r18 = r0.<safetyChecker.ProgramTree: com.microsoft.z3.InterpolationContext ictx>;

        specialinvoke $r17.<safetyChecker.Z3ScriptHandler: void <init>(com.microsoft.z3.InterpolationContext)>($r18);

        r0.<safetyChecker.ProgramTree: safetyChecker.Z3ScriptHandler z3Handler> = $r17;

        $r19 = new safetyChecker.InterpolationHandler;

        $r21 = r0.<safetyChecker.ProgramTree: com.microsoft.z3.InterpolationContext ictx>;

        $r20 = r0.<safetyChecker.ProgramTree: safetyChecker.Z3ScriptHandler z3Handler>;

        specialinvoke $r19.<safetyChecker.InterpolationHandler: void <init>(com.microsoft.z3.InterpolationContext,safetyChecker.Z3ScriptHandler)>($r21, $r20);

        r0.<safetyChecker.ProgramTree: safetyChecker.InterpolationHandler itpHandler> = $r19;

        $r22 = new safetyChecker.CoverRelation;

        $r23 = r0.<safetyChecker.ProgramTree: com.microsoft.z3.InterpolationContext ictx>;

        specialinvoke $r22.<safetyChecker.CoverRelation: void <init>(com.microsoft.z3.InterpolationContext)>($r23);

        r0.<safetyChecker.ProgramTree: safetyChecker.CoverRelation coverRelation> = $r22;

        $z2 = r0.<safetyChecker.ProgramTree: boolean mainFunction>;

        if $z2 == 0 goto label1;

        $r34 = newarray (java.lang.Object)[1];

        $r35 = new java.lang.StringBuilder;

        specialinvoke $r35.<java.lang.StringBuilder: void <init>(java.lang.String)>("mainFunction = ");

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();

        $r34[0] = $r37;

        staticinvoke <safetyChecker.LogUtils: void detailln(java.lang.Object[])>($r34);

        goto label2;

     label1:
        $r24 = newarray (java.lang.Object)[1];

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>(java.lang.String)>("subFunction = ");

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        $r24[0] = $r27;

        staticinvoke <safetyChecker.LogUtils: void detailln(java.lang.Object[])>($r24);

     label2:
        z1 = specialinvoke r0.<safetyChecker.ProgramTree: boolean findMainFunction()>();

        if z1 == 0 goto label3;

        $z4 = r0.<safetyChecker.ProgramTree: boolean mainFunction>;

        if $z4 == 0 goto label3;

        specialinvoke r0.<safetyChecker.ProgramTree: void startTest()>();

        goto label4;

     label3:
        $z3 = r0.<safetyChecker.ProgramTree: boolean mainFunction>;

        if $z3 == 0 goto label4;

        $r28 = new safetyChecker.exception.MainFunctionNotFoundException;

        $r29 = new java.lang.StringBuilder;

        $r30 = r0.<safetyChecker.ProgramTree: java.lang.String functionSignature>;

        $r31 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r30);

        specialinvoke $r29.<java.lang.StringBuilder: void <init>(java.lang.String)>($r31);

        $r32 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not exist in the current program");

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r28.<safetyChecker.exception.MainFunctionNotFoundException: void <init>(java.lang.String)>($r33);

        throw $r28;

     label4:
        return;
    }

    private void startTest() throws safetyChecker.exception.ErrorLocationNotFoundException, safetyChecker.exception.MainFunctionNotFoundException
    {
        safetyChecker.ProgramTree r0;
        java.lang.Object[] $r1, $r2;

        r0 := @this: safetyChecker.ProgramTree;

        $r1 = newarray (java.lang.Object)[1];

        $r1[0] = "------------>startTest()";

        staticinvoke <safetyChecker.LogUtils: void detailln(java.lang.Object[])>($r1);

        specialinvoke r0.<safetyChecker.ProgramTree: void unwind()>();

        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = "<-------------startTest";

        staticinvoke <safetyChecker.LogUtils: void detailln(java.lang.Object[])>($r2);

        return;
    }

    private boolean findErrorLocation(safetyChecker.Vertex)
    {
        safetyChecker.ProgramTree r0;
        safetyChecker.Vertex r1, r7, $r24, $r26, $r27, $r28, $r30, $r31;
        safetyChecker.Edge r2, r8, $r25, $r29, r32;
        java.util.Iterator r3, r5, r6;
        soot.Unit r4, $r12, r33;
        java.util.Set $r9;
        boolean $z0, $z1, $z2, $z3;
        java.lang.Object $r10, $r14, $r23;
        soot.toolkits.graph.ExceptionalUnitGraph $r11, $r21;
        java.util.List $r13, $r22;
        java.lang.Object[] $r15, $r20;
        java.lang.StringBuilder $r16, $r17;
        java.lang.String $r18;
        safetyChecker.UnitController $r19;

        r0 := @this: safetyChecker.ProgramTree;

        r1 := @parameter0: safetyChecker.Vertex;

        $r9 = virtualinvoke r1.<safetyChecker.Vertex: java.util.Set getIncomingEdges()>();

        r3 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>();

        goto label7;

     label1:
        $r10 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r2 = (safetyChecker.Edge) $r10;

        $r11 = r0.<safetyChecker.ProgramTree: soot.toolkits.graph.ExceptionalUnitGraph cfg>;

        $r12 = virtualinvoke r2.<safetyChecker.Edge: soot.Unit getUnit()>();

        $r13 = virtualinvoke $r11.<soot.toolkits.graph.ExceptionalUnitGraph: java.util.List getPredsOf(soot.Unit)>($r12);

        r5 = interfaceinvoke $r13.<java.util.List: java.util.Iterator iterator()>();

        goto label6;

     label2:
        $r14 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r4 = (soot.Unit) $r14;

        $r15 = newarray (java.lang.Object)[1];

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>(java.lang.String)>("findErrorLocation : ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        $r15[0] = $r18;

        staticinvoke <safetyChecker.LogUtils: void debugln(java.lang.Object[])>($r15);

        $r19 = r0.<safetyChecker.ProgramTree: safetyChecker.UnitController unitController>;

        $z2 = virtualinvoke $r19.<safetyChecker.UnitController: boolean isErrorUnit(soot.Unit)>(r4);

        if $z2 == 0 goto label3;

        $r26 = new safetyChecker.Vertex;

        specialinvoke $r26.<safetyChecker.Vertex: void <init>()>();

        r0.<safetyChecker.ProgramTree: safetyChecker.Vertex lf> = $r26;

        $r27 = r0.<safetyChecker.ProgramTree: safetyChecker.Vertex lf>;

        virtualinvoke $r27.<safetyChecker.Vertex: void setErrorLocation(boolean)>(1);

        $r28 = r0.<safetyChecker.ProgramTree: safetyChecker.Vertex lf>;

        virtualinvoke $r28.<safetyChecker.Vertex: void setNextVertex(safetyChecker.Vertex)>(r1);

        $r29 = new safetyChecker.Edge;

        specialinvoke $r29.<safetyChecker.Edge: void <init>(soot.Unit)>(r4);

        r32 = $r29;

        $r30 = r0.<safetyChecker.ProgramTree: safetyChecker.Vertex lf>;

        virtualinvoke $r30.<safetyChecker.Vertex: void addIncomingEdge(safetyChecker.Edge)>(r32);

        $r31 = r0.<safetyChecker.ProgramTree: safetyChecker.Vertex lf>;

        virtualinvoke r1.<safetyChecker.Vertex: void addPreviousVertex(safetyChecker.Vertex)>($r31);

        return 1;

     label3:
        $r20 = newarray (java.lang.Object)[1];

        $r20[0] = "else girdi";

        staticinvoke <safetyChecker.LogUtils: void debugln(java.lang.Object[])>($r20);

        $r21 = r0.<safetyChecker.ProgramTree: soot.toolkits.graph.ExceptionalUnitGraph cfg>;

        $r22 = virtualinvoke $r21.<soot.toolkits.graph.ExceptionalUnitGraph: java.util.List getPredsOf(soot.Unit)>(r4);

        r6 = interfaceinvoke $r22.<java.util.List: java.util.Iterator iterator()>();

        goto label5;

     label4:
        $r23 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        r33 = (soot.Unit) $r23;

        $r24 = new safetyChecker.Vertex;

        specialinvoke $r24.<safetyChecker.Vertex: void <init>()>();

        r7 = $r24;

        $r25 = new safetyChecker.Edge;

        specialinvoke $r25.<safetyChecker.Edge: void <init>(soot.Unit)>(r33);

        r8 = $r25;

        virtualinvoke r7.<safetyChecker.Vertex: void addIncomingEdge(safetyChecker.Edge)>(r8);

     label5:
        $z3 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z3 != 0 goto label4;

     label6:
        $z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label2;

     label7:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return 0;
    }

    private boolean findMainFunction()
    {
        safetyChecker.ProgramTree r0;
        soot.Body r1, $r9;
        safetyChecker.Edge r2, $r26;
        java.lang.String $r3, $r6, $r10, $r14, $r15, $r18, $r21, $r34, $r37;
        java.util.Map $r4, $r7, $r11, $r16, $r17, $r35, $r36;
        boolean $z0, $z1;
        soot.toolkits.graph.ExceptionalUnitGraph $r5, $r24, $r27;
        java.lang.Object $r8, $r12, $r29, $r38;
        soot.SootMethod $r13;
        java.lang.Integer $r19, $r39, $r40;
        safetyChecker.Vertex $r22, $r23, $r31, $r32;
        java.util.List $r25, $r28;
        int $i0, $i1, $i2, i3, i3_1, i3_2;
        soot.Unit $r30;
        java.util.Queue $r33;

        r0 := @this: safetyChecker.ProgramTree;

        $r4 = r0.<safetyChecker.ProgramTree: java.util.Map stores>;

        $r3 = r0.<safetyChecker.ProgramTree: java.lang.String functionSignature>;

        $z0 = interfaceinvoke $r4.<java.util.Map: boolean containsKey(java.lang.Object)>($r3);

        if $z0 == 0 goto label5;

        $r5 = new soot.toolkits.graph.ExceptionalUnitGraph;

        $r7 = r0.<safetyChecker.ProgramTree: java.util.Map stores>;

        $r6 = r0.<safetyChecker.ProgramTree: java.lang.String functionSignature>;

        $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>($r6);

        $r9 = (soot.Body) $r8;

        specialinvoke $r5.<soot.toolkits.graph.ExceptionalUnitGraph: void <init>(soot.Body)>($r9);

        r0.<safetyChecker.ProgramTree: soot.toolkits.graph.ExceptionalUnitGraph cfg> = $r5;

        $r11 = r0.<safetyChecker.ProgramTree: java.util.Map stores>;

        $r10 = r0.<safetyChecker.ProgramTree: java.lang.String functionSignature>;

        $r12 = interfaceinvoke $r11.<java.util.Map: java.lang.Object get(java.lang.Object)>($r10);

        r1 = (soot.Body) $r12;

        $r13 = virtualinvoke r1.<soot.Body: soot.SootMethod getMethod()>();

        $r14 = virtualinvoke $r13.<soot.SootMethod: java.lang.String getName()>();

        r0.<safetyChecker.ProgramTree: java.lang.String functionName> = $r14;

        $r16 = <safetyChecker.ProgramTree: java.util.Map functionNameInvokeCount>;

        $r15 = r0.<safetyChecker.ProgramTree: java.lang.String functionName>;

        $z1 = interfaceinvoke $r16.<java.util.Map: boolean containsKey(java.lang.Object)>($r15);

        if $z1 == 0 goto label1;

        $r36 = <safetyChecker.ProgramTree: java.util.Map functionNameInvokeCount>;

        $r37 = r0.<safetyChecker.ProgramTree: java.lang.String functionName>;

        $r35 = <safetyChecker.ProgramTree: java.util.Map functionNameInvokeCount>;

        $r34 = r0.<safetyChecker.ProgramTree: java.lang.String functionName>;

        $r38 = interfaceinvoke $r35.<java.util.Map: java.lang.Object get(java.lang.Object)>($r34);

        $r39 = (java.lang.Integer) $r38;

        $i1 = virtualinvoke $r39.<java.lang.Integer: int intValue()>();

        $i2 = $i1 + 1;

        $r40 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2);

        interfaceinvoke $r36.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r37, $r40);

        goto label2;

     label1:
        $r17 = <safetyChecker.ProgramTree: java.util.Map functionNameInvokeCount>;

        $r18 = r0.<safetyChecker.ProgramTree: java.lang.String functionName>;

        $r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        interfaceinvoke $r17.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r18, $r19);

     label2:
        $r21 = r0.<safetyChecker.ProgramTree: java.lang.String functionSignature>;

        r0.<safetyChecker.ProgramTree: java.lang.String signature> = $r21;

        $r22 = new safetyChecker.Vertex;

        specialinvoke $r22.<safetyChecker.Vertex: void <init>()>();

        r0.<safetyChecker.ProgramTree: safetyChecker.Vertex returnLeaf> = $r22;

        $r23 = r0.<safetyChecker.ProgramTree: safetyChecker.Vertex returnLeaf>;

        virtualinvoke $r23.<safetyChecker.Vertex: void setReturnLocation(boolean)>(1);

        i3 = 0;

(0)     goto label4;

     label3:
        $r26 = new safetyChecker.Edge;

        $r27 = r0.<safetyChecker.ProgramTree: soot.toolkits.graph.ExceptionalUnitGraph cfg>;

        $r28 = virtualinvoke $r27.<soot.toolkits.graph.ExceptionalUnitGraph: java.util.List getTails()>();

        $r29 = interfaceinvoke $r28.<java.util.List: java.lang.Object get(int)>(i3_1);

        $r30 = (soot.Unit) $r29;

        specialinvoke $r26.<safetyChecker.Edge: void <init>(soot.Unit)>($r30);

        r2 = $r26;

        $r31 = r0.<safetyChecker.ProgramTree: safetyChecker.Vertex returnLeaf>;

        virtualinvoke $r31.<safetyChecker.Vertex: void addIncomingEdge(safetyChecker.Edge)>(r2);

(1)     i3_2 = i3_1 + 1;

     label4:
        i3_1 = Phi(i3 #0, i3_2 #1);

        $r24 = r0.<safetyChecker.ProgramTree: soot.toolkits.graph.ExceptionalUnitGraph cfg>;

        $r25 = virtualinvoke $r24.<soot.toolkits.graph.ExceptionalUnitGraph: java.util.List getTails()>();

        $i0 = interfaceinvoke $r25.<java.util.List: int size()>();

        if i3_1 < $i0 goto label3;

        $r33 = r0.<safetyChecker.ProgramTree: java.util.Queue uncovered>;

        $r32 = r0.<safetyChecker.ProgramTree: safetyChecker.Vertex returnLeaf>;

        interfaceinvoke $r33.<java.util.Queue: boolean add(java.lang.Object)>($r32);

        return 1;

     label5:
        return 0;
    }

    public boolean getNewReturnPath() throws safetyChecker.exception.MainFunctionNotFoundException, safetyChecker.exception.ErrorLocationNotFoundException
    {
        safetyChecker.ProgramTree r0;
        safetyChecker.Vertex r1, r2;
        java.lang.Object[] $r3, $r7, $r13, $r14;
        java.util.Queue $r4, $r5, $r9, $r10;
        boolean $z1;
        java.lang.Object $r6, $r11;
        java.util.Set $r8;
        int $i0;
        safetyChecker.Z3ScriptHandler $r12;

        r0 := @this: safetyChecker.ProgramTree;

        $r3 = newarray (java.lang.Object)[1];

        $r3[0] = ">>>>>>>> ProgramTree.getNewReturnPath";

        staticinvoke <safetyChecker.LogUtils: void warningln(java.lang.Object[])>($r3);

        goto label2;

     label1:
        $r5 = r0.<safetyChecker.ProgramTree: java.util.Queue uncovered>;

        $r6 = interfaceinvoke $r5.<java.util.Queue: java.lang.Object remove()>();

        r1 = (safetyChecker.Vertex) $r6;

        $r7 = newarray (java.lang.Object)[1];

        $r8 = virtualinvoke r1.<safetyChecker.Vertex: java.util.Set getIncomingEdges()>();

        $r7[0] = $r8;

        staticinvoke <safetyChecker.LogUtils: void detailln(java.lang.Object[])>($r7);

        specialinvoke r0.<safetyChecker.ProgramTree: boolean expandBFS(safetyChecker.Vertex)>(r1);

        $r9 = r0.<safetyChecker.ProgramTree: java.util.Queue returnRootQueue>;

        $i0 = interfaceinvoke $r9.<java.util.Queue: int size()>();

        if $i0 <= 0 goto label2;

        $r10 = r0.<safetyChecker.ProgramTree: java.util.Queue returnRootQueue>;

        $r11 = interfaceinvoke $r10.<java.util.Queue: java.lang.Object peek()>();

        r2 = (safetyChecker.Vertex) $r11;

        $r12 = r0.<safetyChecker.ProgramTree: safetyChecker.Z3ScriptHandler z3Handler>;

        virtualinvoke $r12.<safetyChecker.Z3ScriptHandler: void convertPathtoZ3Script(safetyChecker.Vertex)>(r2);

        $r13 = newarray (java.lang.Object)[1];

        $r13[0] = "HUHU";

        staticinvoke <safetyChecker.LogUtils: void infoln(java.lang.Object[])>($r13);

        staticinvoke <java.lang.System: void exit(int)>(0);

        return 1;

     label2:
        $r4 = r0.<safetyChecker.ProgramTree: java.util.Queue uncovered>;

        $z1 = interfaceinvoke $r4.<java.util.Queue: boolean isEmpty()>();

        if $z1 == 0 goto label1;

        $r14 = newarray (java.lang.Object)[1];

        $r14[0] = "<<<<<<<<< ProgramTree.getNewReturnPath";

        staticinvoke <safetyChecker.LogUtils: void warningln(java.lang.Object[])>($r14);

        return 0;
    }

    public safetyChecker.Vertex getNewReturnRoot()
    {
        safetyChecker.ProgramTree r0;
        safetyChecker.Vertex r1;
        java.util.Queue $r2, $r3;
        boolean $z0;
        java.lang.Object $r4;
        java.lang.Object[] $r5;
        java.lang.StringBuilder $r6, $r7;
        java.lang.String $r8;

        r0 := @this: safetyChecker.ProgramTree;

        $r2 = r0.<safetyChecker.ProgramTree: java.util.Queue returnRootQueue>;

        $z0 = interfaceinvoke $r2.<java.util.Queue: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $r3 = r0.<safetyChecker.ProgramTree: java.util.Queue returnRootQueue>;

        $r4 = interfaceinvoke $r3.<java.util.Queue: java.lang.Object remove()>();

        r1 = (safetyChecker.Vertex) $r4;

        $r5 = newarray (java.lang.Object)[1];

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>("returnRoot=");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $r5[0] = $r8;

        staticinvoke <safetyChecker.LogUtils: void warningln(java.lang.Object[])>($r5);

        return r1;

     label1:
        return null;
    }

    public boolean isTreeDone()
    {
        safetyChecker.ProgramTree r0;
        boolean z0;
        java.util.Queue $r1;

        r0 := @this: safetyChecker.ProgramTree;

        z0 = 1;

        $r1 = r0.<safetyChecker.ProgramTree: java.util.Queue uncovered>;

        interfaceinvoke $r1.<java.util.Queue: boolean isEmpty()>();

        return z0;
    }

    private void unwind() throws safetyChecker.exception.MainFunctionNotFoundException, safetyChecker.exception.ErrorLocationNotFoundException
    {
        safetyChecker.ProgramTree r0;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z8;
        java.lang.Object[] $r1, $r5, $r16, $r18, $r25, $r32, $r34, $r36, $r39, $r45, $r51, $r61, $r69;
        java.util.Queue $r2, $r3, $r17, $r20, $r23, $r71;
        java.lang.Object $r4, $r24, $r60, $r63, $r66;
        java.lang.StringBuilder $r6, $r8, $r9, $r10, $r11, $r13, $r19, $r21, $r26, $r28, $r40, $r43, $r46, $r49, $r52, $r55, $r62, $r64, $r65, $r67;
        safetyChecker.Edge $r7;
        safetyChecker.CoverRelation $r12, $r15, $r35, $r41, $r47, $r53, $r57, $r70;
        java.lang.String $r14, $r22, $r29, $r33, $r44, $r50, $r56, $r68;
        java.util.HashSet $r27;
        int $i0, $i1, $i2, $i3;
        safetyChecker.Z3ScriptHandler $r30;
        safetyChecker.InterpolationHandler $r31;
        java.util.LinkedList $r37, r74;
        safetyChecker.Vertex $r38, r72, r73;
        java.util.Map $r42, $r48, $r54, $r58;
        java.util.Set $r59;
        java.util.Iterator r75;
        java.util.Map$Entry r76;

        r0 := @this: safetyChecker.ProgramTree;

        $r1 = newarray (java.lang.Object)[1];

        $r1[0] = "----->Unwind";

        staticinvoke <safetyChecker.LogUtils: void infoln(java.lang.Object[])>($r1);

        z0 = 0;

        goto label4;

     label1:
        $r3 = r0.<safetyChecker.ProgramTree: java.util.Queue uncovered>;

        $r4 = interfaceinvoke $r3.<java.util.Queue: java.lang.Object remove()>();

        r72 = (safetyChecker.Vertex) $r4;

        $r5 = newarray (java.lang.Object)[1];

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>()>();

        $r7 = virtualinvoke r72.<safetyChecker.Vertex: safetyChecker.Edge getOutgoingEdge()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("---");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r72);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("--");

        $r12 = r0.<safetyChecker.ProgramTree: safetyChecker.CoverRelation coverRelation>;

        $z2 = virtualinvoke $r12.<safetyChecker.CoverRelation: boolean isCovered(safetyChecker.Vertex)>(r72);

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z2);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        $r5[0] = $r14;

        staticinvoke <safetyChecker.LogUtils: void debugln(java.lang.Object[])>($r5);

        $r15 = r0.<safetyChecker.ProgramTree: safetyChecker.CoverRelation coverRelation>;

        $z3 = virtualinvoke $r15.<safetyChecker.CoverRelation: boolean isCovered(safetyChecker.Vertex)>(r72);

        if $z3 == 0 goto label2;

        goto label4;

     label2:
        specialinvoke r0.<safetyChecker.ProgramTree: boolean expandBFS(safetyChecker.Vertex)>(r72);

        $r16 = newarray (java.lang.Object)[1];

        $r16[0] = "expandBFs is done";

        staticinvoke <safetyChecker.LogUtils: void debugln(java.lang.Object[])>($r16);

        $r17 = r0.<safetyChecker.ProgramTree: java.util.Queue errorRootQueue>;

        $z4 = interfaceinvoke $r17.<java.util.Queue: boolean isEmpty()>();

        if $z4 != 0 goto label4;

        $r18 = newarray (java.lang.Object)[1];

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>(java.lang.String)>("errorRootQueue = ");

        $r20 = r0.<safetyChecker.ProgramTree: java.util.Queue errorRootQueue>;

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        $r18[0] = $r22;

        staticinvoke <safetyChecker.LogUtils: void debugln(java.lang.Object[])>($r18);

        $r23 = r0.<safetyChecker.ProgramTree: java.util.Queue errorRootQueue>;

        $r24 = interfaceinvoke $r23.<java.util.Queue: java.lang.Object remove()>();

        r73 = (safetyChecker.Vertex) $r24;

        $r25 = newarray (java.lang.Object)[1];

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>(java.lang.String)>("error root # = ");

        $r27 = r0.<safetyChecker.ProgramTree: java.util.HashSet errorRootSet>;

        $i0 = virtualinvoke $r27.<java.util.HashSet: int size()>();

        $r28 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        $r25[0] = $r29;

        staticinvoke <safetyChecker.LogUtils: void fatalln(java.lang.Object[])>($r25);

        $r30 = r0.<safetyChecker.ProgramTree: safetyChecker.Z3ScriptHandler z3Handler>;

        virtualinvoke $r30.<safetyChecker.Z3ScriptHandler: void convertPathtoZ3Script(safetyChecker.Vertex)>(r73);

        $r31 = r0.<safetyChecker.ProgramTree: safetyChecker.InterpolationHandler itpHandler>;

        $z5 = virtualinvoke $r31.<safetyChecker.InterpolationHandler: boolean createInterpolant(safetyChecker.Vertex)>(r73);

        r0.<safetyChecker.ProgramTree: boolean errorLocationFeasible> = $z5;

        $r32 = newarray (java.lang.Object)[1];

        $r32[0] = "printing result path";

        staticinvoke <safetyChecker.LogUtils: void debugln(java.lang.Object[])>($r32);

        $r33 = virtualinvoke r73.<safetyChecker.Vertex: java.lang.String toString()>();

        virtualinvoke r0.<safetyChecker.ProgramTree: void printResult(java.lang.String)>($r33);

        $z6 = r0.<safetyChecker.ProgramTree: boolean errorLocationFeasible>;

        if $z6 == 0 goto label3;

        goto label5;

     label3:
        $r34 = newarray (java.lang.Object)[1];

        $r34[0] = "updatecover is calling";

        staticinvoke <safetyChecker.LogUtils: void debugln(java.lang.Object[])>($r34);

        $r35 = r0.<safetyChecker.ProgramTree: safetyChecker.CoverRelation coverRelation>;

        virtualinvoke $r35.<safetyChecker.CoverRelation: void updateCover()>();

        $r36 = newarray (java.lang.Object)[1];

        $r36[0] = "updateCover is done";

        staticinvoke <safetyChecker.LogUtils: void debugln(java.lang.Object[])>($r36);

     label4:
        $r2 = r0.<safetyChecker.ProgramTree: java.util.Queue uncovered>;

        $z1 = interfaceinvoke $r2.<java.util.Queue: boolean isEmpty()>();

        if $z1 == 0 goto label1;

     label5:
        $r37 = new java.util.LinkedList;

        specialinvoke $r37.<java.util.LinkedList: void <init>()>();

        r74 = $r37;

        $r38 = r0.<safetyChecker.ProgramTree: safetyChecker.Vertex returnLeaf>;

        interfaceinvoke r74.<java.util.Queue: boolean add(java.lang.Object)>($r38);

        $r39 = newarray (java.lang.Object)[1];

        $r40 = new java.lang.StringBuilder;

        specialinvoke $r40.<java.lang.StringBuilder: void <init>(java.lang.String)>("coveringVertexMap # ");

        $r41 = r0.<safetyChecker.ProgramTree: safetyChecker.CoverRelation coverRelation>;

        $r42 = virtualinvoke $r41.<safetyChecker.CoverRelation: java.util.Map getCoveringMap()>();

        $i1 = interfaceinvoke $r42.<java.util.Map: int size()>();

        $r43 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.String toString()>();

        $r39[0] = $r44;

        staticinvoke <safetyChecker.LogUtils: void debugln(java.lang.Object[])>($r39);

        $r45 = newarray (java.lang.Object)[1];

        $r46 = new java.lang.StringBuilder;

        specialinvoke $r46.<java.lang.StringBuilder: void <init>(java.lang.String)>("coveredVertexMap # ");

        $r47 = r0.<safetyChecker.ProgramTree: safetyChecker.CoverRelation coverRelation>;

        $r48 = virtualinvoke $r47.<safetyChecker.CoverRelation: java.util.Map getCoveredByMap()>();

        $i2 = interfaceinvoke $r48.<java.util.Map: int size()>();

        $r49 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.String toString()>();

        $r45[0] = $r50;

        staticinvoke <safetyChecker.LogUtils: void debugln(java.lang.Object[])>($r45);

        $r51 = newarray (java.lang.Object)[1];

        $r52 = new java.lang.StringBuilder;

        specialinvoke $r52.<java.lang.StringBuilder: void <init>(java.lang.String)>("unitVertexMap # ");

        $r53 = r0.<safetyChecker.ProgramTree: safetyChecker.CoverRelation coverRelation>;

        $r54 = virtualinvoke $r53.<safetyChecker.CoverRelation: java.util.Map getUnitVertexMap()>();

        $i3 = interfaceinvoke $r54.<java.util.Map: int size()>();

        $r55 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r56 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.String toString()>();

        $r51[0] = $r56;

        staticinvoke <safetyChecker.LogUtils: void debugln(java.lang.Object[])>($r51);

        $r57 = r0.<safetyChecker.ProgramTree: safetyChecker.CoverRelation coverRelation>;

        $r58 = virtualinvoke $r57.<safetyChecker.CoverRelation: java.util.Map getUnitVertexMap()>();

        $r59 = interfaceinvoke $r58.<java.util.Map: java.util.Set entrySet()>();

        r75 = interfaceinvoke $r59.<java.util.Set: java.util.Iterator iterator()>();

        goto label7;

     label6:
        $r60 = interfaceinvoke r75.<java.util.Iterator: java.lang.Object next()>();

        r76 = (java.util.Map$Entry) $r60;

        $r61 = newarray (java.lang.Object)[1];

        $r62 = new java.lang.StringBuilder;

        specialinvoke $r62.<java.lang.StringBuilder: void <init>()>();

        $r63 = interfaceinvoke r76.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r64 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r63);

        $r65 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("--");

        $r66 = interfaceinvoke r76.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r67 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r66);

        $r68 = virtualinvoke $r67.<java.lang.StringBuilder: java.lang.String toString()>();

        $r61[0] = $r68;

        staticinvoke <safetyChecker.LogUtils: void debugln(java.lang.Object[])>($r61);

        $r69 = newarray (java.lang.Object)[1];

        $r69[0] = "-------------";

        staticinvoke <safetyChecker.LogUtils: void debugln(java.lang.Object[])>($r69);

     label7:
        $z8 = interfaceinvoke r75.<java.util.Iterator: boolean hasNext()>();

        if $z8 != 0 goto label6;

        staticinvoke <dotty.CfgConverter: void printAllPaths(java.util.Queue,java.lang.String)>(r74, "_all.dot");

        $r71 = r0.<safetyChecker.ProgramTree: java.util.Queue errorSet>;

        $r70 = r0.<safetyChecker.ProgramTree: safetyChecker.CoverRelation coverRelation>;

        staticinvoke <dotty.CfgConverter: void printErrorPaths(java.util.Queue,java.lang.String,safetyChecker.CoverRelation)>($r71, "_errors.dot", $r70);

        return;
    }

    private boolean expandBFS(safetyChecker.Vertex) throws safetyChecker.exception.MainFunctionNotFoundException, safetyChecker.exception.ErrorLocationNotFoundException
    {
        safetyChecker.ProgramTree r0;
        safetyChecker.Vertex r1, r4, $r34;
        safetyChecker.Edge r2, r7, $r12, $r29, $r44, $r49;
        java.util.Iterator r3, r6;
        soot.Unit r5, $r38, $r41;
        java.lang.Object[] $r8, $r19, $r27;
        java.lang.StringBuilder $r9, $r10, $r11, $r13, $r14, $r16, $r20, $r22, $r23, $r25, $r28, $r30;
        safetyChecker.CoverRelation $r15, $r18, $r56;
        boolean $z0, $z1, $z2, $z3, $z5, $z7, $z8, $z9, $z12, $z14, $z18, z19, z19_1, z19_2, z19_3, z19_4, z19_5;
        java.lang.String $r17, $r26, $r31;
        java.util.Set $r21, $r24, $r32, $r35;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        java.lang.Object $r33, $r43;
        java.util.Queue $r36, $r47, $r50, $r51, $r52, $r54, $r55;
        soot.toolkits.graph.ExceptionalUnitGraph $r37, $r40;
        java.util.List $r39, $r42;
        java.util.Map $r45;
        safetyChecker.UnitController $r46;
        java.util.LinkedList $r48;
        java.util.HashSet $r53;

        r0 := @this: safetyChecker.ProgramTree;

        r1 := @parameter0: safetyChecker.Vertex;

        $r8 = newarray (java.lang.Object)[1];

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>(java.lang.String)>("----->expand : ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("--");

        $r12 = virtualinvoke r1.<safetyChecker.Vertex: safetyChecker.Edge getOutgoingEdge()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r12);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("--");

        $r15 = r0.<safetyChecker.ProgramTree: safetyChecker.CoverRelation coverRelation>;

        $z0 = virtualinvoke $r15.<safetyChecker.CoverRelation: boolean isCovered(safetyChecker.Vertex)>(r1);

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8[0] = $r17;

        staticinvoke <safetyChecker.LogUtils: void debugln(java.lang.Object[])>($r8);

        z19 = 0;

        $r18 = r0.<safetyChecker.ProgramTree: safetyChecker.CoverRelation coverRelation>;

        $z1 = virtualinvoke $r18.<safetyChecker.CoverRelation: boolean isCovered(safetyChecker.Vertex)>(r1);

(0)     if $z1 != 0 goto label10;

        $r27 = newarray (java.lang.Object)[1];

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>(java.lang.String)>("if (!coverRelation.isCovered(w))---");

        $r29 = virtualinvoke r1.<safetyChecker.Vertex: safetyChecker.Edge getOutgoingEdge()>();

        $r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r29);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        $r27[0] = $r31;

        staticinvoke <safetyChecker.LogUtils: void debugln(java.lang.Object[])>($r27);

        $r32 = virtualinvoke r1.<safetyChecker.Vertex: java.util.Set getIncomingEdges()>();

        r3 = interfaceinvoke $r32.<java.util.Set: java.util.Iterator iterator()>();

(1)     goto label09;

     label01:
        $r33 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r2 = (safetyChecker.Edge) $r33;

        $r34 = new safetyChecker.Vertex;

        specialinvoke $r34.<safetyChecker.Vertex: void <init>()>();

        r4 = $r34;

        virtualinvoke r4.<safetyChecker.Vertex: void setOutgoingEdge(safetyChecker.Edge)>(r2);

        virtualinvoke r2.<safetyChecker.Edge: void setSource(safetyChecker.Vertex)>(r4);

        $z3 = virtualinvoke r2.<safetyChecker.Edge: boolean isControlLocation()>();

        if $z3 == 0 goto label02;

        $r56 = r0.<safetyChecker.ProgramTree: safetyChecker.CoverRelation coverRelation>;

        virtualinvoke $r56.<safetyChecker.CoverRelation: void updateUnitVertexMap(safetyChecker.Edge)>(r2);

     label02:
        virtualinvoke r4.<safetyChecker.Vertex: void setNextVertex(safetyChecker.Vertex)>(r1);

        $i2 = virtualinvoke r1.<safetyChecker.Vertex: int getDistance()>();

        $i3 = $i2 + 1;

        virtualinvoke r4.<safetyChecker.Vertex: void setDistance(int)>($i3);

        $i4 = r0.<safetyChecker.ProgramTree: int locationCounter>;

        $i5 = $i4 + 1;

        r0.<safetyChecker.ProgramTree: int locationCounter> = $i5;

        virtualinvoke r4.<safetyChecker.Vertex: void setLocationNumber(int)>($i5);

        virtualinvoke r1.<safetyChecker.Vertex: void addPreviousVertex(safetyChecker.Vertex)>(r4);

        $r35 = r0.<safetyChecker.ProgramTree: java.util.Set vertexSet>;

        interfaceinvoke $r35.<java.util.Set: boolean add(java.lang.Object)>(r4);

        $z5 = virtualinvoke r2.<safetyChecker.Edge: boolean isInErrorPath()>();

        if $z5 != 0 goto label03;

        $r55 = r0.<safetyChecker.ProgramTree: java.util.Queue errorSet>;

        $z18 = interfaceinvoke $r55.<java.util.Queue: boolean isEmpty()>();

        if $z18 != 0 goto label03;

(2)     goto label09;

     label03:
        $r36 = r0.<safetyChecker.ProgramTree: java.util.Queue uncovered>;

        interfaceinvoke $r36.<java.util.Queue: boolean add(java.lang.Object)>(r4);

        $r37 = r0.<safetyChecker.ProgramTree: soot.toolkits.graph.ExceptionalUnitGraph cfg>;

        $r38 = virtualinvoke r2.<safetyChecker.Edge: soot.Unit getUnit()>();

        $r39 = virtualinvoke $r37.<soot.toolkits.graph.ExceptionalUnitGraph: java.util.List getUnexceptionalPredsOf(soot.Unit)>($r38);

        $i6 = interfaceinvoke $r39.<java.util.List: int size()>();

(3)     if $i6 != 0 goto label05;

        virtualinvoke r4.<safetyChecker.Vertex: void setHeadLocation(boolean)>(1);

        $z14 = virtualinvoke r2.<safetyChecker.Edge: boolean isInErrorPath()>();

        if $z14 == 0 goto label04;

        $r53 = r0.<safetyChecker.ProgramTree: java.util.HashSet errorRootSet>;

        virtualinvoke $r53.<java.util.HashSet: boolean add(java.lang.Object)>(r4);

        $r54 = r0.<safetyChecker.ProgramTree: java.util.Queue errorRootQueue>;

        interfaceinvoke $r54.<java.util.Queue: boolean add(java.lang.Object)>(r4);

        z19_2 = 1;

(4)     goto label05;

     label04:
        $r52 = r0.<safetyChecker.ProgramTree: java.util.Queue returnRootQueue>;

        interfaceinvoke $r52.<java.util.Queue: boolean add(java.lang.Object)>(r4);

(5)     z19_3 = 1;

     label05:
        z19_4 = Phi(z19_1 #3, z19_2 #4, z19_3 #5);

        $r40 = r0.<safetyChecker.ProgramTree: soot.toolkits.graph.ExceptionalUnitGraph cfg>;

        $r41 = virtualinvoke r2.<safetyChecker.Edge: soot.Unit getUnit()>();

        $r42 = virtualinvoke $r40.<soot.toolkits.graph.ExceptionalUnitGraph: java.util.List getPredsOf(soot.Unit)>($r41);

        r6 = interfaceinvoke $r42.<java.util.List: java.util.Iterator iterator()>();

        goto label08;

     label06:
        $r43 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        r5 = (soot.Unit) $r43;

        $r44 = new safetyChecker.Edge;

        specialinvoke $r44.<safetyChecker.Edge: void <init>(soot.Unit)>(r5);

        r7 = $r44;

        virtualinvoke r7.<safetyChecker.Edge: void setTarget(safetyChecker.Vertex)>(r4);

        virtualinvoke r7.<safetyChecker.Edge: void setProgramTree(safetyChecker.ProgramTree)>(r0);

        virtualinvoke r4.<safetyChecker.Vertex: void addIncomingEdge(safetyChecker.Edge)>(r7);

        $r46 = r0.<safetyChecker.ProgramTree: safetyChecker.UnitController unitController>;

        $r45 = r0.<safetyChecker.ProgramTree: java.util.Map stores>;

        virtualinvoke $r46.<safetyChecker.UnitController: void analyzeEdge(safetyChecker.Edge,java.util.Map)>(r7, $r45);

        $z8 = virtualinvoke r7.<safetyChecker.Edge: boolean isSubFunction()>();

        if $z8 == 0 goto label07;

        $r48 = r0.<safetyChecker.ProgramTree: java.util.LinkedList subFunctionList>;

        virtualinvoke $r48.<java.util.LinkedList: boolean add(java.lang.Object)>(r7);

     label07:
        $z9 = virtualinvoke r7.<safetyChecker.Edge: boolean isErrorEdge()>();

        if $z9 == 0 goto label08;

        $r47 = r0.<safetyChecker.ProgramTree: java.util.Queue errorSet>;

        interfaceinvoke $r47.<java.util.Queue: boolean add(java.lang.Object)>(r4);

     label08:
        $z7 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z7 != 0 goto label06;

        $r49 = virtualinvoke r4.<safetyChecker.Vertex: safetyChecker.Edge getOutgoingEdge()>();

        $z12 = virtualinvoke $r49.<safetyChecker.Edge: boolean isErrorEdge()>();

(6)     if $z12 == 0 goto label09;

        $r50 = r0.<safetyChecker.ProgramTree: java.util.Queue uncovered>;

        interfaceinvoke $r50.<java.util.Queue: void clear()>();

        $r51 = r0.<safetyChecker.ProgramTree: java.util.Queue uncovered>;

(7)     interfaceinvoke $r51.<java.util.Queue: boolean add(java.lang.Object)>(r4);

     label09:
        z19_1 = Phi(z19 #1, z19_1 #2, z19_4 #6, z19_4 #7);

        $z2 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

(8)     if $z2 != 0 goto label01;

     label10:
        z19_5 = Phi(z19 #0, z19_1 #8);

        $r19 = newarray (java.lang.Object)[1];

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>(java.lang.String)>("<-----expand : w.incomingEdge#");

        $r21 = virtualinvoke r1.<safetyChecker.Vertex: java.util.Set getIncomingEdges()>();

        $i0 = interfaceinvoke $r21.<java.util.Set: int size()>();

        $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" : w.previousVertexSet#");

        $r24 = virtualinvoke r1.<safetyChecker.Vertex: java.util.Set getPreviousVertexSet()>();

        $i1 = interfaceinvoke $r24.<java.util.Set: int size()>();

        $r25 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        $r19[0] = $r26;

        staticinvoke <safetyChecker.LogUtils: void debugln(java.lang.Object[])>($r19);

        return z19_5;
    }

    private void refine(safetyChecker.Vertex)
    {
        safetyChecker.ProgramTree r0;
        safetyChecker.Vertex r1;

        r0 := @this: safetyChecker.ProgramTree;

        r1 := @parameter0: safetyChecker.Vertex;

        return;
    }

    public java.lang.String getProgramDefinition()
    {
        safetyChecker.ProgramTree r0;
        java.lang.StringBuilder $r1, $r3, $r4, $r8;
        java.lang.String $r2, $r5, $r9;
        java.util.Map $r6;
        java.lang.Object $r7;

        r0 := @this: safetyChecker.ProgramTree;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>("_");

        $r2 = r0.<safetyChecker.ProgramTree: java.lang.String functionName>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_");

        $r6 = <safetyChecker.ProgramTree: java.util.Map functionNameInvokeCount>;

        $r5 = r0.<safetyChecker.ProgramTree: java.lang.String functionName>;

        $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>($r5);

        $r8 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;
    }

    public java.lang.String getFunctionName()
    {
        safetyChecker.ProgramTree r0;
        java.lang.String $r1;

        r0 := @this: safetyChecker.ProgramTree;

        $r1 = r0.<safetyChecker.ProgramTree: java.lang.String functionName>;

        return $r1;
    }

    public void printResult(java.lang.String)
    {
        safetyChecker.ProgramTree r0;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: safetyChecker.ProgramTree;

        r1 := @parameter0: java.lang.String;

        $z0 = r0.<safetyChecker.ProgramTree: boolean errorLocationFeasible>;

        staticinvoke <safetyChecker.LogUtils: void printResult(java.lang.String,boolean)>(r1, $z0);

        return;
    }
}
