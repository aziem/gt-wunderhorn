public class safetyChecker.ProgramTree extends java.lang.Object
{
    private safetyChecker.Vertex root;
    private java.util.Set liSet;
    private safetyChecker.Vertex lf;
    private java.util.Map stores;
    private java.util.Set edgeSet;
    private java.util.Stack path;
    private com.microsoft.z3.InterpolationContext ictx;
    private safetyChecker.z3ScriptManager.Z3ScriptHandler z3Handler;
    private safetyChecker.InterpolationHandler itpHandler;
    private boolean errorLocationFeasible;
    private boolean mainFunction;
    private boolean treeClosed;
    private java.util.LinkedList subFunctionList;
    private java.util.HashSet errorRootSet;
    private java.util.Queue errorRootQueue;
    private java.util.Queue returnRootQueue;
    private java.util.LinkedList returnPaths;
    private java.util.LinkedList errorPaths;
    private java.lang.String functionSignature;
    private java.lang.String functionName;
    private static java.util.Map functionNameInvokeCount;
    private soot.toolkits.graph.ExceptionalUnitGraph cfg;
    private java.lang.String signature;
    private safetyChecker.UnitController unitController;
    private safetyChecker.CoverRelation coverRelation;
    private java.util.Queue uncovered;
    private java.util.Queue errorSet;
    private int locationCounter;
    private boolean subTree;
    private safetyChecker.Vertex calllerVertex;
    private java.util.HashMap candidate2BeInPath;
    private java.util.HashMap treeConnection;

    static void <clinit>()
    {
        java.util.HashMap $r0;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        <safetyChecker.ProgramTree: java.util.Map functionNameInvokeCount> = $r0;

        return;
    }

    public void <init>(java.util.Map, java.lang.String) throws safetyChecker.exception.MainFunctionNotFoundException, safetyChecker.exception.ErrorLocationNotFoundException
    {
        safetyChecker.ProgramTree r0;
        java.util.Map r1;
        java.lang.String r2;

        r0 := @this: safetyChecker.ProgramTree;

        r1 := @parameter0: java.util.Map;

        r2 := @parameter1: java.lang.String;

        specialinvoke r0.<safetyChecker.ProgramTree: void <init>(java.util.Map,java.lang.String,boolean)>(r1, r2, 1);

        return;
    }

    public void <init>(java.util.Map, java.lang.String, boolean, safetyChecker.Vertex) throws safetyChecker.exception.MainFunctionNotFoundException, safetyChecker.exception.ErrorLocationNotFoundException
    {
        safetyChecker.ProgramTree r0;
        java.util.Map r1;
        java.lang.String r2;
        boolean z0, z1, $z2, $z2_1, $z2_2;
        safetyChecker.Vertex r3;

        r0 := @this: safetyChecker.ProgramTree;

        r1 := @parameter0: java.util.Map;

        r2 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        r3 := @parameter3: safetyChecker.Vertex;

        specialinvoke r0.<safetyChecker.ProgramTree: void <init>(java.util.Map,java.lang.String,boolean)>(r1, r2, z0);

        if z0 == 0 goto label1;

        $z2 = 0;

(0)     goto label2;

     label1:
(1)     $z2_1 = 1;

     label2:
        $z2_2 = Phi($z2 #0, $z2_1 #1);

        r0.<safetyChecker.ProgramTree: boolean subTree> = $z2_2;

        r0.<safetyChecker.ProgramTree: safetyChecker.Vertex calllerVertex> = r3;

        z1 = specialinvoke r0.<safetyChecker.ProgramTree: boolean findSubFunction()>();

        return;
    }

    public void <init>(java.util.Map, java.lang.String, boolean) throws safetyChecker.exception.MainFunctionNotFoundException, safetyChecker.exception.ErrorLocationNotFoundException
    {
        safetyChecker.ProgramTree r0;
        java.util.Map r1;
        java.lang.String r2, $r29, $r32, $r33, $r35, $r39;
        boolean z0, $z1, $z2, $z3, z4, z4_1, z4_2;
        java.util.HashSet $r3, $r11;
        java.util.Stack $r4;
        java.util.LinkedList $r5, $r6, $r10, $r12, $r13, $r14, $r15;
        java.util.HashMap $r7, $r8;
        java.lang.Object[] $r9, $r26, $r36;
        safetyChecker.UnitController $r16;
        com.microsoft.z3.InterpolationContext $r17, $r19, $r21, $r25;
        safetyChecker.z3ScriptManager.Z3ScriptHandler $r18, $r24;
        safetyChecker.CoverRelation $r20, $r23;
        safetyChecker.InterpolationHandler $r22;
        java.lang.StringBuilder $r27, $r28, $r31, $r34, $r37, $r38;
        safetyChecker.exception.MainFunctionNotFoundException $r30;

        r0 := @this: safetyChecker.ProgramTree;

        r1 := @parameter0: java.util.Map;

        r2 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = new java.util.HashSet;

        specialinvoke $r3.<java.util.HashSet: void <init>()>();

        r0.<safetyChecker.ProgramTree: java.util.Set edgeSet> = $r3;

        $r4 = new java.util.Stack;

        specialinvoke $r4.<java.util.Stack: void <init>()>();

        r0.<safetyChecker.ProgramTree: java.util.Stack path> = $r4;

        r0.<safetyChecker.ProgramTree: boolean errorLocationFeasible> = 0;

        $r5 = new java.util.LinkedList;

        specialinvoke $r5.<java.util.LinkedList: void <init>()>();

        r0.<safetyChecker.ProgramTree: java.util.Queue uncovered> = $r5;

        $r6 = new java.util.LinkedList;

        specialinvoke $r6.<java.util.LinkedList: void <init>()>();

        r0.<safetyChecker.ProgramTree: java.util.Queue errorSet> = $r6;

        r0.<safetyChecker.ProgramTree: int locationCounter> = 0;

        r0.<safetyChecker.ProgramTree: boolean subTree> = 0;

        $r7 = new java.util.HashMap;

        specialinvoke $r7.<java.util.HashMap: void <init>()>();

        r0.<safetyChecker.ProgramTree: java.util.HashMap candidate2BeInPath> = $r7;

        $r8 = new java.util.HashMap;

        specialinvoke $r8.<java.util.HashMap: void <init>()>();

        r0.<safetyChecker.ProgramTree: java.util.HashMap treeConnection> = $r8;

        $r9 = newarray (java.lang.Object)[1];

        $r9[0] = "------->ProgramTree";

        staticinvoke <safetyChecker.utilities.LogUtils: void infoln(java.lang.Object[])>($r9);

        r0.<safetyChecker.ProgramTree: boolean errorLocationFeasible> = 0;

        $r10 = new java.util.LinkedList;

        specialinvoke $r10.<java.util.LinkedList: void <init>()>();

        r0.<safetyChecker.ProgramTree: java.util.LinkedList subFunctionList> = $r10;

        $r11 = new java.util.HashSet;

        specialinvoke $r11.<java.util.HashSet: void <init>()>();

        r0.<safetyChecker.ProgramTree: java.util.HashSet errorRootSet> = $r11;

        $r12 = new java.util.LinkedList;

        specialinvoke $r12.<java.util.LinkedList: void <init>()>();

        r0.<safetyChecker.ProgramTree: java.util.Queue errorRootQueue> = $r12;

        $r13 = new java.util.LinkedList;

        specialinvoke $r13.<java.util.LinkedList: void <init>()>();

        r0.<safetyChecker.ProgramTree: java.util.Queue returnRootQueue> = $r13;

        $r14 = new java.util.LinkedList;

        specialinvoke $r14.<java.util.LinkedList: void <init>()>();

        r0.<safetyChecker.ProgramTree: java.util.LinkedList returnPaths> = $r14;

        $r15 = new java.util.LinkedList;

        specialinvoke $r15.<java.util.LinkedList: void <init>()>();

        r0.<safetyChecker.ProgramTree: java.util.LinkedList errorPaths> = $r15;

        r0.<safetyChecker.ProgramTree: java.lang.String functionSignature> = r2;

        r0.<safetyChecker.ProgramTree: java.util.Map stores> = r1;

        $r16 = new safetyChecker.UnitController;

        specialinvoke $r16.<safetyChecker.UnitController: void <init>()>();

        r0.<safetyChecker.ProgramTree: safetyChecker.UnitController unitController> = $r16;

        r0.<safetyChecker.ProgramTree: boolean mainFunction> = z0;

        $r17 = new com.microsoft.z3.InterpolationContext;

        specialinvoke $r17.<com.microsoft.z3.InterpolationContext: void <init>()>();

        r0.<safetyChecker.ProgramTree: com.microsoft.z3.InterpolationContext ictx> = $r17;

        $r18 = new safetyChecker.z3ScriptManager.Z3ScriptHandler;

        $r19 = r0.<safetyChecker.ProgramTree: com.microsoft.z3.InterpolationContext ictx>;

        specialinvoke $r18.<safetyChecker.z3ScriptManager.Z3ScriptHandler: void <init>(com.microsoft.z3.InterpolationContext,java.util.Map)>($r19, r1);

        r0.<safetyChecker.ProgramTree: safetyChecker.z3ScriptManager.Z3ScriptHandler z3Handler> = $r18;

        $r20 = new safetyChecker.CoverRelation;

        $r21 = r0.<safetyChecker.ProgramTree: com.microsoft.z3.InterpolationContext ictx>;

        specialinvoke $r20.<safetyChecker.CoverRelation: void <init>(com.microsoft.z3.InterpolationContext,safetyChecker.ProgramTree)>($r21, r0);

        r0.<safetyChecker.ProgramTree: safetyChecker.CoverRelation coverRelation> = $r20;

        $r22 = new safetyChecker.InterpolationHandler;

        $r25 = r0.<safetyChecker.ProgramTree: com.microsoft.z3.InterpolationContext ictx>;

        $r24 = r0.<safetyChecker.ProgramTree: safetyChecker.z3ScriptManager.Z3ScriptHandler z3Handler>;

        $r23 = r0.<safetyChecker.ProgramTree: safetyChecker.CoverRelation coverRelation>;

        specialinvoke $r22.<safetyChecker.InterpolationHandler: void <init>(com.microsoft.z3.InterpolationContext,safetyChecker.z3ScriptManager.Z3ScriptHandler,safetyChecker.CoverRelation)>($r25, $r24, $r23);

        r0.<safetyChecker.ProgramTree: safetyChecker.InterpolationHandler itpHandler> = $r22;

        $z1 = r0.<safetyChecker.ProgramTree: boolean mainFunction>;

        if $z1 == 0 goto label1;

        $r36 = newarray (java.lang.Object)[1];

        $r37 = new java.lang.StringBuilder;

        specialinvoke $r37.<java.lang.StringBuilder: void <init>(java.lang.String)>("mainFunction = ");

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>();

        $r36[0] = $r39;

        staticinvoke <safetyChecker.utilities.LogUtils: void detailln(java.lang.Object[])>($r36);

        goto label2;

     label1:
        $r26 = newarray (java.lang.Object)[1];

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>(java.lang.String)>("subFunction = ");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        $r26[0] = $r29;

        staticinvoke <safetyChecker.utilities.LogUtils: void detailln(java.lang.Object[])>($r26);

     label2:
        z4 = 0;

(0)     if z0 == 0 goto label3;

(1)     z4_1 = specialinvoke r0.<safetyChecker.ProgramTree: boolean findMainFunction()>();

     label3:
        z4_2 = Phi(z4 #0, z4_1 #1);

        if z4_2 == 0 goto label4;

        $z3 = r0.<safetyChecker.ProgramTree: boolean mainFunction>;

        if $z3 == 0 goto label4;

        specialinvoke r0.<safetyChecker.ProgramTree: void startTest()>();

        goto label5;

     label4:
        $z2 = r0.<safetyChecker.ProgramTree: boolean mainFunction>;

        if $z2 == 0 goto label5;

        $r30 = new safetyChecker.exception.MainFunctionNotFoundException;

        $r31 = new java.lang.StringBuilder;

        $r32 = r0.<safetyChecker.ProgramTree: java.lang.String functionSignature>;

        $r33 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r32);

        specialinvoke $r31.<java.lang.StringBuilder: void <init>(java.lang.String)>($r33);

        $r34 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not exist in the current program");

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r30.<safetyChecker.exception.MainFunctionNotFoundException: void <init>(java.lang.String)>($r35);

        throw $r30;

     label5:
        return;
    }

    private void startTest() throws safetyChecker.exception.ErrorLocationNotFoundException, safetyChecker.exception.MainFunctionNotFoundException
    {
        safetyChecker.ProgramTree r0;
        java.lang.Object[] $r1, $r2;

        r0 := @this: safetyChecker.ProgramTree;

        $r1 = newarray (java.lang.Object)[1];

        $r1[0] = "------------>startTest()";

        staticinvoke <safetyChecker.utilities.LogUtils: void detailln(java.lang.Object[])>($r1);

        specialinvoke r0.<safetyChecker.ProgramTree: void unwind()>();

        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = "<-------------startTest";

        staticinvoke <safetyChecker.utilities.LogUtils: void detailln(java.lang.Object[])>($r2);

        return;
    }

    private boolean findMainFunction()
    {
        safetyChecker.ProgramTree r0;
        soot.Body r1, $r10;
        safetyChecker.Edge r2, $r26;
        boolean z0, $z1, $z2, $z3, $z3_1, $z3_2, $z3_3;
        safetyChecker.Vertex r3, $r23, $r34;
        java.lang.String $r4, $r7, $r11, $r15, $r16, $r19, $r22, $r35, $r38;
        java.util.Map $r5, $r8, $r12, $r17, $r18, $r36, $r37;
        soot.toolkits.graph.ExceptionalUnitGraph $r6, $r24, $r27, $r31;
        java.lang.Object $r9, $r13, $r29, $r39;
        soot.SootMethod $r14;
        java.lang.Integer $r20, $r40, $r41;
        java.util.List $r25, $r28, $r33;
        int $i0, $i1, $i2, $i3, i4, i4_1, i4_2;
        soot.Unit $r30, $r32;

        r0 := @this: safetyChecker.ProgramTree;

        $r5 = r0.<safetyChecker.ProgramTree: java.util.Map stores>;

        $r4 = r0.<safetyChecker.ProgramTree: java.lang.String functionSignature>;

        $z1 = interfaceinvoke $r5.<java.util.Map: boolean containsKey(java.lang.Object)>($r4);

        if $z1 == 0 goto label7;

        $r6 = new soot.toolkits.graph.ExceptionalUnitGraph;

        $r8 = r0.<safetyChecker.ProgramTree: java.util.Map stores>;

        $r7 = r0.<safetyChecker.ProgramTree: java.lang.String functionSignature>;

        $r9 = interfaceinvoke $r8.<java.util.Map: java.lang.Object get(java.lang.Object)>($r7);

        $r10 = (soot.Body) $r9;

        specialinvoke $r6.<soot.toolkits.graph.ExceptionalUnitGraph: void <init>(soot.Body)>($r10);

        r0.<safetyChecker.ProgramTree: soot.toolkits.graph.ExceptionalUnitGraph cfg> = $r6;

        $r12 = r0.<safetyChecker.ProgramTree: java.util.Map stores>;

        $r11 = r0.<safetyChecker.ProgramTree: java.lang.String functionSignature>;

        $r13 = interfaceinvoke $r12.<java.util.Map: java.lang.Object get(java.lang.Object)>($r11);

        r1 = (soot.Body) $r13;

        $r14 = virtualinvoke r1.<soot.Body: soot.SootMethod getMethod()>();

        $r15 = virtualinvoke $r14.<soot.SootMethod: java.lang.String getName()>();

        r0.<safetyChecker.ProgramTree: java.lang.String functionName> = $r15;

        $r17 = <safetyChecker.ProgramTree: java.util.Map functionNameInvokeCount>;

        $r16 = r0.<safetyChecker.ProgramTree: java.lang.String functionName>;

        $z2 = interfaceinvoke $r17.<java.util.Map: boolean containsKey(java.lang.Object)>($r16);

        if $z2 == 0 goto label1;

        $r37 = <safetyChecker.ProgramTree: java.util.Map functionNameInvokeCount>;

        $r38 = r0.<safetyChecker.ProgramTree: java.lang.String functionName>;

        $r36 = <safetyChecker.ProgramTree: java.util.Map functionNameInvokeCount>;

        $r35 = r0.<safetyChecker.ProgramTree: java.lang.String functionName>;

        $r39 = interfaceinvoke $r36.<java.util.Map: java.lang.Object get(java.lang.Object)>($r35);

        $r40 = (java.lang.Integer) $r39;

        $i2 = virtualinvoke $r40.<java.lang.Integer: int intValue()>();

        $i3 = $i2 + 1;

        $r41 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        interfaceinvoke $r37.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r38, $r41);

        goto label2;

     label1:
        $r18 = <safetyChecker.ProgramTree: java.util.Map functionNameInvokeCount>;

        $r19 = r0.<safetyChecker.ProgramTree: java.lang.String functionName>;

        $r20 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        interfaceinvoke $r18.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r19, $r20);

     label2:
        $r22 = r0.<safetyChecker.ProgramTree: java.lang.String functionSignature>;

        r0.<safetyChecker.ProgramTree: java.lang.String signature> = $r22;

        $r23 = new safetyChecker.Vertex;

        specialinvoke $r23.<safetyChecker.Vertex: void <init>()>();

        r0.<safetyChecker.ProgramTree: safetyChecker.Vertex root> = $r23;

        i4 = 0;

(0)     goto label6;

     label3:
        $r26 = new safetyChecker.Edge;

        $r27 = r0.<safetyChecker.ProgramTree: soot.toolkits.graph.ExceptionalUnitGraph cfg>;

        $r28 = virtualinvoke $r27.<soot.toolkits.graph.ExceptionalUnitGraph: java.util.List getTails()>();

        $r29 = interfaceinvoke $r28.<java.util.List: java.lang.Object get(int)>(i4_1);

        $r30 = (soot.Unit) $r29;

        specialinvoke $r26.<safetyChecker.Edge: void <init>(soot.Unit)>($r30);

        r2 = $r26;

        virtualinvoke r2.<safetyChecker.Edge: void setReturnEdge(boolean)>(1);

        virtualinvoke r2.<safetyChecker.Edge: void setProgramTree(safetyChecker.ProgramTree)>(r0);

        $r31 = r0.<safetyChecker.ProgramTree: soot.toolkits.graph.ExceptionalUnitGraph cfg>;

        $r32 = virtualinvoke r2.<safetyChecker.Edge: soot.Unit getUnit()>();

        $r33 = virtualinvoke $r31.<soot.toolkits.graph.ExceptionalUnitGraph: java.util.List getUnexceptionalPredsOf(soot.Unit)>($r32);

        $i1 = interfaceinvoke $r33.<java.util.List: int size()>();

        if $i1 <= 1 goto label4;

        $z3_1 = 1;

(1)     goto label5;

     label4:
(2)     $z3_2 = 0;

     label5:
        $z3_3 = Phi($z3_1 #1, $z3_2 #2);

        z0 = $z3_3;

        $r34 = r0.<safetyChecker.ProgramTree: safetyChecker.Vertex root>;

        r3 = specialinvoke r0.<safetyChecker.ProgramTree: safetyChecker.Vertex addVertex(safetyChecker.Vertex,safetyChecker.Edge,boolean)>($r34, r2, z0);

        virtualinvoke r3.<safetyChecker.Vertex: void setReturnLocation(boolean)>(1);

(3)     i4_2 = i4_1 + 1;

     label6:
        $z3 = Phi($z3 #0, $z3_3 #3);

        i4_1 = Phi(i4 #0, i4_2 #3);

        $r24 = r0.<safetyChecker.ProgramTree: soot.toolkits.graph.ExceptionalUnitGraph cfg>;

        $r25 = virtualinvoke $r24.<soot.toolkits.graph.ExceptionalUnitGraph: java.util.List getTails()>();

        $i0 = interfaceinvoke $r25.<java.util.List: int size()>();

        if i4_1 < $i0 goto label3;

        return 1;

     label7:
        return 0;
    }

    private boolean findSubFunction()
    {
        safetyChecker.ProgramTree r0;
        soot.Body r1, $r10;
        safetyChecker.Edge r2, $r28;
        boolean z0, $z1, $z2, $z3, $z3_1, $z3_2, $z3_3;
        safetyChecker.Vertex r3, $r23, $r24, $r25, $r36;
        java.lang.String $r4, $r7, $r11, $r15, $r16, $r19, $r22, $r37, $r40;
        java.util.Map $r5, $r8, $r12, $r17, $r18, $r38, $r39;
        soot.toolkits.graph.ExceptionalUnitGraph $r6, $r26, $r29, $r33;
        java.lang.Object $r9, $r13, $r31, $r41;
        soot.SootMethod $r14;
        java.lang.Integer $r20, $r42, $r43;
        int $i0, $i1, $i2, $i3, $i4, i5, i5_1, i5_2;
        java.util.List $r27, $r30, $r35;
        soot.Unit $r32, $r34;

        r0 := @this: safetyChecker.ProgramTree;

        $r5 = r0.<safetyChecker.ProgramTree: java.util.Map stores>;

        $r4 = r0.<safetyChecker.ProgramTree: java.lang.String functionSignature>;

        $z1 = interfaceinvoke $r5.<java.util.Map: boolean containsKey(java.lang.Object)>($r4);

        if $z1 == 0 goto label7;

        $r6 = new soot.toolkits.graph.ExceptionalUnitGraph;

        $r8 = r0.<safetyChecker.ProgramTree: java.util.Map stores>;

        $r7 = r0.<safetyChecker.ProgramTree: java.lang.String functionSignature>;

        $r9 = interfaceinvoke $r8.<java.util.Map: java.lang.Object get(java.lang.Object)>($r7);

        $r10 = (soot.Body) $r9;

        specialinvoke $r6.<soot.toolkits.graph.ExceptionalUnitGraph: void <init>(soot.Body)>($r10);

        r0.<safetyChecker.ProgramTree: soot.toolkits.graph.ExceptionalUnitGraph cfg> = $r6;

        $r12 = r0.<safetyChecker.ProgramTree: java.util.Map stores>;

        $r11 = r0.<safetyChecker.ProgramTree: java.lang.String functionSignature>;

        $r13 = interfaceinvoke $r12.<java.util.Map: java.lang.Object get(java.lang.Object)>($r11);

        r1 = (soot.Body) $r13;

        $r14 = virtualinvoke r1.<soot.Body: soot.SootMethod getMethod()>();

        $r15 = virtualinvoke $r14.<soot.SootMethod: java.lang.String getName()>();

        r0.<safetyChecker.ProgramTree: java.lang.String functionName> = $r15;

        $r17 = <safetyChecker.ProgramTree: java.util.Map functionNameInvokeCount>;

        $r16 = r0.<safetyChecker.ProgramTree: java.lang.String functionName>;

        $z2 = interfaceinvoke $r17.<java.util.Map: boolean containsKey(java.lang.Object)>($r16);

        if $z2 == 0 goto label1;

        $r39 = <safetyChecker.ProgramTree: java.util.Map functionNameInvokeCount>;

        $r40 = r0.<safetyChecker.ProgramTree: java.lang.String functionName>;

        $r38 = <safetyChecker.ProgramTree: java.util.Map functionNameInvokeCount>;

        $r37 = r0.<safetyChecker.ProgramTree: java.lang.String functionName>;

        $r41 = interfaceinvoke $r38.<java.util.Map: java.lang.Object get(java.lang.Object)>($r37);

        $r42 = (java.lang.Integer) $r41;

        $i3 = virtualinvoke $r42.<java.lang.Integer: int intValue()>();

        $i4 = $i3 + 1;

        $r43 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4);

        interfaceinvoke $r39.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r40, $r43);

        goto label2;

     label1:
        $r18 = <safetyChecker.ProgramTree: java.util.Map functionNameInvokeCount>;

        $r19 = r0.<safetyChecker.ProgramTree: java.lang.String functionName>;

        $r20 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        interfaceinvoke $r18.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r19, $r20);

     label2:
        $r22 = r0.<safetyChecker.ProgramTree: java.lang.String functionSignature>;

        r0.<safetyChecker.ProgramTree: java.lang.String signature> = $r22;

        $r23 = r0.<safetyChecker.ProgramTree: safetyChecker.Vertex calllerVertex>;

        r0.<safetyChecker.ProgramTree: safetyChecker.Vertex root> = $r23;

        $r25 = r0.<safetyChecker.ProgramTree: safetyChecker.Vertex root>;

        $r24 = r0.<safetyChecker.ProgramTree: safetyChecker.Vertex calllerVertex>;

        $i0 = virtualinvoke $r24.<safetyChecker.Vertex: int getDistance()>();

        virtualinvoke $r25.<safetyChecker.Vertex: void setDistance(int)>($i0);

        i5 = 0;

(0)     goto label6;

     label3:
        $r28 = new safetyChecker.Edge;

        $r29 = r0.<safetyChecker.ProgramTree: soot.toolkits.graph.ExceptionalUnitGraph cfg>;

        $r30 = virtualinvoke $r29.<soot.toolkits.graph.ExceptionalUnitGraph: java.util.List getTails()>();

        $r31 = interfaceinvoke $r30.<java.util.List: java.lang.Object get(int)>(i5_1);

        $r32 = (soot.Unit) $r31;

        specialinvoke $r28.<safetyChecker.Edge: void <init>(soot.Unit)>($r32);

        r2 = $r28;

        virtualinvoke r2.<safetyChecker.Edge: void setReturnEdge(boolean)>(1);

        virtualinvoke r2.<safetyChecker.Edge: void setProgramTree(safetyChecker.ProgramTree)>(r0);

        $r33 = r0.<safetyChecker.ProgramTree: soot.toolkits.graph.ExceptionalUnitGraph cfg>;

        $r34 = virtualinvoke r2.<safetyChecker.Edge: soot.Unit getUnit()>();

        $r35 = virtualinvoke $r33.<soot.toolkits.graph.ExceptionalUnitGraph: java.util.List getUnexceptionalPredsOf(soot.Unit)>($r34);

        $i2 = interfaceinvoke $r35.<java.util.List: int size()>();

        if $i2 <= 1 goto label4;

        $z3_1 = 1;

(1)     goto label5;

     label4:
(2)     $z3_2 = 0;

     label5:
        $z3_3 = Phi($z3_1 #1, $z3_2 #2);

        z0 = $z3_3;

        $r36 = r0.<safetyChecker.ProgramTree: safetyChecker.Vertex root>;

        r3 = specialinvoke r0.<safetyChecker.ProgramTree: safetyChecker.Vertex addVertex(safetyChecker.Vertex,safetyChecker.Edge,boolean)>($r36, r2, z0);

        virtualinvoke r3.<safetyChecker.Vertex: void setReturnLocation(boolean)>(1);

(3)     i5_2 = i5_1 + 1;

     label6:
        i5_1 = Phi(i5 #0, i5_2 #3);

        $z3 = Phi($z3 #0, $z3_3 #3);

        $r26 = r0.<safetyChecker.ProgramTree: soot.toolkits.graph.ExceptionalUnitGraph cfg>;

        $r27 = virtualinvoke $r26.<soot.toolkits.graph.ExceptionalUnitGraph: java.util.List getTails()>();

        $i1 = interfaceinvoke $r27.<java.util.List: int size()>();

        if i5_1 < $i1 goto label3;

        return 1;

     label7:
        return 0;
    }

    public boolean getNewReturnPath() throws safetyChecker.exception.MainFunctionNotFoundException, safetyChecker.exception.ErrorLocationNotFoundException
    {
        safetyChecker.ProgramTree r0;
        safetyChecker.Vertex r1, r2;
        java.lang.Object[] $r3, $r7, $r13;
        java.util.Queue $r4, $r5, $r9, $r10;
        boolean $z1;
        java.lang.Object $r6, $r11;
        java.util.Set $r8;
        int $i0;
        safetyChecker.z3ScriptManager.Z3ScriptHandler $r12;

        r0 := @this: safetyChecker.ProgramTree;

        $r3 = newarray (java.lang.Object)[1];

        $r3[0] = ">>>>>>>> ProgramTree.getNewReturnPath";

        staticinvoke <safetyChecker.utilities.LogUtils: void warningln(java.lang.Object[])>($r3);

        goto label2;

     label1:
        $r5 = r0.<safetyChecker.ProgramTree: java.util.Queue uncovered>;

        $r6 = interfaceinvoke $r5.<java.util.Queue: java.lang.Object remove()>();

        r1 = (safetyChecker.Vertex) $r6;

        $r7 = newarray (java.lang.Object)[1];

        $r8 = virtualinvoke r1.<safetyChecker.Vertex: java.util.Set getIncomingEdges()>();

        $r7[0] = $r8;

        staticinvoke <safetyChecker.utilities.LogUtils: void detailln(java.lang.Object[])>($r7);

        specialinvoke r0.<safetyChecker.ProgramTree: boolean expandBFS(safetyChecker.Vertex)>(r1);

        $r9 = r0.<safetyChecker.ProgramTree: java.util.Queue returnRootQueue>;

        $i0 = interfaceinvoke $r9.<java.util.Queue: int size()>();

        if $i0 <= 0 goto label2;

        $r10 = r0.<safetyChecker.ProgramTree: java.util.Queue returnRootQueue>;

        $r11 = interfaceinvoke $r10.<java.util.Queue: java.lang.Object peek()>();

        r2 = (safetyChecker.Vertex) $r11;

        $r12 = r0.<safetyChecker.ProgramTree: safetyChecker.z3ScriptManager.Z3ScriptHandler z3Handler>;

        virtualinvoke $r12.<safetyChecker.z3ScriptManager.Z3ScriptHandler: void convertPathtoZ3Script(safetyChecker.Vertex)>(r2);

        return 1;

     label2:
        $r4 = r0.<safetyChecker.ProgramTree: java.util.Queue uncovered>;

        $z1 = interfaceinvoke $r4.<java.util.Queue: boolean isEmpty()>();

        if $z1 == 0 goto label1;

        $r13 = newarray (java.lang.Object)[1];

        $r13[0] = "<<<<<<<<< ProgramTree.getNewReturnPath";

        staticinvoke <safetyChecker.utilities.LogUtils: void warningln(java.lang.Object[])>($r13);

        return 0;
    }

    public safetyChecker.Vertex getNewReturnRoot()
    {
        safetyChecker.ProgramTree r0;
        safetyChecker.Vertex r1;
        java.util.Queue $r2, $r3;
        boolean $z0;
        java.lang.Object $r4;
        java.lang.Object[] $r5;
        java.lang.StringBuilder $r6, $r7;
        java.lang.String $r8;

        r0 := @this: safetyChecker.ProgramTree;

        $r2 = r0.<safetyChecker.ProgramTree: java.util.Queue returnRootQueue>;

        $z0 = interfaceinvoke $r2.<java.util.Queue: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $r3 = r0.<safetyChecker.ProgramTree: java.util.Queue returnRootQueue>;

        $r4 = interfaceinvoke $r3.<java.util.Queue: java.lang.Object remove()>();

        r1 = (safetyChecker.Vertex) $r4;

        $r5 = newarray (java.lang.Object)[1];

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>("returnRoot=");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $r5[0] = $r8;

        staticinvoke <safetyChecker.utilities.LogUtils: void detailln(java.lang.Object[])>($r5);

        return r1;

     label1:
        return null;
    }

    public boolean hasNewReturnRoot()
    {
        safetyChecker.ProgramTree r0;
        java.util.Queue $r1;
        boolean $z0, $z1, $z1_1, $z1_2;

        r0 := @this: safetyChecker.ProgramTree;

        $r1 = r0.<safetyChecker.ProgramTree: java.util.Queue returnRootQueue>;

        $z0 = interfaceinvoke $r1.<java.util.Queue: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        $z1 = 0;

(0)     goto label2;

     label1:
(1)     $z1_1 = 1;

     label2:
        $z1_2 = Phi($z1 #0, $z1_1 #1);

        return $z1_2;
    }

    public void addNewReturnRoot(safetyChecker.Vertex)
    {
        safetyChecker.ProgramTree r0;
        safetyChecker.Vertex r1;
        java.util.Queue $r2;

        r0 := @this: safetyChecker.ProgramTree;

        r1 := @parameter0: safetyChecker.Vertex;

        $r2 = r0.<safetyChecker.ProgramTree: java.util.Queue returnRootQueue>;

        interfaceinvoke $r2.<java.util.Queue: boolean add(java.lang.Object)>(r1);

        return;
    }

    public boolean isTreeDone()
    {
        safetyChecker.ProgramTree r0;
        boolean z0;
        java.util.Queue $r1;

        r0 := @this: safetyChecker.ProgramTree;

        z0 = 1;

        $r1 = r0.<safetyChecker.ProgramTree: java.util.Queue uncovered>;

        interfaceinvoke $r1.<java.util.Queue: boolean isEmpty()>();

        return z0;
    }

    private void unwind() throws safetyChecker.exception.MainFunctionNotFoundException, safetyChecker.exception.ErrorLocationNotFoundException
    {
        safetyChecker.ProgramTree r0;
        boolean z0, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        safetyChecker.Vertex r1, $r38, r54;
        java.lang.Object[] $r2, $r6, $r18, $r25, $r34, $r39, $r46, $r48, $r49, $r53;
        java.util.Queue $r3, $r4, $r17, $r20, $r23, $r41, $r45;
        java.lang.Object $r5, $r24;
        java.lang.StringBuilder $r7, $r9, $r10, $r11, $r12, $r14, $r19, $r21, $r26, $r28, $r29, $r30, $r40, $r42;
        safetyChecker.Edge $r8;
        safetyChecker.CoverRelation $r13, $r16, $r36, $r44;
        java.lang.String $r15, $r22, $r31, $r35, $r43, $r50;
        java.util.HashSet $r27;
        int $i0, $i1;
        safetyChecker.z3ScriptManager.Z3ScriptHandler $r32;
        safetyChecker.InterpolationHandler $r33;
        java.util.LinkedList $r37, r56;
        java.lang.Exception $r47, $r52, r55, r57;
        java.lang.StackTraceElement[] $r51;

        r0 := @this: safetyChecker.ProgramTree;

        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = "----->Unwind";

        staticinvoke <safetyChecker.utilities.LogUtils: void debugln(java.lang.Object[])>($r2);

        z0 = 0;

        goto label10;

     label01:
        $r4 = r0.<safetyChecker.ProgramTree: java.util.Queue uncovered>;

        $r5 = interfaceinvoke $r4.<java.util.Queue: java.lang.Object remove()>();

        r54 = (safetyChecker.Vertex) $r5;

        $z3 = specialinvoke r0.<safetyChecker.ProgramTree: boolean isConnectionCovered(safetyChecker.Vertex)>(r54);

        if $z3 == 0 goto label03;

     label02:
        goto label10;

     label03:
        $r6 = newarray (java.lang.Object)[1];

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke r54.<safetyChecker.Vertex: safetyChecker.Edge getOutgoingEdge()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("---");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r54);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("--");

        $r13 = r0.<safetyChecker.ProgramTree: safetyChecker.CoverRelation coverRelation>;

        $z4 = virtualinvoke $r13.<safetyChecker.CoverRelation: boolean isCovered(safetyChecker.Vertex)>(r54);

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z4);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6[0] = $r15;

        staticinvoke <safetyChecker.utilities.LogUtils: void debugln(java.lang.Object[])>($r6);

        $r16 = r0.<safetyChecker.ProgramTree: safetyChecker.CoverRelation coverRelation>;

        $z5 = virtualinvoke $r16.<safetyChecker.CoverRelation: boolean isCovered(safetyChecker.Vertex)>(r54);

        if $z5 == 0 goto label05;

     label04:
        goto label10;

     label05:
        specialinvoke r0.<safetyChecker.ProgramTree: boolean expandBFS(safetyChecker.Vertex)>(r54);

        $r17 = r0.<safetyChecker.ProgramTree: java.util.Queue errorRootQueue>;

        $z6 = interfaceinvoke $r17.<java.util.Queue: boolean isEmpty()>();

        if $z6 != 0 goto label10;

        $r18 = newarray (java.lang.Object)[1];

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>(java.lang.String)>("errorRootQueue = ");

        $r20 = r0.<safetyChecker.ProgramTree: java.util.Queue errorRootQueue>;

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        $r18[0] = $r22;

        staticinvoke <safetyChecker.utilities.LogUtils: void debugln(java.lang.Object[])>($r18);

        $r23 = r0.<safetyChecker.ProgramTree: java.util.Queue errorRootQueue>;

        $r24 = interfaceinvoke $r23.<java.util.Queue: java.lang.Object remove()>();

        r1 = (safetyChecker.Vertex) $r24;

        $r25 = newarray (java.lang.Object)[1];

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>(java.lang.String)>("error root #");

        $r27 = r0.<safetyChecker.ProgramTree: java.util.HashSet errorRootSet>;

        $i0 = virtualinvoke $r27.<java.util.HashSet: int size()>();

        $r28 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=");

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        $r25[0] = $r31;

        staticinvoke <safetyChecker.utilities.LogUtils: void infoln(java.lang.Object[])>($r25);

        $r32 = r0.<safetyChecker.ProgramTree: safetyChecker.z3ScriptManager.Z3ScriptHandler z3Handler>;

        virtualinvoke $r32.<safetyChecker.z3ScriptManager.Z3ScriptHandler: void convertPathtoZ3Script(safetyChecker.Vertex)>(r1);

        $r33 = r0.<safetyChecker.ProgramTree: safetyChecker.InterpolationHandler itpHandler>;

        $z7 = virtualinvoke $r33.<safetyChecker.InterpolationHandler: boolean createInterpolant(safetyChecker.Vertex)>(r1);

        r0.<safetyChecker.ProgramTree: boolean errorLocationFeasible> = $z7;

        $r34 = newarray (java.lang.Object)[1];

        $r34[0] = "printing result path";

        staticinvoke <safetyChecker.utilities.LogUtils: void debugln(java.lang.Object[])>($r34);

        $r35 = virtualinvoke r1.<safetyChecker.Vertex: java.lang.String toString()>();

        virtualinvoke r0.<safetyChecker.ProgramTree: void printResult(java.lang.String)>($r35);

        $z8 = r0.<safetyChecker.ProgramTree: boolean errorLocationFeasible>;

        if $z8 == 0 goto label07;

     label06:
        goto label11;

     label07:
        $r36 = r0.<safetyChecker.ProgramTree: safetyChecker.CoverRelation coverRelation>;

        virtualinvoke $r36.<safetyChecker.CoverRelation: void updateCover()>();

     label08:
        goto label10;

     label09:
        $r47 := @caughtexception;

        r55 = $r47;

        $r48 = newarray (java.lang.Object)[1];

        $r48[0] = "Exception occured during unwind";

        staticinvoke <safetyChecker.utilities.LogUtils: void fatalln(java.lang.Object[])>($r48);

        $r49 = newarray (java.lang.Object)[1];

        $r50 = virtualinvoke r55.<java.lang.Exception: java.lang.String getMessage()>();

        $r49[0] = $r50;

        staticinvoke <safetyChecker.utilities.LogUtils: void warningln(java.lang.Object[])>($r49);

        $r51 = virtualinvoke r55.<java.lang.Exception: java.lang.StackTraceElement[] getStackTrace()>();

        staticinvoke <safetyChecker.utilities.LogUtils: void fatalln(java.lang.Object[])>($r51);

     label10:
        $r3 = r0.<safetyChecker.ProgramTree: java.util.Queue uncovered>;

        $z2 = interfaceinvoke $r3.<java.util.Queue: boolean isEmpty()>();

        if $z2 == 0 goto label01;

     label11:
        $r37 = new java.util.LinkedList;

        specialinvoke $r37.<java.util.LinkedList: void <init>()>();

        r56 = $r37;

        $r38 = r0.<safetyChecker.ProgramTree: safetyChecker.Vertex root>;

        interfaceinvoke r56.<java.util.Queue: boolean add(java.lang.Object)>($r38);

        staticinvoke <safetyChecker.utilities.DottyConverter: void printAllPaths(java.util.Queue,java.lang.String)>(r56, "_all.dot");

        $r39 = newarray (java.lang.Object)[1];

        $r40 = new java.lang.StringBuilder;

        specialinvoke $r40.<java.lang.StringBuilder: void <init>(java.lang.String)>("errorSet size = ");

        $r41 = r0.<safetyChecker.ProgramTree: java.util.Queue errorSet>;

        $i1 = interfaceinvoke $r41.<java.util.Queue: int size()>();

        $r42 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.String toString()>();

        $r39[0] = $r43;

        staticinvoke <safetyChecker.utilities.LogUtils: void warningln(java.lang.Object[])>($r39);

        $r45 = r0.<safetyChecker.ProgramTree: java.util.Queue errorSet>;

        $r44 = r0.<safetyChecker.ProgramTree: safetyChecker.CoverRelation coverRelation>;

        staticinvoke <safetyChecker.utilities.DottyConverter: void printErrorPaths(java.util.Queue,java.lang.String,safetyChecker.CoverRelation)>($r45, "_errors.dot", $r44);

        $r46 = newarray (java.lang.Object)[1];

        $r46[0] = "<------unwind";

        staticinvoke <safetyChecker.utilities.LogUtils: void debugln(java.lang.Object[])>($r46);

     label12:
        goto label14;

     label13:
        $r52 := @caughtexception;

        r57 = $r52;

        $r53 = newarray (java.lang.Object)[1];

        $r53[0] = "Error in printig tree";

        staticinvoke <safetyChecker.utilities.LogUtils: void warningln(java.lang.Object[])>($r53);

     label14:
        return;

        catch java.lang.Exception from label01 to label02 with label09;
        catch java.lang.Exception from label03 to label04 with label09;
        catch java.lang.Exception from label05 to label06 with label09;
        catch java.lang.Exception from label07 to label08 with label09;
        catch java.lang.Exception from label11 to label12 with label13;
    }

    private boolean expandBFS(safetyChecker.Vertex) throws safetyChecker.exception.MainFunctionNotFoundException, safetyChecker.exception.ErrorLocationNotFoundException
    {
        safetyChecker.ProgramTree r0, r6, $r36, $r42, $r46, $r53, $r54, $r56, $r58, $r62, $r73, $r74, $r77, $r79, $r83;
        safetyChecker.Vertex r1, $r57, $r68, $r75, r85, r85_1, r85_2, r85_3, r85_4;
        soot.Unit r2, $r39, $r61, $r82;
        java.util.Iterator r3;
        safetyChecker.Edge r4, $r11, $r17, $r31, $r34, $r35, $r38, $r41, $r43, $r48, $r76, $r78, $r81;
        java.lang.String r5, $r19, $r28, $r33;
        java.lang.Object[] $r7, $r21, $r29, $r60;
        java.lang.StringBuilder $r8, $r9, $r10, $r12, $r13, $r15, $r16, $r18, $r22, $r24, $r25, $r27, $r30, $r32;
        safetyChecker.CoverRelation $r14, $r20, $r71;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19, $z20, $z21, $z22, $z23, z24, z25, z25_1, z25_2, z24_1, z24_2, z24_3, z24_4, z25_3, z24_5;
        java.util.Set $r23, $r26;
        int $i0, $i1, $i2;
        soot.toolkits.graph.ExceptionalUnitGraph $r37, $r47, $r80;
        java.lang.Object $r40, $r67;
        safetyChecker.UnitController $r44;
        java.util.Map $r45, $r63;
        java.util.HashMap $r49, $r50;
        java.util.Queue $r51, $r52, $r55, $r59, $r64, $r65, $r66, $r70, $r72;
        java.util.LinkedList $r69;
        java.util.List r84, r84_1, r84_2, r84_3;

        r0 := @this: safetyChecker.ProgramTree;

        r1 := @parameter0: safetyChecker.Vertex;

        $r7 = newarray (java.lang.Object)[1];

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>(java.lang.String)>("----->expand : ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("--");

        $r11 = virtualinvoke r1.<safetyChecker.Vertex: safetyChecker.Edge getOutgoingEdge()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("--");

        $r14 = r0.<safetyChecker.ProgramTree: safetyChecker.CoverRelation coverRelation>;

        $z0 = virtualinvoke $r14.<safetyChecker.CoverRelation: boolean isCovered(safetyChecker.Vertex)>(r1);

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("**");

        $r17 = virtualinvoke r1.<safetyChecker.Vertex: safetyChecker.Edge getOutgoingEdge()>();

        $z1 = virtualinvoke $r17.<safetyChecker.Edge: boolean isInErrorPath()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z1);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7[0] = $r19;

        staticinvoke <safetyChecker.utilities.LogUtils: void debugln(java.lang.Object[])>($r7);

        z24 = 0;

        $r20 = r0.<safetyChecker.ProgramTree: safetyChecker.CoverRelation coverRelation>;

        $z2 = virtualinvoke $r20.<safetyChecker.CoverRelation: boolean isCovered(safetyChecker.Vertex)>(r1);

(0)     if $z2 != 0 goto label20;

        $r29 = newarray (java.lang.Object)[1];

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>(java.lang.String)>("if (!coverRelation.isCovered(w))---");

        $r31 = virtualinvoke r1.<safetyChecker.Vertex: safetyChecker.Edge getOutgoingEdge()>();

        $r32 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r31);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        $r29[0] = $r33;

        staticinvoke <safetyChecker.utilities.LogUtils: void debugln(java.lang.Object[])>($r29);

        $r34 = virtualinvoke r1.<safetyChecker.Vertex: safetyChecker.Edge getOutgoingEdge()>();

        $z3 = virtualinvoke $r34.<safetyChecker.Edge: boolean isFunctionCall()>();

        if $z3 == 0 goto label01;

        $r83 = virtualinvoke r1.<safetyChecker.Vertex: safetyChecker.ProgramTree getSubTree()>();

        $z23 = virtualinvoke $r83.<safetyChecker.ProgramTree: boolean hasNewReturnRoot()>();

        if $z23 != 0 goto label01;

        return 0;

     label01:
        $r35 = virtualinvoke r1.<safetyChecker.Vertex: safetyChecker.Edge getOutgoingEdge()>();

        $r36 = virtualinvoke $r35.<safetyChecker.Edge: safetyChecker.ProgramTree getProgramTree()>();

        $z4 = virtualinvoke $r36.<safetyChecker.ProgramTree: boolean isSubTree()>();

        if $z4 == 0 goto label02;

        $r78 = virtualinvoke r1.<safetyChecker.Vertex: safetyChecker.Edge getOutgoingEdge()>();

        $r79 = virtualinvoke $r78.<safetyChecker.Edge: safetyChecker.ProgramTree getProgramTree()>();

        $r80 = virtualinvoke $r79.<safetyChecker.ProgramTree: soot.toolkits.graph.ExceptionalUnitGraph getCfg()>();

        $r81 = virtualinvoke r1.<safetyChecker.Vertex: safetyChecker.Edge getOutgoingEdge()>();

        $r82 = virtualinvoke $r81.<safetyChecker.Edge: soot.Unit getUnit()>();

        r84 = virtualinvoke $r80.<soot.toolkits.graph.ExceptionalUnitGraph: java.util.List getUnexceptionalPredsOf(soot.Unit)>($r82);

(1)     goto label03;

     label02:
        $r37 = r0.<safetyChecker.ProgramTree: soot.toolkits.graph.ExceptionalUnitGraph cfg>;

        $r38 = virtualinvoke r1.<safetyChecker.Vertex: safetyChecker.Edge getOutgoingEdge()>();

        $r39 = virtualinvoke $r38.<safetyChecker.Edge: soot.Unit getUnit()>();

(2)     r84_1 = virtualinvoke $r37.<soot.toolkits.graph.ExceptionalUnitGraph: java.util.List getUnexceptionalPredsOf(soot.Unit)>($r39);

     label03:
        r84_2 = Phi(r84 #1, r84_1 #2);

        z25 = 0;

        $i2 = interfaceinvoke r84_2.<java.util.List: int size()>();

(3)     if $i2 <= 1 goto label04;

(4)     z25_1 = 1;

     label04:
        z25_2 = Phi(z25 #3, z25_1 #4);

        r3 = interfaceinvoke r84_2.<java.util.List: java.util.Iterator iterator()>();

(5)     goto label19;

     label05:
        $r40 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r2 = (soot.Unit) $r40;

        $r41 = new safetyChecker.Edge;

        specialinvoke $r41.<safetyChecker.Edge: void <init>(soot.Unit)>(r2);

        r4 = $r41;

        $r42 = virtualinvoke r4.<safetyChecker.Edge: safetyChecker.ProgramTree getProgramTree()>();

        if $r42 != null goto label06;

        $r76 = virtualinvoke r1.<safetyChecker.Vertex: safetyChecker.Edge getOutgoingEdge()>();

        $r77 = virtualinvoke $r76.<safetyChecker.Edge: safetyChecker.ProgramTree getProgramTree()>();

        virtualinvoke r4.<safetyChecker.Edge: void setProgramTree(safetyChecker.ProgramTree)>($r77);

     label06:
        $r43 = virtualinvoke r1.<safetyChecker.Vertex: safetyChecker.Edge getOutgoingEdge()>();

        $z6 = virtualinvoke $r43.<safetyChecker.Edge: boolean isInErrorPath()>();

        virtualinvoke r4.<safetyChecker.Edge: void setInErrorPath(boolean)>($z6);

        $z7 = virtualinvoke r1.<safetyChecker.Vertex: boolean isFunctionCall()>();

        if $z7 == 0 goto label07;

        $r74 = virtualinvoke r1.<safetyChecker.Vertex: safetyChecker.ProgramTree getSubTree()>();

        $r75 = virtualinvoke $r74.<safetyChecker.ProgramTree: safetyChecker.Vertex getNewReturnRoot()>();

        r85_1 = specialinvoke r0.<safetyChecker.ProgramTree: safetyChecker.Vertex addVertex(safetyChecker.Vertex,safetyChecker.Edge,boolean)>($r75, r4, z25_2);

(6)     goto label08;

     label07:
(7)     r85_2 = specialinvoke r0.<safetyChecker.ProgramTree: safetyChecker.Vertex addVertex(safetyChecker.Vertex,safetyChecker.Edge,boolean)>(r1, r4, z25_2);

     label08:
        r85_3 = Phi(r85_1 #6, r85_2 #7);

        $r44 = r0.<safetyChecker.ProgramTree: safetyChecker.UnitController unitController>;

        $r45 = r0.<safetyChecker.ProgramTree: java.util.Map stores>;

        $r46 = virtualinvoke r4.<safetyChecker.Edge: safetyChecker.ProgramTree getProgramTree()>();

        $r47 = virtualinvoke $r46.<safetyChecker.ProgramTree: soot.toolkits.graph.ExceptionalUnitGraph getCfg()>();

        virtualinvoke $r44.<safetyChecker.UnitController: void analyzeEdge(safetyChecker.Edge,java.util.Map,soot.toolkits.graph.ExceptionalUnitGraph)>(r4, $r45, $r47);

        $z8 = virtualinvoke r4.<safetyChecker.Edge: boolean isInErrorPath()>();

        if $z8 != 0 goto label09;

        $r72 = r0.<safetyChecker.ProgramTree: java.util.Queue errorSet>;

        $z21 = interfaceinvoke $r72.<java.util.Queue: boolean isEmpty()>();

        if $z21 != 0 goto label09;

        $r73 = virtualinvoke r4.<safetyChecker.Edge: safetyChecker.ProgramTree getProgramTree()>();

        $z22 = virtualinvoke $r73.<safetyChecker.ProgramTree: boolean isMainFunction()>();

        if $z22 == 0 goto label09;

(8)     goto label19;

     label09:
        $z9 = virtualinvoke r4.<safetyChecker.Edge: boolean isControlLocation()>();

        if $z9 == 0 goto label10;

        $r71 = r0.<safetyChecker.ProgramTree: safetyChecker.CoverRelation coverRelation>;

        virtualinvoke $r71.<safetyChecker.CoverRelation: void updateUnitVertexMap(safetyChecker.Vertex)>(r85_3);

     label10:
        $z10 = virtualinvoke r4.<safetyChecker.Edge: boolean isErrorEdge()>();

        if $z10 == 0 goto label11;

        $r70 = r0.<safetyChecker.ProgramTree: java.util.Queue errorSet>;

        interfaceinvoke $r70.<java.util.Queue: boolean add(java.lang.Object)>(r1);

     label11:
        $z11 = virtualinvoke r4.<safetyChecker.Edge: boolean isFunctionCall()>();

        if $z11 == 0 goto label12;

        $r69 = r0.<safetyChecker.ProgramTree: java.util.LinkedList subFunctionList>;

        virtualinvoke $r69.<java.util.LinkedList: boolean add(java.lang.Object)>(r4);

     label12:
        $z12 = virtualinvoke r4.<safetyChecker.Edge: boolean isFunctionCall()>();

        if $z12 == 0 goto label15;

        $r60 = newarray (java.lang.Object)[1];

        $r60[0] = "here we go";

        staticinvoke <safetyChecker.utilities.LogUtils: void detailln(java.lang.Object[])>($r60);

        $r61 = virtualinvoke r4.<safetyChecker.Edge: soot.Unit getUnit()>();

        r5 = staticinvoke <safetyChecker.UnitController: java.lang.String getMethodSignature(soot.Unit)>($r61);

        $r62 = new safetyChecker.ProgramTree;

        $r63 = r0.<safetyChecker.ProgramTree: java.util.Map stores>;

        specialinvoke $r62.<safetyChecker.ProgramTree: void <init>(java.util.Map,java.lang.String,boolean,safetyChecker.Vertex)>($r63, r5, 0, r85_3);

        r6 = $r62;

        $z19 = virtualinvoke r4.<safetyChecker.Edge: boolean isFunctionCall()>();

        virtualinvoke r85_3.<safetyChecker.Vertex: void setFunctionCall(boolean)>($z19);

        virtualinvoke r85_3.<safetyChecker.Vertex: void setSubTree(safetyChecker.ProgramTree)>(r6);

        goto label14;

     label13:
        $r65 = r0.<safetyChecker.ProgramTree: java.util.Queue uncovered>;

        $r66 = virtualinvoke r6.<safetyChecker.ProgramTree: java.util.Queue getUncovered()>();

        $r67 = interfaceinvoke $r66.<java.util.Queue: java.lang.Object poll()>();

        $r68 = (safetyChecker.Vertex) $r67;

        interfaceinvoke $r65.<java.util.Queue: boolean add(java.lang.Object)>($r68);

     label14:
        $r64 = virtualinvoke r6.<safetyChecker.ProgramTree: java.util.Queue getUncovered()>();

        $z20 = interfaceinvoke $r64.<java.util.Queue: boolean isEmpty()>();

        if $z20 == 0 goto label13;

     label15:
        $z13 = virtualinvoke r4.<safetyChecker.Edge: boolean isEntryLocation()>();

(9)     if $z13 == 0 goto label17;

        $r58 = virtualinvoke r4.<safetyChecker.Edge: safetyChecker.ProgramTree getProgramTree()>();

        $z17 = virtualinvoke $r58.<safetyChecker.ProgramTree: boolean isMainFunction()>();

(10)    if $z17 == 0 goto label17;

        $z18 = virtualinvoke r4.<safetyChecker.Edge: boolean isInErrorPath()>();

        if $z18 == 0 goto label16;

        specialinvoke r0.<safetyChecker.ProgramTree: void addErrorEntryLocation(safetyChecker.Vertex)>(r85_3);

        z24_2 = 1;

(11)    goto label17;

     label16:
        $r59 = r0.<safetyChecker.ProgramTree: java.util.Queue returnRootQueue>;

        interfaceinvoke $r59.<java.util.Queue: boolean add(java.lang.Object)>(r85_3);

(12)    z24_3 = 0;

     label17:
        z24_4 = Phi(z24_1 #9, z24_1 #10, z24_2 #11, z24_3 #12);

        $z14 = virtualinvoke r4.<safetyChecker.Edge: boolean isEntryLocation()>();

        if $z14 == 0 goto label18;

        $r53 = virtualinvoke r4.<safetyChecker.Edge: safetyChecker.ProgramTree getProgramTree()>();

        $z16 = virtualinvoke $r53.<safetyChecker.ProgramTree: boolean isSubTree()>();

        if $z16 == 0 goto label18;

        $r54 = virtualinvoke r4.<safetyChecker.Edge: safetyChecker.ProgramTree getProgramTree()>();

        virtualinvoke $r54.<safetyChecker.ProgramTree: void addNewReturnRoot(safetyChecker.Vertex)>(r85_3);

        $r55 = r0.<safetyChecker.ProgramTree: java.util.Queue uncovered>;

        $r56 = virtualinvoke r4.<safetyChecker.Edge: safetyChecker.ProgramTree getProgramTree()>();

        $r57 = virtualinvoke $r56.<safetyChecker.ProgramTree: safetyChecker.Vertex getCallerVertex()>();

        interfaceinvoke $r55.<java.util.Queue: boolean add(java.lang.Object)>($r57);

     label18:
        $r48 = virtualinvoke r85_3.<safetyChecker.Vertex: safetyChecker.Edge getOutgoingEdge()>();

        $z15 = virtualinvoke $r48.<safetyChecker.Edge: boolean isErrorEdge()>();

(13)    if $z15 == 0 goto label19;

        $r49 = r0.<safetyChecker.ProgramTree: java.util.HashMap treeConnection>;

        virtualinvoke $r49.<java.util.HashMap: void clear()>();

        $r50 = r0.<safetyChecker.ProgramTree: java.util.HashMap candidate2BeInPath>;

        virtualinvoke $r50.<java.util.HashMap: void clear()>();

        $r51 = r0.<safetyChecker.ProgramTree: java.util.Queue uncovered>;

        interfaceinvoke $r51.<java.util.Queue: void clear()>();

        $r52 = r0.<safetyChecker.ProgramTree: java.util.Queue uncovered>;

        interfaceinvoke $r52.<java.util.Queue: boolean add(java.lang.Object)>(r85_3);

        virtualinvoke r85_3.<safetyChecker.Vertex: void setNextVertex(safetyChecker.Vertex)>(r1);

        virtualinvoke r1.<safetyChecker.Vertex: void addPreviousVertex(safetyChecker.Vertex)>(r85_3);

        virtualinvoke r4.<safetyChecker.Edge: void setTarget(safetyChecker.Vertex)>(r1);

(14)    virtualinvoke r1.<safetyChecker.Vertex: void addIncomingEdge(safetyChecker.Edge)>(r4);

     label19:
        z24_1 = Phi(z24 #5, z24_1 #8, z24_4 #13, z24_4 #14);

        r85 = Phi(r85 #5, r85_3 #8, r85_3 #13, r85_3 #14);

        $z5 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

(15)    if $z5 != 0 goto label05;

     label20:
        z25_3 = Phi(z25 #0, z25_2 #15);

        r84_3 = Phi(r84 #0, r84_2 #15);

        z24_5 = Phi(z24 #0, z24_1 #15);

        r85_4 = Phi(r85 #0, r85 #15);

        $r21 = newarray (java.lang.Object)[1];

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>(java.lang.String)>("<-----expand : w.incomingEdge#");

        $r23 = virtualinvoke r1.<safetyChecker.Vertex: java.util.Set getIncomingEdges()>();

        $i0 = interfaceinvoke $r23.<java.util.Set: int size()>();

        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" : w.previousVertexSet#");

        $r26 = virtualinvoke r1.<safetyChecker.Vertex: java.util.Set getPreviousVertexSet()>();

        $i1 = interfaceinvoke $r26.<java.util.Set: int size()>();

        $r27 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        $r21[0] = $r28;

        staticinvoke <safetyChecker.utilities.LogUtils: void debugln(java.lang.Object[])>($r21);

        return z24_5;
    }

    private boolean isConnectionCovered(safetyChecker.Vertex)
    {
        safetyChecker.ProgramTree r0;
        safetyChecker.Vertex r1, r2, r9, r9_1, r9_2;
        java.util.HashMap $r3, $r4, $r6;
        boolean $z0, $z1;
        java.lang.Object $r5, $r7;
        safetyChecker.CoverRelation $r8;

        r0 := @this: safetyChecker.ProgramTree;

        r9 := @parameter0: safetyChecker.Vertex;

(0)     goto label3;

     label1:
        $r4 = r0.<safetyChecker.ProgramTree: java.util.HashMap candidate2BeInPath>;

        $r5 = virtualinvoke $r4.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r9_1);

        r1 = (safetyChecker.Vertex) $r5;

        $r6 = r0.<safetyChecker.ProgramTree: java.util.HashMap treeConnection>;

        $r7 = virtualinvoke $r6.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r2 = (safetyChecker.Vertex) $r7;

        $r8 = r0.<safetyChecker.ProgramTree: safetyChecker.CoverRelation coverRelation>;

        $z1 = virtualinvoke $r8.<safetyChecker.CoverRelation: boolean isCovered(safetyChecker.Vertex)>(r2);

        if $z1 == 0 goto label2;

        return 1;

     label2:
(1)     r9_2 = r2;

     label3:
        r9_1 = Phi(r9 #0, r9_2 #1);

        $r3 = r0.<safetyChecker.ProgramTree: java.util.HashMap candidate2BeInPath>;

        $z0 = virtualinvoke $r3.<java.util.HashMap: boolean containsKey(java.lang.Object)>(r9_1);

        if $z0 != 0 goto label1;

        return 0;
    }

    private void addErrorEntryLocation(safetyChecker.Vertex)
    {
        safetyChecker.ProgramTree r0;
        safetyChecker.Vertex r1, r2, r12, r12_1, r12_2;
        java.util.HashSet $r3;
        java.util.Queue $r4;
        java.util.HashMap $r5, $r6, $r8;
        boolean $z2;
        java.lang.Object $r7, $r9;
        safetyChecker.Edge $r10, $r11;

        r0 := @this: safetyChecker.ProgramTree;

        r12 := @parameter0: safetyChecker.Vertex;

        $r3 = r0.<safetyChecker.ProgramTree: java.util.HashSet errorRootSet>;

        virtualinvoke $r3.<java.util.HashSet: boolean add(java.lang.Object)>(r12);

        $r4 = r0.<safetyChecker.ProgramTree: java.util.Queue errorRootQueue>;

        interfaceinvoke $r4.<java.util.Queue: boolean add(java.lang.Object)>(r12);

(0)     goto label2;

     label1:
        $r6 = r0.<safetyChecker.ProgramTree: java.util.HashMap candidate2BeInPath>;

        $r7 = virtualinvoke $r6.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r12_1);

        r1 = (safetyChecker.Vertex) $r7;

        $r8 = r0.<safetyChecker.ProgramTree: java.util.HashMap treeConnection>;

        $r9 = virtualinvoke $r8.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r2 = (safetyChecker.Vertex) $r9;

        virtualinvoke r1.<safetyChecker.Vertex: void setNextVertex(safetyChecker.Vertex)>(r2);

        $r10 = virtualinvoke r1.<safetyChecker.Vertex: safetyChecker.Edge getOutgoingEdge()>();

        virtualinvoke $r10.<safetyChecker.Edge: void setTarget(safetyChecker.Vertex)>(r2);

        $r11 = virtualinvoke r1.<safetyChecker.Vertex: safetyChecker.Edge getOutgoingEdge()>();

        virtualinvoke r2.<safetyChecker.Vertex: void addIncomingEdge(safetyChecker.Edge)>($r11);

        virtualinvoke r2.<safetyChecker.Vertex: void addPreviousVertex(safetyChecker.Vertex)>(r1);

(1)     r12_2 = r2;

     label2:
        r12_1 = Phi(r12 #0, r12_2 #1);

        $r5 = r0.<safetyChecker.ProgramTree: java.util.HashMap candidate2BeInPath>;

        $z2 = virtualinvoke $r5.<java.util.HashMap: boolean containsKey(java.lang.Object)>(r12_1);

        if $z2 != 0 goto label1;

        return;
    }

    private safetyChecker.Vertex addVertex(safetyChecker.Vertex, safetyChecker.Edge, boolean)
    {
        safetyChecker.ProgramTree r0;
        safetyChecker.Vertex r1, r3, r4, $r5;
        safetyChecker.Edge r2;
        boolean z0, $z2;
        java.util.HashMap $r6, $r8, $r11, $r12, $r14, $r16;
        int $i0, $i1, $i2, $i3;
        java.util.Queue $r10;
        java.lang.Object $r13;

        r0 := @this: safetyChecker.ProgramTree;

        r1 := @parameter0: safetyChecker.Vertex;

        r2 := @parameter1: safetyChecker.Edge;

        z0 := @parameter2: boolean;

        $r5 = new safetyChecker.Vertex;

        specialinvoke $r5.<safetyChecker.Vertex: void <init>()>();

        r3 = $r5;

        virtualinvoke r3.<safetyChecker.Vertex: void setOutgoingEdge(safetyChecker.Edge)>(r2);

        if z0 != 0 goto label1;

        virtualinvoke r3.<safetyChecker.Vertex: void setNextVertex(safetyChecker.Vertex)>(r1);

        virtualinvoke r1.<safetyChecker.Vertex: void addIncomingEdge(safetyChecker.Edge)>(r2);

        virtualinvoke r1.<safetyChecker.Vertex: void addPreviousVertex(safetyChecker.Vertex)>(r3);

        virtualinvoke r2.<safetyChecker.Edge: void setTarget(safetyChecker.Vertex)>(r1);

        $r11 = r0.<safetyChecker.ProgramTree: java.util.HashMap candidate2BeInPath>;

        $z2 = virtualinvoke $r11.<java.util.HashMap: boolean containsKey(java.lang.Object)>(r1);

        if $z2 == 0 goto label2;

        $r12 = r0.<safetyChecker.ProgramTree: java.util.HashMap candidate2BeInPath>;

        $r13 = virtualinvoke $r12.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (safetyChecker.Vertex) $r13;

        $r14 = r0.<safetyChecker.ProgramTree: java.util.HashMap candidate2BeInPath>;

        virtualinvoke $r14.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, r4);

        $r16 = r0.<safetyChecker.ProgramTree: java.util.HashMap candidate2BeInPath>;

        virtualinvoke $r16.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>(r1);

        goto label2;

     label1:
        $r6 = r0.<safetyChecker.ProgramTree: java.util.HashMap treeConnection>;

        virtualinvoke $r6.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, r1);

        $r8 = r0.<safetyChecker.ProgramTree: java.util.HashMap candidate2BeInPath>;

        virtualinvoke $r8.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, r3);

     label2:
        virtualinvoke r2.<safetyChecker.Edge: void setSource(safetyChecker.Vertex)>(r3);

        $i0 = virtualinvoke r1.<safetyChecker.Vertex: int getDistance()>();

        $i1 = $i0 + 1;

        virtualinvoke r3.<safetyChecker.Vertex: void setDistance(int)>($i1);

        $r10 = r0.<safetyChecker.ProgramTree: java.util.Queue uncovered>;

        interfaceinvoke $r10.<java.util.Queue: boolean add(java.lang.Object)>(r3);

        $i2 = r0.<safetyChecker.ProgramTree: int locationCounter>;

        $i3 = $i2 + 1;

        r0.<safetyChecker.ProgramTree: int locationCounter> = $i3;

        virtualinvoke r3.<safetyChecker.Vertex: void setLocationNumber(int)>($i3);

        return r3;
    }

    private void refine(safetyChecker.Vertex)
    {
        safetyChecker.ProgramTree r0;
        safetyChecker.Vertex r1;

        r0 := @this: safetyChecker.ProgramTree;

        r1 := @parameter0: safetyChecker.Vertex;

        return;
    }

    public java.lang.String getProgramDefinition()
    {
        safetyChecker.ProgramTree r0;
        java.lang.StringBuilder $r1, $r3, $r4, $r8;
        java.lang.String $r2, $r5, $r9;
        java.util.Map $r6;
        java.lang.Object $r7;

        r0 := @this: safetyChecker.ProgramTree;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>("_");

        $r2 = r0.<safetyChecker.ProgramTree: java.lang.String functionName>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_");

        $r6 = <safetyChecker.ProgramTree: java.util.Map functionNameInvokeCount>;

        $r5 = r0.<safetyChecker.ProgramTree: java.lang.String functionName>;

        $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>($r5);

        $r8 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;
    }

    public java.lang.String getFunctionName()
    {
        safetyChecker.ProgramTree r0;
        java.lang.String $r1;

        r0 := @this: safetyChecker.ProgramTree;

        $r1 = r0.<safetyChecker.ProgramTree: java.lang.String functionName>;

        return $r1;
    }

    public void printResult(java.lang.String)
    {
        safetyChecker.ProgramTree r0;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: safetyChecker.ProgramTree;

        r1 := @parameter0: java.lang.String;

        $z0 = r0.<safetyChecker.ProgramTree: boolean errorLocationFeasible>;

        staticinvoke <safetyChecker.utilities.LogUtils: void printResult(java.lang.String,boolean)>(r1, $z0);

        return;
    }

    protected java.util.Queue getUncovered()
    {
        safetyChecker.ProgramTree r0;
        java.util.Queue $r1;

        r0 := @this: safetyChecker.ProgramTree;

        $r1 = r0.<safetyChecker.ProgramTree: java.util.Queue uncovered>;

        return $r1;
    }

    protected soot.toolkits.graph.ExceptionalUnitGraph getCfg()
    {
        safetyChecker.ProgramTree r0;
        soot.toolkits.graph.ExceptionalUnitGraph $r1;

        r0 := @this: safetyChecker.ProgramTree;

        $r1 = r0.<safetyChecker.ProgramTree: soot.toolkits.graph.ExceptionalUnitGraph cfg>;

        return $r1;
    }

    public boolean isMainFunction()
    {
        safetyChecker.ProgramTree r0;
        boolean $z0;

        r0 := @this: safetyChecker.ProgramTree;

        $z0 = r0.<safetyChecker.ProgramTree: boolean mainFunction>;

        return $z0;
    }

    public boolean isSubTree()
    {
        safetyChecker.ProgramTree r0;
        boolean $z0;

        r0 := @this: safetyChecker.ProgramTree;

        $z0 = r0.<safetyChecker.ProgramTree: boolean subTree>;

        return $z0;
    }

    public safetyChecker.Vertex getCallerVertex()
    {
        safetyChecker.ProgramTree r0;
        safetyChecker.Vertex $r1;

        r0 := @this: safetyChecker.ProgramTree;

        $r1 = r0.<safetyChecker.ProgramTree: safetyChecker.Vertex calllerVertex>;

        return $r1;
    }
}
