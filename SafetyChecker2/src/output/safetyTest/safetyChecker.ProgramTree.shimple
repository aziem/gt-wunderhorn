public class safetyChecker.ProgramTree extends java.lang.Object
{
    private safetyChecker.Vertex root;
    private java.util.Set liSet;
    private safetyChecker.Vertex lf;
    private java.util.Map stores;
    private java.util.Set edgeSet;
    private java.util.Stack path;
    private com.microsoft.z3.InterpolationContext ictx;
    private safetyChecker.Z3ScriptHandler z3Handler;
    private safetyChecker.InterpolationHandler itpHandler;
    private boolean errorLocationFeasible;
    private boolean mainFunction;
    private boolean treeClosed;
    private java.util.LinkedList subFunctionList;
    private java.util.HashSet errorRootSet;
    private java.util.Queue errorRootQueue;
    private java.util.Queue returnRootQueue;
    private java.util.LinkedList returnPaths;
    private java.util.LinkedList errorPaths;
    private java.lang.String functionSignature;
    private java.lang.String functionName;
    private static java.util.Map functionNameInvokeCount;
    private soot.toolkits.graph.ExceptionalUnitGraph cfg;
    private java.lang.String signature;
    private safetyChecker.UnitController unitController;
    private safetyChecker.CoverRelation coverRelation;
    private java.util.Queue uncovered;
    private java.util.Queue errorSet;
    private int locationCounter;
    private java.util.HashMap candidate2BeInPath;
    private java.util.HashMap treeConnection;

    static void <clinit>()
    {
        java.util.HashMap $r0;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        <safetyChecker.ProgramTree: java.util.Map functionNameInvokeCount> = $r0;

        return;
    }

    public void <init>(java.util.Map, java.lang.String, boolean) throws safetyChecker.exception.MainFunctionNotFoundException, safetyChecker.exception.ErrorLocationNotFoundException
    {
        safetyChecker.ProgramTree r0;
        java.util.Map r1;
        java.lang.String r2, $r29, $r32, $r33, $r35, $r39;
        boolean z0, z1, $z2, $z3, $z4;
        java.util.HashSet $r3, $r11;
        java.util.Stack $r4;
        java.util.LinkedList $r5, $r6, $r10, $r12, $r13, $r14, $r15;
        java.util.HashMap $r7, $r8;
        java.lang.Object[] $r9, $r26, $r36;
        safetyChecker.UnitController $r16;
        com.microsoft.z3.InterpolationContext $r17, $r19, $r21, $r25;
        safetyChecker.Z3ScriptHandler $r18, $r24;
        safetyChecker.CoverRelation $r20, $r23;
        safetyChecker.InterpolationHandler $r22;
        java.lang.StringBuilder $r27, $r28, $r31, $r34, $r37, $r38;
        safetyChecker.exception.MainFunctionNotFoundException $r30;

        r0 := @this: safetyChecker.ProgramTree;

        r1 := @parameter0: java.util.Map;

        r2 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = new java.util.HashSet;

        specialinvoke $r3.<java.util.HashSet: void <init>()>();

        r0.<safetyChecker.ProgramTree: java.util.Set edgeSet> = $r3;

        $r4 = new java.util.Stack;

        specialinvoke $r4.<java.util.Stack: void <init>()>();

        r0.<safetyChecker.ProgramTree: java.util.Stack path> = $r4;

        r0.<safetyChecker.ProgramTree: boolean errorLocationFeasible> = 0;

        $r5 = new java.util.LinkedList;

        specialinvoke $r5.<java.util.LinkedList: void <init>()>();

        r0.<safetyChecker.ProgramTree: java.util.Queue uncovered> = $r5;

        $r6 = new java.util.LinkedList;

        specialinvoke $r6.<java.util.LinkedList: void <init>()>();

        r0.<safetyChecker.ProgramTree: java.util.Queue errorSet> = $r6;

        r0.<safetyChecker.ProgramTree: int locationCounter> = 0;

        $r7 = new java.util.HashMap;

        specialinvoke $r7.<java.util.HashMap: void <init>()>();

        r0.<safetyChecker.ProgramTree: java.util.HashMap candidate2BeInPath> = $r7;

        $r8 = new java.util.HashMap;

        specialinvoke $r8.<java.util.HashMap: void <init>()>();

        r0.<safetyChecker.ProgramTree: java.util.HashMap treeConnection> = $r8;

        $r9 = newarray (java.lang.Object)[1];

        $r9[0] = "------->ProgramTree";

        staticinvoke <safetyChecker.LogUtils: void detailln(java.lang.Object[])>($r9);

        r0.<safetyChecker.ProgramTree: boolean errorLocationFeasible> = 0;

        $r10 = new java.util.LinkedList;

        specialinvoke $r10.<java.util.LinkedList: void <init>()>();

        r0.<safetyChecker.ProgramTree: java.util.LinkedList subFunctionList> = $r10;

        $r11 = new java.util.HashSet;

        specialinvoke $r11.<java.util.HashSet: void <init>()>();

        r0.<safetyChecker.ProgramTree: java.util.HashSet errorRootSet> = $r11;

        $r12 = new java.util.LinkedList;

        specialinvoke $r12.<java.util.LinkedList: void <init>()>();

        r0.<safetyChecker.ProgramTree: java.util.Queue errorRootQueue> = $r12;

        $r13 = new java.util.LinkedList;

        specialinvoke $r13.<java.util.LinkedList: void <init>()>();

        r0.<safetyChecker.ProgramTree: java.util.Queue returnRootQueue> = $r13;

        $r14 = new java.util.LinkedList;

        specialinvoke $r14.<java.util.LinkedList: void <init>()>();

        r0.<safetyChecker.ProgramTree: java.util.LinkedList returnPaths> = $r14;

        $r15 = new java.util.LinkedList;

        specialinvoke $r15.<java.util.LinkedList: void <init>()>();

        r0.<safetyChecker.ProgramTree: java.util.LinkedList errorPaths> = $r15;

        r0.<safetyChecker.ProgramTree: java.lang.String functionSignature> = r2;

        r0.<safetyChecker.ProgramTree: java.util.Map stores> = r1;

        $r16 = new safetyChecker.UnitController;

        specialinvoke $r16.<safetyChecker.UnitController: void <init>()>();

        r0.<safetyChecker.ProgramTree: safetyChecker.UnitController unitController> = $r16;

        r0.<safetyChecker.ProgramTree: boolean mainFunction> = z0;

        $r17 = new com.microsoft.z3.InterpolationContext;

        specialinvoke $r17.<com.microsoft.z3.InterpolationContext: void <init>()>();

        r0.<safetyChecker.ProgramTree: com.microsoft.z3.InterpolationContext ictx> = $r17;

        $r18 = new safetyChecker.Z3ScriptHandler;

        $r19 = r0.<safetyChecker.ProgramTree: com.microsoft.z3.InterpolationContext ictx>;

        specialinvoke $r18.<safetyChecker.Z3ScriptHandler: void <init>(com.microsoft.z3.InterpolationContext)>($r19);

        r0.<safetyChecker.ProgramTree: safetyChecker.Z3ScriptHandler z3Handler> = $r18;

        $r20 = new safetyChecker.CoverRelation;

        $r21 = r0.<safetyChecker.ProgramTree: com.microsoft.z3.InterpolationContext ictx>;

        specialinvoke $r20.<safetyChecker.CoverRelation: void <init>(com.microsoft.z3.InterpolationContext,safetyChecker.ProgramTree)>($r21, r0);

        r0.<safetyChecker.ProgramTree: safetyChecker.CoverRelation coverRelation> = $r20;

        $r22 = new safetyChecker.InterpolationHandler;

        $r25 = r0.<safetyChecker.ProgramTree: com.microsoft.z3.InterpolationContext ictx>;

        $r24 = r0.<safetyChecker.ProgramTree: safetyChecker.Z3ScriptHandler z3Handler>;

        $r23 = r0.<safetyChecker.ProgramTree: safetyChecker.CoverRelation coverRelation>;

        specialinvoke $r22.<safetyChecker.InterpolationHandler: void <init>(com.microsoft.z3.InterpolationContext,safetyChecker.Z3ScriptHandler,safetyChecker.CoverRelation)>($r25, $r24, $r23);

        r0.<safetyChecker.ProgramTree: safetyChecker.InterpolationHandler itpHandler> = $r22;

        $z2 = r0.<safetyChecker.ProgramTree: boolean mainFunction>;

        if $z2 == 0 goto label1;

        $r36 = newarray (java.lang.Object)[1];

        $r37 = new java.lang.StringBuilder;

        specialinvoke $r37.<java.lang.StringBuilder: void <init>(java.lang.String)>("mainFunction = ");

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>();

        $r36[0] = $r39;

        staticinvoke <safetyChecker.LogUtils: void detailln(java.lang.Object[])>($r36);

        goto label2;

     label1:
        $r26 = newarray (java.lang.Object)[1];

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>(java.lang.String)>("subFunction = ");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        $r26[0] = $r29;

        staticinvoke <safetyChecker.LogUtils: void detailln(java.lang.Object[])>($r26);

     label2:
        z1 = specialinvoke r0.<safetyChecker.ProgramTree: boolean findMainFunction()>();

        if z1 == 0 goto label3;

        $z4 = r0.<safetyChecker.ProgramTree: boolean mainFunction>;

        if $z4 == 0 goto label3;

        specialinvoke r0.<safetyChecker.ProgramTree: void startTest()>();

        goto label4;

     label3:
        $z3 = r0.<safetyChecker.ProgramTree: boolean mainFunction>;

        if $z3 == 0 goto label4;

        $r30 = new safetyChecker.exception.MainFunctionNotFoundException;

        $r31 = new java.lang.StringBuilder;

        $r32 = r0.<safetyChecker.ProgramTree: java.lang.String functionSignature>;

        $r33 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r32);

        specialinvoke $r31.<java.lang.StringBuilder: void <init>(java.lang.String)>($r33);

        $r34 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not exist in the current program");

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r30.<safetyChecker.exception.MainFunctionNotFoundException: void <init>(java.lang.String)>($r35);

        throw $r30;

     label4:
        return;
    }

    private void startTest() throws safetyChecker.exception.ErrorLocationNotFoundException, safetyChecker.exception.MainFunctionNotFoundException
    {
        safetyChecker.ProgramTree r0;
        java.lang.Object[] $r1, $r2;

        r0 := @this: safetyChecker.ProgramTree;

        $r1 = newarray (java.lang.Object)[1];

        $r1[0] = "------------>startTest()";

        staticinvoke <safetyChecker.LogUtils: void detailln(java.lang.Object[])>($r1);

        specialinvoke r0.<safetyChecker.ProgramTree: void unwind()>();

        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = "<-------------startTest";

        staticinvoke <safetyChecker.LogUtils: void detailln(java.lang.Object[])>($r2);

        return;
    }

    private boolean findErrorLocation(safetyChecker.Vertex)
    {
        safetyChecker.ProgramTree r0;
        safetyChecker.Vertex r1, r7, $r24, $r26, $r27, $r28, $r30, $r31;
        safetyChecker.Edge r2, r8, $r25, $r29, r32;
        java.util.Iterator r3, r5, r6;
        soot.Unit r4, $r12, r33;
        java.util.Set $r9;
        boolean $z0, $z1, $z2, $z3;
        java.lang.Object $r10, $r14, $r23;
        soot.toolkits.graph.ExceptionalUnitGraph $r11, $r21;
        java.util.List $r13, $r22;
        java.lang.Object[] $r15, $r20;
        java.lang.StringBuilder $r16, $r17;
        java.lang.String $r18;
        safetyChecker.UnitController $r19;

        r0 := @this: safetyChecker.ProgramTree;

        r1 := @parameter0: safetyChecker.Vertex;

        $r9 = virtualinvoke r1.<safetyChecker.Vertex: java.util.Set getIncomingEdges()>();

        r3 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>();

        goto label7;

     label1:
        $r10 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r2 = (safetyChecker.Edge) $r10;

        $r11 = r0.<safetyChecker.ProgramTree: soot.toolkits.graph.ExceptionalUnitGraph cfg>;

        $r12 = virtualinvoke r2.<safetyChecker.Edge: soot.Unit getUnit()>();

        $r13 = virtualinvoke $r11.<soot.toolkits.graph.ExceptionalUnitGraph: java.util.List getPredsOf(soot.Unit)>($r12);

        r5 = interfaceinvoke $r13.<java.util.List: java.util.Iterator iterator()>();

        goto label6;

     label2:
        $r14 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r4 = (soot.Unit) $r14;

        $r15 = newarray (java.lang.Object)[1];

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>(java.lang.String)>("findErrorLocation : ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        $r15[0] = $r18;

        staticinvoke <safetyChecker.LogUtils: void debugln(java.lang.Object[])>($r15);

        $r19 = r0.<safetyChecker.ProgramTree: safetyChecker.UnitController unitController>;

        $z2 = virtualinvoke $r19.<safetyChecker.UnitController: boolean isErrorUnit(soot.Unit)>(r4);

        if $z2 == 0 goto label3;

        $r26 = new safetyChecker.Vertex;

        specialinvoke $r26.<safetyChecker.Vertex: void <init>()>();

        r0.<safetyChecker.ProgramTree: safetyChecker.Vertex lf> = $r26;

        $r27 = r0.<safetyChecker.ProgramTree: safetyChecker.Vertex lf>;

        virtualinvoke $r27.<safetyChecker.Vertex: void setErrorLocation(boolean)>(1);

        $r28 = r0.<safetyChecker.ProgramTree: safetyChecker.Vertex lf>;

        virtualinvoke $r28.<safetyChecker.Vertex: void setNextVertex(safetyChecker.Vertex)>(r1);

        $r29 = new safetyChecker.Edge;

        specialinvoke $r29.<safetyChecker.Edge: void <init>(soot.Unit)>(r4);

        r32 = $r29;

        $r30 = r0.<safetyChecker.ProgramTree: safetyChecker.Vertex lf>;

        virtualinvoke $r30.<safetyChecker.Vertex: void addIncomingEdge(safetyChecker.Edge)>(r32);

        $r31 = r0.<safetyChecker.ProgramTree: safetyChecker.Vertex lf>;

        virtualinvoke r1.<safetyChecker.Vertex: void addPreviousVertex(safetyChecker.Vertex)>($r31);

        return 1;

     label3:
        $r20 = newarray (java.lang.Object)[1];

        $r20[0] = "else girdi";

        staticinvoke <safetyChecker.LogUtils: void debugln(java.lang.Object[])>($r20);

        $r21 = r0.<safetyChecker.ProgramTree: soot.toolkits.graph.ExceptionalUnitGraph cfg>;

        $r22 = virtualinvoke $r21.<soot.toolkits.graph.ExceptionalUnitGraph: java.util.List getPredsOf(soot.Unit)>(r4);

        r6 = interfaceinvoke $r22.<java.util.List: java.util.Iterator iterator()>();

        goto label5;

     label4:
        $r23 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        r33 = (soot.Unit) $r23;

        $r24 = new safetyChecker.Vertex;

        specialinvoke $r24.<safetyChecker.Vertex: void <init>()>();

        r7 = $r24;

        $r25 = new safetyChecker.Edge;

        specialinvoke $r25.<safetyChecker.Edge: void <init>(soot.Unit)>(r33);

        r8 = $r25;

        virtualinvoke r7.<safetyChecker.Vertex: void addIncomingEdge(safetyChecker.Edge)>(r8);

     label5:
        $z3 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z3 != 0 goto label4;

     label6:
        $z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label2;

     label7:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return 0;
    }

    private boolean findMainFunction()
    {
        safetyChecker.ProgramTree r0;
        soot.Body r1, $r10;
        safetyChecker.Edge r2, $r26;
        boolean z0, $z1, $z2, $z3, $z3_1, $z3_2, $z3_3;
        safetyChecker.Vertex r3, $r23, $r34;
        java.lang.String $r4, $r7, $r11, $r15, $r16, $r19, $r22, $r35, $r38;
        java.util.Map $r5, $r8, $r12, $r17, $r18, $r36, $r37;
        soot.toolkits.graph.ExceptionalUnitGraph $r6, $r24, $r27, $r31;
        java.lang.Object $r9, $r13, $r29, $r39;
        soot.SootMethod $r14;
        java.lang.Integer $r20, $r40, $r41;
        java.util.List $r25, $r28, $r33;
        int $i0, $i1, $i2, $i3, i4, i4_1, i4_2;
        soot.Unit $r30, $r32;

        r0 := @this: safetyChecker.ProgramTree;

        $r5 = r0.<safetyChecker.ProgramTree: java.util.Map stores>;

        $r4 = r0.<safetyChecker.ProgramTree: java.lang.String functionSignature>;

        $z1 = interfaceinvoke $r5.<java.util.Map: boolean containsKey(java.lang.Object)>($r4);

        if $z1 == 0 goto label7;

        $r6 = new soot.toolkits.graph.ExceptionalUnitGraph;

        $r8 = r0.<safetyChecker.ProgramTree: java.util.Map stores>;

        $r7 = r0.<safetyChecker.ProgramTree: java.lang.String functionSignature>;

        $r9 = interfaceinvoke $r8.<java.util.Map: java.lang.Object get(java.lang.Object)>($r7);

        $r10 = (soot.Body) $r9;

        specialinvoke $r6.<soot.toolkits.graph.ExceptionalUnitGraph: void <init>(soot.Body)>($r10);

        r0.<safetyChecker.ProgramTree: soot.toolkits.graph.ExceptionalUnitGraph cfg> = $r6;

        $r12 = r0.<safetyChecker.ProgramTree: java.util.Map stores>;

        $r11 = r0.<safetyChecker.ProgramTree: java.lang.String functionSignature>;

        $r13 = interfaceinvoke $r12.<java.util.Map: java.lang.Object get(java.lang.Object)>($r11);

        r1 = (soot.Body) $r13;

        $r14 = virtualinvoke r1.<soot.Body: soot.SootMethod getMethod()>();

        $r15 = virtualinvoke $r14.<soot.SootMethod: java.lang.String getName()>();

        r0.<safetyChecker.ProgramTree: java.lang.String functionName> = $r15;

        $r17 = <safetyChecker.ProgramTree: java.util.Map functionNameInvokeCount>;

        $r16 = r0.<safetyChecker.ProgramTree: java.lang.String functionName>;

        $z2 = interfaceinvoke $r17.<java.util.Map: boolean containsKey(java.lang.Object)>($r16);

        if $z2 == 0 goto label1;

        $r37 = <safetyChecker.ProgramTree: java.util.Map functionNameInvokeCount>;

        $r38 = r0.<safetyChecker.ProgramTree: java.lang.String functionName>;

        $r36 = <safetyChecker.ProgramTree: java.util.Map functionNameInvokeCount>;

        $r35 = r0.<safetyChecker.ProgramTree: java.lang.String functionName>;

        $r39 = interfaceinvoke $r36.<java.util.Map: java.lang.Object get(java.lang.Object)>($r35);

        $r40 = (java.lang.Integer) $r39;

        $i2 = virtualinvoke $r40.<java.lang.Integer: int intValue()>();

        $i3 = $i2 + 1;

        $r41 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3);

        interfaceinvoke $r37.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r38, $r41);

        goto label2;

     label1:
        $r18 = <safetyChecker.ProgramTree: java.util.Map functionNameInvokeCount>;

        $r19 = r0.<safetyChecker.ProgramTree: java.lang.String functionName>;

        $r20 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        interfaceinvoke $r18.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r19, $r20);

     label2:
        $r22 = r0.<safetyChecker.ProgramTree: java.lang.String functionSignature>;

        r0.<safetyChecker.ProgramTree: java.lang.String signature> = $r22;

        $r23 = new safetyChecker.Vertex;

        specialinvoke $r23.<safetyChecker.Vertex: void <init>()>();

        r0.<safetyChecker.ProgramTree: safetyChecker.Vertex root> = $r23;

        i4 = 0;

(0)     goto label6;

     label3:
        $r26 = new safetyChecker.Edge;

        $r27 = r0.<safetyChecker.ProgramTree: soot.toolkits.graph.ExceptionalUnitGraph cfg>;

        $r28 = virtualinvoke $r27.<soot.toolkits.graph.ExceptionalUnitGraph: java.util.List getTails()>();

        $r29 = interfaceinvoke $r28.<java.util.List: java.lang.Object get(int)>(i4_1);

        $r30 = (soot.Unit) $r29;

        specialinvoke $r26.<safetyChecker.Edge: void <init>(soot.Unit)>($r30);

        r2 = $r26;

        virtualinvoke r2.<safetyChecker.Edge: void setReturnEdge(boolean)>(1);

        $r31 = r0.<safetyChecker.ProgramTree: soot.toolkits.graph.ExceptionalUnitGraph cfg>;

        $r32 = virtualinvoke r2.<safetyChecker.Edge: soot.Unit getUnit()>();

        $r33 = virtualinvoke $r31.<soot.toolkits.graph.ExceptionalUnitGraph: java.util.List getUnexceptionalPredsOf(soot.Unit)>($r32);

        $i1 = interfaceinvoke $r33.<java.util.List: int size()>();

        if $i1 <= 1 goto label4;

        $z3_1 = 1;

(1)     goto label5;

     label4:
(2)     $z3_2 = 0;

     label5:
        $z3_3 = Phi($z3_1 #1, $z3_2 #2);

        z0 = $z3_3;

        $r34 = r0.<safetyChecker.ProgramTree: safetyChecker.Vertex root>;

        r3 = specialinvoke r0.<safetyChecker.ProgramTree: safetyChecker.Vertex addVertex(safetyChecker.Vertex,safetyChecker.Edge,boolean)>($r34, r2, z0);

        virtualinvoke r3.<safetyChecker.Vertex: void setReturnLocation(boolean)>(1);

(3)     i4_2 = i4_1 + 1;

     label6:
        i4_1 = Phi(i4 #0, i4_2 #3);

        $z3 = Phi($z3 #0, $z3_3 #3);

        $r24 = r0.<safetyChecker.ProgramTree: soot.toolkits.graph.ExceptionalUnitGraph cfg>;

        $r25 = virtualinvoke $r24.<soot.toolkits.graph.ExceptionalUnitGraph: java.util.List getTails()>();

        $i0 = interfaceinvoke $r25.<java.util.List: int size()>();

        if i4_1 < $i0 goto label3;

        return 1;

     label7:
        return 0;
    }

    public boolean getNewReturnPath() throws safetyChecker.exception.MainFunctionNotFoundException, safetyChecker.exception.ErrorLocationNotFoundException
    {
        safetyChecker.ProgramTree r0;
        safetyChecker.Vertex r1, r2;
        java.lang.Object[] $r3, $r7, $r13, $r14;
        java.util.Queue $r4, $r5, $r9, $r10;
        boolean $z1;
        java.lang.Object $r6, $r11;
        java.util.Set $r8;
        int $i0;
        safetyChecker.Z3ScriptHandler $r12;

        r0 := @this: safetyChecker.ProgramTree;

        $r3 = newarray (java.lang.Object)[1];

        $r3[0] = ">>>>>>>> ProgramTree.getNewReturnPath";

        staticinvoke <safetyChecker.LogUtils: void warningln(java.lang.Object[])>($r3);

        goto label2;

     label1:
        $r5 = r0.<safetyChecker.ProgramTree: java.util.Queue uncovered>;

        $r6 = interfaceinvoke $r5.<java.util.Queue: java.lang.Object remove()>();

        r1 = (safetyChecker.Vertex) $r6;

        $r7 = newarray (java.lang.Object)[1];

        $r8 = virtualinvoke r1.<safetyChecker.Vertex: java.util.Set getIncomingEdges()>();

        $r7[0] = $r8;

        staticinvoke <safetyChecker.LogUtils: void detailln(java.lang.Object[])>($r7);

        specialinvoke r0.<safetyChecker.ProgramTree: boolean expandBFS(safetyChecker.Vertex)>(r1);

        $r9 = r0.<safetyChecker.ProgramTree: java.util.Queue returnRootQueue>;

        $i0 = interfaceinvoke $r9.<java.util.Queue: int size()>();

        if $i0 <= 0 goto label2;

        $r10 = r0.<safetyChecker.ProgramTree: java.util.Queue returnRootQueue>;

        $r11 = interfaceinvoke $r10.<java.util.Queue: java.lang.Object peek()>();

        r2 = (safetyChecker.Vertex) $r11;

        $r12 = r0.<safetyChecker.ProgramTree: safetyChecker.Z3ScriptHandler z3Handler>;

        virtualinvoke $r12.<safetyChecker.Z3ScriptHandler: void convertPathtoZ3Script(safetyChecker.Vertex)>(r2);

        $r13 = newarray (java.lang.Object)[1];

        $r13[0] = "inside if";

        staticinvoke <safetyChecker.LogUtils: void infoln(java.lang.Object[])>($r13);

        staticinvoke <java.lang.System: void exit(int)>(0);

        return 1;

     label2:
        $r4 = r0.<safetyChecker.ProgramTree: java.util.Queue uncovered>;

        $z1 = interfaceinvoke $r4.<java.util.Queue: boolean isEmpty()>();

        if $z1 == 0 goto label1;

        $r14 = newarray (java.lang.Object)[1];

        $r14[0] = "<<<<<<<<< ProgramTree.getNewReturnPath";

        staticinvoke <safetyChecker.LogUtils: void warningln(java.lang.Object[])>($r14);

        return 0;
    }

    public safetyChecker.Vertex getNewReturnRoot()
    {
        safetyChecker.ProgramTree r0;
        safetyChecker.Vertex r1;
        java.util.Queue $r2, $r3;
        boolean $z0;
        java.lang.Object $r4;
        java.lang.Object[] $r5;
        java.lang.StringBuilder $r6, $r7;
        java.lang.String $r8;

        r0 := @this: safetyChecker.ProgramTree;

        $r2 = r0.<safetyChecker.ProgramTree: java.util.Queue returnRootQueue>;

        $z0 = interfaceinvoke $r2.<java.util.Queue: boolean isEmpty()>();

        if $z0 != 0 goto label1;

        $r3 = r0.<safetyChecker.ProgramTree: java.util.Queue returnRootQueue>;

        $r4 = interfaceinvoke $r3.<java.util.Queue: java.lang.Object remove()>();

        r1 = (safetyChecker.Vertex) $r4;

        $r5 = newarray (java.lang.Object)[1];

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>("returnRoot=");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $r5[0] = $r8;

        staticinvoke <safetyChecker.LogUtils: void warningln(java.lang.Object[])>($r5);

        return r1;

     label1:
        return null;
    }

    public boolean isTreeDone()
    {
        safetyChecker.ProgramTree r0;
        boolean z0;
        java.util.Queue $r1;

        r0 := @this: safetyChecker.ProgramTree;

        z0 = 1;

        $r1 = r0.<safetyChecker.ProgramTree: java.util.Queue uncovered>;

        interfaceinvoke $r1.<java.util.Queue: boolean isEmpty()>();

        return z0;
    }

    private void unwind() throws safetyChecker.exception.MainFunctionNotFoundException, safetyChecker.exception.ErrorLocationNotFoundException
    {
        safetyChecker.ProgramTree r0;
        boolean z0, $z2, $z3, $z4, $z5, $z6, $z7, $z8;
        safetyChecker.Vertex r1, $r38, r47;
        java.lang.Object[] $r2, $r6, $r18, $r25, $r34, $r39, $r46;
        java.util.Queue $r3, $r4, $r17, $r20, $r23, $r41, $r45;
        java.lang.Object $r5, $r24;
        java.lang.StringBuilder $r7, $r9, $r10, $r11, $r12, $r14, $r19, $r21, $r26, $r28, $r29, $r30, $r40, $r42;
        safetyChecker.Edge $r8;
        safetyChecker.CoverRelation $r13, $r16, $r36, $r44;
        java.lang.String $r15, $r22, $r31, $r35, $r43;
        java.util.HashSet $r27;
        int $i0, $i1;
        safetyChecker.Z3ScriptHandler $r32;
        safetyChecker.InterpolationHandler $r33;
        java.util.LinkedList $r37, r48;

        r0 := @this: safetyChecker.ProgramTree;

        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = "----->Unwind";

        staticinvoke <safetyChecker.LogUtils: void infoln(java.lang.Object[])>($r2);

        z0 = 0;

        goto label5;

     label1:
        $r4 = r0.<safetyChecker.ProgramTree: java.util.Queue uncovered>;

        $r5 = interfaceinvoke $r4.<java.util.Queue: java.lang.Object remove()>();

        r47 = (safetyChecker.Vertex) $r5;

        $z3 = specialinvoke r0.<safetyChecker.ProgramTree: boolean isConnectionCovered(safetyChecker.Vertex)>(r47);

        if $z3 == 0 goto label2;

        goto label5;

     label2:
        $r6 = newarray (java.lang.Object)[1];

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>()>();

        $r8 = virtualinvoke r47.<safetyChecker.Vertex: safetyChecker.Edge getOutgoingEdge()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("---");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r47);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("--");

        $r13 = r0.<safetyChecker.ProgramTree: safetyChecker.CoverRelation coverRelation>;

        $z4 = virtualinvoke $r13.<safetyChecker.CoverRelation: boolean isCovered(safetyChecker.Vertex)>(r47);

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z4);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6[0] = $r15;

        staticinvoke <safetyChecker.LogUtils: void debugln(java.lang.Object[])>($r6);

        $r16 = r0.<safetyChecker.ProgramTree: safetyChecker.CoverRelation coverRelation>;

        $z5 = virtualinvoke $r16.<safetyChecker.CoverRelation: boolean isCovered(safetyChecker.Vertex)>(r47);

        if $z5 == 0 goto label3;

        goto label5;

     label3:
        specialinvoke r0.<safetyChecker.ProgramTree: boolean expandBFS(safetyChecker.Vertex)>(r47);

        $r17 = r0.<safetyChecker.ProgramTree: java.util.Queue errorRootQueue>;

        $z6 = interfaceinvoke $r17.<java.util.Queue: boolean isEmpty()>();

        if $z6 != 0 goto label5;

        $r18 = newarray (java.lang.Object)[1];

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>(java.lang.String)>("errorRootQueue = ");

        $r20 = r0.<safetyChecker.ProgramTree: java.util.Queue errorRootQueue>;

        $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        $r18[0] = $r22;

        staticinvoke <safetyChecker.LogUtils: void debugln(java.lang.Object[])>($r18);

        $r23 = r0.<safetyChecker.ProgramTree: java.util.Queue errorRootQueue>;

        $r24 = interfaceinvoke $r23.<java.util.Queue: java.lang.Object remove()>();

        r1 = (safetyChecker.Vertex) $r24;

        $r25 = newarray (java.lang.Object)[1];

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>(java.lang.String)>("error root #");

        $r27 = r0.<safetyChecker.ProgramTree: java.util.HashSet errorRootSet>;

        $i0 = virtualinvoke $r27.<java.util.HashSet: int size()>();

        $r28 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=");

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        $r25[0] = $r31;

        staticinvoke <safetyChecker.LogUtils: void infoln(java.lang.Object[])>($r25);

        $r32 = r0.<safetyChecker.ProgramTree: safetyChecker.Z3ScriptHandler z3Handler>;

        virtualinvoke $r32.<safetyChecker.Z3ScriptHandler: void convertPathtoZ3Script(safetyChecker.Vertex)>(r1);

        $r33 = r0.<safetyChecker.ProgramTree: safetyChecker.InterpolationHandler itpHandler>;

        $z7 = virtualinvoke $r33.<safetyChecker.InterpolationHandler: boolean createInterpolant(safetyChecker.Vertex)>(r1);

        r0.<safetyChecker.ProgramTree: boolean errorLocationFeasible> = $z7;

        $r34 = newarray (java.lang.Object)[1];

        $r34[0] = "printing result path";

        staticinvoke <safetyChecker.LogUtils: void debugln(java.lang.Object[])>($r34);

        $r35 = virtualinvoke r1.<safetyChecker.Vertex: java.lang.String toString()>();

        virtualinvoke r0.<safetyChecker.ProgramTree: void printResult(java.lang.String)>($r35);

        $z8 = r0.<safetyChecker.ProgramTree: boolean errorLocationFeasible>;

        if $z8 == 0 goto label4;

        goto label6;

     label4:
        $r36 = r0.<safetyChecker.ProgramTree: safetyChecker.CoverRelation coverRelation>;

        virtualinvoke $r36.<safetyChecker.CoverRelation: void updateCover()>();

     label5:
        $r3 = r0.<safetyChecker.ProgramTree: java.util.Queue uncovered>;

        $z2 = interfaceinvoke $r3.<java.util.Queue: boolean isEmpty()>();

        if $z2 == 0 goto label1;

     label6:
        $r37 = new java.util.LinkedList;

        specialinvoke $r37.<java.util.LinkedList: void <init>()>();

        r48 = $r37;

        $r38 = r0.<safetyChecker.ProgramTree: safetyChecker.Vertex root>;

        interfaceinvoke r48.<java.util.Queue: boolean add(java.lang.Object)>($r38);

        staticinvoke <dotty.CfgConverter: void printAllPaths(java.util.Queue,java.lang.String)>(r48, "_all.dot");

        $r39 = newarray (java.lang.Object)[1];

        $r40 = new java.lang.StringBuilder;

        specialinvoke $r40.<java.lang.StringBuilder: void <init>(java.lang.String)>("errorSet size = ");

        $r41 = r0.<safetyChecker.ProgramTree: java.util.Queue errorSet>;

        $i1 = interfaceinvoke $r41.<java.util.Queue: int size()>();

        $r42 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.String toString()>();

        $r39[0] = $r43;

        staticinvoke <safetyChecker.LogUtils: void warningln(java.lang.Object[])>($r39);

        $r45 = r0.<safetyChecker.ProgramTree: java.util.Queue errorSet>;

        $r44 = r0.<safetyChecker.ProgramTree: safetyChecker.CoverRelation coverRelation>;

        staticinvoke <dotty.CfgConverter: void printErrorPaths(java.util.Queue,java.lang.String,safetyChecker.CoverRelation)>($r45, "_errors.dot", $r44);

        $r46 = newarray (java.lang.Object)[1];

        $r46[0] = "<------unwind";

        staticinvoke <safetyChecker.LogUtils: void infoln(java.lang.Object[])>($r46);

        return;
    }

    private boolean expandBFS(safetyChecker.Vertex) throws safetyChecker.exception.MainFunctionNotFoundException, safetyChecker.exception.ErrorLocationNotFoundException
    {
        safetyChecker.ProgramTree r0;
        safetyChecker.Vertex r1, r6;
        java.util.List r2;
        soot.Unit r3, $r36;
        java.util.Iterator r4;
        safetyChecker.Edge r5, $r11, $r17, $r31, $r35, $r38, $r39, $r43;
        java.lang.Object[] $r7, $r21, $r29;
        java.lang.StringBuilder $r8, $r9, $r10, $r12, $r13, $r15, $r16, $r18, $r22, $r24, $r25, $r27, $r30, $r32;
        safetyChecker.CoverRelation $r14, $r20, $r51;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z12, $z16, z17, z18, z18_1, z18_2, z17_1, z17_2, z17_3, z17_4, z18_3, z17_5;
        java.lang.String $r19, $r28, $r33;
        java.util.Set $r23, $r26;
        int $i0, $i1, $i2;
        soot.toolkits.graph.ExceptionalUnitGraph $r34, $r40;
        java.lang.Object $r37;
        java.util.Map $r41;
        safetyChecker.UnitController $r42;
        java.util.HashMap $r44, $r45;
        java.util.Queue $r46, $r47, $r48, $r50, $r52;
        java.util.LinkedList $r49;

        r0 := @this: safetyChecker.ProgramTree;

        r1 := @parameter0: safetyChecker.Vertex;

        $r7 = newarray (java.lang.Object)[1];

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>(java.lang.String)>("----->expand : ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("--");

        $r11 = virtualinvoke r1.<safetyChecker.Vertex: safetyChecker.Edge getOutgoingEdge()>();

        $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("--");

        $r14 = r0.<safetyChecker.ProgramTree: safetyChecker.CoverRelation coverRelation>;

        $z0 = virtualinvoke $r14.<safetyChecker.CoverRelation: boolean isCovered(safetyChecker.Vertex)>(r1);

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("**");

        $r17 = virtualinvoke r1.<safetyChecker.Vertex: safetyChecker.Edge getOutgoingEdge()>();

        $z1 = virtualinvoke $r17.<safetyChecker.Edge: boolean isInErrorPath()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z1);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7[0] = $r19;

        staticinvoke <safetyChecker.LogUtils: void debugln(java.lang.Object[])>($r7);

        z17 = 0;

        $r20 = r0.<safetyChecker.ProgramTree: safetyChecker.CoverRelation coverRelation>;

        $z2 = virtualinvoke $r20.<safetyChecker.CoverRelation: boolean isCovered(safetyChecker.Vertex)>(r1);

(0)     if $z2 != 0 goto label10;

        $r29 = newarray (java.lang.Object)[1];

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>(java.lang.String)>("if (!coverRelation.isCovered(w))---");

        $r31 = virtualinvoke r1.<safetyChecker.Vertex: safetyChecker.Edge getOutgoingEdge()>();

        $r32 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r31);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        $r29[0] = $r33;

        staticinvoke <safetyChecker.LogUtils: void debugln(java.lang.Object[])>($r29);

        $r34 = r0.<safetyChecker.ProgramTree: soot.toolkits.graph.ExceptionalUnitGraph cfg>;

        $r35 = virtualinvoke r1.<safetyChecker.Vertex: safetyChecker.Edge getOutgoingEdge()>();

        $r36 = virtualinvoke $r35.<safetyChecker.Edge: soot.Unit getUnit()>();

        r2 = virtualinvoke $r34.<soot.toolkits.graph.ExceptionalUnitGraph: java.util.List getUnexceptionalPredsOf(soot.Unit)>($r36);

        z18 = 0;

        $i2 = interfaceinvoke r2.<java.util.List: int size()>();

(1)     if $i2 <= 1 goto label01;

(2)     z18_1 = 1;

     label01:
        z18_2 = Phi(z18 #1, z18_1 #2);

        r4 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>();

(3)     goto label09;

     label02:
        $r37 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r3 = (soot.Unit) $r37;

        $r38 = new safetyChecker.Edge;

        specialinvoke $r38.<safetyChecker.Edge: void <init>(soot.Unit)>(r3);

        r5 = $r38;

        virtualinvoke r5.<safetyChecker.Edge: void setProgramTree(safetyChecker.ProgramTree)>(r0);

        $r39 = virtualinvoke r1.<safetyChecker.Vertex: safetyChecker.Edge getOutgoingEdge()>();

        $z4 = virtualinvoke $r39.<safetyChecker.Edge: boolean isInErrorPath()>();

        virtualinvoke r5.<safetyChecker.Edge: void setInErrorPath(boolean)>($z4);

        r6 = specialinvoke r0.<safetyChecker.ProgramTree: safetyChecker.Vertex addVertex(safetyChecker.Vertex,safetyChecker.Edge,boolean)>(r1, r5, z18_2);

        $r42 = r0.<safetyChecker.ProgramTree: safetyChecker.UnitController unitController>;

        $r41 = r0.<safetyChecker.ProgramTree: java.util.Map stores>;

        $r40 = r0.<safetyChecker.ProgramTree: soot.toolkits.graph.ExceptionalUnitGraph cfg>;

        virtualinvoke $r42.<safetyChecker.UnitController: void analyzeEdge(safetyChecker.Edge,java.util.Map,soot.toolkits.graph.ExceptionalUnitGraph)>(r5, $r41, $r40);

        $z5 = virtualinvoke r5.<safetyChecker.Edge: boolean isInErrorPath()>();

        if $z5 != 0 goto label03;

        $r52 = r0.<safetyChecker.ProgramTree: java.util.Queue errorSet>;

        $z16 = interfaceinvoke $r52.<java.util.Queue: boolean isEmpty()>();

        if $z16 != 0 goto label03;

(4)     goto label09;

     label03:
        $z6 = virtualinvoke r5.<safetyChecker.Edge: boolean isControlLocation()>();

        if $z6 == 0 goto label04;

        $r51 = r0.<safetyChecker.ProgramTree: safetyChecker.CoverRelation coverRelation>;

        virtualinvoke $r51.<safetyChecker.CoverRelation: void updateUnitVertexMap(safetyChecker.Vertex)>(r6);

     label04:
        $z7 = virtualinvoke r5.<safetyChecker.Edge: boolean isErrorEdge()>();

        if $z7 == 0 goto label05;

        $r50 = r0.<safetyChecker.ProgramTree: java.util.Queue errorSet>;

        interfaceinvoke $r50.<java.util.Queue: boolean add(java.lang.Object)>(r1);

     label05:
        $z8 = virtualinvoke r5.<safetyChecker.Edge: boolean isSubFunction()>();

        if $z8 == 0 goto label06;

        $r49 = r0.<safetyChecker.ProgramTree: java.util.LinkedList subFunctionList>;

        virtualinvoke $r49.<java.util.LinkedList: boolean add(java.lang.Object)>(r5);

     label06:
        $z9 = virtualinvoke r5.<safetyChecker.Edge: boolean isEntryLocation()>();

(5)     if $z9 == 0 goto label08;

        $z12 = virtualinvoke r5.<safetyChecker.Edge: boolean isInErrorPath()>();

        if $z12 == 0 goto label07;

        specialinvoke r0.<safetyChecker.ProgramTree: void addErrorEntryLocation(safetyChecker.Vertex)>(r6);

        z17_2 = 1;

(6)     goto label08;

     label07:
        $r48 = r0.<safetyChecker.ProgramTree: java.util.Queue returnRootQueue>;

        interfaceinvoke $r48.<java.util.Queue: boolean add(java.lang.Object)>(r6);

(7)     z17_3 = 0;

     label08:
        z17_4 = Phi(z17_1 #5, z17_2 #6, z17_3 #7);

        $r43 = virtualinvoke r6.<safetyChecker.Vertex: safetyChecker.Edge getOutgoingEdge()>();

        $z10 = virtualinvoke $r43.<safetyChecker.Edge: boolean isErrorEdge()>();

(8)     if $z10 == 0 goto label09;

        $r44 = r0.<safetyChecker.ProgramTree: java.util.HashMap treeConnection>;

        virtualinvoke $r44.<java.util.HashMap: void clear()>();

        $r45 = r0.<safetyChecker.ProgramTree: java.util.HashMap candidate2BeInPath>;

        virtualinvoke $r45.<java.util.HashMap: void clear()>();

        $r46 = r0.<safetyChecker.ProgramTree: java.util.Queue uncovered>;

        interfaceinvoke $r46.<java.util.Queue: void clear()>();

        $r47 = r0.<safetyChecker.ProgramTree: java.util.Queue uncovered>;

        interfaceinvoke $r47.<java.util.Queue: boolean add(java.lang.Object)>(r6);

        virtualinvoke r6.<safetyChecker.Vertex: void setNextVertex(safetyChecker.Vertex)>(r1);

        virtualinvoke r1.<safetyChecker.Vertex: void addPreviousVertex(safetyChecker.Vertex)>(r6);

        virtualinvoke r5.<safetyChecker.Edge: void setTarget(safetyChecker.Vertex)>(r1);

(9)     virtualinvoke r1.<safetyChecker.Vertex: void addIncomingEdge(safetyChecker.Edge)>(r5);

     label09:
        z17_1 = Phi(z17 #3, z17_1 #4, z17_4 #8, z17_4 #9);

        $z3 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

(10)    if $z3 != 0 goto label02;

     label10:
        z18_3 = Phi(z18 #0, z18_2 #10);

        z17_5 = Phi(z17 #0, z17_1 #10);

        $r21 = newarray (java.lang.Object)[1];

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>(java.lang.String)>("<-----expand : w.incomingEdge#");

        $r23 = virtualinvoke r1.<safetyChecker.Vertex: java.util.Set getIncomingEdges()>();

        $i0 = interfaceinvoke $r23.<java.util.Set: int size()>();

        $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" : w.previousVertexSet#");

        $r26 = virtualinvoke r1.<safetyChecker.Vertex: java.util.Set getPreviousVertexSet()>();

        $i1 = interfaceinvoke $r26.<java.util.Set: int size()>();

        $r27 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        $r21[0] = $r28;

        staticinvoke <safetyChecker.LogUtils: void debugln(java.lang.Object[])>($r21);

        return z17_5;
    }

    private boolean isConnectionCovered(safetyChecker.Vertex)
    {
        safetyChecker.ProgramTree r0;
        safetyChecker.Vertex r1, r2, r9, r9_1, r9_2;
        java.util.HashMap $r3, $r4, $r6;
        boolean $z0, $z1;
        java.lang.Object $r5, $r7;
        safetyChecker.CoverRelation $r8;

        r0 := @this: safetyChecker.ProgramTree;

        r9 := @parameter0: safetyChecker.Vertex;

(0)     goto label3;

     label1:
        $r4 = r0.<safetyChecker.ProgramTree: java.util.HashMap candidate2BeInPath>;

        $r5 = virtualinvoke $r4.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r9_1);

        r1 = (safetyChecker.Vertex) $r5;

        $r6 = r0.<safetyChecker.ProgramTree: java.util.HashMap treeConnection>;

        $r7 = virtualinvoke $r6.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r2 = (safetyChecker.Vertex) $r7;

        $r8 = r0.<safetyChecker.ProgramTree: safetyChecker.CoverRelation coverRelation>;

        $z1 = virtualinvoke $r8.<safetyChecker.CoverRelation: boolean isCovered(safetyChecker.Vertex)>(r2);

        if $z1 == 0 goto label2;

        return 1;

     label2:
(1)     r9_2 = r2;

     label3:
        r9_1 = Phi(r9 #0, r9_2 #1);

        $r3 = r0.<safetyChecker.ProgramTree: java.util.HashMap candidate2BeInPath>;

        $z0 = virtualinvoke $r3.<java.util.HashMap: boolean containsKey(java.lang.Object)>(r9_1);

        if $z0 != 0 goto label1;

        return 0;
    }

    private void addErrorEntryLocation(safetyChecker.Vertex)
    {
        safetyChecker.ProgramTree r0;
        safetyChecker.Vertex r1, r2, r12, r12_1, r12_2;
        java.util.HashSet $r3;
        java.util.Queue $r4;
        java.util.HashMap $r5, $r6, $r8;
        boolean $z2;
        java.lang.Object $r7, $r9;
        safetyChecker.Edge $r10, $r11;

        r0 := @this: safetyChecker.ProgramTree;

        r12 := @parameter0: safetyChecker.Vertex;

        $r3 = r0.<safetyChecker.ProgramTree: java.util.HashSet errorRootSet>;

        virtualinvoke $r3.<java.util.HashSet: boolean add(java.lang.Object)>(r12);

        $r4 = r0.<safetyChecker.ProgramTree: java.util.Queue errorRootQueue>;

        interfaceinvoke $r4.<java.util.Queue: boolean add(java.lang.Object)>(r12);

(0)     goto label2;

     label1:
        $r6 = r0.<safetyChecker.ProgramTree: java.util.HashMap candidate2BeInPath>;

        $r7 = virtualinvoke $r6.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r12_1);

        r1 = (safetyChecker.Vertex) $r7;

        $r8 = r0.<safetyChecker.ProgramTree: java.util.HashMap treeConnection>;

        $r9 = virtualinvoke $r8.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r2 = (safetyChecker.Vertex) $r9;

        virtualinvoke r1.<safetyChecker.Vertex: void setNextVertex(safetyChecker.Vertex)>(r2);

        $r10 = virtualinvoke r1.<safetyChecker.Vertex: safetyChecker.Edge getOutgoingEdge()>();

        virtualinvoke $r10.<safetyChecker.Edge: void setTarget(safetyChecker.Vertex)>(r2);

        $r11 = virtualinvoke r1.<safetyChecker.Vertex: safetyChecker.Edge getOutgoingEdge()>();

        virtualinvoke r2.<safetyChecker.Vertex: void addIncomingEdge(safetyChecker.Edge)>($r11);

        virtualinvoke r2.<safetyChecker.Vertex: void addPreviousVertex(safetyChecker.Vertex)>(r1);

(1)     r12_2 = r2;

     label2:
        r12_1 = Phi(r12 #0, r12_2 #1);

        $r5 = r0.<safetyChecker.ProgramTree: java.util.HashMap candidate2BeInPath>;

        $z2 = virtualinvoke $r5.<java.util.HashMap: boolean containsKey(java.lang.Object)>(r12_1);

        if $z2 != 0 goto label1;

        return;
    }

    private safetyChecker.Vertex addVertex(safetyChecker.Vertex, safetyChecker.Edge, boolean)
    {
        safetyChecker.ProgramTree r0;
        safetyChecker.Vertex r1, r3, r4, $r5;
        safetyChecker.Edge r2;
        boolean z0, $z2;
        java.util.HashMap $r6, $r8, $r11, $r12, $r14, $r16;
        int $i0, $i1, $i2, $i3;
        java.util.Queue $r10;
        java.lang.Object $r13;

        r0 := @this: safetyChecker.ProgramTree;

        r1 := @parameter0: safetyChecker.Vertex;

        r2 := @parameter1: safetyChecker.Edge;

        z0 := @parameter2: boolean;

        $r5 = new safetyChecker.Vertex;

        specialinvoke $r5.<safetyChecker.Vertex: void <init>()>();

        r3 = $r5;

        virtualinvoke r3.<safetyChecker.Vertex: void setOutgoingEdge(safetyChecker.Edge)>(r2);

        if z0 != 0 goto label1;

        virtualinvoke r3.<safetyChecker.Vertex: void setNextVertex(safetyChecker.Vertex)>(r1);

        virtualinvoke r1.<safetyChecker.Vertex: void addIncomingEdge(safetyChecker.Edge)>(r2);

        virtualinvoke r1.<safetyChecker.Vertex: void addPreviousVertex(safetyChecker.Vertex)>(r3);

        virtualinvoke r2.<safetyChecker.Edge: void setTarget(safetyChecker.Vertex)>(r1);

        $r11 = r0.<safetyChecker.ProgramTree: java.util.HashMap candidate2BeInPath>;

        $z2 = virtualinvoke $r11.<java.util.HashMap: boolean containsKey(java.lang.Object)>(r1);

        if $z2 == 0 goto label2;

        $r12 = r0.<safetyChecker.ProgramTree: java.util.HashMap candidate2BeInPath>;

        $r13 = virtualinvoke $r12.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1);

        r4 = (safetyChecker.Vertex) $r13;

        $r14 = r0.<safetyChecker.ProgramTree: java.util.HashMap candidate2BeInPath>;

        virtualinvoke $r14.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, r4);

        $r16 = r0.<safetyChecker.ProgramTree: java.util.HashMap candidate2BeInPath>;

        virtualinvoke $r16.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>(r1);

        goto label2;

     label1:
        $r6 = r0.<safetyChecker.ProgramTree: java.util.HashMap treeConnection>;

        virtualinvoke $r6.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, r1);

        $r8 = r0.<safetyChecker.ProgramTree: java.util.HashMap candidate2BeInPath>;

        virtualinvoke $r8.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, r3);

     label2:
        virtualinvoke r2.<safetyChecker.Edge: void setSource(safetyChecker.Vertex)>(r3);

        $i0 = virtualinvoke r1.<safetyChecker.Vertex: int getDistance()>();

        $i1 = $i0 + 1;

        virtualinvoke r3.<safetyChecker.Vertex: void setDistance(int)>($i1);

        $r10 = r0.<safetyChecker.ProgramTree: java.util.Queue uncovered>;

        interfaceinvoke $r10.<java.util.Queue: boolean add(java.lang.Object)>(r3);

        $i2 = r0.<safetyChecker.ProgramTree: int locationCounter>;

        $i3 = $i2 + 1;

        r0.<safetyChecker.ProgramTree: int locationCounter> = $i3;

        virtualinvoke r3.<safetyChecker.Vertex: void setLocationNumber(int)>($i3);

        return r3;
    }

    private void refine(safetyChecker.Vertex)
    {
        safetyChecker.ProgramTree r0;
        safetyChecker.Vertex r1;

        r0 := @this: safetyChecker.ProgramTree;

        r1 := @parameter0: safetyChecker.Vertex;

        return;
    }

    public java.lang.String getProgramDefinition()
    {
        safetyChecker.ProgramTree r0;
        java.lang.StringBuilder $r1, $r3, $r4, $r8;
        java.lang.String $r2, $r5, $r9;
        java.util.Map $r6;
        java.lang.Object $r7;

        r0 := @this: safetyChecker.ProgramTree;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>("_");

        $r2 = r0.<safetyChecker.ProgramTree: java.lang.String functionName>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_");

        $r6 = <safetyChecker.ProgramTree: java.util.Map functionNameInvokeCount>;

        $r5 = r0.<safetyChecker.ProgramTree: java.lang.String functionName>;

        $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>($r5);

        $r8 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;
    }

    public java.lang.String getFunctionName()
    {
        safetyChecker.ProgramTree r0;
        java.lang.String $r1;

        r0 := @this: safetyChecker.ProgramTree;

        $r1 = r0.<safetyChecker.ProgramTree: java.lang.String functionName>;

        return $r1;
    }

    public void printResult(java.lang.String)
    {
        safetyChecker.ProgramTree r0;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: safetyChecker.ProgramTree;

        r1 := @parameter0: java.lang.String;

        $z0 = r0.<safetyChecker.ProgramTree: boolean errorLocationFeasible>;

        staticinvoke <safetyChecker.LogUtils: void printResult(java.lang.String,boolean)>(r1, $z0);

        return;
    }

    protected java.util.Queue getUncovered()
    {
        safetyChecker.ProgramTree r0;
        java.util.Queue $r1;

        r0 := @this: safetyChecker.ProgramTree;

        $r1 = r0.<safetyChecker.ProgramTree: java.util.Queue uncovered>;

        return $r1;
    }

    protected soot.toolkits.graph.ExceptionalUnitGraph getCfg()
    {
        safetyChecker.ProgramTree r0;
        soot.toolkits.graph.ExceptionalUnitGraph $r1;

        r0 := @this: safetyChecker.ProgramTree;

        $r1 = r0.<safetyChecker.ProgramTree: soot.toolkits.graph.ExceptionalUnitGraph cfg>;

        return $r1;
    }
}
