public class safetyChecker.InterpolationHandler extends java.lang.Object
{
    private com.microsoft.z3.InterpolationContext ictx;
    private safetyChecker.Z3ScriptHandler z3Handler;
    com.microsoft.z3.Expr[] 'from';
    com.microsoft.z3.Expr[] 'to';

    public void <init>(com.microsoft.z3.InterpolationContext, safetyChecker.Z3ScriptHandler)
    {
        safetyChecker.InterpolationHandler r0;
        com.microsoft.z3.InterpolationContext r1;
        safetyChecker.Z3ScriptHandler r2;

        r0 := @this: safetyChecker.InterpolationHandler;

        r1 := @parameter0: com.microsoft.z3.InterpolationContext;

        r2 := @parameter1: safetyChecker.Z3ScriptHandler;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<safetyChecker.InterpolationHandler: com.microsoft.z3.Expr[] 'from'> = null;

        r0.<safetyChecker.InterpolationHandler: com.microsoft.z3.Expr[] 'to'> = null;

        r0.<safetyChecker.InterpolationHandler: com.microsoft.z3.InterpolationContext ictx> = r1;

        r0.<safetyChecker.InterpolationHandler: safetyChecker.Z3ScriptHandler z3Handler> = r2;

        return;
    }

    public boolean createInterpolant(safetyChecker.Vertex)
    {
        safetyChecker.InterpolationHandler r0;
        safetyChecker.Vertex r1, r29, r29_1, r29_2;
        com.microsoft.z3.enumerations.Z3_lbool r2, $r21, $r22;
        java.lang.Object[] $r3, $r5, $r9, $r17, $r18, $r19, $r23, $r27;
        safetyChecker.Edge $r4, r30;
        java.lang.StringBuilder $r6, $r7, $r10, $r11, $r24, $r25;
        java.lang.String $r8, $r12, $r26;
        boolean $z0, $z1, z2, z2_1, z2_2, z2_3;
        com.microsoft.z3.BoolExpr[] $r13, r35;
        com.microsoft.z3.InterpolationContext $r14, $r15, $r16, $r20;
        com.microsoft.z3.BoolExpr r28, r31, r32, r28_1, r28_2, r28_3, r28_4;
        com.microsoft.z3.Params r33;
        com.microsoft.z3.InterpolationContext$ComputeInterpolantResult r34;

        r0 := @this: safetyChecker.InterpolationHandler;

        r1 := @parameter0: safetyChecker.Vertex;

        $r3 = newarray (java.lang.Object)[1];

        $r3[0] = ">>>>>> InterpolationHandler.createInterpolant";

        staticinvoke <safetyChecker.LogUtils: void debugln(java.lang.Object[])>($r3);

        $r4 = virtualinvoke r1.<safetyChecker.Vertex: safetyChecker.Edge getOutgoingEdge()>();

        r28 = virtualinvoke $r4.<safetyChecker.Edge: com.microsoft.z3.BoolExpr getZ3Expr()>();

        $r5 = newarray (java.lang.Object)[1];

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>("******root=");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $r5[0] = $r8;

        staticinvoke <safetyChecker.LogUtils: void infoln(java.lang.Object[])>($r5);

        r29 = virtualinvoke r1.<safetyChecker.Vertex: safetyChecker.Vertex getNextVertex()>();

(0)     goto label5;

     label1:
        r30 = virtualinvoke r29_1.<safetyChecker.Vertex: safetyChecker.Edge getOutgoingEdge()>();

        $z0 = virtualinvoke r30.<safetyChecker.Edge: boolean isErrorEdge()>();

        if $z0 == 0 goto label2;

        goto label6;

     label2:
        r31 = virtualinvoke r30.<safetyChecker.Edge: com.microsoft.z3.BoolExpr getZ3Expr()>();

        $r9 = newarray (java.lang.Object)[1];

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>(java.lang.String)>("z3Expr = ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r31);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        $r9[0] = $r12;

        staticinvoke <safetyChecker.LogUtils: void debugln(java.lang.Object[])>($r9);

        $r14 = r0.<safetyChecker.InterpolationHandler: com.microsoft.z3.InterpolationContext ictx>;

        $r13 = newarray (com.microsoft.z3.BoolExpr)[2];

        $r13[0] = r31;

        $r13[1] = r28_1;

        r32 = virtualinvoke $r14.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.BoolExpr mkAnd(com.microsoft.z3.BoolExpr[])>($r13);

        $z1 = virtualinvoke r30.<safetyChecker.Edge: boolean isControlLocation()>();

        if $z1 == 0 goto label3;

        $r15 = r0.<safetyChecker.InterpolationHandler: com.microsoft.z3.InterpolationContext ictx>;

        r28_2 = virtualinvoke $r15.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.BoolExpr MkInterpolant(com.microsoft.z3.BoolExpr)>(r32);

(1)     goto label4;

     label3:
(2)     r28_3 = r32;

     label4:
        r28_4 = Phi(r28_2 #1, r28_3 #2);

(3)     r29_2 = virtualinvoke r29_1.<safetyChecker.Vertex: safetyChecker.Vertex getNextVertex()>();

     label5:
        r29_1 = Phi(r29 #0, r29_2 #3);

        r28_1 = Phi(r28 #0, r28_4 #3);

        if r29_1 != null goto label1;

     label6:
        $r16 = r0.<safetyChecker.InterpolationHandler: com.microsoft.z3.InterpolationContext ictx>;

        r33 = virtualinvoke $r16.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.Params mkParams()>();

        $r17 = newarray (java.lang.Object)[1];

        $r17[0] = "------------------pathformula----------------";

        staticinvoke <safetyChecker.LogUtils: void debugln(java.lang.Object[])>($r17);

        $r18 = newarray (java.lang.Object)[1];

        $r18[0] = r28_1;

        staticinvoke <safetyChecker.LogUtils: void debugln(java.lang.Object[])>($r18);

        $r19 = newarray (java.lang.Object)[1];

        $r19[0] = "------------------pathformula----------------";

        staticinvoke <safetyChecker.LogUtils: void debugln(java.lang.Object[])>($r19);

        $r20 = r0.<safetyChecker.InterpolationHandler: com.microsoft.z3.InterpolationContext ictx>;

        r34 = virtualinvoke $r20.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.InterpolationContext$ComputeInterpolantResult ComputeInterpolant(com.microsoft.z3.Expr,com.microsoft.z3.Params)>(r28_1, r33);

        r35 = r34.<com.microsoft.z3.InterpolationContext$ComputeInterpolantResult: com.microsoft.z3.BoolExpr[] interp>;

        specialinvoke r0.<safetyChecker.InterpolationHandler: void generateNameMapping()>();

        specialinvoke r0.<safetyChecker.InterpolationHandler: void updateInvariant(safetyChecker.Vertex,com.microsoft.z3.BoolExpr[])>(r1, r35);

        r2 = r34.<com.microsoft.z3.InterpolationContext$ComputeInterpolantResult: com.microsoft.z3.enumerations.Z3_lbool status>;

        z2 = 0;

        $r21 = <com.microsoft.z3.enumerations.Z3_lbool: com.microsoft.z3.enumerations.Z3_lbool Z3_L_FALSE>;

        if r2 != $r21 goto label7;

        z2_1 = 0;

(4)     goto label8;

     label7:
        $r22 = <com.microsoft.z3.enumerations.Z3_lbool: com.microsoft.z3.enumerations.Z3_lbool Z3_L_TRUE>;

(5)     if r2 != $r22 goto label8;

(6)     z2_2 = 1;

     label8:
        z2_3 = Phi(z2_1 #4, z2 #5, z2_2 #6);

        $r23 = newarray (java.lang.Object)[1];

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>(java.lang.String)>("interpolation result=");

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z2_3);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        $r23[0] = $r26;

        staticinvoke <safetyChecker.LogUtils: void debugln(java.lang.Object[])>($r23);

        $r27 = newarray (java.lang.Object)[1];

        $r27[0] = "<<<<<< InterpolationHandler.createInterpolant";

        staticinvoke <safetyChecker.LogUtils: void debugln(java.lang.Object[])>($r27);

        return z2_3;
    }

    private void updateInvariant(safetyChecker.Vertex, com.microsoft.z3.BoolExpr[])
    {
        safetyChecker.InterpolationHandler r0;
        safetyChecker.Vertex r1, r20, r20_1, r20_2, r20_3;
        com.microsoft.z3.BoolExpr[] r2, $r18;
        com.microsoft.z3.BoolExpr r3, r4, r5, r6, $r17;
        java.lang.Object[] $r7, $r8;
        java.lang.StringBuilder $r9, $r10;
        int $i0, i1, i1_1, i1_2, i1_3, i1_4;
        java.lang.String $r11;
        safetyChecker.Edge $r12, $r13;
        boolean $z0;
        com.microsoft.z3.Expr[] $r14, $r15;
        com.microsoft.z3.Expr $r16;
        com.microsoft.z3.InterpolationContext $r19;

        r0 := @this: safetyChecker.InterpolationHandler;

        r1 := @parameter0: safetyChecker.Vertex;

        r2 := @parameter1: com.microsoft.z3.BoolExpr[];

        if r2 == null goto label6;

        $r8 = newarray (java.lang.Object)[1];

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>(java.lang.String)>("invariantList size is ");

        $i0 = lengthof r2;

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8[0] = $r11;

        staticinvoke <safetyChecker.LogUtils: void debugln(java.lang.Object[])>($r8);

        r20 = r1;

        i1 = 0;

(0)     goto label5;

     label1:
        $r13 = virtualinvoke r20_1.<safetyChecker.Vertex: safetyChecker.Edge getOutgoingEdge()>();

        $z0 = virtualinvoke $r13.<safetyChecker.Edge: boolean isControlLocation()>();

(1)     if $z0 == 0 goto label4;

        r3 = virtualinvoke r20_1.<safetyChecker.Vertex: com.microsoft.z3.BoolExpr getInvariant()>();

        r4 = r2[i1_1];

        $r15 = r0.<safetyChecker.InterpolationHandler: com.microsoft.z3.Expr[] 'from'>;

        $r14 = r0.<safetyChecker.InterpolationHandler: com.microsoft.z3.Expr[] 'to'>;

        $r16 = virtualinvoke r4.<com.microsoft.z3.BoolExpr: com.microsoft.z3.Expr substitute(com.microsoft.z3.Expr[],com.microsoft.z3.Expr[])>($r15, $r14);

        r5 = (com.microsoft.z3.BoolExpr) $r16;

        $r17 = virtualinvoke r20_1.<safetyChecker.Vertex: com.microsoft.z3.BoolExpr getInvariant()>();

        if $r17 != null goto label2;

        virtualinvoke r20_1.<safetyChecker.Vertex: void setInvariant(com.microsoft.z3.BoolExpr)>(r5);

        goto label3;

     label2:
        $r19 = r0.<safetyChecker.InterpolationHandler: com.microsoft.z3.InterpolationContext ictx>;

        $r18 = newarray (com.microsoft.z3.BoolExpr)[2];

        $r18[0] = r5;

        $r18[1] = r3;

        r6 = virtualinvoke $r19.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.BoolExpr mkOr(com.microsoft.z3.BoolExpr[])>($r18);

        virtualinvoke r20_1.<safetyChecker.Vertex: void setInvariant(com.microsoft.z3.BoolExpr)>(r6);

     label3:
(2)     i1_2 = i1_1 + 1;

     label4:
        i1_3 = Phi(i1_1 #1, i1_2 #2);

(3)     r20_2 = virtualinvoke r20_1.<safetyChecker.Vertex: safetyChecker.Vertex getNextVertex()>();

     label5:
        r20_1 = Phi(r20 #0, r20_2 #3);

        i1_1 = Phi(i1 #0, i1_3 #3);

        $r12 = virtualinvoke r20_1.<safetyChecker.Vertex: safetyChecker.Edge getOutgoingEdge()>();

        if $r12 != null goto label1;

(4)     goto label7;

     label6:
        $r7 = newarray (java.lang.Object)[1];

        $r7[0] = "invariantList is null";

(5)     staticinvoke <safetyChecker.LogUtils: void warningln(java.lang.Object[])>($r7);

     label7:
        r20_3 = Phi(r20_1 #4, r20 #5);

        i1_4 = Phi(i1_1 #4, i1 #5);

        return;
    }

    private void generateNameMapping()
    {
        safetyChecker.InterpolationHandler r0;
        java.util.Map r1, r2;
        java.util.Map$Entry r3;
        java.util.Iterator r4;
        java.lang.String r5, r6, $r25;
        safetyChecker.Z3ScriptHandler $r7, $r8;
        int $i0, $i1, i2, i2_1, i2_2;
        com.microsoft.z3.Expr[] $r9, $r10, $r17, $r20;
        java.util.Set $r11;
        boolean $z0;
        java.lang.Object $r12, $r13, $r14, $r15, r27, r27_1, r27_2, r27_3;
        com.microsoft.z3.InterpolationContext $r16, $r19, $r26;
        com.microsoft.z3.Expr $r18, $r21;
        java.lang.Object[] $r22;
        java.lang.StringBuilder $r24, r28;
        com.microsoft.z3.Sort r29, r30;

        r0 := @this: safetyChecker.InterpolationHandler;

        $r7 = r0.<safetyChecker.InterpolationHandler: safetyChecker.Z3ScriptHandler z3Handler>;

        r1 = virtualinvoke $r7.<safetyChecker.Z3ScriptHandler: java.util.Map getSubstitute()>();

        $r8 = r0.<safetyChecker.InterpolationHandler: safetyChecker.Z3ScriptHandler z3Handler>;

        r2 = virtualinvoke $r8.<safetyChecker.Z3ScriptHandler: java.util.Map getSubstituteSort()>();

        $i0 = interfaceinvoke r1.<java.util.Map: int size()>();

        $r9 = newarray (com.microsoft.z3.Expr)[$i0];

        r0.<safetyChecker.InterpolationHandler: com.microsoft.z3.Expr[] 'from'> = $r9;

        $i1 = interfaceinvoke r1.<java.util.Map: int size()>();

        $r10 = newarray (com.microsoft.z3.Expr)[$i1];

        r0.<safetyChecker.InterpolationHandler: com.microsoft.z3.Expr[] 'to'> = $r10;

        i2 = 0;

        $r11 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>();

        r4 = interfaceinvoke $r11.<java.util.Set: java.util.Iterator iterator()>();

(0)     goto label3;

     label1:
        $r12 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.util.Map$Entry) $r12;

        $r13 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>();

        r5 = (java.lang.String) $r13;

        $r14 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>();

        r6 = (java.lang.String) $r14;

        $r15 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r5);

        r27_1 = (com.microsoft.z3.Sort) $r15;

(1)     if r27_1 != null goto label2;

        $r22 = newarray (java.lang.Object)[1];

        r28 = new java.lang.StringBuilder;

        specialinvoke r28.<java.lang.StringBuilder: void <init>(java.lang.String)>("sort is null for ");

        $r24 = virtualinvoke r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        $r22[0] = $r25;

        staticinvoke <safetyChecker.LogUtils: void debugln(java.lang.Object[])>($r22);

        $r26 = r0.<safetyChecker.InterpolationHandler: com.microsoft.z3.InterpolationContext ictx>;

(2)     r27_2 = virtualinvoke $r26.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.IntSort mkIntSort()>();

     label2:
        r27_3 = Phi(r27_1 #1, r27_2 #2);

        $r17 = r0.<safetyChecker.InterpolationHandler: com.microsoft.z3.Expr[] 'from'>;

        $r16 = r0.<safetyChecker.InterpolationHandler: com.microsoft.z3.InterpolationContext ictx>;

        r29 = (com.microsoft.z3.Sort) r27_3;

        $r18 = virtualinvoke $r16.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.Expr mkConst(java.lang.String,com.microsoft.z3.Sort)>(r5, r29);

        $r17[i2_1] = $r18;

        $r20 = r0.<safetyChecker.InterpolationHandler: com.microsoft.z3.Expr[] 'to'>;

        $r19 = r0.<safetyChecker.InterpolationHandler: com.microsoft.z3.InterpolationContext ictx>;

        r30 = (com.microsoft.z3.Sort) r27_3;

        $r21 = virtualinvoke $r19.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.Expr mkConst(java.lang.String,com.microsoft.z3.Sort)>(r6, r30);

        $r20[i2_1] = $r21;

(3)     i2_2 = i2_1 + 1;

     label3:
        i2_1 = Phi(i2 #0, i2_2 #3);

        r27 = Phi(r27 #0, r27_3 #3);

        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return;
    }

    public com.microsoft.z3.BoolExpr getTrueInvariant()
    {
        safetyChecker.InterpolationHandler r0;
        com.microsoft.z3.InterpolationContext $r1;
        com.microsoft.z3.BoolExpr $r2;

        r0 := @this: safetyChecker.InterpolationHandler;

        $r1 = r0.<safetyChecker.InterpolationHandler: com.microsoft.z3.InterpolationContext ictx>;

        $r2 = virtualinvoke $r1.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.BoolExpr mkTrue()>();

        return $r2;
    }

    public com.microsoft.z3.BoolExpr getFalseInvariant()
    {
        safetyChecker.InterpolationHandler r0;
        com.microsoft.z3.InterpolationContext $r1;
        com.microsoft.z3.BoolExpr $r2;

        r0 := @this: safetyChecker.InterpolationHandler;

        $r1 = r0.<safetyChecker.InterpolationHandler: com.microsoft.z3.InterpolationContext ictx>;

        $r2 = virtualinvoke $r1.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.BoolExpr mkFalse()>();

        return $r2;
    }
}
