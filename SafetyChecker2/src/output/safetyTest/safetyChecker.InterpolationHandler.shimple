public class safetyChecker.InterpolationHandler extends java.lang.Object
{
    private com.microsoft.z3.InterpolationContext ictx;
    private safetyChecker.Z3ScriptHandler z3Handler;
    com.microsoft.z3.Expr[] 'from';
    com.microsoft.z3.Expr[] 'to';

    public void <init>(com.microsoft.z3.InterpolationContext, safetyChecker.Z3ScriptHandler)
    {
        safetyChecker.InterpolationHandler r0;
        com.microsoft.z3.InterpolationContext r1;
        safetyChecker.Z3ScriptHandler r2;

        r0 := @this: safetyChecker.InterpolationHandler;

        r1 := @parameter0: com.microsoft.z3.InterpolationContext;

        r2 := @parameter1: safetyChecker.Z3ScriptHandler;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<safetyChecker.InterpolationHandler: com.microsoft.z3.Expr[] 'from'> = null;

        r0.<safetyChecker.InterpolationHandler: com.microsoft.z3.Expr[] 'to'> = null;

        r0.<safetyChecker.InterpolationHandler: com.microsoft.z3.InterpolationContext ictx> = r1;

        r0.<safetyChecker.InterpolationHandler: safetyChecker.Z3ScriptHandler z3Handler> = r2;

        return;
    }

    public boolean createInterpolant(safetyChecker.Vertex)
    {
        safetyChecker.InterpolationHandler r0;
        safetyChecker.Vertex r1, r33, r33_1, r33_2;
        int i0, $i1, i2, i2_1, i2_2, i2_3;
        com.microsoft.z3.Params r2;
        com.microsoft.z3.enumerations.Z3_lbool r3, $r19, $r20, $r24, $r25, r39;
        java.lang.Object[] $r4, $r6, $r11, $r21, $r22, $r23, $r26, $r30;
        safetyChecker.Edge $r5, r35;
        java.lang.StringBuilder $r7, $r8, $r12, $r13, $r27, $r28;
        java.lang.String $r9, $r14, $r29;
        com.microsoft.z3.InterpolationContext $r10, $r16, $r17, $r18, $r31;
        boolean $z0, $z1, z2, z3, z2_1, z2_2, z3_1, z3_2, z3_3;
        com.microsoft.z3.BoolExpr[] $r15, r38;
        com.microsoft.z3.BoolExpr r32, r36, r37, r32_1, r32_2, r32_3, r32_4, r32_5;
        com.microsoft.z3.InterpolationContext$ComputeInterpolantResult r34, r34_1, r34_2, r34_3, r34_4, r34_5, r34_6;

        r0 := @this: safetyChecker.InterpolationHandler;

        r1 := @parameter0: safetyChecker.Vertex;

        $r4 = newarray (java.lang.Object)[1];

        $r4[0] = ">>>>>> InterpolationHandler.createInterpolant";

        staticinvoke <safetyChecker.LogUtils: void debugln(java.lang.Object[])>($r4);

        $r5 = virtualinvoke r1.<safetyChecker.Vertex: safetyChecker.Edge getOutgoingEdge()>();

        r32 = virtualinvoke $r5.<safetyChecker.Edge: com.microsoft.z3.BoolExpr getZ3Expr()>();

        $r6 = newarray (java.lang.Object)[1];

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>(java.lang.String)>("******root=");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6[0] = $r9;

        staticinvoke <safetyChecker.LogUtils: void debugln(java.lang.Object[])>($r6);

        r33 = virtualinvoke r1.<safetyChecker.Vertex: safetyChecker.Vertex getNextVertex()>();

        i0 = virtualinvoke r1.<safetyChecker.Vertex: int getDistance()>();

        i2 = i0 / 2;

        z2 = 1;

        r34 = null;

        $r10 = r0.<safetyChecker.InterpolationHandler: com.microsoft.z3.InterpolationContext ictx>;

        r2 = virtualinvoke $r10.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.Params mkParams()>();

(0)     goto label06;

     label01:
        r35 = virtualinvoke r33_1.<safetyChecker.Vertex: safetyChecker.Edge getOutgoingEdge()>();

        $z0 = virtualinvoke r35.<safetyChecker.Edge: boolean isErrorEdge()>();

        if $z0 == 0 goto label02;

(1)     goto label07;

     label02:
        r36 = virtualinvoke r35.<safetyChecker.Edge: com.microsoft.z3.BoolExpr getZ3Expr()>();

        $r11 = newarray (java.lang.Object)[1];

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>(java.lang.String)>("z3Expr = ");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r36);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        $r11[0] = $r14;

        staticinvoke <safetyChecker.LogUtils: void debugln(java.lang.Object[])>($r11);

        $r16 = r0.<safetyChecker.InterpolationHandler: com.microsoft.z3.InterpolationContext ictx>;

        $r15 = newarray (com.microsoft.z3.BoolExpr)[2];

        $r15[0] = r36;

        $r15[1] = r32_1;

        r37 = virtualinvoke $r16.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.BoolExpr mkAnd(com.microsoft.z3.BoolExpr[])>($r15);

        $z1 = virtualinvoke r35.<safetyChecker.Edge: boolean isControlLocation()>();

        if $z1 == 0 goto label04;

        $r17 = r0.<safetyChecker.InterpolationHandler: com.microsoft.z3.InterpolationContext ictx>;

        r32_2 = virtualinvoke $r17.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.BoolExpr MkInterpolant(com.microsoft.z3.BoolExpr)>(r37);

        $i1 = virtualinvoke r33_1.<safetyChecker.Vertex: int getDistance()>();

(2)     if $i1 > i2_1 goto label05;

        $r18 = r0.<safetyChecker.InterpolationHandler: com.microsoft.z3.InterpolationContext ictx>;

        r34_2 = virtualinvoke $r18.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.InterpolationContext$ComputeInterpolantResult ComputeInterpolant(com.microsoft.z3.Expr,com.microsoft.z3.Params)>(r32_2, r2);

        r3 = r34_2.<com.microsoft.z3.InterpolationContext$ComputeInterpolantResult: com.microsoft.z3.enumerations.Z3_lbool status>;

        $r19 = <com.microsoft.z3.enumerations.Z3_lbool: com.microsoft.z3.enumerations.Z3_lbool Z3_L_TRUE>;

        if r3 != $r19 goto label03;

        i2_2 = i2_1 / 2;

(3)     goto label05;

     label03:
        $r20 = <com.microsoft.z3.enumerations.Z3_lbool: com.microsoft.z3.enumerations.Z3_lbool Z3_L_FALSE>;

(4)     if r3 != $r20 goto label05;

        z2_1 = 0;

(5)     goto label07;

     label04:
(6)     r32_3 = r37;

     label05:
        r32_4 = Phi(r32_2 #2, r32_2 #3, r32_2 #4, r32_3 #6);

        r34_3 = Phi(r34_1 #2, r34_2 #3, r34_2 #4, r34_1 #6);

        i2_3 = Phi(i2_1 #2, i2_2 #3, i2_1 #4, i2_1 #6);

(7)     r33_2 = virtualinvoke r33_1.<safetyChecker.Vertex: safetyChecker.Vertex getNextVertex()>();

     label06:
        r32_1 = Phi(r32 #0, r32_4 #7);

        r34_1 = Phi(r34 #0, r34_3 #7);

        i2_1 = Phi(i2 #0, i2_3 #7);

        r33_1 = Phi(r33 #0, r33_2 #7);

(8)     if r33_1 != null goto label01;

     label07:
        r32_5 = Phi(r32_1 #1, r32_2 #5, r32_1 #8);

        r34_4 = Phi(r34_1 #1, r34_2 #5, r34_1 #8);

        z2_2 = Phi(z2 #1, z2_1 #5, z2 #8);

        $r21 = newarray (java.lang.Object)[1];

        $r21[0] = "------------------pathformula----------------";

        staticinvoke <safetyChecker.LogUtils: void debugln(java.lang.Object[])>($r21);

        $r22 = newarray (java.lang.Object)[1];

        $r22[0] = r32_5;

        staticinvoke <safetyChecker.LogUtils: void debugln(java.lang.Object[])>($r22);

        $r23 = newarray (java.lang.Object)[1];

        $r23[0] = "------------------pathformula----------------";

        staticinvoke <safetyChecker.LogUtils: void debugln(java.lang.Object[])>($r23);

(9)     if z2_2 == 0 goto label08;

        $r31 = r0.<safetyChecker.InterpolationHandler: com.microsoft.z3.InterpolationContext ictx>;

(10)    r34_5 = virtualinvoke $r31.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.InterpolationContext$ComputeInterpolantResult ComputeInterpolant(com.microsoft.z3.Expr,com.microsoft.z3.Params)>(r32_5, r2);

     label08:
        r34_6 = Phi(r34_4 #9, r34_5 #10);

        r38 = r34_6.<com.microsoft.z3.InterpolationContext$ComputeInterpolantResult: com.microsoft.z3.BoolExpr[] interp>;

        specialinvoke r0.<safetyChecker.InterpolationHandler: void generateNameMapping()>();

        specialinvoke r0.<safetyChecker.InterpolationHandler: void updateInvariant(safetyChecker.Vertex,com.microsoft.z3.BoolExpr[],boolean)>(r1, r38, z2_2);

        r39 = r34_6.<com.microsoft.z3.InterpolationContext$ComputeInterpolantResult: com.microsoft.z3.enumerations.Z3_lbool status>;

        z3 = 0;

        $r24 = <com.microsoft.z3.enumerations.Z3_lbool: com.microsoft.z3.enumerations.Z3_lbool Z3_L_FALSE>;

        if r39 != $r24 goto label09;

        z3_1 = 0;

(11)    goto label10;

     label09:
        $r25 = <com.microsoft.z3.enumerations.Z3_lbool: com.microsoft.z3.enumerations.Z3_lbool Z3_L_TRUE>;

(12)    if r39 != $r25 goto label10;

(13)    z3_2 = 1;

     label10:
        z3_3 = Phi(z3_1 #11, z3 #12, z3_2 #13);

        $r26 = newarray (java.lang.Object)[1];

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>(java.lang.String)>("interpolation result=");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z3_3);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        $r26[0] = $r29;

        staticinvoke <safetyChecker.LogUtils: void debugln(java.lang.Object[])>($r26);

        $r30 = newarray (java.lang.Object)[1];

        $r30[0] = "<<<<<< InterpolationHandler.createInterpolant";

        staticinvoke <safetyChecker.LogUtils: void debugln(java.lang.Object[])>($r30);

        return z3_3;
    }

    private void updateInvariant(safetyChecker.Vertex, com.microsoft.z3.BoolExpr[], boolean)
    {
        safetyChecker.InterpolationHandler r0;
        safetyChecker.Vertex r1, r24, r24_1, r24_2, r24_3;
        com.microsoft.z3.BoolExpr[] r2, $r20;
        boolean z0, $z1;
        com.microsoft.z3.BoolExpr r3, r4, r5, r6, r7, $r19, r25, r25_1, r25_2, r25_3, r25_4, r25_5, r25_6;
        java.lang.Object[] $r8, $r9, $r23;
        java.lang.StringBuilder $r10, $r11;
        int $i0, $i1, $i2, i3, i3_1, i3_2, i3_3, i3_4;
        java.lang.String $r12;
        com.microsoft.z3.InterpolationContext $r13, $r21;
        safetyChecker.Edge $r14, $r15;
        com.microsoft.z3.Expr[] $r16, $r17;
        com.microsoft.z3.Expr $r18, $r22;

        r0 := @this: safetyChecker.InterpolationHandler;

        r1 := @parameter0: safetyChecker.Vertex;

        r2 := @parameter1: com.microsoft.z3.BoolExpr[];

        z0 := @parameter2: boolean;

        if r2 == null goto label09;

        $r9 = newarray (java.lang.Object)[1];

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>(java.lang.String)>("invariantList size is ");

        $i0 = lengthof r2;

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        $r9[0] = $r12;

        staticinvoke <safetyChecker.LogUtils: void debugln(java.lang.Object[])>($r9);

        r24 = r1;

        i3 = 0;

        $r13 = r0.<safetyChecker.InterpolationHandler: com.microsoft.z3.InterpolationContext ictx>;

        r3 = virtualinvoke $r13.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.BoolExpr mkFalse()>();

(0)     goto label08;

     label01:
        $r15 = virtualinvoke r24_1.<safetyChecker.Vertex: safetyChecker.Edge getOutgoingEdge()>();

        $z1 = virtualinvoke $r15.<safetyChecker.Edge: boolean isControlLocation()>();

(1)     if $z1 == 0 goto label07;

        r4 = virtualinvoke r24_1.<safetyChecker.Vertex: com.microsoft.z3.BoolExpr getInvariant()>();

        r25_1 = null;

        $i1 = lengthof r2;

        if i3_1 < $i1 goto label02;

        if z0 != 0 goto label02;

        r25_2 = r3;

(2)     goto label04;

     label02:
        $i2 = lengthof r2;

        if i3_1 < $i2 goto label03;

        if z0 == 0 goto label03;

        $r23 = newarray (java.lang.Object)[1];

        $r23[0] = "Check the invariant list";

        staticinvoke <safetyChecker.LogUtils: void fatalln(java.lang.Object[])>($r23);

(3)     goto label04;

     label03:
(4)     r25_3 = r2[i3_1];

     label04:
        r25_4 = Phi(r25_2 #2, r25_1 #3, r25_3 #4);

        $r17 = r0.<safetyChecker.InterpolationHandler: com.microsoft.z3.Expr[] 'from'>;

        $r16 = r0.<safetyChecker.InterpolationHandler: com.microsoft.z3.Expr[] 'to'>;

        $r18 = virtualinvoke r25_4.<com.microsoft.z3.BoolExpr: com.microsoft.z3.Expr substitute(com.microsoft.z3.Expr[],com.microsoft.z3.Expr[])>($r17, $r16);

        r5 = (com.microsoft.z3.BoolExpr) $r18;

        $r19 = virtualinvoke r24_1.<safetyChecker.Vertex: com.microsoft.z3.BoolExpr getInvariant()>();

        if $r19 != null goto label05;

        virtualinvoke r24_1.<safetyChecker.Vertex: void setInvariant(com.microsoft.z3.BoolExpr)>(r5);

        goto label06;

     label05:
        $r21 = r0.<safetyChecker.InterpolationHandler: com.microsoft.z3.InterpolationContext ictx>;

        $r20 = newarray (com.microsoft.z3.BoolExpr)[2];

        $r20[0] = r5;

        $r20[1] = r4;

        r6 = virtualinvoke $r21.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.BoolExpr mkOr(com.microsoft.z3.BoolExpr[])>($r20);

        $r22 = virtualinvoke r6.<com.microsoft.z3.BoolExpr: com.microsoft.z3.Expr simplify()>();

        r7 = (com.microsoft.z3.BoolExpr) $r22;

        virtualinvoke r24_1.<safetyChecker.Vertex: void setInvariant(com.microsoft.z3.BoolExpr)>(r7);

     label06:
(5)     i3_2 = i3_1 + 1;

     label07:
        i3_3 = Phi(i3_1 #1, i3_2 #5);

        r25_5 = Phi(r25 #1, r25_4 #5);

(6)     r24_2 = virtualinvoke r24_1.<safetyChecker.Vertex: safetyChecker.Vertex getNextVertex()>();

     label08:
        i3_1 = Phi(i3 #0, i3_3 #6);

        r25 = Phi(r25 #0, r25_5 #6);

        r24_1 = Phi(r24 #0, r24_2 #6);

        $r14 = virtualinvoke r24_1.<safetyChecker.Vertex: safetyChecker.Edge getOutgoingEdge()>();

        if $r14 != null goto label01;

(7)     goto label10;

     label09:
        $r8 = newarray (java.lang.Object)[1];

        $r8[0] = "invariantList is null";

(8)     staticinvoke <safetyChecker.LogUtils: void warningln(java.lang.Object[])>($r8);

     label10:
        i3_4 = Phi(i3_1 #7, i3 #8);

        r25_6 = Phi(r25 #7, r25 #8);

        r24_3 = Phi(r24_1 #7, r24 #8);

        return;
    }

    private void generateNameMapping()
    {
        safetyChecker.InterpolationHandler r0;
        java.util.Map r1, r2;
        java.util.Map$Entry r3;
        java.util.Iterator r4;
        java.lang.String r5, r6, $r25;
        safetyChecker.Z3ScriptHandler $r7, $r8;
        int $i0, $i1, i2, i2_1, i2_2;
        com.microsoft.z3.Expr[] $r9, $r10, $r17, $r20;
        java.util.Set $r11;
        boolean $z0;
        java.lang.Object $r12, $r13, $r14, $r15, r27, r27_1, r27_2, r27_3;
        com.microsoft.z3.InterpolationContext $r16, $r19, $r26;
        com.microsoft.z3.Expr $r18, $r21;
        java.lang.Object[] $r22;
        java.lang.StringBuilder $r24, r28;
        com.microsoft.z3.Sort r29, r30;

        r0 := @this: safetyChecker.InterpolationHandler;

        $r7 = r0.<safetyChecker.InterpolationHandler: safetyChecker.Z3ScriptHandler z3Handler>;

        r1 = virtualinvoke $r7.<safetyChecker.Z3ScriptHandler: java.util.Map getSubstitute()>();

        $r8 = r0.<safetyChecker.InterpolationHandler: safetyChecker.Z3ScriptHandler z3Handler>;

        r2 = virtualinvoke $r8.<safetyChecker.Z3ScriptHandler: java.util.Map getSubstituteSort()>();

        $i0 = interfaceinvoke r1.<java.util.Map: int size()>();

        $r9 = newarray (com.microsoft.z3.Expr)[$i0];

        r0.<safetyChecker.InterpolationHandler: com.microsoft.z3.Expr[] 'from'> = $r9;

        $i1 = interfaceinvoke r1.<java.util.Map: int size()>();

        $r10 = newarray (com.microsoft.z3.Expr)[$i1];

        r0.<safetyChecker.InterpolationHandler: com.microsoft.z3.Expr[] 'to'> = $r10;

        i2 = 0;

        $r11 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>();

        r4 = interfaceinvoke $r11.<java.util.Set: java.util.Iterator iterator()>();

(0)     goto label3;

     label1:
        $r12 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r3 = (java.util.Map$Entry) $r12;

        $r13 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>();

        r5 = (java.lang.String) $r13;

        $r14 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>();

        r6 = (java.lang.String) $r14;

        $r15 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r5);

        r27_1 = (com.microsoft.z3.Sort) $r15;

(1)     if r27_1 != null goto label2;

        $r22 = newarray (java.lang.Object)[1];

        r28 = new java.lang.StringBuilder;

        specialinvoke r28.<java.lang.StringBuilder: void <init>(java.lang.String)>("sort is null for ");

        $r24 = virtualinvoke r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        $r22[0] = $r25;

        staticinvoke <safetyChecker.LogUtils: void debugln(java.lang.Object[])>($r22);

        $r26 = r0.<safetyChecker.InterpolationHandler: com.microsoft.z3.InterpolationContext ictx>;

(2)     r27_2 = virtualinvoke $r26.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.IntSort mkIntSort()>();

     label2:
        r27_3 = Phi(r27_1 #1, r27_2 #2);

        $r17 = r0.<safetyChecker.InterpolationHandler: com.microsoft.z3.Expr[] 'from'>;

        $r16 = r0.<safetyChecker.InterpolationHandler: com.microsoft.z3.InterpolationContext ictx>;

        r29 = (com.microsoft.z3.Sort) r27_3;

        $r18 = virtualinvoke $r16.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.Expr mkConst(java.lang.String,com.microsoft.z3.Sort)>(r5, r29);

        $r17[i2_1] = $r18;

        $r20 = r0.<safetyChecker.InterpolationHandler: com.microsoft.z3.Expr[] 'to'>;

        $r19 = r0.<safetyChecker.InterpolationHandler: com.microsoft.z3.InterpolationContext ictx>;

        r30 = (com.microsoft.z3.Sort) r27_3;

        $r21 = virtualinvoke $r19.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.Expr mkConst(java.lang.String,com.microsoft.z3.Sort)>(r6, r30);

        $r20[i2_1] = $r21;

(3)     i2_2 = i2_1 + 1;

     label3:
        r27 = Phi(r27 #0, r27_3 #3);

        i2_1 = Phi(i2 #0, i2_2 #3);

        $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return;
    }

    public com.microsoft.z3.BoolExpr getTrueInvariant()
    {
        safetyChecker.InterpolationHandler r0;
        com.microsoft.z3.InterpolationContext $r1;
        com.microsoft.z3.BoolExpr $r2;

        r0 := @this: safetyChecker.InterpolationHandler;

        $r1 = r0.<safetyChecker.InterpolationHandler: com.microsoft.z3.InterpolationContext ictx>;

        $r2 = virtualinvoke $r1.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.BoolExpr mkTrue()>();

        return $r2;
    }

    public com.microsoft.z3.BoolExpr getFalseInvariant()
    {
        safetyChecker.InterpolationHandler r0;
        com.microsoft.z3.InterpolationContext $r1;
        com.microsoft.z3.BoolExpr $r2;

        r0 := @this: safetyChecker.InterpolationHandler;

        $r1 = r0.<safetyChecker.InterpolationHandler: com.microsoft.z3.InterpolationContext ictx>;

        $r2 = virtualinvoke $r1.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.BoolExpr mkFalse()>();

        return $r2;
    }
}
