public class infoFlow.Z3ArrayHandler extends java.lang.Object
{
    private int argSrcIndex;
    private int argSrcStartIndex;
    private int argDtcIndex;
    private int argDtcStartIndex;
    private int argLengthIndex;
    private int argArray1;
    private int argArray2;

    public void <init>()
    {
        infoFlow.Z3ArrayHandler r0;

        r0 := @this: infoFlow.Z3ArrayHandler;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<infoFlow.Z3ArrayHandler: int argSrcIndex> = 0;

        r0.<infoFlow.Z3ArrayHandler: int argSrcStartIndex> = 1;

        r0.<infoFlow.Z3ArrayHandler: int argDtcIndex> = 2;

        r0.<infoFlow.Z3ArrayHandler: int argDtcStartIndex> = 3;

        r0.<infoFlow.Z3ArrayHandler: int argLengthIndex> = 4;

        r0.<infoFlow.Z3ArrayHandler: int argArray1> = 0;

        r0.<infoFlow.Z3ArrayHandler: int argArray2> = 1;

        return;
    }

    public com.microsoft.z3.Expr z3Local(soot.Local, boolean, int, infoFlow.Z3ScriptHandler)
    {
        infoFlow.Z3ArrayHandler r0;
        soot.Local r1;
        boolean z0, $z1, $z2, $z3;
        int i0;
        infoFlow.Z3ScriptHandler r2;
        com.microsoft.z3.InterpolationContext r3;
        soot.Type r4;
        java.lang.String r5, r6, r7, $r15, $r16, $r24, $r25, $r26, $r33, $r34, $r35, r53, r58;
        com.microsoft.z3.Expr r8, r9, r51, r54;
        java.util.Map $r10, $r13, $r18, $r19, $r21, $r28, $r37, $r40, $r44, $r46, $r47;
        com.microsoft.z3.IntSort $r11, $r12, $r42, $r43;
        java.lang.StringBuilder $r17, $r27, $r36, r59, r61, r62;
        java.lang.Object $r20, $r22, $r29, $r38, $r41, $r48, r49, r49_1, r49_2;
        com.microsoft.z3.Sort $r30, $r39, r63;
        com.microsoft.z3.IntExpr $r31;
        com.microsoft.z3.ArraySort r50;
        infoFlow.NewSort r52, r55, r57, r60;
        com.microsoft.z3.ArrayExpr r56;

        r0 := @this: infoFlow.Z3ArrayHandler;

        r1 := @parameter0: soot.Local;

        z0 := @parameter1: boolean;

        i0 := @parameter2: int;

        r2 := @parameter3: infoFlow.Z3ScriptHandler;

        r3 = virtualinvoke r2.<infoFlow.Z3ScriptHandler: com.microsoft.z3.InterpolationContext getIctx()>();

        r4 = interfaceinvoke r1.<soot.Local: soot.Type getType()>();

        r5 = virtualinvoke r4.<soot.Type: java.lang.String toString()>();

        $r10 = virtualinvoke r2.<infoFlow.Z3ScriptHandler: java.util.Map getNewSortMap()>();

        $z1 = interfaceinvoke $r10.<java.util.Map: boolean containsKey(java.lang.Object)>(r5);

        if $z1 == 0 goto label1;

        $r47 = virtualinvoke r2.<infoFlow.Z3ScriptHandler: java.util.Map getNewSortMap()>();

        $r48 = interfaceinvoke $r47.<java.util.Map: java.lang.Object get(java.lang.Object)>(r5);

        r49 = (com.microsoft.z3.Sort) $r48;

(0)     goto label2;

     label1:
        $r11 = virtualinvoke r3.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.IntSort getIntSort()>();

        $r12 = virtualinvoke r3.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.IntSort getIntSort()>();

        r49_1 = virtualinvoke r3.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.ArraySort mkArraySort(com.microsoft.z3.Sort,com.microsoft.z3.Sort)>($r11, $r12);

        $r13 = virtualinvoke r2.<infoFlow.Z3ScriptHandler: java.util.Map getNewSortMap()>();

(1)     interfaceinvoke $r13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r5, r49_1);

     label2:
        r49_2 = Phi(r49 #0, r49_1 #1);

        r59 = new java.lang.StringBuilder;

        $r15 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r5);

        specialinvoke r59.<java.lang.StringBuilder: void <init>(java.lang.String)>($r15);

        $r16 = virtualinvoke r2.<infoFlow.Z3ScriptHandler: java.lang.String getArraySortSuffix()>();

        $r17 = virtualinvoke r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16);

        r6 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        r7 = r5;

        $r18 = virtualinvoke r2.<infoFlow.Z3ScriptHandler: java.util.Map getLocalMap()>();

        $z2 = interfaceinvoke $r18.<java.util.Map: boolean containsKey(java.lang.Object)>(r7);

        if $z2 != 0 goto label3;

        $r42 = virtualinvoke r3.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.IntSort getIntSort()>();

        $r43 = virtualinvoke r3.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.IntSort getIntSort()>();

        r50 = virtualinvoke r3.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.ArraySort mkArraySort(com.microsoft.z3.Sort,com.microsoft.z3.Sort)>($r42, $r43);

        r51 = virtualinvoke r3.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.Expr mkConst(java.lang.String,com.microsoft.z3.Sort)>(r7, r50);

        $r44 = virtualinvoke r2.<infoFlow.Z3ScriptHandler: java.util.Map getLocalMap()>();

        interfaceinvoke $r44.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r7, r51);

        r60 = new infoFlow.NewSort;

        r63 = (com.microsoft.z3.Sort) r49_2;

        specialinvoke r60.<infoFlow.NewSort: void <init>(com.microsoft.z3.Sort,com.microsoft.z3.InterpolationContext)>(r63, r3);

        r52 = r60;

        $r46 = virtualinvoke r2.<infoFlow.Z3ScriptHandler: java.util.Map getSortId()>();

        interfaceinvoke $r46.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r6, r52);

     label3:
        if z0 == 0 goto label5;

        r61 = new java.lang.StringBuilder;

        $r33 = interfaceinvoke r1.<soot.Local: java.lang.String getName()>();

        $r34 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r33);

        specialinvoke r61.<java.lang.StringBuilder: void <init>(java.lang.String)>($r34);

        $r35 = virtualinvoke r2.<infoFlow.Z3ScriptHandler: java.lang.String getArrayNameSuffix()>();

        $r36 = virtualinvoke r61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r35);

        r53 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>();

        $r37 = virtualinvoke r2.<infoFlow.Z3ScriptHandler: java.util.Map getNewSortMap()>();

        $r38 = interfaceinvoke $r37.<java.util.Map: java.lang.Object get(java.lang.Object)>(r5);

        $r39 = (com.microsoft.z3.Sort) $r38;

        r54 = virtualinvoke r3.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.Expr mkConst(java.lang.String,com.microsoft.z3.Sort)>(r53, $r39);

        $r40 = virtualinvoke r2.<infoFlow.Z3ScriptHandler: java.util.Map getSortId()>();

        $r41 = interfaceinvoke $r40.<java.util.Map: java.lang.Object get(java.lang.Object)>(r6);

        r55 = (infoFlow.NewSort) $r41;

        $z3 = virtualinvoke r55.<infoFlow.NewSort: boolean ifHasExpr(com.microsoft.z3.Expr)>(r54);

        if $z3 != 0 goto label4;

        virtualinvoke r55.<infoFlow.NewSort: void creatNewOject(com.microsoft.z3.Expr)>(r54);

     label4:
        return r54;

     label5:
        $r19 = virtualinvoke r2.<infoFlow.Z3ScriptHandler: java.util.Map getLocalMap()>();

        $r20 = interfaceinvoke $r19.<java.util.Map: java.lang.Object get(java.lang.Object)>(r7);

        r56 = (com.microsoft.z3.ArrayExpr) $r20;

        $r21 = virtualinvoke r2.<infoFlow.Z3ScriptHandler: java.util.Map getSortId()>();

        $r22 = interfaceinvoke $r21.<java.util.Map: java.lang.Object get(java.lang.Object)>(r6);

        r57 = (infoFlow.NewSort) $r22;

        r62 = new java.lang.StringBuilder;

        $r24 = interfaceinvoke r1.<soot.Local: java.lang.String getName()>();

        $r25 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r24);

        specialinvoke r62.<java.lang.StringBuilder: void <init>(java.lang.String)>($r25);

        $r26 = virtualinvoke r2.<infoFlow.Z3ScriptHandler: java.lang.String getArrayNameSuffix()>();

        $r27 = virtualinvoke r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r26);

        r58 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        $r28 = virtualinvoke r2.<infoFlow.Z3ScriptHandler: java.util.Map getNewSortMap()>();

        $r29 = interfaceinvoke $r28.<java.util.Map: java.lang.Object get(java.lang.Object)>(r5);

        $r30 = (com.microsoft.z3.Sort) $r29;

        r8 = virtualinvoke r3.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.Expr mkConst(java.lang.String,com.microsoft.z3.Sort)>(r58, $r30);

        $r31 = virtualinvoke r57.<infoFlow.NewSort: com.microsoft.z3.IntExpr getId(com.microsoft.z3.Expr)>(r8);

        r9 = virtualinvoke r3.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.Expr mkSelect(com.microsoft.z3.ArrayExpr,com.microsoft.z3.Expr)>(r56, $r31);

        return r9;
    }

    public com.microsoft.z3.BoolExpr newArrayExpr(com.microsoft.z3.Expr, soot.Type, infoFlow.Z3ScriptHandler)
    {
        infoFlow.Z3ArrayHandler r0;
        com.microsoft.z3.Expr r1, $r23, r38;
        soot.Type r2;
        infoFlow.Z3ScriptHandler r3;
        com.microsoft.z3.InterpolationContext r4;
        java.lang.String r5, r6, $r11, $r12, $r17, r37, r41;
        com.microsoft.z3.ArrayExpr r7, r8, r39, r40;
        com.microsoft.z3.BoolExpr r9;
        java.lang.StringBuilder $r10, $r13, $r15, $r16;
        java.util.Map $r14, $r20, $r24, $r26, $r31, $r33;
        boolean $z0;
        com.microsoft.z3.IntSort $r18, $r19, $r28, $r29, $r30;
        java.lang.Object $r21;
        com.microsoft.z3.Sort $r22;
        com.microsoft.z3.ArraySort r35, r36;
        int i0;

        r0 := @this: infoFlow.Z3ArrayHandler;

        r1 := @parameter0: com.microsoft.z3.Expr;

        r2 := @parameter1: soot.Type;

        r3 := @parameter2: infoFlow.Z3ScriptHandler;

        r4 = virtualinvoke r3.<infoFlow.Z3ScriptHandler: com.microsoft.z3.InterpolationContext getIctx()>();

        r5 = virtualinvoke r2.<soot.Type: java.lang.String toString()>();

        $r10 = new java.lang.StringBuilder;

        $r11 = specialinvoke r0.<infoFlow.Z3ArrayHandler: java.lang.String getArrayPrefix()>();

        $r12 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r11);

        specialinvoke $r10.<java.lang.StringBuilder: void <init>(java.lang.String)>($r12);

        $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        r6 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        $r14 = virtualinvoke r3.<infoFlow.Z3ScriptHandler: java.util.Map getGlobal()>();

        $z0 = interfaceinvoke $r14.<java.util.Map: boolean containsKey(java.lang.Object)>(r6);

        if $z0 != 0 goto label1;

        $r28 = virtualinvoke r4.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.IntSort getIntSort()>();

        $r29 = virtualinvoke r4.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.IntSort getIntSort()>();

        r35 = virtualinvoke r4.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.ArraySort mkArraySort(com.microsoft.z3.Sort,com.microsoft.z3.Sort)>($r28, $r29);

        $r30 = virtualinvoke r4.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.IntSort getIntSort()>();

        r36 = virtualinvoke r4.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.ArraySort mkArraySort(com.microsoft.z3.Sort,com.microsoft.z3.Sort)>($r30, r35);

        r37 = virtualinvoke r3.<infoFlow.Z3ScriptHandler: java.lang.String getGlobalName(java.lang.String)>(r6);

        r38 = virtualinvoke r4.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.Expr mkConst(java.lang.String,com.microsoft.z3.Sort)>(r37, r36);

        $r31 = virtualinvoke r3.<infoFlow.Z3ScriptHandler: java.util.Map getSubstitute()>();

        interfaceinvoke $r31.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r37, r6);

        $r33 = virtualinvoke r3.<infoFlow.Z3ScriptHandler: java.util.Map getGlobal()>();

        interfaceinvoke $r33.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r6, r38);

     label1:
        i0 = virtualinvoke r3.<infoFlow.Z3ScriptHandler: int getRealArraySize(java.lang.String)>(r6);

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>(java.lang.String)>("array_");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        $r18 = virtualinvoke r4.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.IntSort getIntSort()>();

        $r19 = virtualinvoke r4.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.IntSort getIntSort()>();

        r39 = virtualinvoke r4.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.ArrayExpr mkArrayConst(java.lang.String,com.microsoft.z3.Sort,com.microsoft.z3.Sort)>($r17, $r18, $r19);

        $r20 = virtualinvoke r3.<infoFlow.Z3ScriptHandler: java.util.Map getGlobal()>();

        $r21 = interfaceinvoke $r20.<java.util.Map: java.lang.Object get(java.lang.Object)>(r6);

        r40 = (com.microsoft.z3.ArrayExpr) $r21;

        r41 = virtualinvoke r3.<infoFlow.Z3ScriptHandler: java.lang.String getGlobalName(java.lang.String)>(r6);

        $r22 = virtualinvoke r40.<com.microsoft.z3.ArrayExpr: com.microsoft.z3.Sort getSort()>();

        $r23 = virtualinvoke r4.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.Expr mkConst(java.lang.String,com.microsoft.z3.Sort)>(r41, $r22);

        r7 = (com.microsoft.z3.ArrayExpr) $r23;

        $r24 = virtualinvoke r3.<infoFlow.Z3ScriptHandler: java.util.Map getGlobal()>();

        interfaceinvoke $r24.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r6, r7);

        $r26 = virtualinvoke r3.<infoFlow.Z3ScriptHandler: java.util.Map getSubstitute()>();

        interfaceinvoke $r26.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r41, r6);

        r8 = virtualinvoke r4.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.ArrayExpr mkStore(com.microsoft.z3.ArrayExpr,com.microsoft.z3.Expr,com.microsoft.z3.Expr)>(r40, r1, r39);

        r9 = virtualinvoke r4.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.BoolExpr mkEq(com.microsoft.z3.Expr,com.microsoft.z3.Expr)>(r7, r8);

        return r9;
    }

    public com.microsoft.z3.Expr z3ArrayRef(soot.jimple.ArrayRef, infoFlow.Z3ScriptHandler, infoFlow.Edge)
    {
        infoFlow.Z3ArrayHandler r0;
        soot.jimple.ArrayRef r1;
        infoFlow.Z3ScriptHandler r2;
        infoFlow.Edge r3;
        soot.Value r4, r5;
        com.microsoft.z3.Expr r6, r13, $r16, $r24;
        com.microsoft.z3.IntExpr r7;
        soot.Type r8;
        java.lang.String r9, r10, $r18, $r19;
        com.microsoft.z3.ArrayExpr r11, r12;
        infoFlow.Vertex $r14, $r15;
        int $i0, $i1;
        java.lang.StringBuilder $r17, $r20;
        java.util.Map $r21;
        java.lang.Object $r22;
        com.microsoft.z3.InterpolationContext $r23, $r25;

        r0 := @this: infoFlow.Z3ArrayHandler;

        r1 := @parameter0: soot.jimple.ArrayRef;

        r2 := @parameter1: infoFlow.Z3ScriptHandler;

        r3 := @parameter2: infoFlow.Edge;

        r4 = interfaceinvoke r1.<soot.jimple.ArrayRef: soot.Value getBase()>();

        r5 = interfaceinvoke r1.<soot.jimple.ArrayRef: soot.Value getIndex()>();

        $r14 = virtualinvoke r3.<infoFlow.Edge: infoFlow.Vertex getSource()>();

        $i0 = virtualinvoke $r14.<infoFlow.Vertex: int getDistance()>();

        r6 = virtualinvoke r2.<infoFlow.Z3ScriptHandler: com.microsoft.z3.Expr convertValue(soot.Value,boolean,infoFlow.Edge,int)>(r4, 0, r3, $i0);

        $r15 = virtualinvoke r3.<infoFlow.Edge: infoFlow.Vertex getSource()>();

        $i1 = virtualinvoke $r15.<infoFlow.Vertex: int getDistance()>();

        $r16 = virtualinvoke r2.<infoFlow.Z3ScriptHandler: com.microsoft.z3.Expr convertValue(soot.Value,boolean,infoFlow.Edge,int)>(r5, 0, r3, $i1);

        r7 = (com.microsoft.z3.IntExpr) $r16;

        r8 = interfaceinvoke r4.<soot.Value: soot.Type getType()>();

        r9 = virtualinvoke r8.<soot.Type: java.lang.String toString()>();

        $r17 = new java.lang.StringBuilder;

        $r18 = specialinvoke r0.<infoFlow.Z3ArrayHandler: java.lang.String getArrayPrefix()>();

        $r19 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r18);

        specialinvoke $r17.<java.lang.StringBuilder: void <init>(java.lang.String)>($r19);

        $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r9);

        r10 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        $r21 = virtualinvoke r2.<infoFlow.Z3ScriptHandler: java.util.Map getGlobal()>();

        $r22 = interfaceinvoke $r21.<java.util.Map: java.lang.Object get(java.lang.Object)>(r10);

        r11 = (com.microsoft.z3.ArrayExpr) $r22;

        $r23 = virtualinvoke r2.<infoFlow.Z3ScriptHandler: com.microsoft.z3.InterpolationContext getIctx()>();

        $r24 = virtualinvoke $r23.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.Expr mkSelect(com.microsoft.z3.ArrayExpr,com.microsoft.z3.Expr)>(r11, r6);

        r12 = (com.microsoft.z3.ArrayExpr) $r24;

        $r25 = virtualinvoke r2.<infoFlow.Z3ScriptHandler: com.microsoft.z3.InterpolationContext getIctx()>();

        r13 = virtualinvoke $r25.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.Expr mkSelect(com.microsoft.z3.ArrayExpr,com.microsoft.z3.Expr)>(r12, r7);

        return r13;
    }

    public com.microsoft.z3.BoolExpr updateArrayRef(soot.jimple.ArrayRef, infoFlow.Z3ScriptHandler, com.microsoft.z3.Expr, infoFlow.Edge)
    {
        infoFlow.Z3ArrayHandler r0;
        soot.jimple.ArrayRef r1;
        infoFlow.Z3ScriptHandler r2;
        com.microsoft.z3.Expr r3, r8, $r26, $r33, $r42;
        infoFlow.Edge r4;
        com.microsoft.z3.InterpolationContext r5;
        soot.Value r6, r7;
        com.microsoft.z3.IntExpr r9;
        soot.Type r10;
        java.lang.String r11, r12, r19, $r28, $r29, $r36;
        com.microsoft.z3.ArrayExpr r13, r14, r15, r16, r18, r20, r21;
        int i0, $i1, $i2;
        com.microsoft.z3.BoolExpr r17, r22, $r46;
        java.lang.Object[] $r23;
        infoFlow.Vertex $r24, $r25;
        java.lang.StringBuilder $r27, $r30, $r34, $r35;
        java.util.Map $r31, $r39, $r43;
        java.lang.Object $r32, $r40;
        com.microsoft.z3.IntSort $r37, $r38;
        com.microsoft.z3.Sort $r41;
        com.microsoft.z3.BoolExpr[] $r45;

        r0 := @this: infoFlow.Z3ArrayHandler;

        r1 := @parameter0: soot.jimple.ArrayRef;

        r2 := @parameter1: infoFlow.Z3ScriptHandler;

        r3 := @parameter2: com.microsoft.z3.Expr;

        r4 := @parameter3: infoFlow.Edge;

        r5 = virtualinvoke r2.<infoFlow.Z3ScriptHandler: com.microsoft.z3.InterpolationContext getIctx()>();

        r6 = interfaceinvoke r1.<soot.jimple.ArrayRef: soot.Value getBase()>();

        r7 = interfaceinvoke r1.<soot.jimple.ArrayRef: soot.Value getIndex()>();

        $r23 = newarray (java.lang.Object)[1];

        $r23[0] = r6;

        staticinvoke <infoFlow.LogUtils: void fatalln(java.lang.Object[])>($r23);

        $r24 = virtualinvoke r4.<infoFlow.Edge: infoFlow.Vertex getSource()>();

        $i1 = virtualinvoke $r24.<infoFlow.Vertex: int getDistance()>();

        r8 = virtualinvoke r2.<infoFlow.Z3ScriptHandler: com.microsoft.z3.Expr convertValue(soot.Value,boolean,infoFlow.Edge,int)>(r6, 0, r4, $i1);

        $r25 = virtualinvoke r4.<infoFlow.Edge: infoFlow.Vertex getSource()>();

        $i2 = virtualinvoke $r25.<infoFlow.Vertex: int getDistance()>();

        $r26 = virtualinvoke r2.<infoFlow.Z3ScriptHandler: com.microsoft.z3.Expr convertValue(soot.Value,boolean,infoFlow.Edge,int)>(r7, 0, r4, $i2);

        r9 = (com.microsoft.z3.IntExpr) $r26;

        r10 = interfaceinvoke r6.<soot.Value: soot.Type getType()>();

        r11 = virtualinvoke r10.<soot.Type: java.lang.String toString()>();

        $r27 = new java.lang.StringBuilder;

        $r28 = specialinvoke r0.<infoFlow.Z3ArrayHandler: java.lang.String getArrayPrefix()>();

        $r29 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r28);

        specialinvoke $r27.<java.lang.StringBuilder: void <init>(java.lang.String)>($r29);

        $r30 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r11);

        r12 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        $r31 = virtualinvoke r2.<infoFlow.Z3ScriptHandler: java.util.Map getGlobal()>();

        $r32 = interfaceinvoke $r31.<java.util.Map: java.lang.Object get(java.lang.Object)>(r12);

        r13 = (com.microsoft.z3.ArrayExpr) $r32;

        $r33 = virtualinvoke r5.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.Expr mkSelect(com.microsoft.z3.ArrayExpr,com.microsoft.z3.Expr)>(r13, r8);

        r14 = (com.microsoft.z3.ArrayExpr) $r33;

        r15 = virtualinvoke r5.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.ArrayExpr mkStore(com.microsoft.z3.ArrayExpr,com.microsoft.z3.Expr,com.microsoft.z3.Expr)>(r14, r9, r3);

        i0 = virtualinvoke r2.<infoFlow.Z3ScriptHandler: int getRealArraySize(java.lang.String)>(r12);

        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>(java.lang.String)>("array_");

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>();

        $r37 = virtualinvoke r5.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.IntSort getIntSort()>();

        $r38 = virtualinvoke r5.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.IntSort getIntSort()>();

        r16 = virtualinvoke r5.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.ArrayExpr mkArrayConst(java.lang.String,com.microsoft.z3.Sort,com.microsoft.z3.Sort)>($r36, $r37, $r38);

        r17 = virtualinvoke r5.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.BoolExpr mkEq(com.microsoft.z3.Expr,com.microsoft.z3.Expr)>(r16, r15);

        $r39 = virtualinvoke r2.<infoFlow.Z3ScriptHandler: java.util.Map getGlobal()>();

        $r40 = interfaceinvoke $r39.<java.util.Map: java.lang.Object get(java.lang.Object)>(r12);

        r18 = (com.microsoft.z3.ArrayExpr) $r40;

        r19 = virtualinvoke r2.<infoFlow.Z3ScriptHandler: java.lang.String getGlobalName(java.lang.String)>(r12);

        $r41 = virtualinvoke r18.<com.microsoft.z3.ArrayExpr: com.microsoft.z3.Sort getSort()>();

        $r42 = virtualinvoke r5.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.Expr mkConst(java.lang.String,com.microsoft.z3.Sort)>(r19, $r41);

        r20 = (com.microsoft.z3.ArrayExpr) $r42;

        r21 = virtualinvoke r5.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.ArrayExpr mkStore(com.microsoft.z3.ArrayExpr,com.microsoft.z3.Expr,com.microsoft.z3.Expr)>(r18, r8, r16);

        r22 = virtualinvoke r5.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.BoolExpr mkEq(com.microsoft.z3.Expr,com.microsoft.z3.Expr)>(r20, r21);

        $r43 = virtualinvoke r2.<infoFlow.Z3ScriptHandler: java.util.Map getGlobal()>();

        interfaceinvoke $r43.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r12, r20);

        $r45 = newarray (com.microsoft.z3.BoolExpr)[2];

        $r45[0] = r17;

        $r45[1] = r22;

        $r46 = virtualinvoke r5.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.BoolExpr mkAnd(com.microsoft.z3.BoolExpr[])>($r45);

        return $r46;
    }

    public com.microsoft.z3.BoolExpr z3ArrayCopy(infoFlow.Edge, infoFlow.Z3ScriptHandler)
    {
        infoFlow.Z3ArrayHandler r0;
        infoFlow.Edge r1;
        infoFlow.Z3ScriptHandler r2;
        com.microsoft.z3.InterpolationContext r3;
        soot.jimple.InvokeStmt r4;
        soot.jimple.InvokeExpr r5;
        soot.Value r6, r7, r9, r10, r12;
        soot.jimple.IntConstant r8, r11, r13;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, i9, i10, i10_1, i9_1, i8_1, i8_2, i9_2, i10_2;
        soot.Local r14, r15;
        com.microsoft.z3.ArrayExpr r16, r21, r25, r28, r30, r32, r67;
        soot.Type r17;
        java.lang.String r18, r19, r27, r29, $r36, $r37, $r41, $r47, $r49, $r50, $r57;
        com.microsoft.z3.BoolExpr[] r20, $r62;
        com.microsoft.z3.IntNum r22, r23;
        com.microsoft.z3.Expr r24, r31, $r59;
        com.microsoft.z3.BoolExpr r26, r33, $r63, $r65, $r66, r68;
        soot.Unit $r34;
        java.lang.StringBuilder $r35, $r38, $r39, $r40, $r45, $r46, $r48, $r51, $r55, $r56;
        com.microsoft.z3.IntSort $r42, $r43;
        java.lang.Object[] $r44, $r54, $r64;
        java.util.Map $r52, $r61;
        java.lang.Object $r53;
        com.microsoft.z3.Sort $r58;
        infoFlow.Vertex $r60;

        r0 := @this: infoFlow.Z3ArrayHandler;

        r1 := @parameter0: infoFlow.Edge;

        r2 := @parameter1: infoFlow.Z3ScriptHandler;

        r3 = virtualinvoke r2.<infoFlow.Z3ScriptHandler: com.microsoft.z3.InterpolationContext getIctx()>();

        $r34 = virtualinvoke r1.<infoFlow.Edge: soot.Unit getUnit()>();

        r4 = (soot.jimple.InvokeStmt) $r34;

        r5 = interfaceinvoke r4.<soot.jimple.InvokeStmt: soot.jimple.InvokeExpr getInvokeExpr()>();

        $i2 = r0.<infoFlow.Z3ArrayHandler: int argSrcIndex>;

        r6 = interfaceinvoke r5.<soot.jimple.InvokeExpr: soot.Value getArg(int)>($i2);

        $i3 = r0.<infoFlow.Z3ArrayHandler: int argSrcStartIndex>;

        r7 = interfaceinvoke r5.<soot.jimple.InvokeExpr: soot.Value getArg(int)>($i3);

        r8 = (soot.jimple.IntConstant) r7;

        i8 = r8.<soot.jimple.IntConstant: int value>;

        $i4 = r0.<infoFlow.Z3ArrayHandler: int argDtcIndex>;

        r9 = interfaceinvoke r5.<soot.jimple.InvokeExpr: soot.Value getArg(int)>($i4);

        $i5 = r0.<infoFlow.Z3ArrayHandler: int argDtcStartIndex>;

        r10 = interfaceinvoke r5.<soot.jimple.InvokeExpr: soot.Value getArg(int)>($i5);

        r11 = (soot.jimple.IntConstant) r10;

        i9 = r11.<soot.jimple.IntConstant: int value>;

        $i6 = r0.<infoFlow.Z3ArrayHandler: int argLengthIndex>;

        r12 = interfaceinvoke r5.<soot.jimple.InvokeExpr: soot.Value getArg(int)>($i6);

        r13 = (soot.jimple.IntConstant) r12;

        i0 = r13.<soot.jimple.IntConstant: int value>;

        if i0 > 0 goto label1;

        $r66 = virtualinvoke r3.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.BoolExpr mkTrue()>();

        return $r66;

     label1:
        r14 = (soot.Local) r6;

        r15 = (soot.Local) r9;

        r16 = specialinvoke r0.<infoFlow.Z3ArrayHandler: com.microsoft.z3.ArrayExpr getRealArray(soot.Local,infoFlow.Edge,infoFlow.Z3ScriptHandler)>(r14, r1, r2);

        r17 = interfaceinvoke r14.<soot.Local: soot.Type getType()>();

        r18 = virtualinvoke r17.<soot.Type: java.lang.String toString()>();

        $r35 = new java.lang.StringBuilder;

        $r36 = specialinvoke r0.<infoFlow.Z3ArrayHandler: java.lang.String getArrayPrefix()>();

        $r37 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r36);

        specialinvoke $r35.<java.lang.StringBuilder: void <init>(java.lang.String)>($r37);

        $r38 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r18);

        r19 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>();

        r20 = newarray (com.microsoft.z3.BoolExpr)[i0];

        i10 = 0;

(0)     goto label3;

     label2:
        r21 = specialinvoke r0.<infoFlow.Z3ArrayHandler: com.microsoft.z3.ArrayExpr getRealArray(soot.Local,infoFlow.Edge,infoFlow.Z3ScriptHandler)>(r15, r1, r2);

        i1 = virtualinvoke r2.<infoFlow.Z3ScriptHandler: int getRealArraySize(java.lang.String)>(r19);

        $r39 = new java.lang.StringBuilder;

        specialinvoke $r39.<java.lang.StringBuilder: void <init>(java.lang.String)>("array_");

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.String toString()>();

        $r42 = virtualinvoke r3.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.IntSort getIntSort()>();

        $r43 = virtualinvoke r3.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.IntSort getIntSort()>();

        r67 = virtualinvoke r3.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.ArrayExpr mkArrayConst(java.lang.String,com.microsoft.z3.Sort,com.microsoft.z3.Sort)>($r41, $r42, $r43);

        r22 = virtualinvoke r3.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.IntNum mkInt(int)>(i8_1);

        r23 = virtualinvoke r3.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.IntNum mkInt(int)>(i9_1);

        i8_2 = i8_1 + 1;

        i9_2 = i9_1 + 1;

        r24 = virtualinvoke r3.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.Expr mkSelect(com.microsoft.z3.ArrayExpr,com.microsoft.z3.Expr)>(r16, r22);

        r25 = virtualinvoke r3.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.ArrayExpr mkStore(com.microsoft.z3.ArrayExpr,com.microsoft.z3.Expr,com.microsoft.z3.Expr)>(r21, r23, r24);

        r26 = virtualinvoke r3.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.BoolExpr mkEq(com.microsoft.z3.Expr,com.microsoft.z3.Expr)>(r67, r25);

        $r44 = newarray (java.lang.Object)[1];

        $r45 = new java.lang.StringBuilder;

        specialinvoke $r45.<java.lang.StringBuilder: void <init>(java.lang.String)>("dtcArray=");

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r21);

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.String toString()>();

        $r44[0] = $r47;

        staticinvoke <infoFlow.LogUtils: void debugln(java.lang.Object[])>($r44);

        $r48 = new java.lang.StringBuilder;

        $r49 = specialinvoke r0.<infoFlow.Z3ArrayHandler: java.lang.String getArrayPrefix()>();

        $r50 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r49);

        specialinvoke $r48.<java.lang.StringBuilder: void <init>(java.lang.String)>($r50);

        $r51 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r18);

        r27 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.String toString()>();

        $r52 = virtualinvoke r2.<infoFlow.Z3ScriptHandler: java.util.Map getGlobal()>();

        $r53 = interfaceinvoke $r52.<java.util.Map: java.lang.Object get(java.lang.Object)>(r27);

        r28 = (com.microsoft.z3.ArrayExpr) $r53;

        r29 = virtualinvoke r2.<infoFlow.Z3ScriptHandler: java.lang.String getGlobalName(java.lang.String)>(r27);

        $r54 = newarray (java.lang.Object)[1];

        $r55 = new java.lang.StringBuilder;

        specialinvoke $r55.<java.lang.StringBuilder: void <init>(java.lang.String)>(">>>>>>>>>>>>>NewName=");

        $r56 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r29);

        $r57 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.String toString()>();

        $r54[0] = $r57;

        staticinvoke <infoFlow.LogUtils: void debugln(java.lang.Object[])>($r54);

        $r58 = virtualinvoke r28.<com.microsoft.z3.ArrayExpr: com.microsoft.z3.Sort getSort()>();

        $r59 = virtualinvoke r3.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.Expr mkConst(java.lang.String,com.microsoft.z3.Sort)>(r29, $r58);

        r30 = (com.microsoft.z3.ArrayExpr) $r59;

        $r60 = virtualinvoke r1.<infoFlow.Edge: infoFlow.Vertex getSource()>();

        $i7 = virtualinvoke $r60.<infoFlow.Vertex: int getDistance()>();

        r31 = virtualinvoke r2.<infoFlow.Z3ScriptHandler: com.microsoft.z3.Expr convertValue(soot.Value,boolean,infoFlow.Edge,int)>(r15, 0, r1, $i7);

        virtualinvoke r0.<infoFlow.Z3ArrayHandler: com.microsoft.z3.Expr z3Local(soot.Local,boolean,int,infoFlow.Z3ScriptHandler)>(r15, 0, 0, r2);

        r32 = virtualinvoke r3.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.ArrayExpr mkStore(com.microsoft.z3.ArrayExpr,com.microsoft.z3.Expr,com.microsoft.z3.Expr)>(r28, r31, r67);

        r33 = virtualinvoke r3.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.BoolExpr mkEq(com.microsoft.z3.Expr,com.microsoft.z3.Expr)>(r30, r32);

        $r61 = virtualinvoke r2.<infoFlow.Z3ScriptHandler: java.util.Map getGlobal()>();

        interfaceinvoke $r61.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r27, r30);

        $r62 = newarray (com.microsoft.z3.BoolExpr)[2];

        $r62[0] = r26;

        $r62[1] = r33;

        $r63 = virtualinvoke r3.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.BoolExpr mkAnd(com.microsoft.z3.BoolExpr[])>($r62);

        r20[i10_1] = $r63;

        $r64 = newarray (java.lang.Object)[1];

        $r65 = r20[i10_1];

        $r64[0] = $r65;

        staticinvoke <infoFlow.LogUtils: void debugln(java.lang.Object[])>($r64);

(1)     i10_2 = i10_1 + 1;

     label3:
        i10_1 = Phi(i10 #0, i10_2 #1);

        i9_1 = Phi(i9 #0, i9_2 #1);

        i8_1 = Phi(i8 #0, i8_2 #1);

        if i10_1 < i0 goto label2;

        r68 = virtualinvoke r3.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.BoolExpr mkAnd(com.microsoft.z3.BoolExpr[])>(r20);

        return r68;
    }

    public com.microsoft.z3.Expr z3ArraysEqual(soot.Value, infoFlow.Z3ScriptHandler, infoFlow.Edge)
    {
        infoFlow.Z3ArrayHandler r0;
        soot.Value r1, r6, r7;
        infoFlow.Z3ScriptHandler r2;
        infoFlow.Edge r3;
        com.microsoft.z3.InterpolationContext r4;
        soot.jimple.InvokeExpr r5;
        int i0, i1, $i2, $i3, $i4, i5, i5_1, i5_2;
        com.microsoft.z3.BoolExpr r8, r12, $r40, r48, r51, r55, r48_1, r48_2, r48_3, r48_4;
        com.microsoft.z3.ArrayExpr r9, r10;
        com.microsoft.z3.IntExpr[] r13;
        com.microsoft.z3.Expr r15, r49, r50, r53, r54;
        java.util.Map $r16, $r20;
        java.lang.String $r17, $r21, $r35, $r39, $r44;
        java.lang.Object $r18, $r22;
        java.lang.Integer $r19, $r23;
        com.microsoft.z3.IntNum $r24, $r25, $r28, $r29, $r45, $r46;
        soot.Local $r26, $r27;
        com.microsoft.z3.BoolExpr[] $r30, $r31;
        java.lang.Object[] $r32, $r36, $r41, $r47;
        java.lang.StringBuilder $r33, $r34, $r37, $r38, $r42, $r43;
        com.microsoft.z3.IntExpr r52;

        r0 := @this: infoFlow.Z3ArrayHandler;

        r1 := @parameter0: soot.Value;

        r2 := @parameter1: infoFlow.Z3ScriptHandler;

        r3 := @parameter2: infoFlow.Edge;

        r4 = virtualinvoke r2.<infoFlow.Z3ScriptHandler: com.microsoft.z3.InterpolationContext getIctx()>();

        r5 = (soot.jimple.InvokeExpr) r1;

        $i2 = r0.<infoFlow.Z3ArrayHandler: int argArray1>;

        r6 = interfaceinvoke r5.<soot.jimple.InvokeExpr: soot.Value getArg(int)>($i2);

        $i3 = r0.<infoFlow.Z3ArrayHandler: int argArray2>;

        r7 = interfaceinvoke r5.<soot.jimple.InvokeExpr: soot.Value getArg(int)>($i3);

        $r16 = virtualinvoke r2.<infoFlow.Z3ScriptHandler: java.util.Map getMaxArraySize()>();

        $r17 = virtualinvoke r6.<java.lang.Object: java.lang.String toString()>();

        $r18 = interfaceinvoke $r16.<java.util.Map: java.lang.Object get(java.lang.Object)>($r17);

        $r19 = (java.lang.Integer) $r18;

        i0 = virtualinvoke $r19.<java.lang.Integer: int intValue()>();

        $r20 = virtualinvoke r2.<infoFlow.Z3ScriptHandler: java.util.Map getMaxArraySize()>();

        $r21 = virtualinvoke r7.<java.lang.Object: java.lang.String toString()>();

        $r22 = interfaceinvoke $r20.<java.util.Map: java.lang.Object get(java.lang.Object)>($r21);

        $r23 = (java.lang.Integer) $r22;

        i1 = virtualinvoke $r23.<java.lang.Integer: int intValue()>();

        $r24 = virtualinvoke r4.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.IntNum mkInt(int)>(i0);

        $r25 = virtualinvoke r4.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.IntNum mkInt(int)>(i1);

        r8 = virtualinvoke r4.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.BoolExpr mkEq(com.microsoft.z3.Expr,com.microsoft.z3.Expr)>($r24, $r25);

        $r26 = (soot.Local) r6;

        r9 = specialinvoke r0.<infoFlow.Z3ArrayHandler: com.microsoft.z3.ArrayExpr getRealArray(soot.Local,infoFlow.Edge,infoFlow.Z3ScriptHandler)>($r26, r3, r2);

        $r27 = (soot.Local) r7;

        r10 = specialinvoke r0.<infoFlow.Z3ArrayHandler: com.microsoft.z3.ArrayExpr getRealArray(soot.Local,infoFlow.Edge,infoFlow.Z3ScriptHandler)>($r27, r3, r2);

        virtualinvoke r4.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.BoolExpr mkEq(com.microsoft.z3.Expr,com.microsoft.z3.Expr)>(r9, r10);

        r48 = null;

        i5 = 0;

(0)     goto label4;

     label1:
        $r28 = virtualinvoke r4.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.IntNum mkInt(int)>(i5_1);

        r49 = virtualinvoke r4.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.Expr mkSelect(com.microsoft.z3.ArrayExpr,com.microsoft.z3.Expr)>(r9, $r28);

        $r29 = virtualinvoke r4.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.IntNum mkInt(int)>(i5_1);

        r50 = virtualinvoke r4.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.Expr mkSelect(com.microsoft.z3.ArrayExpr,com.microsoft.z3.Expr)>(r10, $r29);

        r51 = virtualinvoke r4.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.BoolExpr mkEq(com.microsoft.z3.Expr,com.microsoft.z3.Expr)>(r49, r50);

        if r48_1 != null goto label2;

        $r31 = newarray (com.microsoft.z3.BoolExpr)[2];

        $r31[0] = r8;

        $r31[1] = r51;

        r48_2 = virtualinvoke r4.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.BoolExpr mkAnd(com.microsoft.z3.BoolExpr[])>($r31);

(1)     goto label3;

     label2:
        $r30 = newarray (com.microsoft.z3.BoolExpr)[2];

        $r30[0] = r48_1;

        $r30[1] = r51;

(2)     r48_3 = virtualinvoke r4.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.BoolExpr mkAnd(com.microsoft.z3.BoolExpr[])>($r30);

     label3:
        r48_4 = Phi(r48_2 #1, r48_3 #2);

(3)     i5_2 = i5_1 + 1;

     label4:
        i5_1 = Phi(i5 #0, i5_2 #3);

        r48_1 = Phi(r48 #0, r48_4 #3);

        $i4 = staticinvoke <java.lang.Math: int min(int,int)>(i0, i1);

        if i5_1 < $i4 goto label1;

        r52 = virtualinvoke r4.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.IntExpr mkIntConst(java.lang.String)>("i");

        r53 = virtualinvoke r4.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.Expr mkSelect(com.microsoft.z3.ArrayExpr,com.microsoft.z3.Expr)>(r9, r52);

        $r32 = newarray (java.lang.Object)[1];

        $r33 = new java.lang.StringBuilder;

        specialinvoke $r33.<java.lang.StringBuilder: void <init>(java.lang.String)>("firstSelect=");

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r53);

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        $r32[0] = $r35;

        staticinvoke <infoFlow.LogUtils: void detailln(java.lang.Object[])>($r32);

        r54 = virtualinvoke r4.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.Expr mkSelect(com.microsoft.z3.ArrayExpr,com.microsoft.z3.Expr)>(r10, r52);

        $r36 = newarray (java.lang.Object)[1];

        $r37 = new java.lang.StringBuilder;

        specialinvoke $r37.<java.lang.StringBuilder: void <init>(java.lang.String)>("secondSelect=");

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r54);

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>();

        $r36[0] = $r39;

        staticinvoke <infoFlow.LogUtils: void detailln(java.lang.Object[])>($r36);

        r55 = virtualinvoke r4.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.BoolExpr mkEq(com.microsoft.z3.Expr,com.microsoft.z3.Expr)>(r53, r54);

        $r40 = virtualinvoke r4.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.BoolExpr mkEq(com.microsoft.z3.Expr,com.microsoft.z3.Expr)>(r53, r54);

        r12 = virtualinvoke r4.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.BoolExpr mkNot(com.microsoft.z3.BoolExpr)>($r40);

        $r41 = newarray (java.lang.Object)[1];

        $r42 = new java.lang.StringBuilder;

        specialinvoke $r42.<java.lang.StringBuilder: void <init>(java.lang.String)>("notEq=");

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r12);

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.String toString()>();

        $r41[0] = $r44;

        staticinvoke <infoFlow.LogUtils: void detailln(java.lang.Object[])>($r41);

        r13 = newarray (com.microsoft.z3.IntExpr)[1];

        r13[0] = r52;

        virtualinvoke r4.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.Quantifier mkForall(com.microsoft.z3.Expr[],com.microsoft.z3.Expr,int,com.microsoft.z3.Pattern[],com.microsoft.z3.Expr[],com.microsoft.z3.Symbol,com.microsoft.z3.Symbol)>(r13, r55, 1, null, null, null, null);

        $r45 = virtualinvoke r4.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.IntNum mkInt(int)>(1);

        $r46 = virtualinvoke r4.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.IntNum mkInt(int)>(0);

        r15 = virtualinvoke r4.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.Expr mkITE(com.microsoft.z3.BoolExpr,com.microsoft.z3.Expr,com.microsoft.z3.Expr)>(r48_1, $r45, $r46);

        $r47 = newarray (java.lang.Object)[1];

        $r47[0] = r15;

        staticinvoke <infoFlow.LogUtils: void detailln(java.lang.Object[])>($r47);

        return r15;
    }

    private com.microsoft.z3.ArrayExpr getRealArray(soot.Local, infoFlow.Edge, infoFlow.Z3ScriptHandler)
    {
        infoFlow.Z3ArrayHandler r0;
        soot.Local r1;
        infoFlow.Edge r2;
        infoFlow.Z3ScriptHandler r3;
        com.microsoft.z3.Expr r4, $r18;
        soot.Type r5;
        java.lang.String r6, r7, $r12, $r13;
        com.microsoft.z3.ArrayExpr r8, r9;
        infoFlow.Vertex $r10;
        int $i0;
        java.lang.StringBuilder $r11, $r14;
        java.util.Map $r15;
        java.lang.Object $r16;
        com.microsoft.z3.InterpolationContext $r17;

        r0 := @this: infoFlow.Z3ArrayHandler;

        r1 := @parameter0: soot.Local;

        r2 := @parameter1: infoFlow.Edge;

        r3 := @parameter2: infoFlow.Z3ScriptHandler;

        $r10 = virtualinvoke r2.<infoFlow.Edge: infoFlow.Vertex getSource()>();

        $i0 = virtualinvoke $r10.<infoFlow.Vertex: int getDistance()>();

        r4 = virtualinvoke r3.<infoFlow.Z3ScriptHandler: com.microsoft.z3.Expr convertValue(soot.Value,boolean,infoFlow.Edge,int)>(r1, 0, r2, $i0);

        r5 = interfaceinvoke r1.<soot.Local: soot.Type getType()>();

        r6 = virtualinvoke r5.<soot.Type: java.lang.String toString()>();

        $r11 = new java.lang.StringBuilder;

        $r12 = specialinvoke r0.<infoFlow.Z3ArrayHandler: java.lang.String getArrayPrefix()>();

        $r13 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r12);

        specialinvoke $r11.<java.lang.StringBuilder: void <init>(java.lang.String)>($r13);

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        r7 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        $r15 = virtualinvoke r3.<infoFlow.Z3ScriptHandler: java.util.Map getGlobal()>();

        $r16 = interfaceinvoke $r15.<java.util.Map: java.lang.Object get(java.lang.Object)>(r7);

        r8 = (com.microsoft.z3.ArrayExpr) $r16;

        $r17 = virtualinvoke r3.<infoFlow.Z3ScriptHandler: com.microsoft.z3.InterpolationContext getIctx()>();

        $r18 = virtualinvoke $r17.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.Expr mkSelect(com.microsoft.z3.ArrayExpr,com.microsoft.z3.Expr)>(r8, r4);

        r9 = (com.microsoft.z3.ArrayExpr) $r18;

        return r9;
    }

    private java.lang.String getArrayPrefix()
    {
        infoFlow.Z3ArrayHandler r0;

        r0 := @this: infoFlow.Z3ArrayHandler;

        return "realArray_";
    }

    private void forAllTest(com.microsoft.z3.InterpolationContext, com.microsoft.z3.ArrayExpr, com.microsoft.z3.ArrayExpr)
    {
        infoFlow.Z3ArrayHandler r0;
        com.microsoft.z3.InterpolationContext r1;
        com.microsoft.z3.ArrayExpr r2, r3;
        java.lang.Object[] r4, r6, $r30, $r35, $r40, $r45, $r51, $r57, $r61, $r66, $r71, $r77, $r81, $r86, $r92, $r98, $r102, $r106, $r110, $r114;
        com.microsoft.z3.IntExpr[] r5, r7, r15;
        com.microsoft.z3.BoolExpr r8, r14, $r56, $r65, $r76, $r85, r118;
        com.microsoft.z3.Quantifier r9, r10, r16;
        com.microsoft.z3.IntExpr r11, $r26, $r29, $r42, $r47, $r52, $r58, $r62, $r72, $r78, $r82;
        com.microsoft.z3.Expr r12, r13, $r25, $r28;
        com.microsoft.z3.IntSort $r17;
        java.lang.String $r19, $r21, $r34, $r39, $r44, $r49, $r69, $r89, $r95, $r101, $r105, $r109, $r113, $r117;
        java.lang.StringBuilder $r20, $r33, $r38, $r43, $r48, $r68, $r88, $r94, $r100, $r104, $r108, $r112, $r116, r119, r120, r121, r122, r123, r124, r125, r126, r127, r128, r129, r130, r131;
        com.microsoft.z3.StringSymbol $r22, $r90, $r91, $r96, $r97;
        java.lang.Object $r23, $r24, $r27, $r32, $r37;
        int $i0, i1, i1_1, i1_2;
        com.microsoft.z3.BoolExpr[] $r50, $r70;
        com.microsoft.z3.IntNum $r53, $r55, $r59, $r63, $r73, $r75, $r79, $r83;
        com.microsoft.z3.ArithExpr $r54, $r60, $r64, $r74, $r80, $r84;
        com.microsoft.z3.Symbol r132;
        com.microsoft.z3.Sort r133, r134;
        com.microsoft.z3.ArithExpr[] r135, r136, r137, r138, r139, r140;
        com.microsoft.z3.Sort[] r141;
        com.microsoft.z3.Symbol[] r142;

        r0 := @this: infoFlow.Z3ArrayHandler;

        r1 := @parameter0: com.microsoft.z3.InterpolationContext;

        r2 := @parameter1: com.microsoft.z3.ArrayExpr;

        r3 := @parameter2: com.microsoft.z3.ArrayExpr;

        r4 = newarray (com.microsoft.z3.Sort)[3];

        r5 = newarray (com.microsoft.z3.IntExpr)[3];

        r6 = newarray (com.microsoft.z3.Symbol)[3];

        r7 = newarray (com.microsoft.z3.IntExpr)[3];

        i1 = 0;

(0)     goto label2;

     label1:
        $r17 = virtualinvoke r1.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.IntSort getIntSort()>();

        r4[i1_1] = $r17;

        r119 = new java.lang.StringBuilder;

        specialinvoke r119.<java.lang.StringBuilder: void <init>(java.lang.String)>("x_");

        $r19 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i1_1);

        $r20 = virtualinvoke r119.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        $r22 = virtualinvoke r1.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.StringSymbol mkSymbol(java.lang.String)>($r21);

        r6[i1_1] = $r22;

        $r24 = r6[i1_1];

        $r23 = r4[i1_1];

        r132 = (com.microsoft.z3.Symbol) $r24;

        r133 = (com.microsoft.z3.Sort) $r23;

        $r25 = virtualinvoke r1.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.Expr mkConst(com.microsoft.z3.Symbol,com.microsoft.z3.Sort)>(r132, r133);

        $r26 = (com.microsoft.z3.IntExpr) $r25;

        r5[i1_1] = $r26;

        $i0 = 2 - i1_1;

        $r27 = r4[i1_1];

        r134 = (com.microsoft.z3.Sort) $r27;

        $r28 = virtualinvoke r1.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.Expr mkBound(int,com.microsoft.z3.Sort)>($i0, r134);

        $r29 = (com.microsoft.z3.IntExpr) $r28;

        r7[i1_1] = $r29;

        $r30 = newarray (java.lang.Object)[1];

        r120 = new java.lang.StringBuilder;

        specialinvoke r120.<java.lang.StringBuilder: void <init>(java.lang.String)>("types=");

        $r32 = r4[i1_1];

        $r33 = virtualinvoke r120.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r32);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        $r30[0] = $r34;

        staticinvoke <infoFlow.LogUtils: void fatal(java.lang.Object[])>($r30);

        $r35 = newarray (java.lang.Object)[1];

        r121 = new java.lang.StringBuilder;

        specialinvoke r121.<java.lang.StringBuilder: void <init>(java.lang.String)>("---names=");

        $r37 = r6[i1_1];

        $r38 = virtualinvoke r121.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r37);

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>();

        $r35[0] = $r39;

        staticinvoke <infoFlow.LogUtils: void fatal(java.lang.Object[])>($r35);

        $r40 = newarray (java.lang.Object)[1];

        r122 = new java.lang.StringBuilder;

        specialinvoke r122.<java.lang.StringBuilder: void <init>(java.lang.String)>("---xs=");

        $r42 = r5[i1_1];

        $r43 = virtualinvoke r122.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r42);

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.String toString()>();

        $r40[0] = $r44;

        staticinvoke <infoFlow.LogUtils: void fatal(java.lang.Object[])>($r40);

        $r45 = newarray (java.lang.Object)[1];

        r123 = new java.lang.StringBuilder;

        specialinvoke r123.<java.lang.StringBuilder: void <init>(java.lang.String)>("---vars=");

        $r47 = r7[i1_1];

        $r48 = virtualinvoke r123.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r47);

        $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.String toString()>();

        $r45[0] = $r49;

        staticinvoke <infoFlow.LogUtils: void fatalln(java.lang.Object[])>($r45);

(1)     i1_2 = i1_1 + 1;

     label2:
        i1_1 = Phi(i1 #0, i1_2 #1);

        if i1_1 < 3 goto label1;

        $r50 = newarray (com.microsoft.z3.BoolExpr)[2];

        $r51 = newarray (com.microsoft.z3.ArithExpr)[2];

        $r52 = r7[0];

        $r51[0] = $r52;

        $r53 = virtualinvoke r1.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.IntNum mkInt(int)>(1);

        $r51[1] = $r53;

        r135 = (com.microsoft.z3.ArithExpr[]) $r51;

        $r54 = virtualinvoke r1.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.ArithExpr mkAdd(com.microsoft.z3.ArithExpr[])>(r135);

        $r55 = virtualinvoke r1.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.IntNum mkInt(int)>(2);

        $r56 = virtualinvoke r1.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.BoolExpr mkEq(com.microsoft.z3.Expr,com.microsoft.z3.Expr)>($r54, $r55);

        $r50[0] = $r56;

        $r57 = newarray (com.microsoft.z3.ArithExpr)[2];

        $r58 = r7[1];

        $r57[0] = $r58;

        $r59 = virtualinvoke r1.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.IntNum mkInt(int)>(2);

        $r57[1] = $r59;

        r136 = (com.microsoft.z3.ArithExpr[]) $r57;

        $r60 = virtualinvoke r1.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.ArithExpr mkAdd(com.microsoft.z3.ArithExpr[])>(r136);

        $r61 = newarray (com.microsoft.z3.ArithExpr)[2];

        $r62 = r7[2];

        $r61[0] = $r62;

        $r63 = virtualinvoke r1.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.IntNum mkInt(int)>(3);

        $r61[1] = $r63;

        r137 = (com.microsoft.z3.ArithExpr[]) $r61;

        $r64 = virtualinvoke r1.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.ArithExpr mkAdd(com.microsoft.z3.ArithExpr[])>(r137);

        $r65 = virtualinvoke r1.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.BoolExpr mkEq(com.microsoft.z3.Expr,com.microsoft.z3.Expr)>($r60, $r64);

        $r50[1] = $r65;

        r118 = virtualinvoke r1.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.BoolExpr mkAnd(com.microsoft.z3.BoolExpr[])>($r50);

        $r66 = newarray (java.lang.Object)[1];

        r124 = new java.lang.StringBuilder;

        specialinvoke r124.<java.lang.StringBuilder: void <init>(java.lang.String)>("body_vars=");

        $r68 = virtualinvoke r124.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r118);

        $r69 = virtualinvoke $r68.<java.lang.StringBuilder: java.lang.String toString()>();

        $r66[0] = $r69;

        staticinvoke <infoFlow.LogUtils: void warningln(java.lang.Object[])>($r66);

        $r70 = newarray (com.microsoft.z3.BoolExpr)[2];

        $r71 = newarray (com.microsoft.z3.ArithExpr)[2];

        $r72 = r5[0];

        $r71[0] = $r72;

        $r73 = virtualinvoke r1.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.IntNum mkInt(int)>(1);

        $r71[1] = $r73;

        r138 = (com.microsoft.z3.ArithExpr[]) $r71;

        $r74 = virtualinvoke r1.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.ArithExpr mkAdd(com.microsoft.z3.ArithExpr[])>(r138);

        $r75 = virtualinvoke r1.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.IntNum mkInt(int)>(2);

        $r76 = virtualinvoke r1.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.BoolExpr mkEq(com.microsoft.z3.Expr,com.microsoft.z3.Expr)>($r74, $r75);

        $r70[0] = $r76;

        $r77 = newarray (com.microsoft.z3.ArithExpr)[2];

        $r78 = r5[1];

        $r77[0] = $r78;

        $r79 = virtualinvoke r1.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.IntNum mkInt(int)>(2);

        $r77[1] = $r79;

        r139 = (com.microsoft.z3.ArithExpr[]) $r77;

        $r80 = virtualinvoke r1.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.ArithExpr mkAdd(com.microsoft.z3.ArithExpr[])>(r139);

        $r81 = newarray (com.microsoft.z3.ArithExpr)[2];

        $r82 = r5[2];

        $r81[0] = $r82;

        $r83 = virtualinvoke r1.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.IntNum mkInt(int)>(3);

        $r81[1] = $r83;

        r140 = (com.microsoft.z3.ArithExpr[]) $r81;

        $r84 = virtualinvoke r1.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.ArithExpr mkAdd(com.microsoft.z3.ArithExpr[])>(r140);

        $r85 = virtualinvoke r1.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.BoolExpr mkEq(com.microsoft.z3.Expr,com.microsoft.z3.Expr)>($r80, $r84);

        $r70[1] = $r85;

        r8 = virtualinvoke r1.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.BoolExpr mkAnd(com.microsoft.z3.BoolExpr[])>($r70);

        $r86 = newarray (java.lang.Object)[1];

        r125 = new java.lang.StringBuilder;

        specialinvoke r125.<java.lang.StringBuilder: void <init>(java.lang.String)>("body_const=");

        $r88 = virtualinvoke r125.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r8);

        $r89 = virtualinvoke $r88.<java.lang.StringBuilder: java.lang.String toString()>();

        $r86[0] = $r89;

        staticinvoke <infoFlow.LogUtils: void warningln(java.lang.Object[])>($r86);

        $r90 = virtualinvoke r1.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.StringSymbol mkSymbol(java.lang.String)>("Q1");

        $r91 = virtualinvoke r1.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.StringSymbol mkSymbol(java.lang.String)>("skid1");

        r141 = (com.microsoft.z3.Sort[]) r4;

        r142 = (com.microsoft.z3.Symbol[]) r6;

        r9 = virtualinvoke r1.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.Quantifier mkForall(com.microsoft.z3.Sort[],com.microsoft.z3.Symbol[],com.microsoft.z3.Expr,int,com.microsoft.z3.Pattern[],com.microsoft.z3.Expr[],com.microsoft.z3.Symbol,com.microsoft.z3.Symbol)>(r141, r142, r118, 1, null, null, $r90, $r91);

        $r92 = newarray (java.lang.Object)[1];

        r126 = new java.lang.StringBuilder;

        specialinvoke r126.<java.lang.StringBuilder: void <init>(java.lang.String)>("x=");

        $r94 = virtualinvoke r126.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r9);

        $r95 = virtualinvoke $r94.<java.lang.StringBuilder: java.lang.String toString()>();

        $r92[0] = $r95;

        staticinvoke <infoFlow.LogUtils: void warningln(java.lang.Object[])>($r92);

        $r96 = virtualinvoke r1.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.StringSymbol mkSymbol(java.lang.String)>("Q2");

        $r97 = virtualinvoke r1.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.StringSymbol mkSymbol(java.lang.String)>("skid2");

        r10 = virtualinvoke r1.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.Quantifier mkForall(com.microsoft.z3.Expr[],com.microsoft.z3.Expr,int,com.microsoft.z3.Pattern[],com.microsoft.z3.Expr[],com.microsoft.z3.Symbol,com.microsoft.z3.Symbol)>(r5, r8, 1, null, null, $r96, $r97);

        $r98 = newarray (java.lang.Object)[1];

        r127 = new java.lang.StringBuilder;

        specialinvoke r127.<java.lang.StringBuilder: void <init>(java.lang.String)>("y=");

        $r100 = virtualinvoke r127.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r10);

        $r101 = virtualinvoke $r100.<java.lang.StringBuilder: java.lang.String toString()>();

        $r98[0] = $r101;

        staticinvoke <infoFlow.LogUtils: void infoln(java.lang.Object[])>($r98);

        r11 = virtualinvoke r1.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.IntExpr mkIntConst(java.lang.String)>("i");

        r12 = virtualinvoke r1.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.Expr mkSelect(com.microsoft.z3.ArrayExpr,com.microsoft.z3.Expr)>(r2, r11);

        $r102 = newarray (java.lang.Object)[1];

        r128 = new java.lang.StringBuilder;

        specialinvoke r128.<java.lang.StringBuilder: void <init>(java.lang.String)>("firstSelect=");

        $r104 = virtualinvoke r128.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r12);

        $r105 = virtualinvoke $r104.<java.lang.StringBuilder: java.lang.String toString()>();

        $r102[0] = $r105;

        staticinvoke <infoFlow.LogUtils: void fatalln(java.lang.Object[])>($r102);

        r13 = virtualinvoke r1.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.Expr mkSelect(com.microsoft.z3.ArrayExpr,com.microsoft.z3.Expr)>(r3, r11);

        $r106 = newarray (java.lang.Object)[1];

        r129 = new java.lang.StringBuilder;

        specialinvoke r129.<java.lang.StringBuilder: void <init>(java.lang.String)>("secondSelect=");

        $r108 = virtualinvoke r129.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r13);

        $r109 = virtualinvoke $r108.<java.lang.StringBuilder: java.lang.String toString()>();

        $r106[0] = $r109;

        staticinvoke <infoFlow.LogUtils: void fatalln(java.lang.Object[])>($r106);

        r14 = virtualinvoke r1.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.BoolExpr mkEq(com.microsoft.z3.Expr,com.microsoft.z3.Expr)>(r12, r13);

        $r110 = newarray (java.lang.Object)[1];

        r130 = new java.lang.StringBuilder;

        specialinvoke r130.<java.lang.StringBuilder: void <init>(java.lang.String)>("eq=");

        $r112 = virtualinvoke r130.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r14);

        $r113 = virtualinvoke $r112.<java.lang.StringBuilder: java.lang.String toString()>();

        $r110[0] = $r113;

        staticinvoke <infoFlow.LogUtils: void fatalln(java.lang.Object[])>($r110);

        r15 = newarray (com.microsoft.z3.IntExpr)[1];

        r15[0] = r11;

        r16 = virtualinvoke r1.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.Quantifier mkForall(com.microsoft.z3.Expr[],com.microsoft.z3.Expr,int,com.microsoft.z3.Pattern[],com.microsoft.z3.Expr[],com.microsoft.z3.Symbol,com.microsoft.z3.Symbol)>(r15, r14, 1, null, null, null, null);

        $r114 = newarray (java.lang.Object)[1];

        r131 = new java.lang.StringBuilder;

        specialinvoke r131.<java.lang.StringBuilder: void <init>(java.lang.String)>("forall=");

        $r116 = virtualinvoke r131.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r16);

        $r117 = virtualinvoke $r116.<java.lang.StringBuilder: java.lang.String toString()>();

        $r114[0] = $r117;

        staticinvoke <infoFlow.LogUtils: void warningln(java.lang.Object[])>($r114);

        staticinvoke <java.lang.System: void exit(int)>(0);

        return;
    }
}
