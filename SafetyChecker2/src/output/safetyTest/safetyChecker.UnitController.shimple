public class safetyChecker.UnitController extends java.lang.Object
{
    public static final java.lang.String ERRORLABEL;
    public static final java.lang.String OBJECTINVOKE;
    public static final java.lang.String NONSENSCOMPARE;
    public static final java.lang.String NOTINVOKESIGNATURE;
    private static final java.lang.String SEND_TEXT_MESSAGE_SIGNATURE;
    private static final java.lang.Integer SEND_TEXT_MESSAGE_PARAM_NO;
    private static final java.lang.String AND_UTIL_LOG_SIGNATURE;
    private static final java.lang.Integer AND_UTIL_LOG_PARAM_NO;
    private static final java.lang.String SYSTEM_ARRAYCOPY_SIGNATURE;
    private static final java.lang.String ARRAYS_EQUALS_SIGNATURE;
    public static final java.lang.String[] sinkSignatureDB;
    public static final java.lang.String[] sourceSignatureDB;
    public static final java.util.Map sensitiveParameterMap;

    static void <clinit>()
    {
        java.lang.Integer $r0, $r1;
        java.lang.String[] $r2, $r3;
        java.util.HashMap $r4;

        $r0 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2);

        <safetyChecker.UnitController: java.lang.Integer SEND_TEXT_MESSAGE_PARAM_NO> = $r0;

        $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1);

        <safetyChecker.UnitController: java.lang.Integer AND_UTIL_LOG_PARAM_NO> = $r1;

        $r2 = newarray (java.lang.String)[2];

        $r2[0] = "sendTextMessage";

        $r2[1] = "android.util.Log";

        <safetyChecker.UnitController: java.lang.String[] sinkSignatureDB> = $r2;

        $r3 = newarray (java.lang.String)[2];

        $r3[0] = "getSimSerialNumber";

        $r3[1] = "getDeviceId";

        <safetyChecker.UnitController: java.lang.String[] sourceSignatureDB> = $r3;

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        <safetyChecker.UnitController: java.util.Map sensitiveParameterMap> = $r4;

        return;
    }

    public void <init>()
    {
        safetyChecker.UnitController r0;
        java.lang.Integer $r1, $r4;
        java.util.Map $r2, $r5;

        r0 := @this: safetyChecker.UnitController;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = <safetyChecker.UnitController: java.util.Map sensitiveParameterMap>;

        $r1 = <safetyChecker.UnitController: java.lang.Integer SEND_TEXT_MESSAGE_PARAM_NO>;

        interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("sendTextMessage", $r1);

        $r5 = <safetyChecker.UnitController: java.util.Map sensitiveParameterMap>;

        $r4 = <safetyChecker.UnitController: java.lang.Integer AND_UTIL_LOG_PARAM_NO>;

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("android.util.Log", $r4);

        return;
    }

    public void analyzeEdge(safetyChecker.Edge, java.util.Map, soot.toolkits.graph.ExceptionalUnitGraph) throws safetyChecker.exception.MainFunctionNotFoundException, safetyChecker.exception.ErrorLocationNotFoundException
    {
        safetyChecker.UnitController r0;
        safetyChecker.Edge r1;
        java.util.Map r2;
        soot.toolkits.graph.ExceptionalUnitGraph r3;
        soot.Unit r4;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12;
        safetyChecker.Vertex $r5, $r6;

        r0 := @this: safetyChecker.UnitController;

        r1 := @parameter0: safetyChecker.Edge;

        r2 := @parameter1: java.util.Map;

        r3 := @parameter2: soot.toolkits.graph.ExceptionalUnitGraph;

        r4 = virtualinvoke r1.<safetyChecker.Edge: soot.Unit getUnit()>();

        $z0 = virtualinvoke r0.<safetyChecker.UnitController: boolean isErrorUnit(soot.Unit)>(r4);

        virtualinvoke r1.<safetyChecker.Edge: void setErrorEdge(boolean)>($z0);

        $z1 = specialinvoke r0.<safetyChecker.UnitController: boolean isSubFunctionUnit(soot.Unit,java.util.Map,safetyChecker.Edge)>(r4, r2, r1);

        virtualinvoke r1.<safetyChecker.Edge: void setSubFunction(boolean)>($z1);

        $z2 = specialinvoke r0.<safetyChecker.UnitController: boolean isSinkInvoke(soot.Unit)>(r4);

        virtualinvoke r1.<safetyChecker.Edge: void setSinkEdge(boolean)>($z2);

        $z3 = specialinvoke r0.<safetyChecker.UnitController: boolean isSourceInvoke(soot.Unit)>(r4);

        virtualinvoke r1.<safetyChecker.Edge: void setSourceEdge(boolean)>($z3);

        $z4 = virtualinvoke r0.<safetyChecker.UnitController: boolean isObjectInvoke(soot.Unit)>(r4);

        virtualinvoke r1.<safetyChecker.Edge: void setObjectEdge(boolean)>($z4);

        $z5 = virtualinvoke r0.<safetyChecker.UnitController: boolean isNewInvoke(soot.Unit)>(r4);

        virtualinvoke r1.<safetyChecker.Edge: void setNewEdge(boolean)>($z5);

        $z6 = specialinvoke r0.<safetyChecker.UnitController: boolean isArrayCopyInvoke(soot.Unit)>(r4);

        virtualinvoke r1.<safetyChecker.Edge: void setArrayCopyEdge(boolean)>($z6);

        $z7 = virtualinvoke r0.<safetyChecker.UnitController: boolean isControlLocation(soot.Unit)>(r4);

        virtualinvoke r1.<safetyChecker.Edge: void setControlLocation(boolean)>($z7);

        $z8 = virtualinvoke r0.<safetyChecker.UnitController: boolean isEntryLocation(soot.Unit,soot.toolkits.graph.ExceptionalUnitGraph)>(r4, r3);

        virtualinvoke r1.<safetyChecker.Edge: void setEntryLocation(boolean)>($z8);

        $z9 = virtualinvoke r0.<safetyChecker.UnitController: boolean isInitInvoke(soot.Unit)>(r4);

        virtualinvoke r1.<safetyChecker.Edge: void setInitInvoke(boolean)>($z9);

        $r5 = virtualinvoke r1.<safetyChecker.Edge: safetyChecker.Vertex getSource()>();

        $z10 = virtualinvoke r1.<safetyChecker.Edge: boolean isEntryLocation()>();

        virtualinvoke $r5.<safetyChecker.Vertex: void setEntryLocation(boolean)>($z10);

        $r6 = virtualinvoke r1.<safetyChecker.Edge: safetyChecker.Vertex getSource()>();

        $z11 = virtualinvoke r1.<safetyChecker.Edge: boolean isInErrorPath()>();

        virtualinvoke $r6.<safetyChecker.Vertex: void setInErrorPath(boolean)>($z11);

        $z12 = virtualinvoke r1.<safetyChecker.Edge: boolean isErrorEdge()>();

        if $z12 == 0 goto label1;

        virtualinvoke r1.<safetyChecker.Edge: void setInErrorPath(boolean)>(1);

     label1:
        return;
    }

    private boolean isArrayCopyInvoke(soot.Unit)
    {
        safetyChecker.UnitController r0;
        soot.Unit r1;
        boolean $z0, $z1;
        java.lang.String $r2;

        r0 := @this: safetyChecker.UnitController;

        r1 := @parameter0: soot.Unit;

        $z0 = r1 instanceof soot.jimple.InvokeStmt;

        if $z0 == 0 goto label1;

        $r2 = staticinvoke <safetyChecker.UnitController: java.lang.String getMethodSignature(soot.Unit)>(r1);

        $z1 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("<java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>");

        if $z1 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private boolean isSourceInvoke(soot.Unit)
    {
        safetyChecker.UnitController r0;
        soot.Unit r1;
        java.lang.String r2, r3;
        int i0, i1, i1_1, i1_2, i1_3;
        java.lang.String[] r4, $r5;
        boolean $z0, $z1;

        r0 := @this: safetyChecker.UnitController;

        r1 := @parameter0: soot.Unit;

        $z0 = r1 instanceof soot.jimple.AssignStmt;

(0)     if $z0 == 0 goto label4;

        r2 = staticinvoke <safetyChecker.UnitController: java.lang.String getMethodSignature(soot.Unit)>(r1);

        $r5 = <safetyChecker.UnitController: java.lang.String[] sourceSignatureDB>;

        r4 = $r5;

        i0 = lengthof $r5;

        i1 = 0;

(1)     goto label3;

     label1:
        r3 = r4[i1_1];

        $z1 = virtualinvoke r2.<java.lang.String: boolean contains(java.lang.CharSequence)>(r3);

        if $z1 == 0 goto label2;

        return 1;

     label2:
(2)     i1_2 = i1_1 + 1;

     label3:
        i1_1 = Phi(i1 #1, i1_2 #2);

(3)     if i1_1 < i0 goto label1;

     label4:
        i1_3 = Phi(i1 #0, i1_1 #3);

        return 0;
    }

    private boolean isSinkInvoke(soot.Unit)
    {
        safetyChecker.UnitController r0;
        soot.Unit r1;
        java.lang.String r2, r3, $r8;
        int i0, i1, i1_1, i1_2;
        java.lang.String[] r4, $r9;
        java.lang.Object[] $r5;
        java.lang.StringBuilder $r6, $r7;
        boolean $z0;

        r0 := @this: safetyChecker.UnitController;

        r1 := @parameter0: soot.Unit;

        $r5 = newarray (java.lang.Object)[1];

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>("isSinkInvoke:");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $r5[0] = $r8;

        staticinvoke <safetyChecker.utilities.LogUtils: void debugln(java.lang.Object[])>($r5);

        r2 = staticinvoke <safetyChecker.UnitController: java.lang.String getMethodSignature(soot.Unit)>(r1);

        $r9 = <safetyChecker.UnitController: java.lang.String[] sinkSignatureDB>;

        r4 = $r9;

        i0 = lengthof $r9;

        i1 = 0;

(0)     goto label3;

     label1:
        r3 = r4[i1_1];

        $z0 = virtualinvoke r2.<java.lang.String: boolean contains(java.lang.CharSequence)>(r3);

        if $z0 == 0 goto label2;

        return 1;

     label2:
(1)     i1_2 = i1_1 + 1;

     label3:
        i1_1 = Phi(i1 #0, i1_2 #1);

        if i1_1 < i0 goto label1;

        return 0;
    }

    private boolean isSubFunctionUnit(soot.Unit, java.util.Map, safetyChecker.Edge) throws safetyChecker.exception.MainFunctionNotFoundException, safetyChecker.exception.ErrorLocationNotFoundException
    {
        safetyChecker.UnitController r0;
        soot.Unit r1;
        java.util.Map r2;
        safetyChecker.Edge r3;
        java.lang.String r4, $r8;
        boolean $z0, $z1, $z2;
        java.lang.Object[] $r5;
        java.lang.StringBuilder $r6, $r7;
        safetyChecker.ProgramTree $r9;

        r0 := @this: safetyChecker.UnitController;

        r1 := @parameter0: soot.Unit;

        r2 := @parameter1: java.util.Map;

        r3 := @parameter2: safetyChecker.Edge;

        $z0 = virtualinvoke r0.<safetyChecker.UnitController: boolean isInvoke(soot.Unit)>(r1);

        if $z0 == 0 goto label1;

        r4 = staticinvoke <safetyChecker.UnitController: java.lang.String getMethodSignature(soot.Unit)>(r1);

        $z1 = virtualinvoke r4.<java.lang.String: boolean contains(java.lang.CharSequence)>("ErrorLable");

        if $z1 != 0 goto label1;

        $z2 = interfaceinvoke r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r4);

        if $z2 == 0 goto label1;

        $r5 = newarray (java.lang.Object)[1];

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>("SubFunction found : ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $r5[0] = $r8;

        staticinvoke <safetyChecker.utilities.LogUtils: void warningln(java.lang.Object[])>($r5);

        $r9 = new safetyChecker.ProgramTree;

        specialinvoke $r9.<safetyChecker.ProgramTree: void <init>(java.util.Map,java.lang.String,boolean)>(r2, r4, 0);

        virtualinvoke r3.<safetyChecker.Edge: void setProgramTree(safetyChecker.ProgramTree)>($r9);

        return 1;

     label1:
        return 0;
    }

    public boolean isErrorUnit(soot.Unit)
    {
        safetyChecker.UnitController r0;
        soot.Unit r1;
        java.lang.String r2;
        boolean $z0, $z1;

        r0 := @this: safetyChecker.UnitController;

        r1 := @parameter0: soot.Unit;

        $z0 = virtualinvoke r0.<safetyChecker.UnitController: boolean isInvoke(soot.Unit)>(r1);

        if $z0 == 0 goto label1;

        r2 = staticinvoke <safetyChecker.UnitController: java.lang.String getMethodSignature(soot.Unit)>(r1);

        $z1 = virtualinvoke r2.<java.lang.String: boolean contains(java.lang.CharSequence)>("ErrorLable");

        if $z1 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean isObjectInvoke(soot.Unit)
    {
        safetyChecker.UnitController r0;
        soot.Unit r1;
        soot.jimple.InvokeStmt r2;
        java.lang.String r3;
        boolean $z0, $z1, $z2;
        soot.jimple.InvokeExpr $r4;
        soot.SootMethod $r5;

        r0 := @this: safetyChecker.UnitController;

        r1 := @parameter0: soot.Unit;

        $z0 = virtualinvoke r0.<safetyChecker.UnitController: boolean isInvoke(soot.Unit)>(r1);

        if $z0 == 0 goto label1;

        $z1 = r1 instanceof soot.jimple.internal.JAssignStmt;

        if $z1 != 0 goto label1;

        r2 = (soot.jimple.InvokeStmt) r1;

        $r4 = interfaceinvoke r2.<soot.jimple.InvokeStmt: soot.jimple.InvokeExpr getInvokeExpr()>();

        $r5 = interfaceinvoke $r4.<soot.jimple.InvokeExpr: soot.SootMethod getMethod()>();

        r3 = virtualinvoke $r5.<soot.SootMethod: java.lang.String getSignature()>();

        $z2 = virtualinvoke r3.<java.lang.String: boolean contains(java.lang.CharSequence)>("<java.lang.Object: void <init>");

        if $z2 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean isNewInvoke(soot.Unit)
    {
        safetyChecker.UnitController r0;
        soot.Unit r1;
        soot.jimple.AssignStmt r2;
        soot.Value r3;
        boolean $z0, $z1;

        r0 := @this: safetyChecker.UnitController;

        r1 := @parameter0: soot.Unit;

        $z0 = r1 instanceof soot.jimple.AssignStmt;

        if $z0 == 0 goto label1;

        r2 = (soot.jimple.AssignStmt) r1;

        r3 = interfaceinvoke r2.<soot.jimple.AssignStmt: soot.Value getRightOp()>();

        $z1 = r3 instanceof soot.jimple.NewExpr;

        if $z1 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean isNonSenseCompare(soot.Unit)
    {
        safetyChecker.UnitController r0;
        soot.Unit r1;
        java.lang.String r2;
        boolean $z0, $z1;

        r0 := @this: safetyChecker.UnitController;

        r1 := @parameter0: soot.Unit;

        $z0 = virtualinvoke r0.<safetyChecker.UnitController: boolean isInvoke(soot.Unit)>(r1);

        if $z0 == 0 goto label1;

        r2 = staticinvoke <safetyChecker.UnitController: java.lang.String getMethodSignature(soot.Unit)>(r1);

        $z1 = virtualinvoke r2.<java.lang.String: boolean contains(java.lang.CharSequence)>("java.lang.String: boolean equals");

        if $z1 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    private boolean isCalleeFunction(soot.Unit)
    {
        safetyChecker.UnitController r0;
        soot.Unit r1;
        boolean $z0, $z1;

        r0 := @this: safetyChecker.UnitController;

        r1 := @parameter0: soot.Unit;

        $z0 = virtualinvoke r0.<safetyChecker.UnitController: boolean isInvoke(soot.Unit)>(r1);

        if $z0 == 0 goto label1;

        $z1 = r1 instanceof soot.jimple.AssignStmt;

        if $z1 == 0 goto label1;

        staticinvoke <safetyChecker.UnitController: java.lang.String getMethodSignature(soot.Unit)>(r1);

     label1:
        return 0;
    }

    public boolean isInitInvoke(soot.Unit)
    {
        safetyChecker.UnitController r0;
        soot.Unit r1;
        java.lang.String r2;
        soot.Value r3;
        boolean $z0, $z1, $z2, $z3, $z4;
        soot.jimple.AssignStmt $r4;

        r0 := @this: safetyChecker.UnitController;

        r1 := @parameter0: soot.Unit;

        r2 = staticinvoke <safetyChecker.UnitController: java.lang.String getMethodSignature(soot.Unit)>(r1);

        $z0 = r1 instanceof soot.jimple.InvokeStmt;

        if $z0 == 0 goto label1;

        $z4 = virtualinvoke r2.<java.lang.String: boolean contains(java.lang.CharSequence)>("void <init>");

        if $z4 == 0 goto label1;

        return 1;

     label1:
        $z1 = r1 instanceof soot.jimple.AssignStmt;

        if $z1 == 0 goto label2;

        $r4 = (soot.jimple.AssignStmt) r1;

        r3 = interfaceinvoke $r4.<soot.jimple.AssignStmt: soot.Value getRightOp()>();

        $z2 = r3 instanceof soot.jimple.InvokeExpr;

        if $z2 == 0 goto label2;

        $z3 = virtualinvoke r2.<java.lang.String: boolean contains(java.lang.CharSequence)>("void <init>");

        if $z3 == 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    public boolean isInvoke(soot.Unit)
    {
        safetyChecker.UnitController r0;
        soot.Unit r1;
        java.lang.String r2;
        soot.Value r3;
        boolean $z0, $z1, $z2, $z3, $z4;
        soot.jimple.AssignStmt $r4;

        r0 := @this: safetyChecker.UnitController;

        r1 := @parameter0: soot.Unit;

        r2 = staticinvoke <safetyChecker.UnitController: java.lang.String getMethodSignature(soot.Unit)>(r1);

        $z0 = r1 instanceof soot.jimple.InvokeStmt;

        if $z0 == 0 goto label1;

        $z4 = virtualinvoke r2.<java.lang.String: boolean contains(java.lang.CharSequence)>("void <init>");

        if $z4 != 0 goto label1;

        return 1;

     label1:
        $z1 = r1 instanceof soot.jimple.AssignStmt;

        if $z1 == 0 goto label2;

        $r4 = (soot.jimple.AssignStmt) r1;

        r3 = interfaceinvoke $r4.<soot.jimple.AssignStmt: soot.Value getRightOp()>();

        $z2 = r3 instanceof soot.jimple.InvokeExpr;

        if $z2 == 0 goto label2;

        $z3 = virtualinvoke r2.<java.lang.String: boolean contains(java.lang.CharSequence)>("void <init>");

        if $z3 != 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    public static java.lang.String getMethodSignature(soot.Unit)
    {
        soot.Unit r0;
        soot.Value r1;
        boolean $z0, $z1, $z2;
        soot.jimple.AssignStmt $r2;
        soot.jimple.InvokeExpr $r3, $r6;
        soot.SootMethod $r4, $r7;
        soot.jimple.InvokeStmt $r5;
        java.lang.String r8, r8_1, r8_2, r8_3;

        r0 := @parameter0: soot.Unit;

        r8 = "";

        $z0 = r0 instanceof soot.jimple.InvokeStmt;

        if $z0 == 0 goto label1;

        $r5 = (soot.jimple.InvokeStmt) r0;

        $r6 = interfaceinvoke $r5.<soot.jimple.InvokeStmt: soot.jimple.InvokeExpr getInvokeExpr()>();

        $r7 = interfaceinvoke $r6.<soot.jimple.InvokeExpr: soot.SootMethod getMethod()>();

        r8_1 = virtualinvoke $r7.<soot.SootMethod: java.lang.String getSignature()>();

(0)     goto label2;

     label1:
        $z1 = r0 instanceof soot.jimple.AssignStmt;

(1)     if $z1 == 0 goto label2;

        $r2 = (soot.jimple.AssignStmt) r0;

        r1 = interfaceinvoke $r2.<soot.jimple.AssignStmt: soot.Value getRightOp()>();

        $z2 = r1 instanceof soot.jimple.InvokeExpr;

(2)     if $z2 == 0 goto label2;

        $r3 = (soot.jimple.InvokeExpr) r1;

        $r4 = interfaceinvoke $r3.<soot.jimple.InvokeExpr: soot.SootMethod getMethod()>();

(3)     r8_2 = virtualinvoke $r4.<soot.SootMethod: java.lang.String getSignature()>();

     label2:
        r8_3 = Phi(r8_1 #0, r8 #1, r8 #2, r8_2 #3);

        return r8_3;
    }

    public static boolean isArraysEqualsInvoke(soot.Value)
    {
        soot.Value r0;
        java.lang.String r1;
        boolean $z0, $z1;
        soot.jimple.InvokeExpr $r2;
        soot.SootMethod $r3;

        r0 := @parameter0: soot.Value;

        $z0 = r0 instanceof soot.jimple.InvokeExpr;

        if $z0 == 0 goto label1;

        $r2 = (soot.jimple.InvokeExpr) r0;

        $r3 = interfaceinvoke $r2.<soot.jimple.InvokeExpr: soot.SootMethod getMethod()>();

        r1 = virtualinvoke $r3.<soot.SootMethod: java.lang.String getSignature()>();

        $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("<java.util.Arrays: boolean equals(int[],int[])>");

        if $z1 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean isControlLocation(soot.Unit)
    {
        safetyChecker.UnitController r0;
        soot.Unit r1;
        boolean $z0;

        r0 := @this: safetyChecker.UnitController;

        r1 := @parameter0: soot.Unit;

        $z0 = r1 instanceof soot.jimple.IfStmt;

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean isEntryLocation(soot.Unit, soot.toolkits.graph.ExceptionalUnitGraph)
    {
        safetyChecker.UnitController r0;
        soot.Unit r1;
        soot.toolkits.graph.ExceptionalUnitGraph r2;
        java.util.List $r3;
        int $i0;
        boolean $z0, $z0_1, $z0_2;

        r0 := @this: safetyChecker.UnitController;

        r1 := @parameter0: soot.Unit;

        r2 := @parameter1: soot.toolkits.graph.ExceptionalUnitGraph;

        $r3 = virtualinvoke r2.<soot.toolkits.graph.ExceptionalUnitGraph: java.util.List getUnexceptionalPredsOf(soot.Unit)>(r1);

        $i0 = interfaceinvoke $r3.<java.util.List: int size()>();

        if $i0 != 0 goto label1;

        $z0 = 1;

(0)     goto label2;

     label1:
(1)     $z0_1 = 0;

     label2:
        $z0_2 = Phi($z0 #0, $z0_1 #1);

        return $z0_2;
    }
}
