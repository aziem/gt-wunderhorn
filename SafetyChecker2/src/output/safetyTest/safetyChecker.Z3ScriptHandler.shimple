public class safetyChecker.Z3ScriptHandler extends java.lang.Object
{
    private com.microsoft.z3.InterpolationContext ictx;
    private java.util.Map newSortMap;
    private java.util.Map sortId;
    private java.util.Map global;
    private java.util.Map localMap;
    private java.util.Map arrayNameMap;
    private java.util.Map realArraySize;
    private java.util.Map maxArraySize;
    private java.util.Map substitute;
    private java.util.Map substituteSort;
    private java.util.Stack parameters;
    private safetyChecker.Z3ArrayHandler arrayHandler;
    private safetyChecker.Vertex errorPathRoot;
    private safetyChecker.Edge currentEdge;

    public void <init>(com.microsoft.z3.InterpolationContext)
    {
        safetyChecker.Z3ScriptHandler r0;
        com.microsoft.z3.InterpolationContext r1;
        java.util.HashMap $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10;
        java.util.Stack $r11;
        safetyChecker.Z3ArrayHandler $r12;

        r0 := @this: safetyChecker.Z3ScriptHandler;

        r1 := @parameter0: com.microsoft.z3.InterpolationContext;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<safetyChecker.Z3ScriptHandler: java.util.Map newSortMap> = $r2;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r0.<safetyChecker.Z3ScriptHandler: java.util.Map sortId> = $r3;

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        r0.<safetyChecker.Z3ScriptHandler: java.util.Map global> = $r4;

        $r5 = new java.util.HashMap;

        specialinvoke $r5.<java.util.HashMap: void <init>()>();

        r0.<safetyChecker.Z3ScriptHandler: java.util.Map localMap> = $r5;

        $r6 = new java.util.HashMap;

        specialinvoke $r6.<java.util.HashMap: void <init>()>();

        r0.<safetyChecker.Z3ScriptHandler: java.util.Map arrayNameMap> = $r6;

        $r7 = new java.util.HashMap;

        specialinvoke $r7.<java.util.HashMap: void <init>()>();

        r0.<safetyChecker.Z3ScriptHandler: java.util.Map realArraySize> = $r7;

        $r8 = new java.util.HashMap;

        specialinvoke $r8.<java.util.HashMap: void <init>()>();

        r0.<safetyChecker.Z3ScriptHandler: java.util.Map maxArraySize> = $r8;

        $r9 = new java.util.HashMap;

        specialinvoke $r9.<java.util.HashMap: void <init>()>();

        r0.<safetyChecker.Z3ScriptHandler: java.util.Map substitute> = $r9;

        $r10 = new java.util.HashMap;

        specialinvoke $r10.<java.util.HashMap: void <init>()>();

        r0.<safetyChecker.Z3ScriptHandler: java.util.Map substituteSort> = $r10;

        $r11 = new java.util.Stack;

        specialinvoke $r11.<java.util.Stack: void <init>()>();

        r0.<safetyChecker.Z3ScriptHandler: java.util.Stack parameters> = $r11;

        $r12 = new safetyChecker.Z3ArrayHandler;

        specialinvoke $r12.<safetyChecker.Z3ArrayHandler: void <init>()>();

        r0.<safetyChecker.Z3ScriptHandler: safetyChecker.Z3ArrayHandler arrayHandler> = $r12;

        r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx> = r1;

        return;
    }

    public void convertPathtoZ3Script(safetyChecker.Vertex)
    {
        safetyChecker.Z3ScriptHandler r0;
        java.lang.Object[] $r1, $r2, $r6;
        safetyChecker.Edge $r3, $r4, $r5;
        boolean $z1, z2, z2_1, z2_2;
        safetyChecker.Vertex r7, r7_1, r7_2;

        r0 := @this: safetyChecker.Z3ScriptHandler;

        r7 := @parameter0: safetyChecker.Vertex;

        $r1 = newarray (java.lang.Object)[1];

        $r1[0] = ">>>>>>> Z3ScriptHandler.convertPathtoZ3Script";

        staticinvoke <safetyChecker.LogUtils: void debugln(java.lang.Object[])>($r1);

        r0.<safetyChecker.Z3ScriptHandler: safetyChecker.Vertex errorPathRoot> = r7;

        z2 = 0;

(0)     goto label3;

     label1:
        if z2_1 == 0 goto label2;

        goto label4;

     label2:
        $r2 = newarray (java.lang.Object)[1];

        $r3 = virtualinvoke r7_1.<safetyChecker.Vertex: safetyChecker.Edge getOutgoingEdge()>();

        $r2[0] = $r3;

        staticinvoke <safetyChecker.LogUtils: void debugln(java.lang.Object[])>($r2);

        $r4 = virtualinvoke r7_1.<safetyChecker.Vertex: safetyChecker.Edge getOutgoingEdge()>();

        virtualinvoke r0.<safetyChecker.Z3ScriptHandler: boolean createZ3Script(safetyChecker.Edge)>($r4);

        r7_2 = virtualinvoke r7_1.<safetyChecker.Vertex: safetyChecker.Vertex getNextVertex()>();

        $r5 = virtualinvoke r7_2.<safetyChecker.Vertex: safetyChecker.Edge getOutgoingEdge()>();

        $z1 = virtualinvoke $r5.<safetyChecker.Edge: boolean isErrorEdge()>();

(1)     if $z1 == 0 goto label3;

(2)     z2_2 = 1;

     label3:
        z2_1 = Phi(z2 #0, z2_1 #1, z2_2 #2);

        r7_1 = Phi(r7 #0, r7_2 #1, r7_2 #2);

        if r7_1 != null goto label1;

     label4:
        $r6 = newarray (java.lang.Object)[1];

        $r6[0] = "<<<<<<<< Z3ScriptHandler.convertPathtoZ3Script";

        staticinvoke <safetyChecker.LogUtils: void debugln(java.lang.Object[])>($r6);

        return;
    }

    public boolean createZ3Script(safetyChecker.Edge)
    {
        safetyChecker.Z3ScriptHandler r0;
        safetyChecker.Edge r1;
        soot.Unit r2;
        java.lang.Object[] $r3, $r4, $r5, $r7, $r8, $r15, $r20, $r21;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, z7, z7_1, z7_2, z7_3, z7_4, z7_5, z7_6, z7_7, z7_8, z7_9, z7_10, z7_11, z7_12, z7_13, z7_14;
        com.microsoft.z3.BoolExpr $r6, $r17;
        java.lang.StringBuilder $r9, $r11, $r12, $r13, $r16, $r18;
        safetyChecker.Vertex $r10;
        java.lang.String $r14, $r19;

        r0 := @this: safetyChecker.Z3ScriptHandler;

        r1 := @parameter0: safetyChecker.Edge;

        $r3 = newarray (java.lang.Object)[1];

        $r3[0] = ">>>>>>";

        staticinvoke <safetyChecker.LogUtils: void debug(java.lang.Object[])>($r3);

        $r4 = newarray (java.lang.Object)[1];

        $r4[0] = r1;

        staticinvoke <safetyChecker.LogUtils: void debugln(java.lang.Object[])>($r4);

        z7 = 0;

        r0.<safetyChecker.Z3ScriptHandler: safetyChecker.Edge currentEdge> = r1;

        $z0 = virtualinvoke r1.<safetyChecker.Edge: boolean isErrorEdge()>();

(0)     if $z0 == 0 goto label1;

(1)     z7_1 = specialinvoke r0.<safetyChecker.Z3ScriptHandler: boolean convertErrorEdge(safetyChecker.Edge)>(r1);

     label1:
        z7_2 = Phi(z7 #0, z7_1 #1);

        r2 = virtualinvoke r1.<safetyChecker.Edge: soot.Unit getUnit()>();

        $z1 = r2 instanceof soot.jimple.IfStmt;

(2)     if $z1 == 0 goto label2;

(3)     z7_3 = specialinvoke r0.<safetyChecker.Z3ScriptHandler: boolean convertIfStmt(safetyChecker.Edge)>(r1);

     label2:
        z7_4 = Phi(z7_2 #2, z7_3 #3);

        $z2 = r2 instanceof soot.jimple.GotoStmt;

(4)     if $z2 == 0 goto label3;

(5)     z7_5 = specialinvoke r0.<safetyChecker.Z3ScriptHandler: boolean convertGotoStmt(safetyChecker.Edge)>(r1);

     label3:
        z7_6 = Phi(z7_4 #4, z7_5 #5);

        $z3 = r2 instanceof soot.jimple.AssignStmt;

(6)     if $z3 == 0 goto label4;

(7)     z7_7 = specialinvoke r0.<safetyChecker.Z3ScriptHandler: boolean convertAssignStmtEdge(safetyChecker.Edge)>(r1);

     label4:
        z7_8 = Phi(z7_6 #6, z7_7 #7);

        $z4 = r2 instanceof soot.jimple.IdentityStmt;

(8)     if $z4 == 0 goto label5;

(9)     z7_9 = specialinvoke r0.<safetyChecker.Z3ScriptHandler: boolean convertIdentityStmt(safetyChecker.Edge)>(r1);

     label5:
        z7_10 = Phi(z7_8 #8, z7_9 #9);

        $z5 = virtualinvoke r1.<safetyChecker.Edge: boolean isSinkEdge()>();

(10)    if $z5 == 0 goto label6;

(11)    z7_11 = specialinvoke r0.<safetyChecker.Z3ScriptHandler: boolean convertSinkInvoke2Z3(safetyChecker.Edge)>(r1);

     label6:
        z7_12 = Phi(z7_10 #10, z7_11 #11);

        $z6 = virtualinvoke r1.<safetyChecker.Edge: boolean isArrayCopyEdge()>();

(12)    if $z6 == 0 goto label7;

(13)    z7_13 = specialinvoke r0.<safetyChecker.Z3ScriptHandler: boolean convertArrayCopy(safetyChecker.Edge)>(r1);

     label7:
        z7_14 = Phi(z7_12 #12, z7_13 #13);

        $r5 = newarray (java.lang.Object)[1];

        $r6 = virtualinvoke r1.<safetyChecker.Edge: com.microsoft.z3.BoolExpr getZ3Expr()>();

        $r5[0] = $r6;

        staticinvoke <safetyChecker.LogUtils: void debugln(java.lang.Object[])>($r5);

        if z7_14 != 0 goto label8;

        $r7 = newarray (java.lang.Object)[1];

        $r7[0] = "---------------";

        staticinvoke <safetyChecker.LogUtils: void warningln(java.lang.Object[])>($r7);

        $r8 = newarray (java.lang.Object)[1];

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>(java.lang.String)>("Vertex=");

        $r10 = virtualinvoke r1.<safetyChecker.Edge: safetyChecker.Vertex getSource()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("---- Unit=");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8[0] = $r14;

        staticinvoke <safetyChecker.LogUtils: void warningln(java.lang.Object[])>($r8);

        $r15 = newarray (java.lang.Object)[1];

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>(java.lang.String)>("Expr=");

        $r17 = virtualinvoke r1.<safetyChecker.Edge: com.microsoft.z3.BoolExpr getZ3Expr()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        $r15[0] = $r19;

        staticinvoke <safetyChecker.LogUtils: void warningln(java.lang.Object[])>($r15);

        $r20 = newarray (java.lang.Object)[1];

        $r20[0] = "Converstion failed";

        staticinvoke <safetyChecker.LogUtils: void fatalln(java.lang.Object[])>($r20);

        $r21 = newarray (java.lang.Object)[1];

        $r21[0] = "Z3ScriptHandler.createZ3Script";

        staticinvoke <safetyChecker.LogUtils: void fatalln(java.lang.Object[])>($r21);

        staticinvoke <java.lang.System: void exit(int)>(0);

     label8:
        return z7_14;
    }

    private boolean convertArrayCopy(safetyChecker.Edge)
    {
        safetyChecker.Z3ScriptHandler r0;
        safetyChecker.Edge r1;
        com.microsoft.z3.BoolExpr r2;
        safetyChecker.Z3ArrayHandler $r3;
        java.lang.Object[] $r4;
        java.lang.StringBuilder $r5, $r6;
        java.lang.String $r7;

        r0 := @this: safetyChecker.Z3ScriptHandler;

        r1 := @parameter0: safetyChecker.Edge;

        $r3 = r0.<safetyChecker.Z3ScriptHandler: safetyChecker.Z3ArrayHandler arrayHandler>;

        r2 = virtualinvoke $r3.<safetyChecker.Z3ArrayHandler: com.microsoft.z3.BoolExpr z3ArrayCopy(safetyChecker.Edge,safetyChecker.Z3ScriptHandler)>(r1, r0);

        virtualinvoke r1.<safetyChecker.Edge: void setZ3Expr(com.microsoft.z3.BoolExpr)>(r2);

        $r4 = newarray (java.lang.Object)[1];

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("arrayCopy=");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r4[0] = $r7;

        staticinvoke <safetyChecker.LogUtils: void debugln(java.lang.Object[])>($r4);

        if r2 == null goto label1;

        return 1;

     label1:
        return 0;
    }

    private boolean convertErrorEdge(safetyChecker.Edge)
    {
        safetyChecker.Z3ScriptHandler r0;
        safetyChecker.Edge r1;
        soot.jimple.InvokeStmt r2;
        soot.Unit $r3;

        r0 := @this: safetyChecker.Z3ScriptHandler;

        r1 := @parameter0: safetyChecker.Edge;

        $r3 = virtualinvoke r1.<safetyChecker.Edge: soot.Unit getUnit()>();

        r2 = (soot.jimple.InvokeStmt) $r3;

        return 1;
    }

    private boolean convertIfStmt(safetyChecker.Edge)
    {
        safetyChecker.Z3ScriptHandler r0;
        safetyChecker.Edge r1, r5;
        soot.jimple.IfStmt r2;
        soot.Value r3;
        com.microsoft.z3.BoolExpr r4, $r27, $r33;
        soot.Unit r6, r7, $r9, $r30;
        soot.jimple.Stmt r8;
        safetyChecker.Vertex $r10, $r13;
        int $i0;
        com.microsoft.z3.Expr $r11;
        java.lang.Object[] $r12, $r14, $r18, $r22, $r28;
        java.lang.StringBuilder $r15, $r16, $r19, $r20, $r23, $r24, $r29, $r31, $r32, $r34;
        java.lang.String $r17, $r21, $r25, $r35;
        boolean $z0;
        com.microsoft.z3.InterpolationContext $r26;

        r0 := @this: safetyChecker.Z3ScriptHandler;

        r1 := @parameter0: safetyChecker.Edge;

        $r9 = virtualinvoke r1.<safetyChecker.Edge: soot.Unit getUnit()>();

        r2 = (soot.jimple.IfStmt) $r9;

        r3 = interfaceinvoke r2.<soot.jimple.IfStmt: soot.Value getCondition()>();

        $r10 = virtualinvoke r1.<safetyChecker.Edge: safetyChecker.Vertex getSource()>();

        $i0 = virtualinvoke $r10.<safetyChecker.Vertex: int getDistance()>();

        $r11 = virtualinvoke r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.Expr convertValue(soot.Value,boolean,safetyChecker.Edge,int)>(r3, 0, r1, $i0);

        r4 = (com.microsoft.z3.BoolExpr) $r11;

        $r12 = newarray (java.lang.Object)[1];

        $r12[0] = r3;

        staticinvoke <safetyChecker.LogUtils: void debugln(java.lang.Object[])>($r12);

        $r13 = virtualinvoke r1.<safetyChecker.Edge: safetyChecker.Vertex getTarget()>();

        r5 = virtualinvoke $r13.<safetyChecker.Vertex: safetyChecker.Edge getOutgoingEdge()>();

        r6 = virtualinvoke r1.<safetyChecker.Edge: soot.Unit getUnit()>();

        $r14 = newarray (java.lang.Object)[1];

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>(java.lang.String)>("currentUnit=");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r6);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        $r14[0] = $r17;

        staticinvoke <safetyChecker.LogUtils: void debugln(java.lang.Object[])>($r14);

        r7 = virtualinvoke r5.<safetyChecker.Edge: soot.Unit getUnit()>();

        $r18 = newarray (java.lang.Object)[1];

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>(java.lang.String)>("nextUnit=");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r7);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        $r18[0] = $r21;

        staticinvoke <safetyChecker.LogUtils: void debugln(java.lang.Object[])>($r18);

        r8 = interfaceinvoke r2.<soot.jimple.IfStmt: soot.jimple.Stmt getTarget()>();

        $r22 = newarray (java.lang.Object)[1];

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>(java.lang.String)>("targetUnit = ");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r8);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        $r22[0] = $r25;

        staticinvoke <safetyChecker.LogUtils: void debugln(java.lang.Object[])>($r22);

        $z0 = virtualinvoke r8.<java.lang.Object: boolean equals(java.lang.Object)>(r7);

        if $z0 == 0 goto label1;

        virtualinvoke r1.<safetyChecker.Edge: void setZ3Expr(com.microsoft.z3.BoolExpr)>(r4);

        goto label2;

     label1:
        $r26 = r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        $r27 = virtualinvoke $r26.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.BoolExpr mkNot(com.microsoft.z3.BoolExpr)>(r4);

        virtualinvoke r1.<safetyChecker.Edge: void setZ3Expr(com.microsoft.z3.BoolExpr)>($r27);

     label2:
        $r28 = newarray (java.lang.Object)[1];

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke r1.<safetyChecker.Edge: soot.Unit getUnit()>();

        $r31 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r30);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=");

        $r33 = virtualinvoke r1.<safetyChecker.Edge: com.microsoft.z3.BoolExpr getZ3Expr()>();

        $r34 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r33);

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        $r28[0] = $r35;

        staticinvoke <safetyChecker.LogUtils: void debugln(java.lang.Object[])>($r28);

        return 1;
    }

    private boolean convertIdentityStmt(safetyChecker.Edge)
    {
        safetyChecker.Z3ScriptHandler r0;
        safetyChecker.Edge r1;
        soot.jimple.IdentityStmt r2;
        soot.Value r3;
        com.microsoft.z3.Expr r4, r8;
        soot.Type r5, r9;
        soot.RefType r6;
        soot.jimple.internal.JNewExpr r7, $r21;
        com.microsoft.z3.BoolExpr r10, $r20;
        java.lang.Object[] $r11, $r18;
        java.lang.StringBuilder $r12, $r13;
        java.lang.String $r14;
        soot.Unit $r15;
        safetyChecker.Vertex $r16, $r22;
        int $i0, $i1;
        java.util.Stack $r17;
        boolean $z0, $z1;
        com.microsoft.z3.InterpolationContext $r19;

        r0 := @this: safetyChecker.Z3ScriptHandler;

        r1 := @parameter0: safetyChecker.Edge;

        $r11 = newarray (java.lang.Object)[1];

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>(java.lang.String)>("Z3ScriptHandler.convertIdentityStmt=");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        $r11[0] = $r14;

        staticinvoke <safetyChecker.LogUtils: void debugln(java.lang.Object[])>($r11);

        $r15 = virtualinvoke r1.<safetyChecker.Edge: soot.Unit getUnit()>();

        r2 = (soot.jimple.IdentityStmt) $r15;

        r3 = interfaceinvoke r2.<soot.jimple.IdentityStmt: soot.Value getLeftOp()>();

        $r16 = virtualinvoke r1.<safetyChecker.Edge: safetyChecker.Vertex getSource()>();

        $i0 = virtualinvoke $r16.<safetyChecker.Vertex: int getDistance()>();

        r4 = virtualinvoke r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.Expr convertValue(soot.Value,boolean,safetyChecker.Edge,int)>(r3, 1, r1, $i0);

        $r17 = r0.<safetyChecker.Z3ScriptHandler: java.util.Stack parameters>;

        $z0 = virtualinvoke $r17.<java.util.Stack: boolean isEmpty()>();

        if $z0 == 0 goto label3;

        r5 = interfaceinvoke r3.<soot.Value: soot.Type getType()>();

        $z1 = r5 instanceof soot.RefType;

        if $z1 == 0 goto label2;

        r6 = (soot.RefType) r5;

        $r21 = new soot.jimple.internal.JNewExpr;

        specialinvoke $r21.<soot.jimple.internal.JNewExpr: void <init>(soot.RefType)>(r6);

        r7 = $r21;

        r8 = virtualinvoke r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.Expr convertValue(soot.Value,boolean,safetyChecker.Edge,int)>(r7, 0, r1, 0);

        r9 = interfaceinvoke r3.<soot.Value: soot.Type getType()>();

        $r22 = virtualinvoke r1.<safetyChecker.Edge: safetyChecker.Vertex getSource()>();

        $i1 = virtualinvoke $r22.<safetyChecker.Vertex: int getDistance()>();

        r10 = specialinvoke r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.BoolExpr convertAssignStmt(com.microsoft.z3.Expr,com.microsoft.z3.Expr,soot.Type,soot.Value,int)>(r8, r4, r9, r3, $i1);

        virtualinvoke r1.<safetyChecker.Edge: void setZ3Expr(com.microsoft.z3.BoolExpr)>(r10);

        if r10 != null goto label1;

        return 0;

     label1:
        return 1;

     label2:
        $r19 = r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        $r20 = virtualinvoke $r19.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.BoolExpr mkTrue()>();

        virtualinvoke r1.<safetyChecker.Edge: void setZ3Expr(com.microsoft.z3.BoolExpr)>($r20);

        return 1;

     label3:
        $r18 = newarray (java.lang.Object)[1];

        $r18[0] = "Z3ScriptHandler.convertIdentityStmt needs to be handled";

        staticinvoke <safetyChecker.LogUtils: void fatalln(java.lang.Object[])>($r18);

        return 0;
    }

    private boolean convertAssignStmtEdge(safetyChecker.Edge)
    {
        safetyChecker.Z3ScriptHandler r0;
        safetyChecker.Edge r1;
        soot.jimple.AssignStmt r2;
        soot.Value r3, r4, r86, r88;
        soot.Type r5, $r54, $r75;
        com.microsoft.z3.Expr r6, r89, r104, r105;
        soot.jimple.IntConstant r7;
        java.lang.Object[] $r8, $r14, $r19, $r24, $r28, $r36, $r40, $r44, $r55, $r59;
        java.lang.StringBuilder $r10, $r16, $r21, $r26, $r38, $r49, $r51, $r57, $r61, $r71, $r78, r93, r94, r95, r96, r97, r98, r99, r100, r102, r103;
        java.lang.String $r11, $r17, $r22, $r27, $r33, $r39, $r47, $r48, $r52, $r58, $r62, $r67, $r72, $r79;
        soot.Unit $r12;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;
        safetyChecker.Vertex $r13, $r18, $r23;
        int $i0, $i1, $i2, $i3, $i4, i5;
        soot.jimple.InvokeExpr $r29, $r73;
        java.util.List $r30;
        java.lang.Object $r31, $r34, $r43, $r46, $r50, r82, r82_1, r82_2, r82_3;
        java.util.Map $r32, $r41, $r66;
        safetyChecker.ProgramTree $r35;
        java.util.Set $r42;
        safetyChecker.Z3ArrayHandler $r53;
        com.microsoft.z3.BoolExpr[] $r63;
        com.microsoft.z3.InterpolationContext $r64, $r70, $r77;
        soot.jimple.NewArrayExpr $r65;
        java.lang.Integer $r68;
        soot.SootMethod $r74;
        java.lang.Exception $r80, r90;
        com.microsoft.z3.BoolExpr r83, r84, r85;
        java.util.Iterator r87, r91;
        java.util.Map$Entry r92;
        java.lang.RuntimeException r101;

        r0 := @this: safetyChecker.Z3ScriptHandler;

        r1 := @parameter0: safetyChecker.Edge;

        $r8 = newarray (java.lang.Object)[1];

        r93 = new java.lang.StringBuilder;

        specialinvoke r93.<java.lang.StringBuilder: void <init>(java.lang.String)>("Z3ScriptHandler.convertAssignStmtEdge=");

        $r10 = virtualinvoke r93.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8[0] = $r11;

        staticinvoke <safetyChecker.LogUtils: void debugln(java.lang.Object[])>($r8);

        $r12 = virtualinvoke r1.<safetyChecker.Edge: soot.Unit getUnit()>();

        r2 = (soot.jimple.AssignStmt) $r12;

        r3 = interfaceinvoke r2.<soot.jimple.AssignStmt: soot.Value getLeftOp()>();

        r4 = interfaceinvoke r2.<soot.jimple.AssignStmt: soot.Value getRightOp()>();

        r5 = interfaceinvoke r3.<soot.Value: soot.Type getType()>();

        $z0 = virtualinvoke r1.<safetyChecker.Edge: boolean isSubFunction()>();

        if $z0 == 0 goto label01;

        $r73 = (soot.jimple.InvokeExpr) r4;

        $r74 = interfaceinvoke $r73.<soot.jimple.InvokeExpr: soot.SootMethod getMethod()>();

        $r75 = virtualinvoke $r74.<soot.SootMethod: soot.Type getReturnType()>();

        $z10 = $r75 instanceof soot.VoidType;

        if $z10 != 0 goto label01;

        $r77 = r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        r94 = new java.lang.StringBuilder;

        specialinvoke r94.<java.lang.StringBuilder: void <init>(java.lang.String)>("return_");

        $i4 = virtualinvoke r0.<safetyChecker.Z3ScriptHandler: int getRealArraySize(java.lang.String)>("return_");

        $r78 = virtualinvoke r94.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r79 = virtualinvoke $r78.<java.lang.StringBuilder: java.lang.String toString()>();

        r82 = virtualinvoke $r77.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.IntExpr mkIntConst(java.lang.String)>($r79);

(0)     goto label03;

     label01:
        $z1 = r4 instanceof soot.jimple.VirtualInvokeExpr;

        if $z1 == 0 goto label02;

        $r70 = r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        r95 = new java.lang.StringBuilder;

        specialinvoke r95.<java.lang.StringBuilder: void <init>(java.lang.String)>("virtualinvoke_");

        $i3 = virtualinvoke r0.<safetyChecker.Z3ScriptHandler: int getRealArraySize(java.lang.String)>("virtualinvoke_");

        $r71 = virtualinvoke r95.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r72 = virtualinvoke $r71.<java.lang.StringBuilder: java.lang.String toString()>();

        r82_1 = virtualinvoke $r70.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.IntExpr mkIntConst(java.lang.String)>($r72);

(1)     goto label03;

     label02:
        $r13 = virtualinvoke r1.<safetyChecker.Edge: safetyChecker.Vertex getSource()>();

        $i0 = virtualinvoke $r13.<safetyChecker.Vertex: int getDistance()>();

(2)     r82_2 = virtualinvoke r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.Expr convertValue(soot.Value,boolean,safetyChecker.Edge,int)>(r4, 0, r1, $i0);

     label03:
        r82_3 = Phi(r82 #0, r82_1 #1, r82_2 #2);

        $r14 = newarray (java.lang.Object)[1];

        r96 = new java.lang.StringBuilder;

        specialinvoke r96.<java.lang.StringBuilder: void <init>(java.lang.String)>("rightZ3=");

        $r16 = virtualinvoke r96.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r82_3);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        $r14[0] = $r17;

        staticinvoke <safetyChecker.LogUtils: void debugln(java.lang.Object[])>($r14);

        $r18 = virtualinvoke r1.<safetyChecker.Edge: safetyChecker.Vertex getSource()>();

        $i1 = virtualinvoke $r18.<safetyChecker.Vertex: int getDistance()>();

        r6 = virtualinvoke r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.Expr convertValue(soot.Value,boolean,safetyChecker.Edge,int)>(r3, 1, r1, $i1);

        $r19 = newarray (java.lang.Object)[1];

        r97 = new java.lang.StringBuilder;

        specialinvoke r97.<java.lang.StringBuilder: void <init>(java.lang.String)>("leftZ3=");

        $r21 = virtualinvoke r97.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r6);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        $r19[0] = $r22;

        staticinvoke <safetyChecker.LogUtils: void debugln(java.lang.Object[])>($r19);

        $r23 = virtualinvoke r1.<safetyChecker.Edge: safetyChecker.Vertex getSource()>();

        $i2 = virtualinvoke $r23.<safetyChecker.Vertex: int getDistance()>();

        r104 = (com.microsoft.z3.Expr) r82_3;

        r83 = specialinvoke r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.BoolExpr convertAssignStmt(com.microsoft.z3.Expr,com.microsoft.z3.Expr,soot.Type,soot.Value,int)>(r104, r6, r5, r3, $i2);

        $z2 = r4 instanceof soot.jimple.AnyNewExpr;

        if $z2 == 0 goto label06;

        $z7 = r4 instanceof soot.jimple.NewArrayExpr;

        if $z7 == 0 goto label16;

        $r53 = r0.<safetyChecker.Z3ScriptHandler: safetyChecker.Z3ArrayHandler arrayHandler>;

        $r54 = interfaceinvoke r4.<soot.Value: soot.Type getType()>();

        r105 = (com.microsoft.z3.Expr) r82_3;

        r84 = virtualinvoke $r53.<safetyChecker.Z3ArrayHandler: com.microsoft.z3.BoolExpr newArrayExpr(com.microsoft.z3.Expr,soot.Type,safetyChecker.Z3ScriptHandler)>(r105, $r54, r0);

        $r55 = newarray (java.lang.Object)[1];

        r98 = new java.lang.StringBuilder;

        specialinvoke r98.<java.lang.StringBuilder: void <init>(java.lang.String)>("realArray=");

        $r57 = virtualinvoke r98.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r84);

        $r58 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.String toString()>();

        $r55[0] = $r58;

        staticinvoke <safetyChecker.LogUtils: void debugln(java.lang.Object[])>($r55);

        $r59 = newarray (java.lang.Object)[1];

        r99 = new java.lang.StringBuilder;

        specialinvoke r99.<java.lang.StringBuilder: void <init>(java.lang.String)>("eq=");

        $r61 = virtualinvoke r99.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r83);

        $r62 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.String toString()>();

        $r59[0] = $r62;

        staticinvoke <safetyChecker.LogUtils: void debugln(java.lang.Object[])>($r59);

        $r64 = r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        $r63 = newarray (com.microsoft.z3.BoolExpr)[2];

        $r63[0] = r83;

        $r63[1] = r84;

        r85 = virtualinvoke $r64.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.BoolExpr mkAnd(com.microsoft.z3.BoolExpr[])>($r63);

        $r65 = (soot.jimple.NewArrayExpr) r4;

        r86 = interfaceinvoke $r65.<soot.jimple.NewArrayExpr: soot.Value getSize()>();

        $z8 = r86 instanceof soot.Local;

        if $z8 == 0 goto label04;

        goto label05;

     label04:
        $z9 = r86 instanceof soot.jimple.IntConstant;

        if $z9 == 0 goto label05;

        r7 = (soot.jimple.IntConstant) r86;

        i5 = r7.<soot.jimple.IntConstant: int value>;

        $r66 = r0.<safetyChecker.Z3ScriptHandler: java.util.Map maxArraySize>;

        $r67 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>();

        $r68 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i5);

        interfaceinvoke $r66.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r67, $r68);

     label05:
        virtualinvoke r1.<safetyChecker.Edge: void setZ3Expr(com.microsoft.z3.BoolExpr)>(r85);

        goto label16;

     label06:
        $z3 = virtualinvoke r1.<safetyChecker.Edge: boolean isSubFunction()>();

        if $z3 == 0 goto label15;

        $r28 = newarray (java.lang.Object)[1];

        $r28[0] = "subfunction is nt complete yet";

        staticinvoke <safetyChecker.LogUtils: void warningln(java.lang.Object[])>($r28);

        $r29 = (soot.jimple.InvokeExpr) r4;

        $r30 = interfaceinvoke $r29.<soot.jimple.InvokeExpr: java.util.List getArgs()>();

        r87 = interfaceinvoke $r30.<java.util.List: java.util.Iterator iterator()>();

        goto label12;

     label07:
        $r31 = interfaceinvoke r87.<java.util.Iterator: java.lang.Object next()>();

        r88 = (soot.Value) $r31;

        $r32 = r0.<safetyChecker.Z3ScriptHandler: java.util.Map localMap>;

        $r33 = virtualinvoke r88.<java.lang.Object: java.lang.String toString()>();

        $r34 = interfaceinvoke $r32.<java.util.Map: java.lang.Object get(java.lang.Object)>($r33);

        r89 = (com.microsoft.z3.Expr) $r34;

        if r89 != null goto label08;

        $r40 = newarray (java.lang.Object)[1];

        $r40[0] = "paremeter is null, cannot find the Z3 value";

        staticinvoke <safetyChecker.LogUtils: void fatalln(java.lang.Object[])>($r40);

        staticinvoke <java.lang.System: void exit(int)>(0);

     label08:
        virtualinvoke r1.<safetyChecker.Edge: void addParameter(com.microsoft.z3.Expr)>(r89);

     label09:
        $r35 = virtualinvoke r1.<safetyChecker.Edge: safetyChecker.ProgramTree getProgramTree()>();

        $z5 = virtualinvoke $r35.<safetyChecker.ProgramTree: boolean getNewReturnPath()>();

        if $z5 != 0 goto label12;

        $r36 = newarray (java.lang.Object)[1];

        r100 = new java.lang.StringBuilder;

        specialinvoke r100.<java.lang.StringBuilder: void <init>(java.lang.String)>("New return path cannot be found : ");

        $r38 = virtualinvoke r100.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>();

        $r36[0] = $r39;

        staticinvoke <safetyChecker.LogUtils: void warningln(java.lang.Object[])>($r36);

     label10:
        goto label12;

     label11:
        $r80 := @caughtexception;

        r90 = $r80;

        r101 = new java.lang.RuntimeException;

        specialinvoke r101.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r90);

        throw r101;

     label12:
        $z4 = interfaceinvoke r87.<java.util.Iterator: boolean hasNext()>();

        if $z4 != 0 goto label07;

        $r41 = r0.<safetyChecker.Z3ScriptHandler: java.util.Map localMap>;

        $r42 = interfaceinvoke $r41.<java.util.Map: java.util.Set entrySet()>();

        r91 = interfaceinvoke $r42.<java.util.Set: java.util.Iterator iterator()>();

        goto label14;

     label13:
        $r43 = interfaceinvoke r91.<java.util.Iterator: java.lang.Object next()>();

        r92 = (java.util.Map$Entry) $r43;

        $r44 = newarray (java.lang.Object)[1];

        r102 = new java.lang.StringBuilder;

        $r46 = interfaceinvoke r92.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r47 = (java.lang.String) $r46;

        $r48 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r47);

        specialinvoke r102.<java.lang.StringBuilder: void <init>(java.lang.String)>($r48);

        $r49 = virtualinvoke r102.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("--");

        $r50 = interfaceinvoke r92.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r51 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r50);

        $r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.String toString()>();

        $r44[0] = $r52;

        staticinvoke <safetyChecker.LogUtils: void warningln(java.lang.Object[])>($r44);

     label14:
        $z6 = interfaceinvoke r91.<java.util.Iterator: boolean hasNext()>();

        if $z6 != 0 goto label13;

        staticinvoke <java.lang.System: void exit(int)>(0);

        goto label16;

     label15:
        virtualinvoke r1.<safetyChecker.Edge: void setZ3Expr(com.microsoft.z3.BoolExpr)>(r83);

        $r24 = newarray (java.lang.Object)[1];

        r103 = new java.lang.StringBuilder;

        specialinvoke r103.<java.lang.StringBuilder: void <init>(java.lang.String)>("eq2=");

        $r26 = virtualinvoke r103.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r83);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        $r24[0] = $r27;

        staticinvoke <safetyChecker.LogUtils: void debugln(java.lang.Object[])>($r24);

     label16:
        if r83 != null goto label17;

        return 0;

     label17:
        return 1;

        catch java.lang.Exception from label09 to label10 with label11;
    }

    private boolean convertGotoStmt(safetyChecker.Edge)
    {
        safetyChecker.Z3ScriptHandler r0;
        safetyChecker.Edge r1;
        com.microsoft.z3.InterpolationContext $r2;
        com.microsoft.z3.BoolExpr $r3;

        r0 := @this: safetyChecker.Z3ScriptHandler;

        r1 := @parameter0: safetyChecker.Edge;

        $r2 = r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        $r3 = virtualinvoke $r2.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.BoolExpr mkTrue()>();

        virtualinvoke r1.<safetyChecker.Edge: void setZ3Expr(com.microsoft.z3.BoolExpr)>($r3);

        return 1;
    }

    private boolean convertSinkInvoke2Z3(safetyChecker.Edge)
    {
        safetyChecker.Z3ScriptHandler r0;
        safetyChecker.Edge r1;
        java.lang.String r2, r3, $r17, $r21;
        int i0, $i1, i2, i2_1, i2_2;
        java.lang.String[] r4, $r6;
        soot.Unit $r5, $r7, $r15;
        boolean $z0;
        soot.jimple.InvokeStmt $r8;
        soot.jimple.InvokeExpr $r9;
        java.util.Map $r10;
        java.lang.Object $r11;
        java.lang.Integer $r12;
        java.lang.Object[] $r13, $r18;
        java.lang.StringBuilder $r14, $r16, $r19, $r20;
        soot.Value r22, r22_1, r22_2, r22_3;

        r0 := @this: safetyChecker.Z3ScriptHandler;

        r1 := @parameter0: safetyChecker.Edge;

        $r5 = virtualinvoke r1.<safetyChecker.Edge: soot.Unit getUnit()>();

        r2 = staticinvoke <safetyChecker.UnitController: java.lang.String getMethodSignature(soot.Unit)>($r5);

        r22 = null;

        $r6 = <safetyChecker.UnitController: java.lang.String[] sinkSignatureDB>;

        r4 = $r6;

        i0 = lengthof $r6;

        i2 = 0;

(0)     goto label3;

     label1:
        r3 = r4[i2_1];

        $z0 = virtualinvoke r2.<java.lang.String: boolean contains(java.lang.CharSequence)>(r3);

(1)     if $z0 == 0 goto label2;

        $r7 = virtualinvoke r1.<safetyChecker.Edge: soot.Unit getUnit()>();

        $r8 = (soot.jimple.InvokeStmt) $r7;

        $r9 = interfaceinvoke $r8.<soot.jimple.InvokeStmt: soot.jimple.InvokeExpr getInvokeExpr()>();

        $r10 = <safetyChecker.UnitController: java.util.Map sensitiveParameterMap>;

        $r11 = interfaceinvoke $r10.<java.util.Map: java.lang.Object get(java.lang.Object)>(r3);

        $r12 = (java.lang.Integer) $r11;

        $i1 = virtualinvoke $r12.<java.lang.Integer: int intValue()>();

(2)     r22_2 = interfaceinvoke $r9.<soot.jimple.InvokeExpr: soot.Value getArg(int)>($i1);

     label2:
        r22_3 = Phi(r22_1 #1, r22_2 #2);

(3)     i2_2 = i2_1 + 1;

     label3:
        r22_1 = Phi(r22 #0, r22_3 #3);

        i2_1 = Phi(i2 #0, i2_2 #3);

        if i2_1 < i0 goto label1;

        $r13 = newarray (java.lang.Object)[1];

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>(java.lang.String)>("Unit : ");

        $r15 = virtualinvoke r1.<safetyChecker.Edge: soot.Unit getUnit()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        $r13[0] = $r17;

        staticinvoke <safetyChecker.LogUtils: void infoln(java.lang.Object[])>($r13);

        $r18 = newarray (java.lang.Object)[1];

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>(java.lang.String)>("leakCandidate : ");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r22_1);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        $r18[0] = $r21;

        staticinvoke <safetyChecker.LogUtils: void infoln(java.lang.Object[])>($r18);

        return 0;
    }

    protected com.microsoft.z3.Expr convertValue(soot.Value, boolean, safetyChecker.Edge, int)
    {
        safetyChecker.Z3ScriptHandler r0;
        soot.Value r1;
        boolean z0, $z1, $z2;
        safetyChecker.Edge r2;
        int i0;
        soot.Type r3;
        java.lang.Object[] $r4;
        com.microsoft.z3.Expr $r5, $r6;

        r0 := @this: safetyChecker.Z3ScriptHandler;

        r1 := @parameter0: soot.Value;

        z0 := @parameter1: boolean;

        r2 := @parameter2: safetyChecker.Edge;

        i0 := @parameter3: int;

        r3 = interfaceinvoke r1.<soot.Value: soot.Type getType()>();

        $z1 = r3 instanceof soot.PrimType;

        if $z1 == 0 goto label1;

        $r6 = specialinvoke r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.Expr convertPrimitiveValue(soot.Value,boolean,safetyChecker.Edge,int)>(r1, z0, r2, i0);

        return $r6;

     label1:
        $z2 = r3 instanceof soot.RefLikeType;

        if $z2 == 0 goto label2;

        $r5 = specialinvoke r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.Expr convertRefLikeValue(soot.Value,boolean,safetyChecker.Edge,int)>(r1, z0, r2, i0);

        return $r5;

     label2:
        $r4 = newarray (java.lang.Object)[1];

        $r4[0] = "not a primtype or a refliketype";

        staticinvoke <safetyChecker.LogUtils: void fatalln(java.lang.Object[])>($r4);

        return null;
    }

    private com.microsoft.z3.Expr convertPrimitiveValue(soot.Value, boolean, safetyChecker.Edge, int)
    {
        safetyChecker.Z3ScriptHandler r0;
        soot.Value r1, r4, r86, r86_1, r86_2, r86_3, r86_4, r86_5, r86_6;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13;
        safetyChecker.Edge r2, $r34, r85, r85_1, r85_2, r85_3, r85_4, r85_5, r85_6;
        int i0, $i1, $i2, $i3, $i4, $i5, i6;
        java.util.Iterator r3;
        soot.Unit r5, r6;
        java.lang.Object[] $r7, $r11, $r12, $r19, $r23, $r25, $r29, $r36, $r42, $r50;
        java.lang.StringBuilder $r9, $r15, $r16, $r17, $r27, $r31, $r38, $r39, $r40, $r44, $r45, $r47, $r52, $r64, r92, r93, r94, r95, r96, r97, r98, r99;
        java.lang.String $r10, $r18, $r28, $r32, $r41, $r48, $r53, $r62, $r63, r75, r77;
        safetyChecker.Vertex $r14, $r33, $r35, $r46, $r49, r88, r88_1, r88_2, r88_3;
        safetyChecker.Z3ArrayHandler $r20, $r21;
        com.microsoft.z3.Expr $r22, $r57, $r60, r91, r100;
        java.lang.Object $r24, $r59, r89, r89_1, r89_2;
        com.microsoft.z3.InterpolationContext $r54, $r55, $r67, $r70;
        soot.jimple.BinopExpr $r56;
        java.util.Map $r58, $r65, $r68, $r71;
        com.microsoft.z3.IntSort $r72;
        soot.Local r74;
        soot.Type r76;
        com.microsoft.z3.IntExpr r78, r78_1, r78_2;
        soot.jimple.Constant r79;
        soot.jimple.IntConstant r80;
        com.microsoft.z3.IntNum r81;
        soot.shimple.PhiExpr r82;
        java.util.List r83;
        soot.toolkits.scalar.ValueUnitPair r87;
        soot.jimple.ArrayRef r90;

        r0 := @this: safetyChecker.Z3ScriptHandler;

        r1 := @parameter0: soot.Value;

        z0 := @parameter1: boolean;

        r2 := @parameter2: safetyChecker.Edge;

        i0 := @parameter3: int;

        $r7 = newarray (java.lang.Object)[1];

        r92 = new java.lang.StringBuilder;

        specialinvoke r92.<java.lang.StringBuilder: void <init>(java.lang.String)>("Z3ScriptHandler.convertPrimitiveValue=");

        $r9 = virtualinvoke r92.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7[0] = $r10;

        staticinvoke <safetyChecker.LogUtils: void debugln(java.lang.Object[])>($r7);

        $z2 = r1 instanceof soot.Local;

        if $z2 == 0 goto label03;

        r74 = (soot.Local) r1;

        r75 = interfaceinvoke r74.<soot.Local: java.lang.String getName()>();

        if z0 == 0 goto label02;

        r76 = interfaceinvoke r1.<soot.Value: soot.Type getType()>();

        r93 = new java.lang.StringBuilder;

        $r62 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r75);

        specialinvoke r93.<java.lang.StringBuilder: void <init>(java.lang.String)>($r62);

        $r63 = specialinvoke r0.<safetyChecker.Z3ScriptHandler: java.lang.String getNameSuffix(safetyChecker.Edge)>(r2);

        $r64 = virtualinvoke r93.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r63);

        r77 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.String toString()>();

        r78 = null;

        $z13 = r76 instanceof soot.IntegerType;

(0)     if $z13 == 0 goto label01;

        $r67 = r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        r78_1 = virtualinvoke $r67.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.IntExpr mkIntConst(java.lang.String)>(r77);

        $r68 = r0.<safetyChecker.Z3ScriptHandler: java.util.Map substitute>;

        interfaceinvoke $r68.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r77, r75);

        $r71 = r0.<safetyChecker.Z3ScriptHandler: java.util.Map substituteSort>;

        $r70 = r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        $r72 = virtualinvoke $r70.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.IntSort mkIntSort()>();

(1)     interfaceinvoke $r71.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r77, $r72);

     label01:
        r78_2 = Phi(r78 #0, r78_1 #1);

        $r65 = r0.<safetyChecker.Z3ScriptHandler: java.util.Map localMap>;

        interfaceinvoke $r65.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r75, r78_2);

        return r78_2;

     label02:
        $r58 = r0.<safetyChecker.Z3ScriptHandler: java.util.Map localMap>;

        $r59 = interfaceinvoke $r58.<java.util.Map: java.lang.Object get(java.lang.Object)>(r75);

        $r60 = (com.microsoft.z3.Expr) $r59;

        return $r60;

     label03:
        $z3 = r1 instanceof soot.jimple.BinopExpr;

        if $z3 == 0 goto label04;

        $r56 = (soot.jimple.BinopExpr) r1;

        $r57 = specialinvoke r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.Expr convertBoolExpr(soot.jimple.BinopExpr,safetyChecker.Edge,int)>($r56, r2, i0);

        return $r57;

     label04:
        $z4 = r1 instanceof soot.jimple.Constant;

        if $z4 == 0 goto label05;

        r79 = (soot.jimple.Constant) r1;

        $z12 = r79 instanceof soot.jimple.IntConstant;

        if $z12 == 0 goto label05;

        r80 = (soot.jimple.IntConstant) r79;

        i6 = r80.<soot.jimple.IntConstant: int value>;

        $r55 = r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        r81 = virtualinvoke $r55.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.IntNum mkInt(int)>(i6);

        return r81;

     label05:
        $z5 = r1 instanceof soot.shimple.PhiExpr;

        if $z5 == 0 goto label14;

        r82 = (soot.shimple.PhiExpr) r1;

        r83 = interfaceinvoke r82.<soot.shimple.PhiExpr: java.util.List getArgs()>();

        virtualinvoke r2.<safetyChecker.Edge: safetyChecker.Vertex getSource()>();

        r85 = null;

        r86 = null;

        z1 = 0;

        r3 = interfaceinvoke r83.<java.util.List: java.util.Iterator iterator()>();

(2)     goto label12;

     label06:
        $r24 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r87 = (soot.toolkits.scalar.ValueUnitPair) $r24;

        r4 = virtualinvoke r87.<soot.toolkits.scalar.ValueUnitPair: soot.Value getValue()>();

        $r25 = newarray (java.lang.Object)[1];

        r94 = new java.lang.StringBuilder;

        specialinvoke r94.<java.lang.StringBuilder: void <init>(java.lang.String)>("valuePair=");

        $r27 = virtualinvoke r94.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        $r25[0] = $r28;

        staticinvoke <safetyChecker.LogUtils: void debugln(java.lang.Object[])>($r25);

        r5 = virtualinvoke r87.<soot.toolkits.scalar.ValueUnitPair: soot.Unit getUnit()>();

        $r29 = newarray (java.lang.Object)[1];

        r95 = new java.lang.StringBuilder;

        specialinvoke r95.<java.lang.StringBuilder: void <init>(java.lang.String)>("unitPair=");

        $r31 = virtualinvoke r95.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        $r29[0] = $r32;

        staticinvoke <safetyChecker.LogUtils: void debugln(java.lang.Object[])>($r29);

        r88_1 = r0.<safetyChecker.Z3ScriptHandler: safetyChecker.Vertex errorPathRoot>;

(3)     goto label11;

     label07:
        $r34 = virtualinvoke r88_2.<safetyChecker.Vertex: safetyChecker.Edge getOutgoingEdge()>();

        r6 = virtualinvoke $r34.<safetyChecker.Edge: soot.Unit getUnit()>();

        $z11 = virtualinvoke r6.<java.lang.Object: boolean equals(java.lang.Object)>(r5);

(4)     if $z11 == 0 goto label10;

        if r85_2 != null goto label08;

        r85_3 = virtualinvoke r88_2.<safetyChecker.Vertex: safetyChecker.Edge getOutgoingEdge()>();

        r86_3 = r4;

(5)     goto label09;

     label08:
        $i1 = virtualinvoke r88_2.<safetyChecker.Vertex: int getDistance()>();

        $r35 = virtualinvoke r85_2.<safetyChecker.Edge: safetyChecker.Vertex getSource()>();

        $i2 = virtualinvoke $r35.<safetyChecker.Vertex: int getDistance()>();

(6)     if $i1 >= $i2 goto label09;

        r85_4 = virtualinvoke r88_2.<safetyChecker.Vertex: safetyChecker.Edge getOutgoingEdge()>();

(7)     r86_4 = r4;

     label09:
        r86_5 = Phi(r86_3 #5, r86_2 #6, r86_4 #7);

        r85_5 = Phi(r85_3 #5, r85_2 #6, r85_4 #7);

        $r36 = newarray (java.lang.Object)[1];

        r96 = new java.lang.StringBuilder;

        specialinvoke r96.<java.lang.StringBuilder: void <init>(java.lang.String)>("phiEqualityUnit=");

        $r38 = virtualinvoke r96.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r6);

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-- Dist-");

        $i3 = virtualinvoke r88_2.<safetyChecker.Vertex: int getDistance()>();

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.String toString()>();

        $r36[0] = $r41;

        staticinvoke <safetyChecker.LogUtils: void detailln(java.lang.Object[])>($r36);

        $r42 = newarray (java.lang.Object)[1];

        r97 = new java.lang.StringBuilder;

        specialinvoke r97.<java.lang.StringBuilder: void <init>(java.lang.String)>("resultunit=");

        $r44 = virtualinvoke r97.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r85_5);

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" -- Dis=");

        $r46 = virtualinvoke r85_5.<safetyChecker.Edge: safetyChecker.Vertex getSource()>();

        $i4 = virtualinvoke $r46.<safetyChecker.Vertex: int getDistance()>();

        $r47 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.String toString()>();

        $r42[0] = $r48;

(8)     staticinvoke <safetyChecker.LogUtils: void detailln(java.lang.Object[])>($r42);

     label10:
        r86_6 = Phi(r86_2 #4, r86_5 #8);

        r85_6 = Phi(r85_2 #4, r85_5 #8);

(9)     r88_3 = virtualinvoke r88_2.<safetyChecker.Vertex: safetyChecker.Vertex getNextVertex()>();

     label11:
        r88_2 = Phi(r88_1 #3, r88_3 #9);

        r86_2 = Phi(r86_1 #3, r86_6 #9);

        r85_2 = Phi(r85_1 #3, r85_6 #9);

        $r33 = virtualinvoke r2.<safetyChecker.Edge: safetyChecker.Vertex getSource()>();

(10)    if r88_2 != $r33 goto label07;

     label12:
        r88 = Phi(r88 #2, r88_2 #10);

        r86_1 = Phi(r86 #2, r86_2 #10);

        r85_1 = Phi(r85 #2, r85_2 #10);

        $z10 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z10 != 0 goto label06;

        $r49 = virtualinvoke r2.<safetyChecker.Edge: safetyChecker.Vertex getSource()>();

        $i5 = virtualinvoke $r49.<safetyChecker.Vertex: int getDistance()>();

        r89 = virtualinvoke r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.Expr convertValue(soot.Value,boolean,safetyChecker.Edge,int)>(r86_1, 0, r2, $i5);

(11)    if r89 != null goto label13;

        $r54 = r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

(12)    r89_1 = virtualinvoke $r54.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.IntNum mkInt(int)>(0);

     label13:
        r89_2 = Phi(r89 #11, r89_1 #12);

        $r50 = newarray (java.lang.Object)[1];

        r98 = new java.lang.StringBuilder;

        specialinvoke r98.<java.lang.StringBuilder: void <init>(java.lang.String)>("resultExpr=");

        $r52 = virtualinvoke r98.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r89_2);

        $r53 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.String toString()>();

        $r50[0] = $r53;

        staticinvoke <safetyChecker.LogUtils: void debugln(java.lang.Object[])>($r50);

        r100 = (com.microsoft.z3.Expr) r89_2;

        return r100;

     label14:
        $z6 = r1 instanceof soot.jimple.InvokeExpr;

        if $z6 == 0 goto label15;

        $z9 = virtualinvoke r2.<safetyChecker.Edge: boolean isSubFunction()>();

        if $z9 == 0 goto label15;

        $r23 = newarray (java.lang.Object)[1];

        $r23[0] = r1;

        staticinvoke <safetyChecker.LogUtils: void warningln(java.lang.Object[])>($r23);

     label15:
        $z7 = r1 instanceof soot.jimple.ArrayRef;

        if $z7 == 0 goto label16;

        r90 = (soot.jimple.ArrayRef) r1;

        $r21 = r0.<safetyChecker.Z3ScriptHandler: safetyChecker.Z3ArrayHandler arrayHandler>;

        $r22 = virtualinvoke $r21.<safetyChecker.Z3ArrayHandler: com.microsoft.z3.Expr z3ArrayRef(soot.jimple.ArrayRef,safetyChecker.Z3ScriptHandler,safetyChecker.Edge)>(r90, r0, r2);

        return $r22;

     label16:
        $z8 = staticinvoke <safetyChecker.UnitController: boolean isArraysEqualsInvoke(soot.Value)>(r1);

        if $z8 == 0 goto label17;

        $r20 = r0.<safetyChecker.Z3ScriptHandler: safetyChecker.Z3ArrayHandler arrayHandler>;

        r91 = virtualinvoke $r20.<safetyChecker.Z3ArrayHandler: com.microsoft.z3.Expr z3ArraysEqual(soot.Value,safetyChecker.Z3ScriptHandler,safetyChecker.Edge)>(r1, r0, r2);

        return r91;

     label17:
        $r11 = newarray (java.lang.Object)[1];

        $r11[0] = "returning null";

        staticinvoke <safetyChecker.LogUtils: void fatalln(java.lang.Object[])>($r11);

        $r12 = newarray (java.lang.Object)[1];

        r99 = new java.lang.StringBuilder;

        specialinvoke r99.<java.lang.StringBuilder: void <init>(java.lang.String)>("Vertex=");

        $r14 = virtualinvoke r2.<safetyChecker.Edge: safetyChecker.Vertex getSource()>();

        $r15 = virtualinvoke r99.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("---Edge=");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        $r12[0] = $r18;

        staticinvoke <safetyChecker.LogUtils: void fatalln(java.lang.Object[])>($r12);

        $r19 = newarray (java.lang.Object)[1];

        $r19[0] = "Z3ScriptHandler.convertPrimitiveValue";

        staticinvoke <safetyChecker.LogUtils: void fatalln(java.lang.Object[])>($r19);

        return null;
    }

    private com.microsoft.z3.Expr convertRefLikeValue(soot.Value, boolean, safetyChecker.Edge, int)
    {
        safetyChecker.Z3ScriptHandler r0;
        soot.Value r1;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11;
        safetyChecker.Edge r2;
        int i0;
        soot.Type r3;
        soot.Local r4;
        com.microsoft.z3.Expr r5, $r26, $r28;
        java.lang.Object[] $r6, $r10, $r11, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r29;
        java.lang.StringBuilder $r7, $r8, $r12, $r14, $r15, $r16;
        java.lang.String $r9, $r17;
        soot.Unit $r13;
        soot.jimple.AnyNewExpr $r25;
        safetyChecker.Z3ArrayHandler $r27;

        r0 := @this: safetyChecker.Z3ScriptHandler;

        r1 := @parameter0: soot.Value;

        z0 := @parameter1: boolean;

        r2 := @parameter2: safetyChecker.Edge;

        i0 := @parameter3: int;

        $r6 = newarray (java.lang.Object)[1];

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>(java.lang.String)>("Z3ScriptHandler.convertRefLikeValue=");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6[0] = $r9;

        staticinvoke <safetyChecker.LogUtils: void debugln(java.lang.Object[])>($r6);

        $z1 = r1 instanceof soot.shimple.PhiExpr;

        if $z1 == 0 goto label01;

        $r29 = newarray (java.lang.Object)[1];

        $r29[0] = "FATAL: PhiExpr is not supported yet!";

        staticinvoke <safetyChecker.LogUtils: void fatalln(java.lang.Object[])>($r29);

        staticinvoke <java.lang.System: void exit(int)>(0);

     label01:
        $z2 = r1 instanceof soot.Local;

        if $z2 == 0 goto label03;

        r3 = interfaceinvoke r1.<soot.Value: soot.Type getType()>();

        r4 = (soot.Local) r1;

        $z10 = r3 instanceof soot.RefType;

        if $z10 == 0 goto label02;

        $r28 = specialinvoke r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.Expr createZ3Object(soot.Local,boolean,safetyChecker.Edge)>(r4, z0, r2);

        return $r28;

     label02:
        $z11 = r3 instanceof soot.ArrayType;

        if $z11 == 0 goto label03;

        $r27 = r0.<safetyChecker.Z3ScriptHandler: safetyChecker.Z3ArrayHandler arrayHandler>;

        r5 = virtualinvoke $r27.<safetyChecker.Z3ArrayHandler: com.microsoft.z3.Expr z3Local(soot.Local,boolean,int,safetyChecker.Z3ScriptHandler)>(r4, z0, i0, r0);

        return r5;

     label03:
        $z3 = r1 instanceof soot.jimple.AnyNewExpr;

        if $z3 == 0 goto label04;

        $r25 = (soot.jimple.AnyNewExpr) r1;

        $r26 = specialinvoke r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.Expr convertAnyNewExpr(soot.jimple.AnyNewExpr,safetyChecker.Edge)>($r25, r2);

        return $r26;

     label04:
        $z4 = r1 instanceof soot.jimple.StringConstant;

        if $z4 == 0 goto label05;

        $r24 = newarray (java.lang.Object)[1];

        $r24[0] = "FATAL: StringConstant. is not supported yet!";

        staticinvoke <safetyChecker.LogUtils: void fatalln(java.lang.Object[])>($r24);

        staticinvoke <java.lang.System: void exit(int)>(0);

     label05:
        $z5 = r1 instanceof soot.jimple.ArrayRef;

        if $z5 == 0 goto label06;

        $r23 = newarray (java.lang.Object)[1];

        $r23[0] = "FATAL: ArrayRef is not supported yet!";

        staticinvoke <safetyChecker.LogUtils: void fatalln(java.lang.Object[])>($r23);

        staticinvoke <java.lang.System: void exit(int)>(0);

     label06:
        $z6 = r1 instanceof soot.jimple.InstanceFieldRef;

        if $z6 == 0 goto label07;

        $r22 = newarray (java.lang.Object)[1];

        $r22[0] = "FATAL: InstanceFieldRef is not supported yet!";

        staticinvoke <safetyChecker.LogUtils: void fatalln(java.lang.Object[])>($r22);

        staticinvoke <java.lang.System: void exit(int)>(0);

     label07:
        $z7 = r1 instanceof soot.jimple.CastExpr;

        if $z7 == 0 goto label08;

        $r21 = newarray (java.lang.Object)[1];

        $r21[0] = "FATAL: CastExpr is not supported yet!";

        staticinvoke <safetyChecker.LogUtils: void fatalln(java.lang.Object[])>($r21);

        staticinvoke <java.lang.System: void exit(int)>(0);

     label08:
        $z8 = r1 instanceof soot.jimple.StaticFieldRef;

        if $z8 == 0 goto label09;

        $r20 = newarray (java.lang.Object)[1];

        $r20[0] = "FATAL: StaticFieldRef is not supported yet!";

        staticinvoke <safetyChecker.LogUtils: void fatalln(java.lang.Object[])>($r20);

        staticinvoke <java.lang.System: void exit(int)>(0);

     label09:
        $z9 = r1 instanceof soot.jimple.NullConstant;

        if $z9 == 0 goto label10;

        $r19 = newarray (java.lang.Object)[1];

        $r19[0] = "FATAL: NullConstant is not supported yet!";

        staticinvoke <safetyChecker.LogUtils: void fatalln(java.lang.Object[])>($r19);

        staticinvoke <java.lang.System: void exit(int)>(0);

     label10:
        $r10 = newarray (java.lang.Object)[1];

        $r10[0] = "FATAL: Conversion cannot be done";

        staticinvoke <safetyChecker.LogUtils: void fatalln(java.lang.Object[])>($r10);

        $r11 = newarray (java.lang.Object)[1];

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>(java.lang.String)>("FATAL: Unit : ");

        $r13 = virtualinvoke r2.<safetyChecker.Edge: soot.Unit getUnit()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" - Value : ");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        $r11[0] = $r17;

        staticinvoke <safetyChecker.LogUtils: void fatalln(java.lang.Object[])>($r11);

        $r18 = newarray (java.lang.Object)[1];

        $r18[0] = "Z3ScriptHandler.convertRefLikeValue";

        staticinvoke <safetyChecker.LogUtils: void fatalln(java.lang.Object[])>($r18);

        return null;
    }

    private com.microsoft.z3.Expr createZ3Object(soot.Local, boolean, safetyChecker.Edge)
    {
        safetyChecker.Z3ScriptHandler r0;
        soot.Local r1;
        boolean z0, $z1, $z2, $z3;
        safetyChecker.Edge r2;
        soot.Type r3;
        java.lang.String r4, $r17, $r18, $r20, $r28, $r29, $r30, r53, r56, r61;
        java.util.Map $r5, $r9, $r10, $r12, $r14, $r32, $r36, $r44, $r45, $r48, $r49;
        com.microsoft.z3.InterpolationContext $r6, $r7, $r22, $r33, $r38, $r39, $r41, $r43, $r47;
        com.microsoft.z3.StringSymbol $r8;
        java.lang.Object[] $r11, $r23, $r24, $r25, $r26;
        java.lang.Object $r13, $r15, $r34, $r37, $r50, r51, r51_1, r51_2;
        safetyChecker.ProgramTree $r19;
        java.lang.StringBuilder $r21, $r31, r64, r65;
        com.microsoft.z3.Sort $r35, r66, r67;
        com.microsoft.z3.IntSort $r40, $r42;
        com.microsoft.z3.ArraySort r52;
        com.microsoft.z3.Expr r54, r57, r62;
        safetyChecker.NewSort r55, r58, r60, r63;
        com.microsoft.z3.ArrayExpr r59;

        r0 := @this: safetyChecker.Z3ScriptHandler;

        r1 := @parameter0: soot.Local;

        z0 := @parameter1: boolean;

        r2 := @parameter2: safetyChecker.Edge;

        r3 = interfaceinvoke r1.<soot.Local: soot.Type getType()>();

        r4 = virtualinvoke r3.<soot.Type: java.lang.String toString()>();

        $r5 = r0.<safetyChecker.Z3ScriptHandler: java.util.Map newSortMap>;

        $z1 = interfaceinvoke $r5.<java.util.Map: boolean containsKey(java.lang.Object)>(r4);

        if $z1 == 0 goto label1;

        $r49 = r0.<safetyChecker.Z3ScriptHandler: java.util.Map newSortMap>;

        $r50 = interfaceinvoke $r49.<java.util.Map: java.lang.Object get(java.lang.Object)>(r4);

        r51 = (com.microsoft.z3.Sort) $r50;

(0)     goto label2;

     label1:
        $r7 = r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        $r6 = r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        $r8 = virtualinvoke $r6.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.StringSymbol mkSymbol(java.lang.String)>(r4);

        r51_1 = virtualinvoke $r7.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.UninterpretedSort mkUninterpretedSort(com.microsoft.z3.Symbol)>($r8);

        $r9 = r0.<safetyChecker.Z3ScriptHandler: java.util.Map newSortMap>;

(1)     interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, r51_1);

     label2:
        r51_2 = Phi(r51 #0, r51_1 #1);

        $r10 = r0.<safetyChecker.Z3ScriptHandler: java.util.Map global>;

        $z2 = interfaceinvoke $r10.<java.util.Map: boolean containsKey(java.lang.Object)>(r4);

        if $z2 != 0 goto label3;

        $r39 = r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        $r38 = r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        $r40 = virtualinvoke $r38.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.IntSort getIntSort()>();

        $r41 = r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        $r42 = virtualinvoke $r41.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.IntSort getIntSort()>();

        r52 = virtualinvoke $r39.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.ArraySort mkArraySort(com.microsoft.z3.Sort,com.microsoft.z3.Sort)>($r40, $r42);

        r53 = virtualinvoke r0.<safetyChecker.Z3ScriptHandler: java.lang.String getGlobalName(java.lang.String)>(r4);

        $r43 = r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        r54 = virtualinvoke $r43.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.Expr mkConst(java.lang.String,com.microsoft.z3.Sort)>(r53, r52);

        $r44 = r0.<safetyChecker.Z3ScriptHandler: java.util.Map global>;

        interfaceinvoke $r44.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, r54);

        $r45 = r0.<safetyChecker.Z3ScriptHandler: java.util.Map substitute>;

        interfaceinvoke $r45.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, r53);

        r63 = new safetyChecker.NewSort;

        $r47 = r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        r66 = (com.microsoft.z3.Sort) r51_2;

        specialinvoke r63.<safetyChecker.NewSort: void <init>(com.microsoft.z3.Sort,com.microsoft.z3.InterpolationContext)>(r66, $r47);

        r55 = r63;

        $r48 = r0.<safetyChecker.Z3ScriptHandler: java.util.Map sortId>;

        interfaceinvoke $r48.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, r55);

     label3:
        if z0 == 0 goto label5;

        r64 = new java.lang.StringBuilder;

        $r28 = interfaceinvoke r1.<soot.Local: java.lang.String getName()>();

        $r29 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r28);

        specialinvoke r64.<java.lang.StringBuilder: void <init>(java.lang.String)>($r29);

        $r30 = specialinvoke r0.<safetyChecker.Z3ScriptHandler: java.lang.String getNameSuffix(safetyChecker.Edge)>(r2);

        $r31 = virtualinvoke r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r30);

        r56 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        $r33 = r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        $r32 = r0.<safetyChecker.Z3ScriptHandler: java.util.Map newSortMap>;

        $r34 = interfaceinvoke $r32.<java.util.Map: java.lang.Object get(java.lang.Object)>(r4);

        $r35 = (com.microsoft.z3.Sort) $r34;

        r57 = virtualinvoke $r33.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.Expr mkConst(java.lang.String,com.microsoft.z3.Sort)>(r56, $r35);

        $r36 = r0.<safetyChecker.Z3ScriptHandler: java.util.Map sortId>;

        $r37 = interfaceinvoke $r36.<java.util.Map: java.lang.Object get(java.lang.Object)>(r4);

        r58 = (safetyChecker.NewSort) $r37;

        $z3 = virtualinvoke r58.<safetyChecker.NewSort: boolean ifHasExpr(com.microsoft.z3.Expr)>(r57);

        if $z3 == 0 goto label4;

        return r57;

     label4:
        virtualinvoke r58.<safetyChecker.NewSort: void creatNewOject(com.microsoft.z3.Expr)>(r57);

        return r57;

     label5:
        $r11 = newarray (java.lang.Object)[1];

        $r11[0] = "Z3ScriptHandler.createZ3Object";

        staticinvoke <safetyChecker.LogUtils: void fatalln(java.lang.Object[])>($r11);

        staticinvoke <java.lang.System: void exit(int)>(0);

        $r12 = r0.<safetyChecker.Z3ScriptHandler: java.util.Map global>;

        $r13 = interfaceinvoke $r12.<java.util.Map: java.lang.Object get(java.lang.Object)>(r4);

        r59 = (com.microsoft.z3.ArrayExpr) $r13;

        $r14 = r0.<safetyChecker.Z3ScriptHandler: java.util.Map sortId>;

        $r15 = interfaceinvoke $r14.<java.util.Map: java.lang.Object get(java.lang.Object)>(r4);

        r60 = (safetyChecker.NewSort) $r15;

        r65 = new java.lang.StringBuilder;

        $r17 = interfaceinvoke r1.<soot.Local: java.lang.String getName()>();

        $r18 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r17);

        specialinvoke r65.<java.lang.StringBuilder: void <init>(java.lang.String)>($r18);

        $r19 = virtualinvoke r2.<safetyChecker.Edge: safetyChecker.ProgramTree getProgramTree()>();

        $r20 = virtualinvoke $r19.<safetyChecker.ProgramTree: java.lang.String getProgramDefinition()>();

        $r21 = virtualinvoke r65.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20);

        r61 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        $r22 = r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        r67 = (com.microsoft.z3.Sort) r51_2;

        r62 = virtualinvoke $r22.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.Expr mkConst(java.lang.String,com.microsoft.z3.Sort)>(r61, r67);

        $r23 = newarray (java.lang.Object)[1];

        $r23[0] = r61;

        staticinvoke <safetyChecker.LogUtils: void infoln(java.lang.Object[])>($r23);

        $r24 = newarray (java.lang.Object)[1];

        $r24[0] = r51_2;

        staticinvoke <safetyChecker.LogUtils: void infoln(java.lang.Object[])>($r24);

        $r25 = newarray (java.lang.Object)[1];

        $r25[0] = r62;

        staticinvoke <safetyChecker.LogUtils: void infoln(java.lang.Object[])>($r25);

        $r26 = newarray (java.lang.Object)[1];

        $r26[0] = "Z3ScriptHandler.createZ3Object";

        staticinvoke <safetyChecker.LogUtils: void fatalln(java.lang.Object[])>($r26);

        staticinvoke <java.lang.System: void exit(int)>(0);

        return null;
    }

    public java.lang.String getGlobalName(java.lang.String)
    {
        safetyChecker.Z3ScriptHandler r0;
        java.lang.String r1, r12;
        java.util.Map $r2, $r7, $r9;
        boolean $z0;
        java.lang.StringBuilder $r3, $r4, $r5, $r6;
        java.lang.Integer $r8, $r11;
        java.lang.Object $r10;
        int i0, i1, i0_1, i0_2;

        r0 := @this: safetyChecker.Z3ScriptHandler;

        r1 := @parameter0: java.lang.String;

        i0 = 1;

        $r2 = r0.<safetyChecker.Z3ScriptHandler: java.util.Map arrayNameMap>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

(0)     if $z0 == 0 goto label1;

        $r9 = r0.<safetyChecker.Z3ScriptHandler: java.util.Map arrayNameMap>;

        $r10 = interfaceinvoke $r9.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r11 = (java.lang.Integer) $r10;

        i1 = virtualinvoke $r11.<java.lang.Integer: int intValue()>();

(1)     i0_1 = i1 + 1;

     label1:
        i0_2 = Phi(i0 #0, i0_1 #1);

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("Global_");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0_2);

        r12 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = r0.<safetyChecker.Z3ScriptHandler: java.util.Map arrayNameMap>;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0_2);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r8);

        return r12;
    }

    private com.microsoft.z3.BoolExpr convertAssignStmt(com.microsoft.z3.Expr, com.microsoft.z3.Expr, soot.Type, soot.Value, int)
    {
        safetyChecker.Z3ScriptHandler r0;
        com.microsoft.z3.Expr r1, r2, $r39, r74, r75;
        soot.Type r3;
        soot.Value r4;
        int i0;
        com.microsoft.z3.ArrayExpr r5, $r16, $r23, r66, r67, r77, r77_1, r77_2;
        com.microsoft.z3.BoolExpr r6, r62, r71, r78;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.util.Map $r7, $r11, $r12, $r13, $r31, $r44, $r45, $r47, $r52;
        java.lang.Object $r8, $r14, $r32, $r53;
        com.microsoft.z3.InterpolationContext $r9, $r15, $r22, $r24, $r37, $r54, $r60, $r61;
        com.microsoft.z3.Sort $r10, $r38, $r46;
        com.microsoft.z3.IntExpr $r17, $r55;
        java.lang.Object[] $r18, $r33, $r40, $r56;
        java.lang.StringBuilder $r19, $r20, $r27, $r30, $r34, $r35, $r41, $r42, $r48, $r51, $r57, $r58;
        java.lang.String $r21, $r28, $r29, $r36, $r43, $r49, $r50, $r59, r63, r64, r65, r68, r72, r73;
        safetyChecker.Edge $r25;
        safetyChecker.Z3ArrayHandler $r26;
        safetyChecker.NewSort r69, r76;
        soot.jimple.ArrayRef r70;

        r0 := @this: safetyChecker.Z3ScriptHandler;

        r1 := @parameter0: com.microsoft.z3.Expr;

        r2 := @parameter1: com.microsoft.z3.Expr;

        r3 := @parameter2: soot.Type;

        r4 := @parameter3: soot.Value;

        i0 := @parameter4: int;

        $z0 = r3 instanceof soot.PrimType;

        if $z0 == 0 goto label1;

        $z6 = r4 instanceof soot.Local;

        if $z6 == 0 goto label1;

        $r61 = r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        r62 = virtualinvoke $r61.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.BoolExpr mkEq(com.microsoft.z3.Expr,com.microsoft.z3.Expr)>(r2, r1);

        return r62;

     label1:
        $z1 = r3 instanceof soot.ArrayType;

        if $z1 == 0 goto label2;

        $z5 = r4 instanceof soot.Local;

        if $z5 == 0 goto label2;

        r63 = virtualinvoke r3.<soot.Type: java.lang.String toString()>();

        r64 = r63;

        $r27 = new java.lang.StringBuilder;

        $r28 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r64);

        specialinvoke $r27.<java.lang.StringBuilder: void <init>(java.lang.String)>($r28);

        $r29 = virtualinvoke r0.<safetyChecker.Z3ScriptHandler: java.lang.String getNameSuffix()>();

        $r30 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29);

        r65 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        $r31 = r0.<safetyChecker.Z3ScriptHandler: java.util.Map localMap>;

        $r32 = interfaceinvoke $r31.<java.util.Map: java.lang.Object get(java.lang.Object)>(r64);

        r66 = (com.microsoft.z3.ArrayExpr) $r32;

        $r33 = newarray (java.lang.Object)[1];

        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>(java.lang.String)>("latestArray=");

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r66);

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>();

        $r33[0] = $r36;

        staticinvoke <safetyChecker.LogUtils: void debugln(java.lang.Object[])>($r33);

        $r37 = r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        $r38 = virtualinvoke r66.<com.microsoft.z3.ArrayExpr: com.microsoft.z3.Sort getSort()>();

        $r39 = virtualinvoke $r37.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.Expr mkConst(java.lang.String,com.microsoft.z3.Sort)>(r65, $r38);

        r67 = (com.microsoft.z3.ArrayExpr) $r39;

        $r40 = newarray (java.lang.Object)[1];

        $r41 = new java.lang.StringBuilder;

        specialinvoke $r41.<java.lang.StringBuilder: void <init>(java.lang.String)>("newArray=");

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r67);

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.String toString()>();

        $r40[0] = $r43;

        staticinvoke <safetyChecker.LogUtils: void debugln(java.lang.Object[])>($r40);

        $r44 = r0.<safetyChecker.Z3ScriptHandler: java.util.Map substitute>;

        interfaceinvoke $r44.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r65, r64);

        $r45 = r0.<safetyChecker.Z3ScriptHandler: java.util.Map substituteSort>;

        $r46 = virtualinvoke r67.<com.microsoft.z3.ArrayExpr: com.microsoft.z3.Sort getSort()>();

        interfaceinvoke $r45.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r65, $r46);

        $r47 = r0.<safetyChecker.Z3ScriptHandler: java.util.Map localMap>;

        interfaceinvoke $r47.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r64, r67);

        $r48 = new java.lang.StringBuilder;

        $r49 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r63);

        specialinvoke $r48.<java.lang.StringBuilder: void <init>(java.lang.String)>($r49);

        $r50 = virtualinvoke r0.<safetyChecker.Z3ScriptHandler: java.lang.String getArraySortSuffix()>();

        $r51 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r50);

        r68 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.String toString()>();

        $r52 = r0.<safetyChecker.Z3ScriptHandler: java.util.Map sortId>;

        $r53 = interfaceinvoke $r52.<java.util.Map: java.lang.Object get(java.lang.Object)>(r68);

        r69 = (safetyChecker.NewSort) $r53;

        $r54 = r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        $r55 = virtualinvoke r69.<safetyChecker.NewSort: com.microsoft.z3.IntExpr getId(com.microsoft.z3.Expr)>(r2);

        r5 = virtualinvoke $r54.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.ArrayExpr mkStore(com.microsoft.z3.ArrayExpr,com.microsoft.z3.Expr,com.microsoft.z3.Expr)>(r66, $r55, r1);

        $r56 = newarray (java.lang.Object)[1];

        $r57 = new java.lang.StringBuilder;

        specialinvoke $r57.<java.lang.StringBuilder: void <init>(java.lang.String)>("afterStore=");

        $r58 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);

        $r59 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.String toString()>();

        $r56[0] = $r59;

        staticinvoke <safetyChecker.LogUtils: void debugln(java.lang.Object[])>($r56);

        $r60 = r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        r6 = virtualinvoke $r60.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.BoolExpr mkEq(com.microsoft.z3.Expr,com.microsoft.z3.Expr)>(r67, r5);

        return r6;

     label2:
        $z2 = r4 instanceof soot.jimple.ArrayRef;

        if $z2 == 0 goto label3;

        r70 = (soot.jimple.ArrayRef) r4;

        $r26 = r0.<safetyChecker.Z3ScriptHandler: safetyChecker.Z3ArrayHandler arrayHandler>;

        $r25 = r0.<safetyChecker.Z3ScriptHandler: safetyChecker.Edge currentEdge>;

        r71 = virtualinvoke $r26.<safetyChecker.Z3ArrayHandler: com.microsoft.z3.BoolExpr updateArrayRef(soot.jimple.ArrayRef,safetyChecker.Z3ScriptHandler,com.microsoft.z3.Expr,safetyChecker.Edge)>(r70, r0, r1, $r25);

        return r71;

     label3:
        r72 = specialinvoke r0.<safetyChecker.Z3ScriptHandler: java.lang.String getArrayName(soot.Value)>(r4);

        r73 = virtualinvoke r0.<safetyChecker.Z3ScriptHandler: java.lang.String getGlobalName(java.lang.String)>(r72);

        $r7 = r0.<safetyChecker.Z3ScriptHandler: java.util.Map global>;

        $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>(r72);

        r74 = (com.microsoft.z3.Expr) $r8;

        $r9 = r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        $r10 = virtualinvoke r74.<com.microsoft.z3.Expr: com.microsoft.z3.Sort getSort()>();

        r75 = virtualinvoke $r9.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.Expr mkConst(java.lang.String,com.microsoft.z3.Sort)>(r73, $r10);

        $r11 = r0.<safetyChecker.Z3ScriptHandler: java.util.Map substitute>;

        interfaceinvoke $r11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r73, r72);

        $r12 = r0.<safetyChecker.Z3ScriptHandler: java.util.Map global>;

        interfaceinvoke $r12.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r72, r75);

        $r13 = r0.<safetyChecker.Z3ScriptHandler: java.util.Map sortId>;

        $r14 = interfaceinvoke $r13.<java.util.Map: java.lang.Object get(java.lang.Object)>(r72);

        r76 = (safetyChecker.NewSort) $r14;

        $z3 = r4 instanceof soot.jimple.FieldRef;

        if $z3 == 0 goto label4;

        $z4 = r4 instanceof soot.jimple.StaticFieldRef;

        if $z4 != 0 goto label4;

        $r24 = r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        $r23 = (com.microsoft.z3.ArrayExpr) r74;

        r77 = virtualinvoke $r24.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.ArrayExpr mkStore(com.microsoft.z3.ArrayExpr,com.microsoft.z3.Expr,com.microsoft.z3.Expr)>($r23, r2, r1);

(0)     goto label5;

     label4:
        $r15 = r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        $r16 = (com.microsoft.z3.ArrayExpr) r74;

        $r17 = virtualinvoke r76.<safetyChecker.NewSort: com.microsoft.z3.IntExpr getId(com.microsoft.z3.Expr)>(r2);

(1)     r77_1 = virtualinvoke $r15.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.ArrayExpr mkStore(com.microsoft.z3.ArrayExpr,com.microsoft.z3.Expr,com.microsoft.z3.Expr)>($r16, $r17, r1);

     label5:
        r77_2 = Phi(r77 #0, r77_1 #1);

        $r18 = newarray (java.lang.Object)[1];

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>(java.lang.String)>("afterStore=");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r77_2);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        $r18[0] = $r21;

        staticinvoke <safetyChecker.LogUtils: void debugln(java.lang.Object[])>($r18);

        $r22 = r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        r78 = virtualinvoke $r22.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.BoolExpr mkEq(com.microsoft.z3.Expr,com.microsoft.z3.Expr)>(r75, r77_2);

        return r78;
    }

    private com.microsoft.z3.Expr convertAnyNewExpr(soot.jimple.AnyNewExpr, safetyChecker.Edge)
    {
        safetyChecker.Z3ScriptHandler r0;
        soot.jimple.AnyNewExpr r1;
        safetyChecker.Edge r2;
        java.lang.Object[] $r3;
        boolean $z0, $z1, $z2;
        soot.jimple.NewMultiArrayExpr $r4;
        com.microsoft.z3.Expr $r5, $r7, $r9;
        soot.jimple.NewArrayExpr $r6;
        soot.jimple.NewExpr $r8;

        r0 := @this: safetyChecker.Z3ScriptHandler;

        r1 := @parameter0: soot.jimple.AnyNewExpr;

        r2 := @parameter1: safetyChecker.Edge;

        $r3 = newarray (java.lang.Object)[1];

        $r3[0] = "Z3ScriptHandler.convertAnyNewExpr";

        staticinvoke <safetyChecker.LogUtils: void debugln(java.lang.Object[])>($r3);

        $z0 = r1 instanceof soot.jimple.NewExpr;

        if $z0 == 0 goto label1;

        $r8 = (soot.jimple.NewExpr) r1;

        $r9 = specialinvoke r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.Expr convertNewExpr(soot.jimple.NewExpr,safetyChecker.Edge)>($r8, r2);

        return $r9;

     label1:
        $z1 = r1 instanceof soot.jimple.NewArrayExpr;

        if $z1 == 0 goto label2;

        $r6 = (soot.jimple.NewArrayExpr) r1;

        $r7 = specialinvoke r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.Expr convertNewArrayExpr(soot.jimple.NewArrayExpr,safetyChecker.Edge)>($r6, r2);

        return $r7;

     label2:
        $z2 = r1 instanceof soot.jimple.NewMultiArrayExpr;

        if $z2 == 0 goto label3;

        $r4 = (soot.jimple.NewMultiArrayExpr) r1;

        $r5 = specialinvoke r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.Expr convertNewMultiArrayExpr(soot.jimple.NewMultiArrayExpr,safetyChecker.Edge)>($r4, r2);

        return $r5;

     label3:
        return null;
    }

    private com.microsoft.z3.Expr convertNewExpr(soot.jimple.NewExpr, safetyChecker.Edge)
    {
        safetyChecker.Z3ScriptHandler r0;
        soot.jimple.NewExpr r1;
        safetyChecker.Edge r2;
        soot.Type r3;
        java.lang.String r4;
        safetyChecker.NewSort r5;
        java.util.Map $r6, $r8;
        boolean $z0;
        java.lang.RuntimeException $r7;
        java.lang.Object $r9;
        com.microsoft.z3.Expr $r10;

        r0 := @this: safetyChecker.Z3ScriptHandler;

        r1 := @parameter0: soot.jimple.NewExpr;

        r2 := @parameter1: safetyChecker.Edge;

        r3 = interfaceinvoke r1.<soot.jimple.NewExpr: soot.Type getType()>();

        r4 = virtualinvoke r3.<soot.Type: java.lang.String toString()>();

        $r6 = r0.<safetyChecker.Z3ScriptHandler: java.util.Map sortId>;

        $z0 = interfaceinvoke $r6.<java.util.Map: boolean containsKey(java.lang.Object)>(r4);

        if $z0 == 0 goto label1;

        $r8 = r0.<safetyChecker.Z3ScriptHandler: java.util.Map sortId>;

        $r9 = interfaceinvoke $r8.<java.util.Map: java.lang.Object get(java.lang.Object)>(r4);

        r5 = (safetyChecker.NewSort) $r9;

        $r10 = virtualinvoke r5.<safetyChecker.NewSort: com.microsoft.z3.Expr getNewObject()>();

        return $r10;

     label1:
        $r7 = new java.lang.RuntimeException;

        specialinvoke $r7.<java.lang.RuntimeException: void <init>()>();

        throw $r7;
    }

    private com.microsoft.z3.Expr convertNewArrayExpr(soot.jimple.NewArrayExpr, safetyChecker.Edge)
    {
        safetyChecker.Z3ScriptHandler r0;
        soot.jimple.NewArrayExpr r1;
        safetyChecker.Edge r2;
        soot.Type r3;
        java.lang.String r4;
        safetyChecker.NewSort r5, r19, r21;
        java.util.Map $r6, $r7, $r9, $r12, $r14, $r16;
        boolean $z0, $z1;
        com.microsoft.z3.InterpolationContext $r8, $r11;
        com.microsoft.z3.Expr $r13, $r18;
        java.lang.Object $r15, $r17, r20, r20_1, r20_2;
        com.microsoft.z3.Sort r22;

        r0 := @this: safetyChecker.Z3ScriptHandler;

        r1 := @parameter0: soot.jimple.NewArrayExpr;

        r2 := @parameter1: safetyChecker.Edge;

        r3 = interfaceinvoke r1.<soot.jimple.NewArrayExpr: soot.Type getType()>();

        r4 = virtualinvoke r3.<soot.Type: java.lang.String toString()>();

        $r6 = r0.<safetyChecker.Z3ScriptHandler: java.util.Map sortId>;

        $z0 = interfaceinvoke $r6.<java.util.Map: boolean containsKey(java.lang.Object)>(r4);

        if $z0 == 0 goto label1;

        $r16 = r0.<safetyChecker.Z3ScriptHandler: java.util.Map sortId>;

        $r17 = interfaceinvoke $r16.<java.util.Map: java.lang.Object get(java.lang.Object)>(r4);

        r19 = (safetyChecker.NewSort) $r17;

        $r18 = virtualinvoke r19.<safetyChecker.NewSort: com.microsoft.z3.Expr getNewObject()>();

        return $r18;

     label1:
        $r7 = r0.<safetyChecker.Z3ScriptHandler: java.util.Map newSortMap>;

        $z1 = interfaceinvoke $r7.<java.util.Map: boolean containsKey(java.lang.Object)>(r4);

        if $z1 == 0 goto label2;

        $r14 = r0.<safetyChecker.Z3ScriptHandler: java.util.Map newSortMap>;

        $r15 = interfaceinvoke $r14.<java.util.Map: java.lang.Object get(java.lang.Object)>(r4);

        r20 = (com.microsoft.z3.Sort) $r15;

(0)     goto label3;

     label2:
        $r8 = r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        r20_1 = virtualinvoke $r8.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.UninterpretedSort mkUninterpretedSort(java.lang.String)>(r4);

        $r9 = r0.<safetyChecker.Z3ScriptHandler: java.util.Map newSortMap>;

(1)     interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, r20_1);

     label3:
        r20_2 = Phi(r20 #0, r20_1 #1);

        r21 = new safetyChecker.NewSort;

        $r11 = r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        r22 = (com.microsoft.z3.Sort) r20_2;

        specialinvoke r21.<safetyChecker.NewSort: void <init>(com.microsoft.z3.Sort,com.microsoft.z3.InterpolationContext)>(r22, $r11);

        r5 = r21;

        $r12 = r0.<safetyChecker.Z3ScriptHandler: java.util.Map sortId>;

        interfaceinvoke $r12.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, r5);

        $r13 = virtualinvoke r5.<safetyChecker.NewSort: com.microsoft.z3.Expr getNewObject()>();

        return $r13;
    }

    private com.microsoft.z3.Expr convertNewMultiArrayExpr(soot.jimple.NewMultiArrayExpr, safetyChecker.Edge)
    {
        safetyChecker.Z3ScriptHandler r0;
        soot.jimple.NewMultiArrayExpr r1;
        safetyChecker.Edge r2;
        java.lang.RuntimeException $r3;

        r0 := @this: safetyChecker.Z3ScriptHandler;

        r1 := @parameter0: soot.jimple.NewMultiArrayExpr;

        r2 := @parameter1: safetyChecker.Edge;

        $r3 = new java.lang.RuntimeException;

        specialinvoke $r3.<java.lang.RuntimeException: void <init>()>();

        throw $r3;
    }

    private java.lang.String getArrayName(soot.Value)
    {
        safetyChecker.Z3ScriptHandler r0;
        soot.Value r1;
        soot.Type r2;
        boolean $z0;
        java.lang.RuntimeException $r3;
        java.lang.String $r4;

        r0 := @this: safetyChecker.Z3ScriptHandler;

        r1 := @parameter0: soot.Value;

        r2 = interfaceinvoke r1.<soot.Value: soot.Type getType()>();

        $z0 = r1 instanceof soot.Local;

        if $z0 == 0 goto label1;

        $r4 = virtualinvoke r2.<soot.Type: java.lang.String toString()>();

        return $r4;

     label1:
        $r3 = new java.lang.RuntimeException;

        specialinvoke $r3.<java.lang.RuntimeException: void <init>()>();

        throw $r3;
    }

    private java.lang.String getNameSuffix(safetyChecker.Edge)
    {
        safetyChecker.Z3ScriptHandler r0;
        safetyChecker.Edge r1;
        java.lang.StringBuilder $r2, $r5, $r6, $r8;
        safetyChecker.ProgramTree $r3;
        java.lang.String $r4, $r9;
        safetyChecker.Vertex $r7;
        int $i0;

        r0 := @this: safetyChecker.Z3ScriptHandler;

        r1 := @parameter0: safetyChecker.Edge;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>("_");

        $r3 = virtualinvoke r1.<safetyChecker.Edge: safetyChecker.ProgramTree getProgramTree()>();

        $r4 = virtualinvoke $r3.<safetyChecker.ProgramTree: java.lang.String getProgramDefinition()>();

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_");

        $r7 = virtualinvoke r1.<safetyChecker.Edge: safetyChecker.Vertex getSource()>();

        $i0 = virtualinvoke $r7.<safetyChecker.Vertex: int getDistance()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;
    }

    protected java.lang.String getNameSuffix()
    {
        safetyChecker.Z3ScriptHandler r0;
        java.lang.StringBuilder $r1, $r5, $r6, $r9;
        safetyChecker.Edge $r2, $r7;
        safetyChecker.ProgramTree $r3;
        java.lang.String $r4, $r10;
        safetyChecker.Vertex $r8;
        int $i0;

        r0 := @this: safetyChecker.Z3ScriptHandler;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>("_");

        $r2 = r0.<safetyChecker.Z3ScriptHandler: safetyChecker.Edge currentEdge>;

        $r3 = virtualinvoke $r2.<safetyChecker.Edge: safetyChecker.ProgramTree getProgramTree()>();

        $r4 = virtualinvoke $r3.<safetyChecker.ProgramTree: java.lang.String getProgramDefinition()>();

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_");

        $r7 = r0.<safetyChecker.Z3ScriptHandler: safetyChecker.Edge currentEdge>;

        $r8 = virtualinvoke $r7.<safetyChecker.Edge: safetyChecker.Vertex getSource()>();

        $i0 = virtualinvoke $r8.<safetyChecker.Vertex: int getDistance()>();

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r10;
    }

    protected java.lang.String getArrayNameSuffix()
    {
        safetyChecker.Z3ScriptHandler r0;
        java.lang.StringBuilder $r1, $r5;
        safetyChecker.Edge $r2;
        safetyChecker.ProgramTree $r3;
        java.lang.String $r4, $r6;

        r0 := @this: safetyChecker.Z3ScriptHandler;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>("_");

        $r2 = r0.<safetyChecker.Z3ScriptHandler: safetyChecker.Edge currentEdge>;

        $r3 = virtualinvoke $r2.<safetyChecker.Edge: safetyChecker.ProgramTree getProgramTree()>();

        $r4 = virtualinvoke $r3.<safetyChecker.ProgramTree: java.lang.String getProgramDefinition()>();

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    protected java.lang.String getArraySortSuffix()
    {
        safetyChecker.Z3ScriptHandler r0;

        r0 := @this: safetyChecker.Z3ScriptHandler;

        return "_arraySort";
    }

    protected int getRealArraySize(java.lang.String)
    {
        safetyChecker.Z3ScriptHandler r0;
        java.lang.String r1;
        java.util.Map $r2, $r3, $r6, $r9;
        boolean $z0;
        java.lang.Integer $r4, $r8, $r10;
        java.lang.Object $r7;
        int i0, i1;
        byte b2;

        r0 := @this: safetyChecker.Z3ScriptHandler;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<safetyChecker.Z3ScriptHandler: java.util.Map realArraySize>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r6 = r0.<safetyChecker.Z3ScriptHandler: java.util.Map realArraySize>;

        $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r8 = (java.lang.Integer) $r7;

        i0 = virtualinvoke $r8.<java.lang.Integer: int intValue()>();

        $r9 = r0.<safetyChecker.Z3ScriptHandler: java.util.Map realArraySize>;

        i1 = i0 + 1;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r10);

        return i1;

     label1:
        b2 = 1;

        $r3 = r0.<safetyChecker.Z3ScriptHandler: java.util.Map realArraySize>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(b2);

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r4);

        return b2;
    }

    private com.microsoft.z3.Expr convertBoolExpr(soot.jimple.BinopExpr, safetyChecker.Edge, int)
    {
        safetyChecker.Z3ScriptHandler r0;
        soot.jimple.BinopExpr r1;
        safetyChecker.Edge r2;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14;
        com.microsoft.z3.BoolExpr r3, $r13, $r19, $r25, $r31, $r36, $r40;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        java.lang.Object[] $r4;
        java.lang.StringBuilder $r5, $r6;
        java.lang.String $r7;
        safetyChecker.Vertex $r8, $r9, $r14, $r15, $r20, $r21, $r26, $r27, $r32, $r33, $r37, $r38, $r55, $r56;
        com.microsoft.z3.ArithExpr $r10, $r11, $r16, $r17, $r22, $r23, $r28, $r29, $r41, $r42, $r44, $r46, $r47, $r49, $r51, $r52, $r54, $r58, $r59, $r61;
        com.microsoft.z3.InterpolationContext $r12, $r18, $r24, $r30, $r34, $r35, $r39, $r43, $r48, $r53, $r60;
        com.microsoft.z3.ArithExpr[] $r45, $r50, $r57;
        soot.jimple.AddExpr r62;
        soot.Value r63, r64, r68, r69, r73, r74, r78, r79, r83, r84, r88, r89, r93, r94, r98, r99, r103, r104, r108, r109;
        com.microsoft.z3.Expr r65, r66, r70, r71, r75, r76, r80, r81, r85, r86, r90, r91, r95, r96, r100, r101, r105, r106, r110, r111;
        soot.jimple.SubExpr r67;
        soot.jimple.MulExpr r72;
        soot.jimple.DivExpr r77;
        soot.jimple.EqExpr r82;
        soot.jimple.NeExpr r87;
        soot.jimple.GtExpr r92;
        soot.jimple.GeExpr r97;
        soot.jimple.LtExpr r102;
        soot.jimple.LeExpr r107;

        r0 := @this: safetyChecker.Z3ScriptHandler;

        r1 := @parameter0: soot.jimple.BinopExpr;

        r2 := @parameter1: safetyChecker.Edge;

        i0 := @parameter2: int;

        $z0 = r1 instanceof soot.jimple.AddExpr;

        if $z0 == 0 goto label01;

        r62 = (soot.jimple.AddExpr) r1;

        r63 = interfaceinvoke r62.<soot.jimple.AddExpr: soot.Value getOp1()>();

        r64 = interfaceinvoke r62.<soot.jimple.AddExpr: soot.Value getOp2()>();

        $r55 = virtualinvoke r2.<safetyChecker.Edge: safetyChecker.Vertex getSource()>();

        $i13 = virtualinvoke $r55.<safetyChecker.Vertex: int getDistance()>();

        r65 = virtualinvoke r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.Expr convertValue(soot.Value,boolean,safetyChecker.Edge,int)>(r63, 0, r2, $i13);

        $r56 = virtualinvoke r2.<safetyChecker.Edge: safetyChecker.Vertex getSource()>();

        $i14 = virtualinvoke $r56.<safetyChecker.Vertex: int getDistance()>();

        r66 = virtualinvoke r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.Expr convertValue(soot.Value,boolean,safetyChecker.Edge,int)>(r64, 0, r2, $i14);

        $r60 = r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        $r57 = newarray (com.microsoft.z3.ArithExpr)[2];

        $r58 = (com.microsoft.z3.ArithExpr) r65;

        $r57[0] = $r58;

        $r59 = (com.microsoft.z3.ArithExpr) r66;

        $r57[1] = $r59;

        $r61 = virtualinvoke $r60.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.ArithExpr mkAdd(com.microsoft.z3.ArithExpr[])>($r57);

        return $r61;

     label01:
        $z1 = r1 instanceof soot.jimple.SubExpr;

        if $z1 == 0 goto label02;

        r67 = (soot.jimple.SubExpr) r1;

        r68 = interfaceinvoke r67.<soot.jimple.SubExpr: soot.Value getOp1()>();

        r69 = interfaceinvoke r67.<soot.jimple.SubExpr: soot.Value getOp2()>();

        r70 = virtualinvoke r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.Expr convertValue(soot.Value,boolean,safetyChecker.Edge,int)>(r68, 0, r2, i0);

        r71 = virtualinvoke r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.Expr convertValue(soot.Value,boolean,safetyChecker.Edge,int)>(r69, 0, r2, i0);

        $r53 = r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        $r50 = newarray (com.microsoft.z3.ArithExpr)[2];

        $r51 = (com.microsoft.z3.ArithExpr) r70;

        $r50[0] = $r51;

        $r52 = (com.microsoft.z3.ArithExpr) r71;

        $r50[1] = $r52;

        $r54 = virtualinvoke $r53.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.ArithExpr mkSub(com.microsoft.z3.ArithExpr[])>($r50);

        return $r54;

     label02:
        $z2 = r1 instanceof soot.jimple.MulExpr;

        if $z2 == 0 goto label03;

        r72 = (soot.jimple.MulExpr) r1;

        r73 = interfaceinvoke r72.<soot.jimple.MulExpr: soot.Value getOp1()>();

        r74 = interfaceinvoke r72.<soot.jimple.MulExpr: soot.Value getOp2()>();

        r75 = virtualinvoke r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.Expr convertValue(soot.Value,boolean,safetyChecker.Edge,int)>(r73, 0, r2, i0);

        r76 = virtualinvoke r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.Expr convertValue(soot.Value,boolean,safetyChecker.Edge,int)>(r74, 0, r2, i0);

        $r48 = r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        $r45 = newarray (com.microsoft.z3.ArithExpr)[2];

        $r46 = (com.microsoft.z3.ArithExpr) r75;

        $r45[0] = $r46;

        $r47 = (com.microsoft.z3.ArithExpr) r76;

        $r45[1] = $r47;

        $r49 = virtualinvoke $r48.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.ArithExpr mkMul(com.microsoft.z3.ArithExpr[])>($r45);

        return $r49;

     label03:
        $z3 = r1 instanceof soot.jimple.DivExpr;

        if $z3 == 0 goto label04;

        r77 = (soot.jimple.DivExpr) r1;

        r78 = interfaceinvoke r77.<soot.jimple.DivExpr: soot.Value getOp1()>();

        r79 = interfaceinvoke r77.<soot.jimple.DivExpr: soot.Value getOp2()>();

        r80 = virtualinvoke r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.Expr convertValue(soot.Value,boolean,safetyChecker.Edge,int)>(r78, 0, r2, i0);

        r81 = virtualinvoke r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.Expr convertValue(soot.Value,boolean,safetyChecker.Edge,int)>(r79, 0, r2, i0);

        $r43 = r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        $r42 = (com.microsoft.z3.ArithExpr) r80;

        $r41 = (com.microsoft.z3.ArithExpr) r81;

        $r44 = virtualinvoke $r43.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.ArithExpr mkDiv(com.microsoft.z3.ArithExpr,com.microsoft.z3.ArithExpr)>($r42, $r41);

        return $r44;

     label04:
        $z4 = r1 instanceof soot.jimple.EqExpr;

        if $z4 == 0 goto label05;

        r82 = (soot.jimple.EqExpr) r1;

        r83 = interfaceinvoke r82.<soot.jimple.EqExpr: soot.Value getOp1()>();

        r84 = interfaceinvoke r82.<soot.jimple.EqExpr: soot.Value getOp2()>();

        $r37 = virtualinvoke r2.<safetyChecker.Edge: safetyChecker.Vertex getSource()>();

        $i11 = virtualinvoke $r37.<safetyChecker.Vertex: int getDistance()>();

        r85 = virtualinvoke r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.Expr convertValue(soot.Value,boolean,safetyChecker.Edge,int)>(r83, 0, r2, $i11);

        $r38 = virtualinvoke r2.<safetyChecker.Edge: safetyChecker.Vertex getSource()>();

        $i12 = virtualinvoke $r38.<safetyChecker.Vertex: int getDistance()>();

        r86 = virtualinvoke r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.Expr convertValue(soot.Value,boolean,safetyChecker.Edge,int)>(r84, 0, r2, $i12);

        $r39 = r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        $r40 = virtualinvoke $r39.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.BoolExpr mkEq(com.microsoft.z3.Expr,com.microsoft.z3.Expr)>(r85, r86);

        return $r40;

     label05:
        $z5 = r1 instanceof soot.jimple.NeExpr;

        if $z5 == 0 goto label06;

        r87 = (soot.jimple.NeExpr) r1;

        r88 = interfaceinvoke r87.<soot.jimple.NeExpr: soot.Value getOp1()>();

        r89 = interfaceinvoke r87.<soot.jimple.NeExpr: soot.Value getOp2()>();

        $r32 = virtualinvoke r2.<safetyChecker.Edge: safetyChecker.Vertex getSource()>();

        $i9 = virtualinvoke $r32.<safetyChecker.Vertex: int getDistance()>();

        r90 = virtualinvoke r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.Expr convertValue(soot.Value,boolean,safetyChecker.Edge,int)>(r88, 0, r2, $i9);

        $r33 = virtualinvoke r2.<safetyChecker.Edge: safetyChecker.Vertex getSource()>();

        $i10 = virtualinvoke $r33.<safetyChecker.Vertex: int getDistance()>();

        r91 = virtualinvoke r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.Expr convertValue(soot.Value,boolean,safetyChecker.Edge,int)>(r89, 0, r2, $i10);

        $r34 = r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        r3 = virtualinvoke $r34.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.BoolExpr mkEq(com.microsoft.z3.Expr,com.microsoft.z3.Expr)>(r90, r91);

        $r35 = r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        $r36 = virtualinvoke $r35.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.BoolExpr mkNot(com.microsoft.z3.BoolExpr)>(r3);

        return $r36;

     label06:
        $z6 = r1 instanceof soot.jimple.GtExpr;

        if $z6 == 0 goto label07;

        r92 = (soot.jimple.GtExpr) r1;

        r93 = interfaceinvoke r92.<soot.jimple.GtExpr: soot.Value getOp1()>();

        r94 = interfaceinvoke r92.<soot.jimple.GtExpr: soot.Value getOp2()>();

        $r26 = virtualinvoke r2.<safetyChecker.Edge: safetyChecker.Vertex getSource()>();

        $i7 = virtualinvoke $r26.<safetyChecker.Vertex: int getDistance()>();

        r95 = virtualinvoke r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.Expr convertValue(soot.Value,boolean,safetyChecker.Edge,int)>(r93, 0, r2, $i7);

        $r27 = virtualinvoke r2.<safetyChecker.Edge: safetyChecker.Vertex getSource()>();

        $i8 = virtualinvoke $r27.<safetyChecker.Vertex: int getDistance()>();

        r96 = virtualinvoke r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.Expr convertValue(soot.Value,boolean,safetyChecker.Edge,int)>(r94, 0, r2, $i8);

        $r30 = r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        $r29 = (com.microsoft.z3.ArithExpr) r95;

        $r28 = (com.microsoft.z3.ArithExpr) r96;

        $r31 = virtualinvoke $r30.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.BoolExpr mkGt(com.microsoft.z3.ArithExpr,com.microsoft.z3.ArithExpr)>($r29, $r28);

        return $r31;

     label07:
        $z7 = r1 instanceof soot.jimple.GeExpr;

        if $z7 == 0 goto label08;

        r97 = (soot.jimple.GeExpr) r1;

        r98 = interfaceinvoke r97.<soot.jimple.GeExpr: soot.Value getOp1()>();

        r99 = interfaceinvoke r97.<soot.jimple.GeExpr: soot.Value getOp2()>();

        $r20 = virtualinvoke r2.<safetyChecker.Edge: safetyChecker.Vertex getSource()>();

        $i5 = virtualinvoke $r20.<safetyChecker.Vertex: int getDistance()>();

        r100 = virtualinvoke r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.Expr convertValue(soot.Value,boolean,safetyChecker.Edge,int)>(r98, 0, r2, $i5);

        $r21 = virtualinvoke r2.<safetyChecker.Edge: safetyChecker.Vertex getSource()>();

        $i6 = virtualinvoke $r21.<safetyChecker.Vertex: int getDistance()>();

        r101 = virtualinvoke r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.Expr convertValue(soot.Value,boolean,safetyChecker.Edge,int)>(r99, 0, r2, $i6);

        $r24 = r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        $r23 = (com.microsoft.z3.ArithExpr) r100;

        $r22 = (com.microsoft.z3.ArithExpr) r101;

        $r25 = virtualinvoke $r24.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.BoolExpr mkGe(com.microsoft.z3.ArithExpr,com.microsoft.z3.ArithExpr)>($r23, $r22);

        return $r25;

     label08:
        $z8 = r1 instanceof soot.jimple.LtExpr;

        if $z8 == 0 goto label09;

        r102 = (soot.jimple.LtExpr) r1;

        r103 = interfaceinvoke r102.<soot.jimple.LtExpr: soot.Value getOp1()>();

        r104 = interfaceinvoke r102.<soot.jimple.LtExpr: soot.Value getOp2()>();

        $r14 = virtualinvoke r2.<safetyChecker.Edge: safetyChecker.Vertex getSource()>();

        $i3 = virtualinvoke $r14.<safetyChecker.Vertex: int getDistance()>();

        r105 = virtualinvoke r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.Expr convertValue(soot.Value,boolean,safetyChecker.Edge,int)>(r103, 0, r2, $i3);

        $r15 = virtualinvoke r2.<safetyChecker.Edge: safetyChecker.Vertex getSource()>();

        $i4 = virtualinvoke $r15.<safetyChecker.Vertex: int getDistance()>();

        r106 = virtualinvoke r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.Expr convertValue(soot.Value,boolean,safetyChecker.Edge,int)>(r104, 0, r2, $i4);

        $r18 = r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        $r17 = (com.microsoft.z3.ArithExpr) r105;

        $r16 = (com.microsoft.z3.ArithExpr) r106;

        $r19 = virtualinvoke $r18.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.BoolExpr mkLt(com.microsoft.z3.ArithExpr,com.microsoft.z3.ArithExpr)>($r17, $r16);

        return $r19;

     label09:
        $z9 = r1 instanceof soot.jimple.LeExpr;

        if $z9 == 0 goto label10;

        r107 = (soot.jimple.LeExpr) r1;

        r108 = interfaceinvoke r107.<soot.jimple.LeExpr: soot.Value getOp1()>();

        r109 = interfaceinvoke r107.<soot.jimple.LeExpr: soot.Value getOp2()>();

        $r8 = virtualinvoke r2.<safetyChecker.Edge: safetyChecker.Vertex getSource()>();

        $i1 = virtualinvoke $r8.<safetyChecker.Vertex: int getDistance()>();

        r110 = virtualinvoke r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.Expr convertValue(soot.Value,boolean,safetyChecker.Edge,int)>(r108, 0, r2, $i1);

        $r9 = virtualinvoke r2.<safetyChecker.Edge: safetyChecker.Vertex getSource()>();

        $i2 = virtualinvoke $r9.<safetyChecker.Vertex: int getDistance()>();

        r111 = virtualinvoke r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.Expr convertValue(soot.Value,boolean,safetyChecker.Edge,int)>(r109, 0, r2, $i2);

        $r12 = r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        $r11 = (com.microsoft.z3.ArithExpr) r110;

        $r10 = (com.microsoft.z3.ArithExpr) r111;

        $r13 = virtualinvoke $r12.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.BoolExpr mkLe(com.microsoft.z3.ArithExpr,com.microsoft.z3.ArithExpr)>($r11, $r10);

        return $r13;

     label10:
        $r4 = newarray (java.lang.Object)[1];

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("Z3ScriptHandler.convertBoolExpr returns null for ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r4[0] = $r7;

        staticinvoke <safetyChecker.LogUtils: void fatalln(java.lang.Object[])>($r4);

        return null;
    }

    public com.microsoft.z3.InterpolationContext getIctx()
    {
        safetyChecker.Z3ScriptHandler r0;
        com.microsoft.z3.InterpolationContext $r1;

        r0 := @this: safetyChecker.Z3ScriptHandler;

        $r1 = r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        return $r1;
    }

    public java.util.Map getGlobal()
    {
        safetyChecker.Z3ScriptHandler r0;
        java.util.Map $r1;

        r0 := @this: safetyChecker.Z3ScriptHandler;

        $r1 = r0.<safetyChecker.Z3ScriptHandler: java.util.Map global>;

        return $r1;
    }

    public java.util.Map getSubstitute()
    {
        safetyChecker.Z3ScriptHandler r0;
        java.util.Map $r1;

        r0 := @this: safetyChecker.Z3ScriptHandler;

        $r1 = r0.<safetyChecker.Z3ScriptHandler: java.util.Map substitute>;

        return $r1;
    }

    public java.util.Map getSubstituteSort()
    {
        safetyChecker.Z3ScriptHandler r0;
        java.util.Map $r1;

        r0 := @this: safetyChecker.Z3ScriptHandler;

        $r1 = r0.<safetyChecker.Z3ScriptHandler: java.util.Map substituteSort>;

        return $r1;
    }

    public java.util.Map getArrayNameMap()
    {
        safetyChecker.Z3ScriptHandler r0;
        java.util.Map $r1;

        r0 := @this: safetyChecker.Z3ScriptHandler;

        $r1 = r0.<safetyChecker.Z3ScriptHandler: java.util.Map arrayNameMap>;

        return $r1;
    }

    public java.util.Map getLocalMap()
    {
        safetyChecker.Z3ScriptHandler r0;
        java.util.Map $r1;

        r0 := @this: safetyChecker.Z3ScriptHandler;

        $r1 = r0.<safetyChecker.Z3ScriptHandler: java.util.Map localMap>;

        return $r1;
    }

    public java.util.Map getSortId()
    {
        safetyChecker.Z3ScriptHandler r0;
        java.util.Map $r1;

        r0 := @this: safetyChecker.Z3ScriptHandler;

        $r1 = r0.<safetyChecker.Z3ScriptHandler: java.util.Map sortId>;

        return $r1;
    }

    public java.util.Map getNewSortMap()
    {
        safetyChecker.Z3ScriptHandler r0;
        java.util.Map $r1;

        r0 := @this: safetyChecker.Z3ScriptHandler;

        $r1 = r0.<safetyChecker.Z3ScriptHandler: java.util.Map newSortMap>;

        return $r1;
    }

    public java.util.Map getMaxArraySize()
    {
        safetyChecker.Z3ScriptHandler r0;
        java.util.Map $r1;

        r0 := @this: safetyChecker.Z3ScriptHandler;

        $r1 = r0.<safetyChecker.Z3ScriptHandler: java.util.Map maxArraySize>;

        return $r1;
    }
}
