public class safetyChecker.Z3ScriptHandler extends java.lang.Object
{
    private com.microsoft.z3.InterpolationContext ictx;
    private java.util.Map newSortMap;
    private java.util.Map sortId;
    private java.util.Map global;
    private java.util.Map localMap;
    private java.util.Map arrayNameMap;
    private java.util.Map realArraySize;
    private java.util.Map maxArraySize;
    private java.util.Map substitute;
    private java.util.Map substituteSort;
    private java.util.Stack parameters;
    private safetyChecker.Z3ArrayHandler arrayHandler;
    private safetyChecker.Z3ObjectFieldHandler objFieldHandler;
    private safetyChecker.Z3JavaMathHandler z3MathHandler;
    private safetyChecker.Vertex errorPathRoot;
    private safetyChecker.Edge currentEdge;

    public void <init>(com.microsoft.z3.InterpolationContext)
    {
        safetyChecker.Z3ScriptHandler r0;
        com.microsoft.z3.InterpolationContext r1;
        java.util.HashMap $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10;
        java.util.Stack $r11;
        safetyChecker.Z3ArrayHandler $r12;
        safetyChecker.Z3ObjectFieldHandler $r13;
        safetyChecker.Z3JavaMathHandler $r14;

        r0 := @this: safetyChecker.Z3ScriptHandler;

        r1 := @parameter0: com.microsoft.z3.InterpolationContext;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<safetyChecker.Z3ScriptHandler: java.util.Map newSortMap> = $r2;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r0.<safetyChecker.Z3ScriptHandler: java.util.Map sortId> = $r3;

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        r0.<safetyChecker.Z3ScriptHandler: java.util.Map global> = $r4;

        $r5 = new java.util.HashMap;

        specialinvoke $r5.<java.util.HashMap: void <init>()>();

        r0.<safetyChecker.Z3ScriptHandler: java.util.Map localMap> = $r5;

        $r6 = new java.util.HashMap;

        specialinvoke $r6.<java.util.HashMap: void <init>()>();

        r0.<safetyChecker.Z3ScriptHandler: java.util.Map arrayNameMap> = $r6;

        $r7 = new java.util.HashMap;

        specialinvoke $r7.<java.util.HashMap: void <init>()>();

        r0.<safetyChecker.Z3ScriptHandler: java.util.Map realArraySize> = $r7;

        $r8 = new java.util.HashMap;

        specialinvoke $r8.<java.util.HashMap: void <init>()>();

        r0.<safetyChecker.Z3ScriptHandler: java.util.Map maxArraySize> = $r8;

        $r9 = new java.util.HashMap;

        specialinvoke $r9.<java.util.HashMap: void <init>()>();

        r0.<safetyChecker.Z3ScriptHandler: java.util.Map substitute> = $r9;

        $r10 = new java.util.HashMap;

        specialinvoke $r10.<java.util.HashMap: void <init>()>();

        r0.<safetyChecker.Z3ScriptHandler: java.util.Map substituteSort> = $r10;

        $r11 = new java.util.Stack;

        specialinvoke $r11.<java.util.Stack: void <init>()>();

        r0.<safetyChecker.Z3ScriptHandler: java.util.Stack parameters> = $r11;

        $r12 = new safetyChecker.Z3ArrayHandler;

        specialinvoke $r12.<safetyChecker.Z3ArrayHandler: void <init>()>();

        r0.<safetyChecker.Z3ScriptHandler: safetyChecker.Z3ArrayHandler arrayHandler> = $r12;

        $r13 = new safetyChecker.Z3ObjectFieldHandler;

        specialinvoke $r13.<safetyChecker.Z3ObjectFieldHandler: void <init>()>();

        r0.<safetyChecker.Z3ScriptHandler: safetyChecker.Z3ObjectFieldHandler objFieldHandler> = $r13;

        $r14 = new safetyChecker.Z3JavaMathHandler;

        specialinvoke $r14.<safetyChecker.Z3JavaMathHandler: void <init>()>();

        r0.<safetyChecker.Z3ScriptHandler: safetyChecker.Z3JavaMathHandler z3MathHandler> = $r14;

        r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx> = r1;

        return;
    }

    public void convertPathtoZ3Script(safetyChecker.Vertex)
    {
        safetyChecker.Z3ScriptHandler r0;
        java.lang.Object[] $r1, $r2, $r3, $r23;
        java.lang.StringBuilder $r4, $r5, $r6, $r8, $r9, $r12, $r13, $r15, $r16, $r19;
        safetyChecker.Edge $r7, $r10, $r17, $r21, $r22;
        safetyChecker.Vertex $r11, $r14, $r18, r24, r24_1, r24_2;
        java.lang.String $r20;
        boolean $z1, z2, z2_1, z2_2;

        r0 := @this: safetyChecker.Z3ScriptHandler;

        r24 := @parameter0: safetyChecker.Vertex;

        $r1 = newarray (java.lang.Object)[1];

        $r1[0] = ">>>>>>> Z3ScriptHandler.convertPathtoZ3Script";

        staticinvoke <safetyChecker.LogUtils: void debugln(java.lang.Object[])>($r1);

        r0.<safetyChecker.Z3ScriptHandler: safetyChecker.Vertex errorPathRoot> = r24;

        z2 = 0;

(0)     goto label3;

     label1:
        if z2_1 == 0 goto label2;

        goto label4;

     label2:
        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = "^^^^^";

        staticinvoke <safetyChecker.LogUtils: void debug(java.lang.Object[])>($r2);

        $r3 = newarray (java.lang.Object)[1];

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r24_1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" *** ");

        $r7 = virtualinvoke r24_1.<safetyChecker.Vertex: safetyChecker.Edge getOutgoingEdge()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("***");

        $r10 = virtualinvoke r24_1.<safetyChecker.Vertex: safetyChecker.Edge getOutgoingEdge()>();

        $r11 = virtualinvoke $r10.<safetyChecker.Edge: safetyChecker.Vertex getSource()>();

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("***");

        $r14 = virtualinvoke r24_1.<safetyChecker.Vertex: safetyChecker.Vertex getNextVertex()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("***");

        $r17 = virtualinvoke r24_1.<safetyChecker.Vertex: safetyChecker.Edge getOutgoingEdge()>();

        $r18 = virtualinvoke $r17.<safetyChecker.Edge: safetyChecker.Vertex getTarget()>();

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        $r3[0] = $r20;

        staticinvoke <safetyChecker.LogUtils: void debugln(java.lang.Object[])>($r3);

        $r21 = virtualinvoke r24_1.<safetyChecker.Vertex: safetyChecker.Edge getOutgoingEdge()>();

        virtualinvoke r0.<safetyChecker.Z3ScriptHandler: boolean createZ3Script(safetyChecker.Edge)>($r21);

        r24_2 = virtualinvoke r24_1.<safetyChecker.Vertex: safetyChecker.Vertex getNextVertex()>();

        $r22 = virtualinvoke r24_2.<safetyChecker.Vertex: safetyChecker.Edge getOutgoingEdge()>();

        $z1 = virtualinvoke $r22.<safetyChecker.Edge: boolean isErrorEdge()>();

(1)     if $z1 == 0 goto label3;

(2)     z2_2 = 1;

     label3:
        z2_1 = Phi(z2 #0, z2_1 #1, z2_2 #2);

        r24_1 = Phi(r24 #0, r24_2 #1, r24_2 #2);

        if r24_1 != null goto label1;

     label4:
        $r23 = newarray (java.lang.Object)[1];

        $r23[0] = "<<<<<<<< Z3ScriptHandler.convertPathtoZ3Script";

        staticinvoke <safetyChecker.LogUtils: void debugln(java.lang.Object[])>($r23);

        return;
    }

    public boolean createZ3Script(safetyChecker.Edge)
    {
        safetyChecker.Z3ScriptHandler r0;
        safetyChecker.Edge r1;
        soot.Unit r2;
        java.lang.Object[] $r3, $r4, $r11, $r16, $r17, $r24, $r29, $r30;
        java.lang.StringBuilder $r5, $r7, $r8, $r9, $r12, $r14, $r18, $r20, $r21, $r22, $r25, $r27;
        safetyChecker.Vertex $r6, $r19;
        java.lang.String $r10, $r15, $r23, $r28;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, z9, z9_1, z9_2, z9_3, z9_4, z9_5, z9_6, z9_7, z9_8, z9_9, z9_10, z9_11, z9_12, z9_13, z9_14, z9_15, z9_16;
        com.microsoft.z3.BoolExpr $r13, $r26;

        r0 := @this: safetyChecker.Z3ScriptHandler;

        r1 := @parameter0: safetyChecker.Edge;

        $r3 = newarray (java.lang.Object)[1];

        $r3[0] = ">>>>>>";

        staticinvoke <safetyChecker.LogUtils: void debug(java.lang.Object[])>($r3);

        $r4 = newarray (java.lang.Object)[1];

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke r1.<safetyChecker.Edge: safetyChecker.Vertex getSource()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("***");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        $r4[0] = $r10;

        staticinvoke <safetyChecker.LogUtils: void debugln(java.lang.Object[])>($r4);

        z9 = 0;

        r0.<safetyChecker.Z3ScriptHandler: safetyChecker.Edge currentEdge> = r1;

        $z0 = virtualinvoke r1.<safetyChecker.Edge: boolean isErrorEdge()>();

(0)     if $z0 == 0 goto label1;

(1)     z9_1 = specialinvoke r0.<safetyChecker.Z3ScriptHandler: boolean convertErrorEdge(safetyChecker.Edge)>(r1);

     label1:
        z9_2 = Phi(z9 #0, z9_1 #1);

        r2 = virtualinvoke r1.<safetyChecker.Edge: soot.Unit getUnit()>();

        $z1 = r2 instanceof soot.jimple.IfStmt;

(2)     if $z1 == 0 goto label2;

(3)     z9_3 = specialinvoke r0.<safetyChecker.Z3ScriptHandler: boolean convertIfStmt(safetyChecker.Edge)>(r1);

     label2:
        z9_4 = Phi(z9_2 #2, z9_3 #3);

        $z2 = r2 instanceof soot.jimple.GotoStmt;

(4)     if $z2 == 0 goto label3;

(5)     z9_5 = specialinvoke r0.<safetyChecker.Z3ScriptHandler: boolean convertGotoStmt(safetyChecker.Edge)>(r1);

     label3:
        z9_6 = Phi(z9_4 #4, z9_5 #5);

        $z3 = r2 instanceof soot.jimple.AssignStmt;

(6)     if $z3 == 0 goto label4;

(7)     z9_7 = specialinvoke r0.<safetyChecker.Z3ScriptHandler: boolean convertAssignStmtEdge(safetyChecker.Edge)>(r1);

     label4:
        z9_8 = Phi(z9_6 #6, z9_7 #7);

        $z4 = r2 instanceof soot.jimple.IdentityStmt;

(8)     if $z4 == 0 goto label5;

(9)     z9_9 = specialinvoke r0.<safetyChecker.Z3ScriptHandler: boolean convertIdentityStmt(safetyChecker.Edge)>(r1);

     label5:
        z9_10 = Phi(z9_8 #8, z9_9 #9);

        $z5 = virtualinvoke r1.<safetyChecker.Edge: boolean isSinkEdge()>();

(10)    if $z5 == 0 goto label6;

(11)    z9_11 = specialinvoke r0.<safetyChecker.Z3ScriptHandler: boolean convertSinkInvoke2Z3(safetyChecker.Edge)>(r1);

     label6:
        z9_12 = Phi(z9_10 #10, z9_11 #11);

        $z6 = virtualinvoke r1.<safetyChecker.Edge: boolean isArrayCopyEdge()>();

(12)    if $z6 == 0 goto label7;

(13)    z9_13 = specialinvoke r0.<safetyChecker.Z3ScriptHandler: boolean convertArrayCopy(safetyChecker.Edge)>(r1);

     label7:
        z9_14 = Phi(z9_12 #12, z9_13 #13);

        $z7 = r2 instanceof soot.jimple.InvokeStmt;

(14)    if $z7 == 0 goto label8;

        $z8 = virtualinvoke r1.<safetyChecker.Edge: boolean isSubFunction()>();

(15)    if $z8 != 0 goto label8;

(16)    z9_15 = specialinvoke r0.<safetyChecker.Z3ScriptHandler: boolean convertNotSubFuntionInvoke(safetyChecker.Edge)>(r1);

     label8:
        z9_16 = Phi(z9_14 #14, z9_14 #15, z9_15 #16);

        $r11 = newarray (java.lang.Object)[1];

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>(java.lang.String)>("z3Expr=");

        $r13 = virtualinvoke r1.<safetyChecker.Edge: com.microsoft.z3.BoolExpr getZ3Expr()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        $r11[0] = $r15;

        staticinvoke <safetyChecker.LogUtils: void debugln(java.lang.Object[])>($r11);

        if z9_16 != 0 goto label9;

        $r16 = newarray (java.lang.Object)[1];

        $r16[0] = "---------------";

        staticinvoke <safetyChecker.LogUtils: void warningln(java.lang.Object[])>($r16);

        $r17 = newarray (java.lang.Object)[1];

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>(java.lang.String)>("Vertex=");

        $r19 = virtualinvoke r1.<safetyChecker.Edge: safetyChecker.Vertex getSource()>();

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("---- Unit=");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        $r17[0] = $r23;

        staticinvoke <safetyChecker.LogUtils: void warningln(java.lang.Object[])>($r17);

        $r24 = newarray (java.lang.Object)[1];

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>(java.lang.String)>("Expr=");

        $r26 = virtualinvoke r1.<safetyChecker.Edge: com.microsoft.z3.BoolExpr getZ3Expr()>();

        $r27 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r26);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        $r24[0] = $r28;

        staticinvoke <safetyChecker.LogUtils: void warningln(java.lang.Object[])>($r24);

        $r29 = newarray (java.lang.Object)[1];

        $r29[0] = "Converstion failed";

        staticinvoke <safetyChecker.LogUtils: void fatalln(java.lang.Object[])>($r29);

        $r30 = newarray (java.lang.Object)[1];

        $r30[0] = "Z3ScriptHandler.createZ3Script";

        staticinvoke <safetyChecker.LogUtils: void fatalln(java.lang.Object[])>($r30);

        staticinvoke <java.lang.System: void exit(int)>(0);

     label9:
        return z9_16;
    }

    private boolean convertNotSubFuntionInvoke(safetyChecker.Edge)
    {
        safetyChecker.Z3ScriptHandler r0;
        safetyChecker.Edge r1;
        com.microsoft.z3.InterpolationContext $r2;
        com.microsoft.z3.BoolExpr $r3;

        r0 := @this: safetyChecker.Z3ScriptHandler;

        r1 := @parameter0: safetyChecker.Edge;

        $r2 = r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        $r3 = virtualinvoke $r2.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.BoolExpr mkTrue()>();

        virtualinvoke r1.<safetyChecker.Edge: void setZ3Expr(com.microsoft.z3.BoolExpr)>($r3);

        return 1;
    }

    private boolean convertArrayCopy(safetyChecker.Edge)
    {
        safetyChecker.Z3ScriptHandler r0;
        safetyChecker.Edge r1;
        com.microsoft.z3.BoolExpr r2;
        safetyChecker.Z3ArrayHandler $r3;
        java.lang.Object[] $r4;
        java.lang.StringBuilder $r5, $r6;
        java.lang.String $r7;

        r0 := @this: safetyChecker.Z3ScriptHandler;

        r1 := @parameter0: safetyChecker.Edge;

        $r3 = r0.<safetyChecker.Z3ScriptHandler: safetyChecker.Z3ArrayHandler arrayHandler>;

        r2 = virtualinvoke $r3.<safetyChecker.Z3ArrayHandler: com.microsoft.z3.BoolExpr z3ArrayCopy(safetyChecker.Edge,safetyChecker.Z3ScriptHandler)>(r1, r0);

        virtualinvoke r1.<safetyChecker.Edge: void setZ3Expr(com.microsoft.z3.BoolExpr)>(r2);

        $r4 = newarray (java.lang.Object)[1];

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("arrayCopy=");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r4[0] = $r7;

        staticinvoke <safetyChecker.LogUtils: void debugln(java.lang.Object[])>($r4);

        if r2 == null goto label1;

        return 1;

     label1:
        return 0;
    }

    private boolean convertErrorEdge(safetyChecker.Edge)
    {
        safetyChecker.Z3ScriptHandler r0;
        safetyChecker.Edge r1;
        soot.jimple.InvokeStmt r2;
        soot.Unit $r3;

        r0 := @this: safetyChecker.Z3ScriptHandler;

        r1 := @parameter0: safetyChecker.Edge;

        $r3 = virtualinvoke r1.<safetyChecker.Edge: soot.Unit getUnit()>();

        r2 = (soot.jimple.InvokeStmt) $r3;

        return 1;
    }

    private boolean convertIfStmt(safetyChecker.Edge)
    {
        safetyChecker.Z3ScriptHandler r0;
        safetyChecker.Edge r1, r5;
        soot.jimple.IfStmt r2;
        soot.Value r3;
        com.microsoft.z3.BoolExpr r4, $r27, $r33;
        soot.Unit r6, r7, $r9, $r30;
        soot.jimple.Stmt r8;
        safetyChecker.Vertex $r10, $r13;
        int $i0;
        com.microsoft.z3.Expr $r11;
        java.lang.Object[] $r12, $r14, $r18, $r22, $r28;
        java.lang.StringBuilder $r15, $r16, $r19, $r20, $r23, $r24, $r29, $r31, $r32, $r34;
        java.lang.String $r17, $r21, $r25, $r35;
        boolean $z0;
        com.microsoft.z3.InterpolationContext $r26;

        r0 := @this: safetyChecker.Z3ScriptHandler;

        r1 := @parameter0: safetyChecker.Edge;

        $r9 = virtualinvoke r1.<safetyChecker.Edge: soot.Unit getUnit()>();

        r2 = (soot.jimple.IfStmt) $r9;

        r3 = interfaceinvoke r2.<soot.jimple.IfStmt: soot.Value getCondition()>();

        $r10 = virtualinvoke r1.<safetyChecker.Edge: safetyChecker.Vertex getSource()>();

        $i0 = virtualinvoke $r10.<safetyChecker.Vertex: int getDistance()>();

        $r11 = virtualinvoke r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.Expr convertValue(soot.Value,boolean,safetyChecker.Edge,int)>(r3, 0, r1, $i0);

        r4 = (com.microsoft.z3.BoolExpr) $r11;

        $r12 = newarray (java.lang.Object)[1];

        $r12[0] = r3;

        staticinvoke <safetyChecker.LogUtils: void debugln(java.lang.Object[])>($r12);

        $r13 = virtualinvoke r1.<safetyChecker.Edge: safetyChecker.Vertex getTarget()>();

        r5 = virtualinvoke $r13.<safetyChecker.Vertex: safetyChecker.Edge getOutgoingEdge()>();

        r6 = virtualinvoke r1.<safetyChecker.Edge: soot.Unit getUnit()>();

        $r14 = newarray (java.lang.Object)[1];

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>(java.lang.String)>("currentUnit=");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r6);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        $r14[0] = $r17;

        staticinvoke <safetyChecker.LogUtils: void debugln(java.lang.Object[])>($r14);

        r7 = virtualinvoke r5.<safetyChecker.Edge: soot.Unit getUnit()>();

        $r18 = newarray (java.lang.Object)[1];

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>(java.lang.String)>("nextUnit=");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r7);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        $r18[0] = $r21;

        staticinvoke <safetyChecker.LogUtils: void debugln(java.lang.Object[])>($r18);

        r8 = interfaceinvoke r2.<soot.jimple.IfStmt: soot.jimple.Stmt getTarget()>();

        $r22 = newarray (java.lang.Object)[1];

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>(java.lang.String)>("targetUnit = ");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r8);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        $r22[0] = $r25;

        staticinvoke <safetyChecker.LogUtils: void debugln(java.lang.Object[])>($r22);

        $z0 = virtualinvoke r8.<java.lang.Object: boolean equals(java.lang.Object)>(r7);

        if $z0 == 0 goto label1;

        virtualinvoke r1.<safetyChecker.Edge: void setZ3Expr(com.microsoft.z3.BoolExpr)>(r4);

        goto label2;

     label1:
        $r26 = r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        $r27 = virtualinvoke $r26.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.BoolExpr mkNot(com.microsoft.z3.BoolExpr)>(r4);

        virtualinvoke r1.<safetyChecker.Edge: void setZ3Expr(com.microsoft.z3.BoolExpr)>($r27);

     label2:
        $r28 = newarray (java.lang.Object)[1];

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke r1.<safetyChecker.Edge: soot.Unit getUnit()>();

        $r31 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r30);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=");

        $r33 = virtualinvoke r1.<safetyChecker.Edge: com.microsoft.z3.BoolExpr getZ3Expr()>();

        $r34 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r33);

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        $r28[0] = $r35;

        staticinvoke <safetyChecker.LogUtils: void debugln(java.lang.Object[])>($r28);

        return 1;
    }

    private boolean convertIdentityStmt(safetyChecker.Edge)
    {
        safetyChecker.Z3ScriptHandler r0;
        safetyChecker.Edge r1;
        soot.jimple.IdentityStmt r2;
        soot.Value r3;
        com.microsoft.z3.Expr r4, r8;
        soot.Type r5, r9;
        soot.RefType r6;
        soot.jimple.internal.JNewExpr r7, $r21;
        com.microsoft.z3.BoolExpr r10, $r20;
        java.lang.Object[] $r11, $r18;
        java.lang.StringBuilder $r12, $r13;
        java.lang.String $r14;
        soot.Unit $r15;
        safetyChecker.Vertex $r16, $r22;
        int $i0, $i1;
        java.util.Stack $r17;
        boolean $z0, $z1;
        com.microsoft.z3.InterpolationContext $r19;

        r0 := @this: safetyChecker.Z3ScriptHandler;

        r1 := @parameter0: safetyChecker.Edge;

        $r11 = newarray (java.lang.Object)[1];

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>(java.lang.String)>("Z3ScriptHandler.convertIdentityStmt=");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        $r11[0] = $r14;

        staticinvoke <safetyChecker.LogUtils: void debugln(java.lang.Object[])>($r11);

        $r15 = virtualinvoke r1.<safetyChecker.Edge: soot.Unit getUnit()>();

        r2 = (soot.jimple.IdentityStmt) $r15;

        r3 = interfaceinvoke r2.<soot.jimple.IdentityStmt: soot.Value getLeftOp()>();

        $r16 = virtualinvoke r1.<safetyChecker.Edge: safetyChecker.Vertex getSource()>();

        $i0 = virtualinvoke $r16.<safetyChecker.Vertex: int getDistance()>();

        r4 = virtualinvoke r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.Expr convertValue(soot.Value,boolean,safetyChecker.Edge,int)>(r3, 1, r1, $i0);

        $r17 = r0.<safetyChecker.Z3ScriptHandler: java.util.Stack parameters>;

        $z0 = virtualinvoke $r17.<java.util.Stack: boolean isEmpty()>();

        if $z0 == 0 goto label3;

        r5 = interfaceinvoke r3.<soot.Value: soot.Type getType()>();

        $z1 = r5 instanceof soot.RefType;

        if $z1 == 0 goto label2;

        r6 = (soot.RefType) r5;

        $r21 = new soot.jimple.internal.JNewExpr;

        specialinvoke $r21.<soot.jimple.internal.JNewExpr: void <init>(soot.RefType)>(r6);

        r7 = $r21;

        r8 = virtualinvoke r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.Expr convertValue(soot.Value,boolean,safetyChecker.Edge,int)>(r7, 0, r1, 0);

        r9 = interfaceinvoke r3.<soot.Value: soot.Type getType()>();

        $r22 = virtualinvoke r1.<safetyChecker.Edge: safetyChecker.Vertex getSource()>();

        $i1 = virtualinvoke $r22.<safetyChecker.Vertex: int getDistance()>();

        r10 = specialinvoke r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.BoolExpr convertAssignStmt(com.microsoft.z3.Expr,com.microsoft.z3.Expr,soot.Type,soot.Value,int)>(r8, r4, r9, r3, $i1);

        virtualinvoke r1.<safetyChecker.Edge: void setZ3Expr(com.microsoft.z3.BoolExpr)>(r10);

        if r10 != null goto label1;

        return 0;

     label1:
        return 1;

     label2:
        $r19 = r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        $r20 = virtualinvoke $r19.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.BoolExpr mkTrue()>();

        virtualinvoke r1.<safetyChecker.Edge: void setZ3Expr(com.microsoft.z3.BoolExpr)>($r20);

        return 1;

     label3:
        $r18 = newarray (java.lang.Object)[1];

        $r18[0] = "Z3ScriptHandler.convertIdentityStmt needs to be handled";

        staticinvoke <safetyChecker.LogUtils: void fatalln(java.lang.Object[])>($r18);

        return 0;
    }

    private boolean convertAssignStmtEdge(safetyChecker.Edge)
    {
        safetyChecker.Z3ScriptHandler r0;
        safetyChecker.Edge r1;
        soot.jimple.AssignStmt r2;
        soot.Value r3, r99, r101, r119, r120, r121, r123;
        soot.Type r4, $r15, $r58, $r81, $r90;
        com.microsoft.z3.Expr r5, r102, r122, r124;
        soot.jimple.IntConstant r6, $r88;
        java.lang.Object[] $r7, $r18, $r23, $r28, $r32, $r40, $r44, $r48, $r59, $r63;
        safetyChecker.Vertex $r9, $r17, $r22, $r27;
        java.lang.StringBuilder $r10, $r11, $r12, $r20, $r25, $r30, $r42, $r53, $r55, $r61, $r65, $r76, $r84, r106, r109, r110, r111, r112, r113, r114, r115, r117, r118;
        java.lang.String $r13, $r16, $r21, $r26, $r31, $r37, $r43, $r51, $r52, $r56, $r62, $r66, $r71, $r77, $r85;
        soot.Unit $r14;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16;
        int $i0, $i1, $i2, $i3, $i4, i5;
        soot.jimple.InvokeExpr $r33, $r79;
        java.util.List $r34;
        java.lang.Object $r35, $r38, $r47, $r50, $r54, r94, r95, r94_1, r94_2, r94_3, r95_1, r95_2, r95_3, r95_4;
        java.util.Map $r36, $r45, $r70;
        safetyChecker.ProgramTree $r39;
        java.util.Set $r46;
        safetyChecker.Z3ArrayHandler $r57;
        com.microsoft.z3.BoolExpr[] $r67;
        com.microsoft.z3.InterpolationContext $r68, $r75, $r83;
        soot.jimple.NewArrayExpr $r69;
        java.lang.Integer $r72;
        safetyChecker.Z3JavaMathHandler $r73, $r78;
        soot.SootMethod $r80;
        soot.RefType $r87, $r91;
        java.lang.Exception $r92, r103;
        com.microsoft.z3.BoolExpr r96, r97, r98;
        java.util.Iterator r100, r104;
        java.util.Map$Entry r105;
        soot.jimple.internal.JNewExpr r107;
        soot.jimple.internal.JNewArrayExpr r108;
        java.lang.RuntimeException r116;

        r0 := @this: safetyChecker.Z3ScriptHandler;

        r1 := @parameter0: safetyChecker.Edge;

        $r7 = newarray (java.lang.Object)[1];

        r106 = new java.lang.StringBuilder;

        specialinvoke r106.<java.lang.StringBuilder: void <init>(java.lang.String)>("Z3ScriptHandler.convertAssignStmtEdge=");

        $r9 = virtualinvoke r1.<safetyChecker.Edge: safetyChecker.Vertex getSource()>();

        $r10 = virtualinvoke r106.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("***");

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7[0] = $r13;

        staticinvoke <safetyChecker.LogUtils: void debugln(java.lang.Object[])>($r7);

        $r14 = virtualinvoke r1.<safetyChecker.Edge: soot.Unit getUnit()>();

        r2 = (soot.jimple.AssignStmt) $r14;

        r3 = interfaceinvoke r2.<soot.jimple.AssignStmt: soot.Value getLeftOp()>();

        r94 = interfaceinvoke r2.<soot.jimple.AssignStmt: soot.Value getRightOp()>();

        $r15 = interfaceinvoke r3.<soot.Value: soot.Type getType()>();

        $z0 = $r15 instanceof soot.RefType;

        if $z0 == 0 goto label01;

        $z16 = r94 instanceof soot.jimple.VirtualInvokeExpr;

        if $z16 == 0 goto label01;

        r107 = new soot.jimple.internal.JNewExpr;

        $r90 = interfaceinvoke r3.<soot.Value: soot.Type getType()>();

        $r91 = (soot.RefType) $r90;

        specialinvoke r107.<soot.jimple.internal.JNewExpr: void <init>(soot.RefType)>($r91);

        r94_1 = r107;

(0)     goto label02;

     label01:
        $r16 = virtualinvoke r94.<java.lang.Object: java.lang.String toString()>();

        $z1 = virtualinvoke $r16.<java.lang.String: boolean contains(java.lang.CharSequence)>("java.lang.String[] split(java.lang.String)");

(1)     if $z1 == 0 goto label02;

        r108 = new soot.jimple.internal.JNewArrayExpr;

        $r87 = staticinvoke <soot.RefType: soot.RefType v(java.lang.String)>("java.lang.String");

        $r88 = staticinvoke <soot.jimple.IntConstant: soot.jimple.IntConstant v(int)>(0);

        specialinvoke r108.<soot.jimple.internal.JNewArrayExpr: void <init>(soot.Type,soot.Value)>($r87, $r88);

(2)     r94_2 = r108;

     label02:
        r94_3 = Phi(r94_1 #0, r94 #1, r94_2 #2);

        r4 = interfaceinvoke r3.<soot.Value: soot.Type getType()>();

        $z2 = virtualinvoke r1.<safetyChecker.Edge: boolean isSubFunction()>();

        if $z2 == 0 goto label03;

        $r79 = (soot.jimple.InvokeExpr) r94_3;

        $r80 = interfaceinvoke $r79.<soot.jimple.InvokeExpr: soot.SootMethod getMethod()>();

        $r81 = virtualinvoke $r80.<soot.SootMethod: soot.Type getReturnType()>();

        $z15 = $r81 instanceof soot.VoidType;

        if $z15 != 0 goto label03;

        $r83 = r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        r109 = new java.lang.StringBuilder;

        specialinvoke r109.<java.lang.StringBuilder: void <init>(java.lang.String)>("return_");

        $i4 = virtualinvoke r0.<safetyChecker.Z3ScriptHandler: int getRealArraySize(java.lang.String)>("return_");

        $r84 = virtualinvoke r109.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r85 = virtualinvoke $r84.<java.lang.StringBuilder: java.lang.String toString()>();

        r95 = virtualinvoke $r83.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.IntExpr mkIntConst(java.lang.String)>($r85);

(3)     goto label06;

     label03:
        $z3 = r94_3 instanceof soot.jimple.InvokeExpr;

        if $z3 == 0 goto label05;

        $z13 = virtualinvoke r1.<safetyChecker.Edge: boolean isSubFunction()>();

        if $z13 != 0 goto label05;

        $r73 = r0.<safetyChecker.Z3ScriptHandler: safetyChecker.Z3JavaMathHandler z3MathHandler>;

        r119 = (soot.Value) r94_3;

        $z14 = virtualinvoke $r73.<safetyChecker.Z3JavaMathHandler: boolean isJavaMathLibrary(soot.Value)>(r119);

        if $z14 == 0 goto label04;

        $r78 = r0.<safetyChecker.Z3ScriptHandler: safetyChecker.Z3JavaMathHandler z3MathHandler>;

        r120 = (soot.Value) r94_3;

        r95_1 = virtualinvoke $r78.<safetyChecker.Z3JavaMathHandler: com.microsoft.z3.Expr createMathEquality(soot.Value,safetyChecker.Z3ScriptHandler,safetyChecker.Edge)>(r120, r0, r1);

(4)     goto label06;

     label04:
        $r75 = r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        r110 = new java.lang.StringBuilder;

        specialinvoke r110.<java.lang.StringBuilder: void <init>(java.lang.String)>("nonSubFunction_");

        $i3 = virtualinvoke r0.<safetyChecker.Z3ScriptHandler: int getRealArraySize(java.lang.String)>("nonSubFunction_");

        $r76 = virtualinvoke r110.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r77 = virtualinvoke $r76.<java.lang.StringBuilder: java.lang.String toString()>();

        r95_2 = virtualinvoke $r75.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.IntExpr mkIntConst(java.lang.String)>($r77);

(5)     goto label06;

     label05:
        $r17 = virtualinvoke r1.<safetyChecker.Edge: safetyChecker.Vertex getSource()>();

        $i0 = virtualinvoke $r17.<safetyChecker.Vertex: int getDistance()>();

        r121 = (soot.Value) r94_3;

(6)     r95_3 = virtualinvoke r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.Expr convertValue(soot.Value,boolean,safetyChecker.Edge,int)>(r121, 0, r1, $i0);

     label06:
        r95_4 = Phi(r95 #3, r95_1 #4, r95_2 #5, r95_3 #6);

        $r18 = newarray (java.lang.Object)[1];

        r111 = new java.lang.StringBuilder;

        specialinvoke r111.<java.lang.StringBuilder: void <init>(java.lang.String)>("rightZ3=");

        $r20 = virtualinvoke r111.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r95_4);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        $r18[0] = $r21;

        staticinvoke <safetyChecker.LogUtils: void infoln(java.lang.Object[])>($r18);

        $r22 = virtualinvoke r1.<safetyChecker.Edge: safetyChecker.Vertex getSource()>();

        $i1 = virtualinvoke $r22.<safetyChecker.Vertex: int getDistance()>();

        r5 = virtualinvoke r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.Expr convertValue(soot.Value,boolean,safetyChecker.Edge,int)>(r3, 1, r1, $i1);

        $r23 = newarray (java.lang.Object)[1];

        r112 = new java.lang.StringBuilder;

        specialinvoke r112.<java.lang.StringBuilder: void <init>(java.lang.String)>("leftZ3=");

        $r25 = virtualinvoke r112.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        $r23[0] = $r26;

        staticinvoke <safetyChecker.LogUtils: void infoln(java.lang.Object[])>($r23);

        $r27 = virtualinvoke r1.<safetyChecker.Edge: safetyChecker.Vertex getSource()>();

        $i2 = virtualinvoke $r27.<safetyChecker.Vertex: int getDistance()>();

        r122 = (com.microsoft.z3.Expr) r95_4;

        r96 = specialinvoke r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.BoolExpr convertAssignStmt(com.microsoft.z3.Expr,com.microsoft.z3.Expr,soot.Type,soot.Value,int)>(r122, r5, r4, r3, $i2);

        $z4 = r94_3 instanceof soot.jimple.AnyNewExpr;

        if $z4 == 0 goto label10;

        $z9 = r94_3 instanceof soot.jimple.NewArrayExpr;

        if $z9 == 0 goto label09;

        $r57 = r0.<safetyChecker.Z3ScriptHandler: safetyChecker.Z3ArrayHandler arrayHandler>;

        r123 = (soot.Value) r94_3;

        $r58 = interfaceinvoke r123.<soot.Value: soot.Type getType()>();

        r124 = (com.microsoft.z3.Expr) r95_4;

        r97 = virtualinvoke $r57.<safetyChecker.Z3ArrayHandler: com.microsoft.z3.BoolExpr newArrayExpr(com.microsoft.z3.Expr,soot.Type,safetyChecker.Z3ScriptHandler)>(r124, $r58, r0);

        $r59 = newarray (java.lang.Object)[1];

        r113 = new java.lang.StringBuilder;

        specialinvoke r113.<java.lang.StringBuilder: void <init>(java.lang.String)>("realArray=");

        $r61 = virtualinvoke r113.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r97);

        $r62 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.String toString()>();

        $r59[0] = $r62;

        staticinvoke <safetyChecker.LogUtils: void debugln(java.lang.Object[])>($r59);

        $r63 = newarray (java.lang.Object)[1];

        r114 = new java.lang.StringBuilder;

        specialinvoke r114.<java.lang.StringBuilder: void <init>(java.lang.String)>("eq=");

        $r65 = virtualinvoke r114.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r96);

        $r66 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.String toString()>();

        $r63[0] = $r66;

        staticinvoke <safetyChecker.LogUtils: void debugln(java.lang.Object[])>($r63);

        $r68 = r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        $r67 = newarray (com.microsoft.z3.BoolExpr)[2];

        $r67[0] = r96;

        $r67[1] = r97;

        r98 = virtualinvoke $r68.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.BoolExpr mkAnd(com.microsoft.z3.BoolExpr[])>($r67);

        $r69 = (soot.jimple.NewArrayExpr) r94_3;

        r99 = interfaceinvoke $r69.<soot.jimple.NewArrayExpr: soot.Value getSize()>();

        $z11 = r99 instanceof soot.Local;

        if $z11 == 0 goto label07;

        goto label08;

     label07:
        $z12 = r99 instanceof soot.jimple.IntConstant;

        if $z12 == 0 goto label08;

        r6 = (soot.jimple.IntConstant) r99;

        i5 = r6.<soot.jimple.IntConstant: int value>;

        $r70 = r0.<safetyChecker.Z3ScriptHandler: java.util.Map maxArraySize>;

        $r71 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>();

        $r72 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i5);

        interfaceinvoke $r70.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r71, $r72);

     label08:
        virtualinvoke r1.<safetyChecker.Edge: void setZ3Expr(com.microsoft.z3.BoolExpr)>(r98);

        goto label20;

     label09:
        $z10 = r94_3 instanceof soot.jimple.NewExpr;

        if $z10 == 0 goto label20;

        virtualinvoke r1.<safetyChecker.Edge: void setZ3Expr(com.microsoft.z3.BoolExpr)>(r96);

        goto label20;

     label10:
        $z5 = virtualinvoke r1.<safetyChecker.Edge: boolean isSubFunction()>();

        if $z5 == 0 goto label19;

        $r32 = newarray (java.lang.Object)[1];

        $r32[0] = "subfunction is nt complete yet";

        staticinvoke <safetyChecker.LogUtils: void warningln(java.lang.Object[])>($r32);

        $r33 = (soot.jimple.InvokeExpr) r94_3;

        $r34 = interfaceinvoke $r33.<soot.jimple.InvokeExpr: java.util.List getArgs()>();

        r100 = interfaceinvoke $r34.<java.util.List: java.util.Iterator iterator()>();

        goto label16;

     label11:
        $r35 = interfaceinvoke r100.<java.util.Iterator: java.lang.Object next()>();

        r101 = (soot.Value) $r35;

        $r36 = r0.<safetyChecker.Z3ScriptHandler: java.util.Map localMap>;

        $r37 = virtualinvoke r101.<java.lang.Object: java.lang.String toString()>();

        $r38 = interfaceinvoke $r36.<java.util.Map: java.lang.Object get(java.lang.Object)>($r37);

        r102 = (com.microsoft.z3.Expr) $r38;

        if r102 != null goto label12;

        $r44 = newarray (java.lang.Object)[1];

        $r44[0] = "paremeter is null, cannot find the Z3 value";

        staticinvoke <safetyChecker.LogUtils: void fatalln(java.lang.Object[])>($r44);

        staticinvoke <java.lang.System: void exit(int)>(0);

     label12:
        virtualinvoke r1.<safetyChecker.Edge: void addParameter(com.microsoft.z3.Expr)>(r102);

     label13:
        $r39 = virtualinvoke r1.<safetyChecker.Edge: safetyChecker.ProgramTree getProgramTree()>();

        $z7 = virtualinvoke $r39.<safetyChecker.ProgramTree: boolean getNewReturnPath()>();

        if $z7 != 0 goto label16;

        $r40 = newarray (java.lang.Object)[1];

        r115 = new java.lang.StringBuilder;

        specialinvoke r115.<java.lang.StringBuilder: void <init>(java.lang.String)>("New return path cannot be found : ");

        $r42 = virtualinvoke r115.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.String toString()>();

        $r40[0] = $r43;

        staticinvoke <safetyChecker.LogUtils: void warningln(java.lang.Object[])>($r40);

     label14:
        goto label16;

     label15:
        $r92 := @caughtexception;

        r103 = $r92;

        r116 = new java.lang.RuntimeException;

        specialinvoke r116.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>(r103);

        throw r116;

     label16:
        $z6 = interfaceinvoke r100.<java.util.Iterator: boolean hasNext()>();

        if $z6 != 0 goto label11;

        $r45 = r0.<safetyChecker.Z3ScriptHandler: java.util.Map localMap>;

        $r46 = interfaceinvoke $r45.<java.util.Map: java.util.Set entrySet()>();

        r104 = interfaceinvoke $r46.<java.util.Set: java.util.Iterator iterator()>();

        goto label18;

     label17:
        $r47 = interfaceinvoke r104.<java.util.Iterator: java.lang.Object next()>();

        r105 = (java.util.Map$Entry) $r47;

        $r48 = newarray (java.lang.Object)[1];

        r117 = new java.lang.StringBuilder;

        $r50 = interfaceinvoke r105.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r51 = (java.lang.String) $r50;

        $r52 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r51);

        specialinvoke r117.<java.lang.StringBuilder: void <init>(java.lang.String)>($r52);

        $r53 = virtualinvoke r117.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("--");

        $r54 = interfaceinvoke r105.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r55 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r54);

        $r56 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.String toString()>();

        $r48[0] = $r56;

        staticinvoke <safetyChecker.LogUtils: void warningln(java.lang.Object[])>($r48);

     label18:
        $z8 = interfaceinvoke r104.<java.util.Iterator: boolean hasNext()>();

        if $z8 != 0 goto label17;

        staticinvoke <java.lang.System: void exit(int)>(0);

        goto label20;

     label19:
        virtualinvoke r1.<safetyChecker.Edge: void setZ3Expr(com.microsoft.z3.BoolExpr)>(r96);

        $r28 = newarray (java.lang.Object)[1];

        r118 = new java.lang.StringBuilder;

        specialinvoke r118.<java.lang.StringBuilder: void <init>(java.lang.String)>("eq2=");

        $r30 = virtualinvoke r118.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r96);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        $r28[0] = $r31;

        staticinvoke <safetyChecker.LogUtils: void warningln(java.lang.Object[])>($r28);

     label20:
        if r96 != null goto label21;

        return 0;

     label21:
        return 1;

        catch java.lang.Exception from label13 to label14 with label15;
    }

    private boolean convertGotoStmt(safetyChecker.Edge)
    {
        safetyChecker.Z3ScriptHandler r0;
        safetyChecker.Edge r1;
        com.microsoft.z3.InterpolationContext $r2;
        com.microsoft.z3.BoolExpr $r3;

        r0 := @this: safetyChecker.Z3ScriptHandler;

        r1 := @parameter0: safetyChecker.Edge;

        $r2 = r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        $r3 = virtualinvoke $r2.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.BoolExpr mkTrue()>();

        virtualinvoke r1.<safetyChecker.Edge: void setZ3Expr(com.microsoft.z3.BoolExpr)>($r3);

        return 1;
    }

    private boolean convertSinkInvoke2Z3(safetyChecker.Edge)
    {
        safetyChecker.Z3ScriptHandler r0;
        safetyChecker.Edge r1;
        java.lang.String r2, r3, $r17, $r21;
        int i0, $i1, i2, i2_1, i2_2;
        java.lang.String[] r4, $r6;
        soot.Unit $r5, $r7, $r15;
        boolean $z0;
        soot.jimple.InvokeStmt $r8;
        soot.jimple.InvokeExpr $r9;
        java.util.Map $r10;
        java.lang.Object $r11;
        java.lang.Integer $r12;
        java.lang.Object[] $r13, $r18;
        java.lang.StringBuilder $r14, $r16, $r19, $r20;
        soot.Value r22, r22_1, r22_2, r22_3;

        r0 := @this: safetyChecker.Z3ScriptHandler;

        r1 := @parameter0: safetyChecker.Edge;

        $r5 = virtualinvoke r1.<safetyChecker.Edge: soot.Unit getUnit()>();

        r2 = staticinvoke <safetyChecker.UnitController: java.lang.String getMethodSignature(soot.Unit)>($r5);

        r22 = null;

        $r6 = <safetyChecker.UnitController: java.lang.String[] sinkSignatureDB>;

        r4 = $r6;

        i0 = lengthof $r6;

        i2 = 0;

(0)     goto label3;

     label1:
        r3 = r4[i2_1];

        $z0 = virtualinvoke r2.<java.lang.String: boolean contains(java.lang.CharSequence)>(r3);

(1)     if $z0 == 0 goto label2;

        $r7 = virtualinvoke r1.<safetyChecker.Edge: soot.Unit getUnit()>();

        $r8 = (soot.jimple.InvokeStmt) $r7;

        $r9 = interfaceinvoke $r8.<soot.jimple.InvokeStmt: soot.jimple.InvokeExpr getInvokeExpr()>();

        $r10 = <safetyChecker.UnitController: java.util.Map sensitiveParameterMap>;

        $r11 = interfaceinvoke $r10.<java.util.Map: java.lang.Object get(java.lang.Object)>(r3);

        $r12 = (java.lang.Integer) $r11;

        $i1 = virtualinvoke $r12.<java.lang.Integer: int intValue()>();

(2)     r22_2 = interfaceinvoke $r9.<soot.jimple.InvokeExpr: soot.Value getArg(int)>($i1);

     label2:
        r22_3 = Phi(r22_1 #1, r22_2 #2);

(3)     i2_2 = i2_1 + 1;

     label3:
        r22_1 = Phi(r22 #0, r22_3 #3);

        i2_1 = Phi(i2 #0, i2_2 #3);

        if i2_1 < i0 goto label1;

        $r13 = newarray (java.lang.Object)[1];

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>(java.lang.String)>("Unit : ");

        $r15 = virtualinvoke r1.<safetyChecker.Edge: soot.Unit getUnit()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        $r13[0] = $r17;

        staticinvoke <safetyChecker.LogUtils: void infoln(java.lang.Object[])>($r13);

        $r18 = newarray (java.lang.Object)[1];

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>(java.lang.String)>("leakCandidate : ");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r22_1);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        $r18[0] = $r21;

        staticinvoke <safetyChecker.LogUtils: void infoln(java.lang.Object[])>($r18);

        return 0;
    }

    protected com.microsoft.z3.Expr convertValue(soot.Value, boolean, safetyChecker.Edge, int)
    {
        safetyChecker.Z3ScriptHandler r0;
        soot.Value r1;
        boolean z0, $z1, $z2;
        safetyChecker.Edge r2;
        int i0;
        soot.Type r3;
        java.lang.Object[] $r4;
        com.microsoft.z3.Expr $r5, $r6;

        r0 := @this: safetyChecker.Z3ScriptHandler;

        r1 := @parameter0: soot.Value;

        z0 := @parameter1: boolean;

        r2 := @parameter2: safetyChecker.Edge;

        i0 := @parameter3: int;

        r3 = interfaceinvoke r1.<soot.Value: soot.Type getType()>();

        $z1 = r3 instanceof soot.PrimType;

        if $z1 == 0 goto label1;

        $r6 = specialinvoke r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.Expr convertPrimitiveValue(soot.Value,boolean,safetyChecker.Edge,int)>(r1, z0, r2, i0);

        return $r6;

     label1:
        $z2 = r3 instanceof soot.RefLikeType;

        if $z2 == 0 goto label2;

        $r5 = specialinvoke r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.Expr convertRefLikeValue(soot.Value,boolean,safetyChecker.Edge,int)>(r1, z0, r2, i0);

        return $r5;

     label2:
        $r4 = newarray (java.lang.Object)[1];

        $r4[0] = "not a primtype or a refliketype";

        staticinvoke <safetyChecker.LogUtils: void fatalln(java.lang.Object[])>($r4);

        return null;
    }

    private com.microsoft.z3.Expr convertPrimitiveValue(soot.Value, boolean, safetyChecker.Edge, int)
    {
        safetyChecker.Z3ScriptHandler r0;
        soot.Value r1, r4, r94, r99, r99_1, r99_2, r99_3, r99_4, r99_5, r99_6;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17;
        safetyChecker.Edge r2, $r34, r98, r98_1, r98_2, r98_3, r98_4, r98_5, r98_6;
        int i0, $i1, $i2, $i3, $i4, $i5, i6;
        java.util.Iterator r3;
        soot.Unit r5, r6;
        java.lang.Object[] $r7, $r11, $r12, $r19, $r23, $r25, $r29, $r36, $r42, $r50;
        java.lang.StringBuilder $r9, $r15, $r16, $r17, $r27, $r31, $r38, $r39, $r40, $r44, $r45, $r47, $r52, $r66, r107, r108, r109, r110, r111, r112, r113, r114;
        java.lang.String $r10, $r18, $r28, $r32, $r41, $r48, $r53, $r64, $r65, r84, r86;
        safetyChecker.Vertex $r14, $r33, $r35, $r46, $r49, r101, r101_1, r101_2, r101_3;
        safetyChecker.Z3ArrayHandler $r20, $r21;
        com.microsoft.z3.Expr $r22, $r55, $r59, $r62, r104, r106, r115;
        java.lang.Object $r24, $r61, r102, r102_1, r102_2;
        com.microsoft.z3.InterpolationContext $r54, $r56, $r57, $r69, $r72, $r76, $r79;
        soot.jimple.BinopExpr $r58;
        java.util.Map $r60, $r67, $r70, $r73, $r77, $r80;
        com.microsoft.z3.IntSort $r74, $r81;
        soot.Local r83;
        soot.Type r85;
        com.microsoft.z3.IntExpr r87, r87_1, r87_2, r87_3, r87_4;
        soot.jimple.Constant r88;
        soot.jimple.IntConstant r89;
        com.microsoft.z3.IntNum r90, r92;
        soot.jimple.LongConstant r91;
        long l7;
        soot.jimple.CastExpr r93;
        soot.shimple.PhiExpr r95;
        java.util.List r96;
        soot.toolkits.scalar.ValueUnitPair r100;
        soot.jimple.ArrayRef r103;
        soot.jimple.InstanceFieldRef r105;

        r0 := @this: safetyChecker.Z3ScriptHandler;

        r1 := @parameter0: soot.Value;

        z0 := @parameter1: boolean;

        r2 := @parameter2: safetyChecker.Edge;

        i0 := @parameter3: int;

        $r7 = newarray (java.lang.Object)[1];

        r107 = new java.lang.StringBuilder;

        specialinvoke r107.<java.lang.StringBuilder: void <init>(java.lang.String)>("Z3ScriptHandler.convertPrimitiveValue=");

        $r9 = virtualinvoke r107.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7[0] = $r10;

        staticinvoke <safetyChecker.LogUtils: void debugln(java.lang.Object[])>($r7);

        $z2 = r1 instanceof soot.Local;

        if $z2 == 0 goto label04;

        r83 = (soot.Local) r1;

        r84 = interfaceinvoke r83.<soot.Local: java.lang.String getName()>();

        if z0 == 0 goto label03;

        r85 = interfaceinvoke r1.<soot.Value: soot.Type getType()>();

        r108 = new java.lang.StringBuilder;

        $r64 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r84);

        specialinvoke r108.<java.lang.StringBuilder: void <init>(java.lang.String)>($r64);

        $r65 = specialinvoke r0.<safetyChecker.Z3ScriptHandler: java.lang.String getNameSuffix(safetyChecker.Edge)>(r2);

        $r66 = virtualinvoke r108.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r65);

        r86 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.String toString()>();

        r87 = null;

        $z16 = r85 instanceof soot.IntegerType;

(0)     if $z16 == 0 goto label01;

        $r76 = r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        r87_1 = virtualinvoke $r76.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.IntExpr mkIntConst(java.lang.String)>(r86);

        $r77 = r0.<safetyChecker.Z3ScriptHandler: java.util.Map substitute>;

        interfaceinvoke $r77.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r86, r84);

        $r80 = r0.<safetyChecker.Z3ScriptHandler: java.util.Map substituteSort>;

        $r79 = r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        $r81 = virtualinvoke $r79.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.IntSort mkIntSort()>();

(1)     interfaceinvoke $r80.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r86, $r81);

     label01:
        r87_2 = Phi(r87 #0, r87_1 #1);

        $z17 = r85 instanceof soot.LongType;

(2)     if $z17 == 0 goto label02;

        $r69 = r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        r87_3 = virtualinvoke $r69.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.IntExpr mkIntConst(java.lang.String)>(r86);

        $r70 = r0.<safetyChecker.Z3ScriptHandler: java.util.Map substitute>;

        interfaceinvoke $r70.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r86, r84);

        $r73 = r0.<safetyChecker.Z3ScriptHandler: java.util.Map substituteSort>;

        $r72 = r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        $r74 = virtualinvoke $r72.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.IntSort mkIntSort()>();

(3)     interfaceinvoke $r73.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r86, $r74);

     label02:
        r87_4 = Phi(r87_2 #2, r87_3 #3);

        $r67 = r0.<safetyChecker.Z3ScriptHandler: java.util.Map localMap>;

        interfaceinvoke $r67.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r84, r87_4);

        return r87_4;

     label03:
        $r60 = r0.<safetyChecker.Z3ScriptHandler: java.util.Map localMap>;

        $r61 = interfaceinvoke $r60.<java.util.Map: java.lang.Object get(java.lang.Object)>(r84);

        $r62 = (com.microsoft.z3.Expr) $r61;

        return $r62;

     label04:
        $z3 = r1 instanceof soot.jimple.BinopExpr;

        if $z3 == 0 goto label05;

        $r58 = (soot.jimple.BinopExpr) r1;

        $r59 = specialinvoke r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.Expr convertBoolExpr(soot.jimple.BinopExpr,safetyChecker.Edge,int)>($r58, r2, i0);

        return $r59;

     label05:
        $z4 = r1 instanceof soot.jimple.Constant;

        if $z4 == 0 goto label07;

        r88 = (soot.jimple.Constant) r1;

        $z14 = r88 instanceof soot.jimple.IntConstant;

        if $z14 == 0 goto label06;

        r89 = (soot.jimple.IntConstant) r88;

        i6 = r89.<soot.jimple.IntConstant: int value>;

        $r57 = r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        r90 = virtualinvoke $r57.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.IntNum mkInt(int)>(i6);

        return r90;

     label06:
        $z15 = r88 instanceof soot.jimple.LongConstant;

        if $z15 == 0 goto label07;

        r91 = (soot.jimple.LongConstant) r88;

        l7 = r91.<soot.jimple.LongConstant: long value>;

        $r56 = r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        r92 = virtualinvoke $r56.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.IntNum mkInt(long)>(l7);

        return r92;

     label07:
        $z5 = r1 instanceof soot.jimple.CastExpr;

        if $z5 == 0 goto label08;

        r93 = (soot.jimple.CastExpr) r1;

        r94 = interfaceinvoke r93.<soot.jimple.CastExpr: soot.Value getOp()>();

        $r55 = virtualinvoke r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.Expr convertValue(soot.Value,boolean,safetyChecker.Edge,int)>(r94, z0, r2, i0);

        return $r55;

     label08:
        $z6 = r1 instanceof soot.shimple.PhiExpr;

        if $z6 == 0 goto label17;

        r95 = (soot.shimple.PhiExpr) r1;

        r96 = interfaceinvoke r95.<soot.shimple.PhiExpr: java.util.List getArgs()>();

        virtualinvoke r2.<safetyChecker.Edge: safetyChecker.Vertex getSource()>();

        r98 = null;

        r99 = null;

        z1 = 0;

        r3 = interfaceinvoke r96.<java.util.List: java.util.Iterator iterator()>();

(4)     goto label15;

     label09:
        $r24 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r100 = (soot.toolkits.scalar.ValueUnitPair) $r24;

        r4 = virtualinvoke r100.<soot.toolkits.scalar.ValueUnitPair: soot.Value getValue()>();

        $r25 = newarray (java.lang.Object)[1];

        r109 = new java.lang.StringBuilder;

        specialinvoke r109.<java.lang.StringBuilder: void <init>(java.lang.String)>("valuePair=");

        $r27 = virtualinvoke r109.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        $r25[0] = $r28;

        staticinvoke <safetyChecker.LogUtils: void debugln(java.lang.Object[])>($r25);

        r5 = virtualinvoke r100.<soot.toolkits.scalar.ValueUnitPair: soot.Unit getUnit()>();

        $r29 = newarray (java.lang.Object)[1];

        r110 = new java.lang.StringBuilder;

        specialinvoke r110.<java.lang.StringBuilder: void <init>(java.lang.String)>("unitPair=");

        $r31 = virtualinvoke r110.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        $r29[0] = $r32;

        staticinvoke <safetyChecker.LogUtils: void debugln(java.lang.Object[])>($r29);

        r101_1 = r0.<safetyChecker.Z3ScriptHandler: safetyChecker.Vertex errorPathRoot>;

(5)     goto label14;

     label10:
        $r34 = virtualinvoke r101_2.<safetyChecker.Vertex: safetyChecker.Edge getOutgoingEdge()>();

        r6 = virtualinvoke $r34.<safetyChecker.Edge: soot.Unit getUnit()>();

        $z13 = virtualinvoke r6.<java.lang.Object: boolean equals(java.lang.Object)>(r5);

(6)     if $z13 == 0 goto label13;

        if r98_2 != null goto label11;

        r98_3 = virtualinvoke r101_2.<safetyChecker.Vertex: safetyChecker.Edge getOutgoingEdge()>();

        r99_3 = r4;

(7)     goto label12;

     label11:
        $i1 = virtualinvoke r101_2.<safetyChecker.Vertex: int getDistance()>();

        $r35 = virtualinvoke r98_2.<safetyChecker.Edge: safetyChecker.Vertex getSource()>();

        $i2 = virtualinvoke $r35.<safetyChecker.Vertex: int getDistance()>();

(8)     if $i1 >= $i2 goto label12;

        r98_4 = virtualinvoke r101_2.<safetyChecker.Vertex: safetyChecker.Edge getOutgoingEdge()>();

(9)     r99_4 = r4;

     label12:
        r99_5 = Phi(r99_3 #7, r99_2 #8, r99_4 #9);

        r98_5 = Phi(r98_3 #7, r98_2 #8, r98_4 #9);

        $r36 = newarray (java.lang.Object)[1];

        r111 = new java.lang.StringBuilder;

        specialinvoke r111.<java.lang.StringBuilder: void <init>(java.lang.String)>("phiEqualityUnit=");

        $r38 = virtualinvoke r111.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r6);

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-- Dist-");

        $i3 = virtualinvoke r101_2.<safetyChecker.Vertex: int getDistance()>();

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.String toString()>();

        $r36[0] = $r41;

        staticinvoke <safetyChecker.LogUtils: void detailln(java.lang.Object[])>($r36);

        $r42 = newarray (java.lang.Object)[1];

        r112 = new java.lang.StringBuilder;

        specialinvoke r112.<java.lang.StringBuilder: void <init>(java.lang.String)>("resultunit=");

        $r44 = virtualinvoke r112.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r98_5);

        $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" -- Dis=");

        $r46 = virtualinvoke r98_5.<safetyChecker.Edge: safetyChecker.Vertex getSource()>();

        $i4 = virtualinvoke $r46.<safetyChecker.Vertex: int getDistance()>();

        $r47 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.String toString()>();

        $r42[0] = $r48;

(10)    staticinvoke <safetyChecker.LogUtils: void detailln(java.lang.Object[])>($r42);

     label13:
        r99_6 = Phi(r99_2 #6, r99_5 #10);

        r98_6 = Phi(r98_2 #6, r98_5 #10);

(11)    r101_3 = virtualinvoke r101_2.<safetyChecker.Vertex: safetyChecker.Vertex getNextVertex()>();

     label14:
        r101_2 = Phi(r101_1 #5, r101_3 #11);

        r99_2 = Phi(r99_1 #5, r99_6 #11);

        r98_2 = Phi(r98_1 #5, r98_6 #11);

        $r33 = virtualinvoke r2.<safetyChecker.Edge: safetyChecker.Vertex getSource()>();

(12)    if r101_2 != $r33 goto label10;

     label15:
        r101 = Phi(r101 #4, r101_2 #12);

        r99_1 = Phi(r99 #4, r99_2 #12);

        r98_1 = Phi(r98 #4, r98_2 #12);

        $z12 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z12 != 0 goto label09;

        $r49 = virtualinvoke r2.<safetyChecker.Edge: safetyChecker.Vertex getSource()>();

        $i5 = virtualinvoke $r49.<safetyChecker.Vertex: int getDistance()>();

        r102 = virtualinvoke r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.Expr convertValue(soot.Value,boolean,safetyChecker.Edge,int)>(r99_1, 0, r2, $i5);

(13)    if r102 != null goto label16;

        $r54 = r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

(14)    r102_1 = virtualinvoke $r54.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.IntNum mkInt(int)>(0);

     label16:
        r102_2 = Phi(r102 #13, r102_1 #14);

        $r50 = newarray (java.lang.Object)[1];

        r113 = new java.lang.StringBuilder;

        specialinvoke r113.<java.lang.StringBuilder: void <init>(java.lang.String)>("resultExpr=");

        $r52 = virtualinvoke r113.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r102_2);

        $r53 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.String toString()>();

        $r50[0] = $r53;

        staticinvoke <safetyChecker.LogUtils: void debugln(java.lang.Object[])>($r50);

        r115 = (com.microsoft.z3.Expr) r102_2;

        return r115;

     label17:
        $z7 = r1 instanceof soot.jimple.InvokeExpr;

        if $z7 == 0 goto label18;

        $z11 = virtualinvoke r2.<safetyChecker.Edge: boolean isSubFunction()>();

        if $z11 == 0 goto label18;

        $r23 = newarray (java.lang.Object)[1];

        $r23[0] = r1;

        staticinvoke <safetyChecker.LogUtils: void warningln(java.lang.Object[])>($r23);

     label18:
        $z8 = r1 instanceof soot.jimple.ArrayRef;

        if $z8 == 0 goto label19;

        r103 = (soot.jimple.ArrayRef) r1;

        $r21 = r0.<safetyChecker.Z3ScriptHandler: safetyChecker.Z3ArrayHandler arrayHandler>;

        $r22 = virtualinvoke $r21.<safetyChecker.Z3ArrayHandler: com.microsoft.z3.Expr z3ArrayRef(soot.jimple.ArrayRef,safetyChecker.Z3ScriptHandler,safetyChecker.Edge)>(r103, r0, r2);

        return $r22;

     label19:
        $z9 = staticinvoke <safetyChecker.UnitController: boolean isArraysEqualsInvoke(soot.Value)>(r1);

        if $z9 == 0 goto label20;

        $r20 = r0.<safetyChecker.Z3ScriptHandler: safetyChecker.Z3ArrayHandler arrayHandler>;

        r104 = virtualinvoke $r20.<safetyChecker.Z3ArrayHandler: com.microsoft.z3.Expr z3ArraysEqual(soot.Value,safetyChecker.Z3ScriptHandler,safetyChecker.Edge)>(r1, r0, r2);

        return r104;

     label20:
        $z10 = r1 instanceof soot.jimple.InstanceFieldRef;

        if $z10 == 0 goto label21;

        r105 = (soot.jimple.InstanceFieldRef) r1;

        r106 = virtualinvoke r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.Expr z3ObjectField(soot.jimple.InstanceFieldRef,boolean,safetyChecker.Edge)>(r105, z0, r2);

        return r106;

     label21:
        $r11 = newarray (java.lang.Object)[1];

        $r11[0] = "returning null";

        staticinvoke <safetyChecker.LogUtils: void fatalln(java.lang.Object[])>($r11);

        $r12 = newarray (java.lang.Object)[1];

        r114 = new java.lang.StringBuilder;

        specialinvoke r114.<java.lang.StringBuilder: void <init>(java.lang.String)>("Vertex=");

        $r14 = virtualinvoke r2.<safetyChecker.Edge: safetyChecker.Vertex getSource()>();

        $r15 = virtualinvoke r114.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("---Edge=");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        $r12[0] = $r18;

        staticinvoke <safetyChecker.LogUtils: void fatalln(java.lang.Object[])>($r12);

        $r19 = newarray (java.lang.Object)[1];

        $r19[0] = "Z3ScriptHandler.convertPrimitiveValue";

        staticinvoke <safetyChecker.LogUtils: void fatalln(java.lang.Object[])>($r19);

        return null;
    }

    private com.microsoft.z3.Expr convertRefLikeValue(soot.Value, boolean, safetyChecker.Edge, int)
    {
        safetyChecker.Z3ScriptHandler r0;
        soot.Value r1;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11;
        safetyChecker.Edge r2;
        int i0;
        soot.jimple.internal.JimpleLocal r3, $r24;
        java.lang.Object[] $r4, $r8, $r14, $r15, $r22, $r23, $r28, $r29, $r32, $r36;
        java.lang.StringBuilder $r5, $r6, $r9, $r12, $r16, $r18, $r19, $r20;
        java.lang.String $r7, $r11, $r13, $r21, r44;
        java.lang.Class $r10;
        soot.Unit $r17;
        soot.Type $r25, r37;
        safetyChecker.Z3ObjectFieldHandler $r26;
        com.microsoft.z3.Expr $r27, $r31, $r35, r39, r40;
        safetyChecker.Z3ArrayHandler $r30, $r34;
        soot.jimple.AnyNewExpr $r33;
        soot.Local r38;
        soot.jimple.ArrayRef r41;
        soot.jimple.StaticFieldRef r42;
        soot.SootField r43;

        r0 := @this: safetyChecker.Z3ScriptHandler;

        r1 := @parameter0: soot.Value;

        z0 := @parameter1: boolean;

        r2 := @parameter2: safetyChecker.Edge;

        i0 := @parameter3: int;

        $r4 = newarray (java.lang.Object)[1];

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("Z3ScriptHandler.convertRefLikeValue=");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r4[0] = $r7;

        staticinvoke <safetyChecker.LogUtils: void debugln(java.lang.Object[])>($r4);

        $r8 = newarray (java.lang.Object)[1];

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>(java.lang.String)>("type  fo the value is ");

        $r10 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r11 = virtualinvoke $r10.<java.lang.Class: java.lang.String getName()>();

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8[0] = $r13;

        staticinvoke <safetyChecker.LogUtils: void detailln(java.lang.Object[])>($r8);

        $z1 = r1 instanceof soot.shimple.PhiExpr;

        if $z1 == 0 goto label01;

        $r36 = newarray (java.lang.Object)[1];

        $r36[0] = "FATAL: PhiExpr is not supported yet!";

        staticinvoke <safetyChecker.LogUtils: void fatalln(java.lang.Object[])>($r36);

        staticinvoke <java.lang.System: void exit(int)>(0);

     label01:
        $z2 = r1 instanceof soot.Local;

        if $z2 == 0 goto label03;

        r37 = interfaceinvoke r1.<soot.Value: soot.Type getType()>();

        r38 = (soot.Local) r1;

        $z10 = r37 instanceof soot.RefType;

        if $z10 == 0 goto label02;

        $r35 = specialinvoke r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.Expr createZ3Object(soot.Local,boolean,safetyChecker.Edge)>(r38, z0, r2);

        return $r35;

     label02:
        $z11 = r37 instanceof soot.ArrayType;

        if $z11 == 0 goto label03;

        $r34 = r0.<safetyChecker.Z3ScriptHandler: safetyChecker.Z3ArrayHandler arrayHandler>;

        r39 = virtualinvoke $r34.<safetyChecker.Z3ArrayHandler: com.microsoft.z3.Expr z3Local(soot.Local,boolean,int,safetyChecker.Z3ScriptHandler)>(r38, z0, i0, r0);

        return r39;

     label03:
        $z3 = r1 instanceof soot.jimple.AnyNewExpr;

        if $z3 == 0 goto label04;

        $r33 = (soot.jimple.AnyNewExpr) r1;

        r40 = specialinvoke r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.Expr convertAnyNewExpr(soot.jimple.AnyNewExpr,safetyChecker.Edge)>($r33, r2);

        return r40;

     label04:
        $z4 = r1 instanceof soot.jimple.StringConstant;

        if $z4 == 0 goto label05;

        $r32 = newarray (java.lang.Object)[1];

        $r32[0] = "FATAL: StringConstant. is not supported yet!";

        staticinvoke <safetyChecker.LogUtils: void fatalln(java.lang.Object[])>($r32);

        staticinvoke <java.lang.System: void exit(int)>(0);

     label05:
        $z5 = r1 instanceof soot.jimple.ArrayRef;

        if $z5 == 0 goto label06;

        r41 = (soot.jimple.ArrayRef) r1;

        $r30 = r0.<safetyChecker.Z3ScriptHandler: safetyChecker.Z3ArrayHandler arrayHandler>;

        $r31 = virtualinvoke $r30.<safetyChecker.Z3ArrayHandler: com.microsoft.z3.Expr z3ArrayRef(soot.jimple.ArrayRef,safetyChecker.Z3ScriptHandler,safetyChecker.Edge)>(r41, r0, r2);

        return $r31;

     label06:
        $z6 = r1 instanceof soot.jimple.InstanceFieldRef;

        if $z6 == 0 goto label07;

        $r29 = newarray (java.lang.Object)[1];

        $r29[0] = "FATAL: InstanceFieldRef is not supported yet!";

        staticinvoke <safetyChecker.LogUtils: void fatalln(java.lang.Object[])>($r29);

        staticinvoke <java.lang.System: void exit(int)>(0);

     label07:
        $z7 = r1 instanceof soot.jimple.CastExpr;

        if $z7 == 0 goto label08;

        $r28 = newarray (java.lang.Object)[1];

        $r28[0] = "FATAL: CastExpr is not supported yet!";

        staticinvoke <safetyChecker.LogUtils: void fatalln(java.lang.Object[])>($r28);

        staticinvoke <java.lang.System: void exit(int)>(0);

     label08:
        $z8 = r1 instanceof soot.jimple.StaticFieldRef;

        if $z8 == 0 goto label09;

        r42 = (soot.jimple.StaticFieldRef) r1;

        r43 = virtualinvoke r42.<soot.jimple.StaticFieldRef: soot.SootField getField()>();

        r44 = virtualinvoke r43.<soot.SootField: java.lang.String getName()>();

        $r24 = new soot.jimple.internal.JimpleLocal;

        $r25 = virtualinvoke r43.<soot.SootField: soot.Type getType()>();

        specialinvoke $r24.<soot.jimple.internal.JimpleLocal: void <init>(java.lang.String,soot.Type)>(r44, $r25);

        r3 = $r24;

        $r26 = r0.<safetyChecker.Z3ScriptHandler: safetyChecker.Z3ObjectFieldHandler objFieldHandler>;

        $r27 = virtualinvoke $r26.<safetyChecker.Z3ObjectFieldHandler: com.microsoft.z3.Expr handleStaticFieldRef(soot.Local,boolean,safetyChecker.Z3ScriptHandler)>(r3, z0, r0);

        return $r27;

     label09:
        $z9 = r1 instanceof soot.jimple.NullConstant;

        if $z9 == 0 goto label10;

        $r23 = newarray (java.lang.Object)[1];

        $r23[0] = "FATAL: NullConstant is not supported yet!";

        staticinvoke <safetyChecker.LogUtils: void fatalln(java.lang.Object[])>($r23);

        staticinvoke <java.lang.System: void exit(int)>(0);

     label10:
        $r14 = newarray (java.lang.Object)[1];

        $r14[0] = "FATAL: Conversion cannot be done";

        staticinvoke <safetyChecker.LogUtils: void fatalln(java.lang.Object[])>($r14);

        $r15 = newarray (java.lang.Object)[1];

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>(java.lang.String)>("FATAL: Unit : ");

        $r17 = virtualinvoke r2.<safetyChecker.Edge: soot.Unit getUnit()>();

        $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r17);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" - Value : ");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        $r15[0] = $r21;

        staticinvoke <safetyChecker.LogUtils: void fatalln(java.lang.Object[])>($r15);

        $r22 = newarray (java.lang.Object)[1];

        $r22[0] = "Z3ScriptHandler.convertRefLikeValue";

        staticinvoke <safetyChecker.LogUtils: void fatalln(java.lang.Object[])>($r22);

        return null;
    }

    private com.microsoft.z3.Expr createZ3Object(soot.Local, boolean, safetyChecker.Edge)
    {
        safetyChecker.Z3ScriptHandler r0;
        soot.Local r1;
        boolean z0, $z1, $z2, $z3;
        safetyChecker.Edge r2;
        soot.Type r3;
        java.lang.String r4, $r18, $r19, $r21, $r27, $r28, $r30, r53, r56, r61;
        com.microsoft.z3.Expr r5, r54, r57, r62;
        java.lang.Object[] $r6;
        java.util.Map $r7, $r11, $r12, $r13, $r15, $r32, $r36, $r44, $r45, $r48, $r49;
        com.microsoft.z3.InterpolationContext $r8, $r9, $r23, $r24, $r33, $r38, $r39, $r41, $r43, $r47;
        com.microsoft.z3.StringSymbol $r10;
        java.lang.Object $r14, $r16, $r34, $r37, $r50, r51, r51_1, r51_2;
        safetyChecker.ProgramTree $r20, $r29;
        java.lang.StringBuilder $r22, $r31, r64, r65;
        com.microsoft.z3.IntExpr $r25;
        com.microsoft.z3.Sort $r35, r66, r67;
        com.microsoft.z3.IntSort $r40, $r42;
        com.microsoft.z3.ArraySort r52;
        safetyChecker.NewSort r55, r58, r60, r63;
        com.microsoft.z3.ArrayExpr r59;

        r0 := @this: safetyChecker.Z3ScriptHandler;

        r1 := @parameter0: soot.Local;

        z0 := @parameter1: boolean;

        r2 := @parameter2: safetyChecker.Edge;

        $r6 = newarray (java.lang.Object)[1];

        $r6[0] = "createZ3Object";

        staticinvoke <safetyChecker.LogUtils: void debugln(java.lang.Object[])>($r6);

        r3 = interfaceinvoke r1.<soot.Local: soot.Type getType()>();

        r4 = virtualinvoke r3.<soot.Type: java.lang.String toString()>();

        $r7 = r0.<safetyChecker.Z3ScriptHandler: java.util.Map newSortMap>;

        $z1 = interfaceinvoke $r7.<java.util.Map: boolean containsKey(java.lang.Object)>(r4);

        if $z1 == 0 goto label1;

        $r49 = r0.<safetyChecker.Z3ScriptHandler: java.util.Map newSortMap>;

        $r50 = interfaceinvoke $r49.<java.util.Map: java.lang.Object get(java.lang.Object)>(r4);

        r51 = (com.microsoft.z3.Sort) $r50;

(0)     goto label2;

     label1:
        $r9 = r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        $r8 = r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        $r10 = virtualinvoke $r8.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.StringSymbol mkSymbol(java.lang.String)>(r4);

        r51_1 = virtualinvoke $r9.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.UninterpretedSort mkUninterpretedSort(com.microsoft.z3.Symbol)>($r10);

        $r11 = r0.<safetyChecker.Z3ScriptHandler: java.util.Map newSortMap>;

(1)     interfaceinvoke $r11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, r51_1);

     label2:
        r51_2 = Phi(r51 #0, r51_1 #1);

        $r12 = r0.<safetyChecker.Z3ScriptHandler: java.util.Map global>;

        $z2 = interfaceinvoke $r12.<java.util.Map: boolean containsKey(java.lang.Object)>(r4);

        if $z2 != 0 goto label3;

        $r39 = r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        $r38 = r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        $r40 = virtualinvoke $r38.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.IntSort getIntSort()>();

        $r41 = r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        $r42 = virtualinvoke $r41.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.IntSort getIntSort()>();

        r52 = virtualinvoke $r39.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.ArraySort mkArraySort(com.microsoft.z3.Sort,com.microsoft.z3.Sort)>($r40, $r42);

        r53 = virtualinvoke r0.<safetyChecker.Z3ScriptHandler: java.lang.String getGlobalName(java.lang.String)>(r4);

        $r43 = r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        r54 = virtualinvoke $r43.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.Expr mkConst(java.lang.String,com.microsoft.z3.Sort)>(r53, r52);

        $r44 = r0.<safetyChecker.Z3ScriptHandler: java.util.Map global>;

        interfaceinvoke $r44.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, r54);

        $r45 = r0.<safetyChecker.Z3ScriptHandler: java.util.Map substitute>;

        interfaceinvoke $r45.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, r53);

        r63 = new safetyChecker.NewSort;

        $r47 = r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        r66 = (com.microsoft.z3.Sort) r51_2;

        specialinvoke r63.<safetyChecker.NewSort: void <init>(com.microsoft.z3.Sort,com.microsoft.z3.InterpolationContext)>(r66, $r47);

        r55 = r63;

        $r48 = r0.<safetyChecker.Z3ScriptHandler: java.util.Map sortId>;

        interfaceinvoke $r48.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, r55);

     label3:
        if z0 == 0 goto label5;

        r64 = new java.lang.StringBuilder;

        $r27 = interfaceinvoke r1.<soot.Local: java.lang.String getName()>();

        $r28 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r27);

        specialinvoke r64.<java.lang.StringBuilder: void <init>(java.lang.String)>($r28);

        $r29 = virtualinvoke r2.<safetyChecker.Edge: safetyChecker.ProgramTree getProgramTree()>();

        $r30 = virtualinvoke $r29.<safetyChecker.ProgramTree: java.lang.String getProgramDefinition()>();

        $r31 = virtualinvoke r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r30);

        r56 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        $r33 = r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        $r32 = r0.<safetyChecker.Z3ScriptHandler: java.util.Map newSortMap>;

        $r34 = interfaceinvoke $r32.<java.util.Map: java.lang.Object get(java.lang.Object)>(r4);

        $r35 = (com.microsoft.z3.Sort) $r34;

        r57 = virtualinvoke $r33.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.Expr mkConst(java.lang.String,com.microsoft.z3.Sort)>(r56, $r35);

        $r36 = r0.<safetyChecker.Z3ScriptHandler: java.util.Map sortId>;

        $r37 = interfaceinvoke $r36.<java.util.Map: java.lang.Object get(java.lang.Object)>(r4);

        r58 = (safetyChecker.NewSort) $r37;

        $z3 = virtualinvoke r58.<safetyChecker.NewSort: boolean ifHasExpr(com.microsoft.z3.Expr)>(r57);

        if $z3 == 0 goto label4;

        return r57;

     label4:
        virtualinvoke r58.<safetyChecker.NewSort: void creatNewOject(com.microsoft.z3.Expr)>(r57);

        return r57;

     label5:
        $r13 = r0.<safetyChecker.Z3ScriptHandler: java.util.Map global>;

        $r14 = interfaceinvoke $r13.<java.util.Map: java.lang.Object get(java.lang.Object)>(r4);

        r59 = (com.microsoft.z3.ArrayExpr) $r14;

        $r15 = r0.<safetyChecker.Z3ScriptHandler: java.util.Map sortId>;

        $r16 = interfaceinvoke $r15.<java.util.Map: java.lang.Object get(java.lang.Object)>(r4);

        r60 = (safetyChecker.NewSort) $r16;

        r65 = new java.lang.StringBuilder;

        $r18 = interfaceinvoke r1.<soot.Local: java.lang.String getName()>();

        $r19 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r18);

        specialinvoke r65.<java.lang.StringBuilder: void <init>(java.lang.String)>($r19);

        $r20 = virtualinvoke r2.<safetyChecker.Edge: safetyChecker.ProgramTree getProgramTree()>();

        $r21 = virtualinvoke $r20.<safetyChecker.ProgramTree: java.lang.String getProgramDefinition()>();

        $r22 = virtualinvoke r65.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        r61 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        $r23 = r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        r67 = (com.microsoft.z3.Sort) r51_2;

        r62 = virtualinvoke $r23.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.Expr mkConst(java.lang.String,com.microsoft.z3.Sort)>(r61, r67);

        $r24 = r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        $r25 = virtualinvoke r60.<safetyChecker.NewSort: com.microsoft.z3.IntExpr getId(com.microsoft.z3.Expr)>(r62);

        r5 = virtualinvoke $r24.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.Expr mkSelect(com.microsoft.z3.ArrayExpr,com.microsoft.z3.Expr)>(r59, $r25);

        return r5;
    }

    public java.lang.String getGlobalName(java.lang.String)
    {
        safetyChecker.Z3ScriptHandler r0;
        java.lang.String r1, r12;
        java.util.Map $r2, $r7, $r9;
        boolean $z0;
        java.lang.StringBuilder $r3, $r4, $r5, $r6;
        java.lang.Integer $r8, $r11;
        java.lang.Object $r10;
        int i0, i1, i0_1, i0_2;

        r0 := @this: safetyChecker.Z3ScriptHandler;

        r1 := @parameter0: java.lang.String;

        i0 = 1;

        $r2 = r0.<safetyChecker.Z3ScriptHandler: java.util.Map arrayNameMap>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

(0)     if $z0 == 0 goto label1;

        $r9 = r0.<safetyChecker.Z3ScriptHandler: java.util.Map arrayNameMap>;

        $r10 = interfaceinvoke $r9.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r11 = (java.lang.Integer) $r10;

        i1 = virtualinvoke $r11.<java.lang.Integer: int intValue()>();

(1)     i0_1 = i1 + 1;

     label1:
        i0_2 = Phi(i0 #0, i0_1 #1);

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("Global_");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0_2);

        r12 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = r0.<safetyChecker.Z3ScriptHandler: java.util.Map arrayNameMap>;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0_2);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r8);

        return r12;
    }

    private com.microsoft.z3.BoolExpr convertAssignStmt(com.microsoft.z3.Expr, com.microsoft.z3.Expr, soot.Type, soot.Value, int)
    {
        safetyChecker.Z3ScriptHandler r0;
        com.microsoft.z3.Expr r1, r2, $r39, r74, r75;
        soot.Type r3;
        soot.Value r4;
        int i0;
        com.microsoft.z3.ArrayExpr r5, $r16, $r23, r66, r67, r77, r77_1, r77_2;
        com.microsoft.z3.BoolExpr r6, r62, r71, r78;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.util.Map $r7, $r11, $r12, $r13, $r31, $r44, $r45, $r47, $r52;
        java.lang.Object $r8, $r14, $r32, $r53;
        com.microsoft.z3.InterpolationContext $r9, $r15, $r22, $r24, $r37, $r54, $r60, $r61;
        com.microsoft.z3.Sort $r10, $r38, $r46;
        com.microsoft.z3.IntExpr $r17, $r55;
        java.lang.Object[] $r18, $r33, $r40, $r56;
        java.lang.StringBuilder $r19, $r20, $r27, $r30, $r34, $r35, $r41, $r42, $r48, $r51, $r57, $r58;
        java.lang.String $r21, $r28, $r29, $r36, $r43, $r49, $r50, $r59, r63, r64, r65, r68, r72, r73;
        safetyChecker.Edge $r25;
        safetyChecker.Z3ArrayHandler $r26;
        safetyChecker.NewSort r69, r76;
        soot.jimple.ArrayRef r70;

        r0 := @this: safetyChecker.Z3ScriptHandler;

        r1 := @parameter0: com.microsoft.z3.Expr;

        r2 := @parameter1: com.microsoft.z3.Expr;

        r3 := @parameter2: soot.Type;

        r4 := @parameter3: soot.Value;

        i0 := @parameter4: int;

        $z0 = r3 instanceof soot.PrimType;

        if $z0 == 0 goto label1;

        $z6 = r4 instanceof soot.Local;

        if $z6 == 0 goto label1;

        $r61 = r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        r62 = virtualinvoke $r61.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.BoolExpr mkEq(com.microsoft.z3.Expr,com.microsoft.z3.Expr)>(r2, r1);

        return r62;

     label1:
        $z1 = r3 instanceof soot.ArrayType;

        if $z1 == 0 goto label2;

        $z5 = r4 instanceof soot.Local;

        if $z5 == 0 goto label2;

        r63 = virtualinvoke r3.<soot.Type: java.lang.String toString()>();

        r64 = r63;

        $r27 = new java.lang.StringBuilder;

        $r28 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r64);

        specialinvoke $r27.<java.lang.StringBuilder: void <init>(java.lang.String)>($r28);

        $r29 = virtualinvoke r0.<safetyChecker.Z3ScriptHandler: java.lang.String getNameSuffix()>();

        $r30 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29);

        r65 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        $r31 = r0.<safetyChecker.Z3ScriptHandler: java.util.Map localMap>;

        $r32 = interfaceinvoke $r31.<java.util.Map: java.lang.Object get(java.lang.Object)>(r64);

        r66 = (com.microsoft.z3.ArrayExpr) $r32;

        $r33 = newarray (java.lang.Object)[1];

        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>(java.lang.String)>("latestArray=");

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r66);

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>();

        $r33[0] = $r36;

        staticinvoke <safetyChecker.LogUtils: void debugln(java.lang.Object[])>($r33);

        $r37 = r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        $r38 = virtualinvoke r66.<com.microsoft.z3.ArrayExpr: com.microsoft.z3.Sort getSort()>();

        $r39 = virtualinvoke $r37.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.Expr mkConst(java.lang.String,com.microsoft.z3.Sort)>(r65, $r38);

        r67 = (com.microsoft.z3.ArrayExpr) $r39;

        $r40 = newarray (java.lang.Object)[1];

        $r41 = new java.lang.StringBuilder;

        specialinvoke $r41.<java.lang.StringBuilder: void <init>(java.lang.String)>("newArray=");

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r67);

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.String toString()>();

        $r40[0] = $r43;

        staticinvoke <safetyChecker.LogUtils: void debugln(java.lang.Object[])>($r40);

        $r44 = r0.<safetyChecker.Z3ScriptHandler: java.util.Map substitute>;

        interfaceinvoke $r44.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r65, r64);

        $r45 = r0.<safetyChecker.Z3ScriptHandler: java.util.Map substituteSort>;

        $r46 = virtualinvoke r67.<com.microsoft.z3.ArrayExpr: com.microsoft.z3.Sort getSort()>();

        interfaceinvoke $r45.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r65, $r46);

        $r47 = r0.<safetyChecker.Z3ScriptHandler: java.util.Map localMap>;

        interfaceinvoke $r47.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r64, r67);

        $r48 = new java.lang.StringBuilder;

        $r49 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r63);

        specialinvoke $r48.<java.lang.StringBuilder: void <init>(java.lang.String)>($r49);

        $r50 = virtualinvoke r0.<safetyChecker.Z3ScriptHandler: java.lang.String getArraySortSuffix()>();

        $r51 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r50);

        r68 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.String toString()>();

        $r52 = r0.<safetyChecker.Z3ScriptHandler: java.util.Map sortId>;

        $r53 = interfaceinvoke $r52.<java.util.Map: java.lang.Object get(java.lang.Object)>(r68);

        r69 = (safetyChecker.NewSort) $r53;

        $r54 = r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        $r55 = virtualinvoke r69.<safetyChecker.NewSort: com.microsoft.z3.IntExpr getId(com.microsoft.z3.Expr)>(r2);

        r5 = virtualinvoke $r54.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.ArrayExpr mkStore(com.microsoft.z3.ArrayExpr,com.microsoft.z3.Expr,com.microsoft.z3.Expr)>(r66, $r55, r1);

        $r56 = newarray (java.lang.Object)[1];

        $r57 = new java.lang.StringBuilder;

        specialinvoke $r57.<java.lang.StringBuilder: void <init>(java.lang.String)>("afterStore=");

        $r58 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);

        $r59 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.String toString()>();

        $r56[0] = $r59;

        staticinvoke <safetyChecker.LogUtils: void debugln(java.lang.Object[])>($r56);

        $r60 = r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        r6 = virtualinvoke $r60.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.BoolExpr mkEq(com.microsoft.z3.Expr,com.microsoft.z3.Expr)>(r67, r5);

        return r6;

     label2:
        $z2 = r4 instanceof soot.jimple.ArrayRef;

        if $z2 == 0 goto label3;

        r70 = (soot.jimple.ArrayRef) r4;

        $r26 = r0.<safetyChecker.Z3ScriptHandler: safetyChecker.Z3ArrayHandler arrayHandler>;

        $r25 = r0.<safetyChecker.Z3ScriptHandler: safetyChecker.Edge currentEdge>;

        r71 = virtualinvoke $r26.<safetyChecker.Z3ArrayHandler: com.microsoft.z3.BoolExpr updateArrayRef(soot.jimple.ArrayRef,safetyChecker.Z3ScriptHandler,com.microsoft.z3.Expr,safetyChecker.Edge)>(r70, r0, r1, $r25);

        return r71;

     label3:
        r72 = specialinvoke r0.<safetyChecker.Z3ScriptHandler: java.lang.String getArrayName(soot.Value)>(r4);

        r73 = virtualinvoke r0.<safetyChecker.Z3ScriptHandler: java.lang.String getGlobalName(java.lang.String)>(r72);

        $r7 = r0.<safetyChecker.Z3ScriptHandler: java.util.Map global>;

        $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>(r72);

        r74 = (com.microsoft.z3.Expr) $r8;

        $r9 = r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        $r10 = virtualinvoke r74.<com.microsoft.z3.Expr: com.microsoft.z3.Sort getSort()>();

        r75 = virtualinvoke $r9.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.Expr mkConst(java.lang.String,com.microsoft.z3.Sort)>(r73, $r10);

        $r11 = r0.<safetyChecker.Z3ScriptHandler: java.util.Map substitute>;

        interfaceinvoke $r11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r73, r72);

        $r12 = r0.<safetyChecker.Z3ScriptHandler: java.util.Map global>;

        interfaceinvoke $r12.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r72, r75);

        $r13 = r0.<safetyChecker.Z3ScriptHandler: java.util.Map sortId>;

        $r14 = interfaceinvoke $r13.<java.util.Map: java.lang.Object get(java.lang.Object)>(r72);

        r76 = (safetyChecker.NewSort) $r14;

        $z3 = r4 instanceof soot.jimple.FieldRef;

        if $z3 == 0 goto label4;

        $z4 = r4 instanceof soot.jimple.StaticFieldRef;

        if $z4 != 0 goto label4;

        $r24 = r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        $r23 = (com.microsoft.z3.ArrayExpr) r74;

        r77 = virtualinvoke $r24.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.ArrayExpr mkStore(com.microsoft.z3.ArrayExpr,com.microsoft.z3.Expr,com.microsoft.z3.Expr)>($r23, r2, r1);

(0)     goto label5;

     label4:
        $r15 = r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        $r16 = (com.microsoft.z3.ArrayExpr) r74;

        $r17 = virtualinvoke r76.<safetyChecker.NewSort: com.microsoft.z3.IntExpr getId(com.microsoft.z3.Expr)>(r2);

(1)     r77_1 = virtualinvoke $r15.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.ArrayExpr mkStore(com.microsoft.z3.ArrayExpr,com.microsoft.z3.Expr,com.microsoft.z3.Expr)>($r16, $r17, r1);

     label5:
        r77_2 = Phi(r77 #0, r77_1 #1);

        $r18 = newarray (java.lang.Object)[1];

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>(java.lang.String)>("afterStore=");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r77_2);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        $r18[0] = $r21;

        staticinvoke <safetyChecker.LogUtils: void debugln(java.lang.Object[])>($r18);

        $r22 = r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        r78 = virtualinvoke $r22.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.BoolExpr mkEq(com.microsoft.z3.Expr,com.microsoft.z3.Expr)>(r75, r77_2);

        return r78;
    }

    private com.microsoft.z3.Expr convertAnyNewExpr(soot.jimple.AnyNewExpr, safetyChecker.Edge)
    {
        safetyChecker.Z3ScriptHandler r0;
        soot.jimple.AnyNewExpr r1;
        safetyChecker.Edge r2;
        java.lang.Object[] $r3;
        boolean $z0, $z1, $z2;
        soot.jimple.NewMultiArrayExpr $r4;
        com.microsoft.z3.Expr $r5, $r7, $r9;
        soot.jimple.NewArrayExpr $r6;
        soot.jimple.NewExpr $r8;

        r0 := @this: safetyChecker.Z3ScriptHandler;

        r1 := @parameter0: soot.jimple.AnyNewExpr;

        r2 := @parameter1: safetyChecker.Edge;

        $r3 = newarray (java.lang.Object)[1];

        $r3[0] = "Z3ScriptHandler.convertAnyNewExpr";

        staticinvoke <safetyChecker.LogUtils: void debugln(java.lang.Object[])>($r3);

        $z0 = r1 instanceof soot.jimple.NewExpr;

        if $z0 == 0 goto label1;

        $r8 = (soot.jimple.NewExpr) r1;

        $r9 = specialinvoke r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.Expr convertNewExpr(soot.jimple.NewExpr,safetyChecker.Edge)>($r8, r2);

        return $r9;

     label1:
        $z1 = r1 instanceof soot.jimple.NewArrayExpr;

        if $z1 == 0 goto label2;

        $r6 = (soot.jimple.NewArrayExpr) r1;

        $r7 = specialinvoke r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.Expr convertNewArrayExpr(soot.jimple.NewArrayExpr,safetyChecker.Edge)>($r6, r2);

        return $r7;

     label2:
        $z2 = r1 instanceof soot.jimple.NewMultiArrayExpr;

        if $z2 == 0 goto label3;

        $r4 = (soot.jimple.NewMultiArrayExpr) r1;

        $r5 = specialinvoke r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.Expr convertNewMultiArrayExpr(soot.jimple.NewMultiArrayExpr,safetyChecker.Edge)>($r4, r2);

        return $r5;

     label3:
        return null;
    }

    private com.microsoft.z3.Expr convertNewExpr(soot.jimple.NewExpr, safetyChecker.Edge)
    {
        safetyChecker.Z3ScriptHandler r0;
        soot.jimple.NewExpr r1;
        safetyChecker.Edge r2;
        soot.Type r3;
        java.lang.String r4;
        safetyChecker.NewSort r5, r19, r21;
        java.util.Map $r6, $r7, $r9, $r12, $r14, $r16;
        boolean $z0, $z1;
        com.microsoft.z3.InterpolationContext $r8, $r11;
        com.microsoft.z3.Expr $r13, $r18;
        java.lang.Object $r15, $r17, r20, r20_1, r20_2;
        com.microsoft.z3.Sort r22;

        r0 := @this: safetyChecker.Z3ScriptHandler;

        r1 := @parameter0: soot.jimple.NewExpr;

        r2 := @parameter1: safetyChecker.Edge;

        r3 = interfaceinvoke r1.<soot.jimple.NewExpr: soot.Type getType()>();

        r4 = virtualinvoke r3.<soot.Type: java.lang.String toString()>();

        $r6 = r0.<safetyChecker.Z3ScriptHandler: java.util.Map sortId>;

        $z0 = interfaceinvoke $r6.<java.util.Map: boolean containsKey(java.lang.Object)>(r4);

        if $z0 == 0 goto label1;

        $r16 = r0.<safetyChecker.Z3ScriptHandler: java.util.Map sortId>;

        $r17 = interfaceinvoke $r16.<java.util.Map: java.lang.Object get(java.lang.Object)>(r4);

        r19 = (safetyChecker.NewSort) $r17;

        $r18 = virtualinvoke r19.<safetyChecker.NewSort: com.microsoft.z3.Expr getNewObject()>();

        return $r18;

     label1:
        $r7 = r0.<safetyChecker.Z3ScriptHandler: java.util.Map newSortMap>;

        $z1 = interfaceinvoke $r7.<java.util.Map: boolean containsKey(java.lang.Object)>(r4);

        if $z1 == 0 goto label2;

        $r14 = r0.<safetyChecker.Z3ScriptHandler: java.util.Map newSortMap>;

        $r15 = interfaceinvoke $r14.<java.util.Map: java.lang.Object get(java.lang.Object)>(r4);

        r20 = (com.microsoft.z3.Sort) $r15;

(0)     goto label3;

     label2:
        $r8 = r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        r20_1 = virtualinvoke $r8.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.UninterpretedSort mkUninterpretedSort(java.lang.String)>(r4);

        $r9 = r0.<safetyChecker.Z3ScriptHandler: java.util.Map newSortMap>;

(1)     interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, r20_1);

     label3:
        r20_2 = Phi(r20 #0, r20_1 #1);

        r21 = new safetyChecker.NewSort;

        $r11 = r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        r22 = (com.microsoft.z3.Sort) r20_2;

        specialinvoke r21.<safetyChecker.NewSort: void <init>(com.microsoft.z3.Sort,com.microsoft.z3.InterpolationContext)>(r22, $r11);

        r5 = r21;

        $r12 = r0.<safetyChecker.Z3ScriptHandler: java.util.Map sortId>;

        interfaceinvoke $r12.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, r5);

        $r13 = virtualinvoke r5.<safetyChecker.NewSort: com.microsoft.z3.Expr getNewObject()>();

        return $r13;
    }

    private com.microsoft.z3.Expr convertNewArrayExpr(soot.jimple.NewArrayExpr, safetyChecker.Edge)
    {
        safetyChecker.Z3ScriptHandler r0;
        soot.jimple.NewArrayExpr r1;
        safetyChecker.Edge r2;
        soot.Type r3;
        java.lang.String r4;
        safetyChecker.NewSort r5, r19, r21;
        java.util.Map $r6, $r7, $r9, $r12, $r14, $r16;
        boolean $z0, $z1;
        com.microsoft.z3.InterpolationContext $r8, $r11;
        com.microsoft.z3.Expr $r13, $r18;
        java.lang.Object $r15, $r17, r20, r20_1, r20_2;
        com.microsoft.z3.Sort r22;

        r0 := @this: safetyChecker.Z3ScriptHandler;

        r1 := @parameter0: soot.jimple.NewArrayExpr;

        r2 := @parameter1: safetyChecker.Edge;

        r3 = interfaceinvoke r1.<soot.jimple.NewArrayExpr: soot.Type getType()>();

        r4 = virtualinvoke r3.<soot.Type: java.lang.String toString()>();

        $r6 = r0.<safetyChecker.Z3ScriptHandler: java.util.Map sortId>;

        $z0 = interfaceinvoke $r6.<java.util.Map: boolean containsKey(java.lang.Object)>(r4);

        if $z0 == 0 goto label1;

        $r16 = r0.<safetyChecker.Z3ScriptHandler: java.util.Map sortId>;

        $r17 = interfaceinvoke $r16.<java.util.Map: java.lang.Object get(java.lang.Object)>(r4);

        r19 = (safetyChecker.NewSort) $r17;

        $r18 = virtualinvoke r19.<safetyChecker.NewSort: com.microsoft.z3.Expr getNewObject()>();

        return $r18;

     label1:
        $r7 = r0.<safetyChecker.Z3ScriptHandler: java.util.Map newSortMap>;

        $z1 = interfaceinvoke $r7.<java.util.Map: boolean containsKey(java.lang.Object)>(r4);

        if $z1 == 0 goto label2;

        $r14 = r0.<safetyChecker.Z3ScriptHandler: java.util.Map newSortMap>;

        $r15 = interfaceinvoke $r14.<java.util.Map: java.lang.Object get(java.lang.Object)>(r4);

        r20 = (com.microsoft.z3.Sort) $r15;

(0)     goto label3;

     label2:
        $r8 = r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        r20_1 = virtualinvoke $r8.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.UninterpretedSort mkUninterpretedSort(java.lang.String)>(r4);

        $r9 = r0.<safetyChecker.Z3ScriptHandler: java.util.Map newSortMap>;

(1)     interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, r20_1);

     label3:
        r20_2 = Phi(r20 #0, r20_1 #1);

        r21 = new safetyChecker.NewSort;

        $r11 = r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        r22 = (com.microsoft.z3.Sort) r20_2;

        specialinvoke r21.<safetyChecker.NewSort: void <init>(com.microsoft.z3.Sort,com.microsoft.z3.InterpolationContext)>(r22, $r11);

        r5 = r21;

        $r12 = r0.<safetyChecker.Z3ScriptHandler: java.util.Map sortId>;

        interfaceinvoke $r12.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, r5);

        $r13 = virtualinvoke r5.<safetyChecker.NewSort: com.microsoft.z3.Expr getNewObject()>();

        return $r13;
    }

    private com.microsoft.z3.Expr convertNewMultiArrayExpr(soot.jimple.NewMultiArrayExpr, safetyChecker.Edge)
    {
        safetyChecker.Z3ScriptHandler r0;
        soot.jimple.NewMultiArrayExpr r1;
        safetyChecker.Edge r2;
        java.lang.RuntimeException $r3;

        r0 := @this: safetyChecker.Z3ScriptHandler;

        r1 := @parameter0: soot.jimple.NewMultiArrayExpr;

        r2 := @parameter1: safetyChecker.Edge;

        $r3 = new java.lang.RuntimeException;

        specialinvoke $r3.<java.lang.RuntimeException: void <init>()>();

        throw $r3;
    }

    private java.lang.String getArrayName(soot.Value)
    {
        safetyChecker.Z3ScriptHandler r0;
        soot.Value r1;
        soot.Type r2;
        soot.jimple.InstanceFieldRef r3;
        soot.SootField r4;
        boolean $z0, $z1;
        java.lang.RuntimeException $r5;
        java.lang.String $r6, $r7;

        r0 := @this: safetyChecker.Z3ScriptHandler;

        r1 := @parameter0: soot.Value;

        r2 = interfaceinvoke r1.<soot.Value: soot.Type getType()>();

        $z0 = r1 instanceof soot.Local;

        if $z0 == 0 goto label1;

        $r7 = virtualinvoke r2.<soot.Type: java.lang.String toString()>();

        return $r7;

     label1:
        $z1 = r1 instanceof soot.jimple.InstanceFieldRef;

        if $z1 == 0 goto label2;

        r3 = (soot.jimple.InstanceFieldRef) r1;

        r4 = interfaceinvoke r3.<soot.jimple.InstanceFieldRef: soot.SootField getField()>();

        $r6 = virtualinvoke r4.<soot.SootField: java.lang.String toString()>();

        return $r6;

     label2:
        $r5 = new java.lang.RuntimeException;

        specialinvoke $r5.<java.lang.RuntimeException: void <init>()>();

        throw $r5;
    }

    private java.lang.String getNameSuffix(safetyChecker.Edge)
    {
        safetyChecker.Z3ScriptHandler r0;
        safetyChecker.Edge r1;
        java.lang.StringBuilder $r2, $r5, $r6, $r8;
        safetyChecker.ProgramTree $r3;
        java.lang.String $r4, $r9;
        safetyChecker.Vertex $r7;
        int $i0;

        r0 := @this: safetyChecker.Z3ScriptHandler;

        r1 := @parameter0: safetyChecker.Edge;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>("_");

        $r3 = virtualinvoke r1.<safetyChecker.Edge: safetyChecker.ProgramTree getProgramTree()>();

        $r4 = virtualinvoke $r3.<safetyChecker.ProgramTree: java.lang.String getProgramDefinition()>();

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_");

        $r7 = virtualinvoke r1.<safetyChecker.Edge: safetyChecker.Vertex getSource()>();

        $i0 = virtualinvoke $r7.<safetyChecker.Vertex: int getDistance()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;
    }

    protected java.lang.String getNameSuffix()
    {
        safetyChecker.Z3ScriptHandler r0;
        java.lang.StringBuilder $r1, $r5, $r6, $r9;
        safetyChecker.Edge $r2, $r7;
        safetyChecker.ProgramTree $r3;
        java.lang.String $r4, $r10;
        safetyChecker.Vertex $r8;
        int $i0;

        r0 := @this: safetyChecker.Z3ScriptHandler;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>("_");

        $r2 = r0.<safetyChecker.Z3ScriptHandler: safetyChecker.Edge currentEdge>;

        $r3 = virtualinvoke $r2.<safetyChecker.Edge: safetyChecker.ProgramTree getProgramTree()>();

        $r4 = virtualinvoke $r3.<safetyChecker.ProgramTree: java.lang.String getProgramDefinition()>();

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_");

        $r7 = r0.<safetyChecker.Z3ScriptHandler: safetyChecker.Edge currentEdge>;

        $r8 = virtualinvoke $r7.<safetyChecker.Edge: safetyChecker.Vertex getSource()>();

        $i0 = virtualinvoke $r8.<safetyChecker.Vertex: int getDistance()>();

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r10;
    }

    protected java.lang.String getArrayNameSuffix()
    {
        safetyChecker.Z3ScriptHandler r0;
        java.lang.StringBuilder $r1, $r5;
        safetyChecker.Edge $r2;
        safetyChecker.ProgramTree $r3;
        java.lang.String $r4, $r6;

        r0 := @this: safetyChecker.Z3ScriptHandler;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>("_");

        $r2 = r0.<safetyChecker.Z3ScriptHandler: safetyChecker.Edge currentEdge>;

        $r3 = virtualinvoke $r2.<safetyChecker.Edge: safetyChecker.ProgramTree getProgramTree()>();

        $r4 = virtualinvoke $r3.<safetyChecker.ProgramTree: java.lang.String getProgramDefinition()>();

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    protected java.lang.String getArraySortSuffix()
    {
        safetyChecker.Z3ScriptHandler r0;

        r0 := @this: safetyChecker.Z3ScriptHandler;

        return "_arraySort";
    }

    protected int getRealArraySize(java.lang.String)
    {
        safetyChecker.Z3ScriptHandler r0;
        java.lang.String r1;
        java.util.Map $r2, $r3, $r6, $r9;
        boolean $z0;
        java.lang.Integer $r4, $r8, $r10;
        java.lang.Object $r7;
        int i0, i1;
        byte b2;

        r0 := @this: safetyChecker.Z3ScriptHandler;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<safetyChecker.Z3ScriptHandler: java.util.Map realArraySize>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r6 = r0.<safetyChecker.Z3ScriptHandler: java.util.Map realArraySize>;

        $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r8 = (java.lang.Integer) $r7;

        i0 = virtualinvoke $r8.<java.lang.Integer: int intValue()>();

        $r9 = r0.<safetyChecker.Z3ScriptHandler: java.util.Map realArraySize>;

        i1 = i0 + 1;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r10);

        return i1;

     label1:
        b2 = 1;

        $r3 = r0.<safetyChecker.Z3ScriptHandler: java.util.Map realArraySize>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(b2);

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r4);

        return b2;
    }

    private com.microsoft.z3.Expr convertBoolExpr(soot.jimple.BinopExpr, safetyChecker.Edge, int)
    {
        safetyChecker.Z3ScriptHandler r0;
        soot.jimple.BinopExpr r1;
        safetyChecker.Edge r2;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16;
        com.microsoft.z3.BoolExpr r3, $r20, $r26, $r32, $r38, $r43, $r47;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;
        java.lang.Object[] $r4;
        java.lang.StringBuilder $r5, $r6;
        java.lang.String $r7;
        safetyChecker.Vertex $r8, $r9, $r15, $r16, $r21, $r22, $r27, $r28, $r33, $r34, $r39, $r40, $r44, $r45, $r62, $r63;
        com.microsoft.z3.ArithExpr[] $r10, $r52, $r57, $r64;
        com.microsoft.z3.ArithExpr $r11, $r12, $r14, $r17, $r18, $r23, $r24, $r29, $r30, $r35, $r36, $r48, $r49, $r51, $r53, $r54, $r56, $r58, $r59, $r61, $r65, $r66, $r68;
        com.microsoft.z3.InterpolationContext $r13, $r19, $r25, $r31, $r37, $r41, $r42, $r46, $r50, $r55, $r60, $r67;
        soot.jimple.AddExpr r69;
        soot.Value r70, r71, r75, r76, r80, r81, r85, r86, r90, r91, r95, r96, r100, r101, r105, r106, r110, r111, r115, r116, r120, r121;
        com.microsoft.z3.Expr r72, r73, r77, r78, r82, r83, r87, r88, r92, r93, r97, r98, r102, r103, r107, r108, r112, r113, r117, r118, r122, r123;
        soot.jimple.SubExpr r74;
        soot.jimple.MulExpr r79;
        soot.jimple.DivExpr r84;
        soot.jimple.EqExpr r89;
        soot.jimple.NeExpr r94;
        soot.jimple.GtExpr r99;
        soot.jimple.GeExpr r104;
        soot.jimple.LtExpr r109;
        soot.jimple.LeExpr r114;
        soot.jimple.CmpExpr r119;

        r0 := @this: safetyChecker.Z3ScriptHandler;

        r1 := @parameter0: soot.jimple.BinopExpr;

        r2 := @parameter1: safetyChecker.Edge;

        i0 := @parameter2: int;

        $z0 = r1 instanceof soot.jimple.AddExpr;

        if $z0 == 0 goto label01;

        r69 = (soot.jimple.AddExpr) r1;

        r70 = interfaceinvoke r69.<soot.jimple.AddExpr: soot.Value getOp1()>();

        r71 = interfaceinvoke r69.<soot.jimple.AddExpr: soot.Value getOp2()>();

        $r62 = virtualinvoke r2.<safetyChecker.Edge: safetyChecker.Vertex getSource()>();

        $i15 = virtualinvoke $r62.<safetyChecker.Vertex: int getDistance()>();

        r72 = virtualinvoke r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.Expr convertValue(soot.Value,boolean,safetyChecker.Edge,int)>(r70, 0, r2, $i15);

        $r63 = virtualinvoke r2.<safetyChecker.Edge: safetyChecker.Vertex getSource()>();

        $i16 = virtualinvoke $r63.<safetyChecker.Vertex: int getDistance()>();

        r73 = virtualinvoke r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.Expr convertValue(soot.Value,boolean,safetyChecker.Edge,int)>(r71, 0, r2, $i16);

        $r67 = r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        $r64 = newarray (com.microsoft.z3.ArithExpr)[2];

        $r65 = (com.microsoft.z3.ArithExpr) r72;

        $r64[0] = $r65;

        $r66 = (com.microsoft.z3.ArithExpr) r73;

        $r64[1] = $r66;

        $r68 = virtualinvoke $r67.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.ArithExpr mkAdd(com.microsoft.z3.ArithExpr[])>($r64);

        return $r68;

     label01:
        $z1 = r1 instanceof soot.jimple.SubExpr;

        if $z1 == 0 goto label02;

        r74 = (soot.jimple.SubExpr) r1;

        r75 = interfaceinvoke r74.<soot.jimple.SubExpr: soot.Value getOp1()>();

        r76 = interfaceinvoke r74.<soot.jimple.SubExpr: soot.Value getOp2()>();

        r77 = virtualinvoke r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.Expr convertValue(soot.Value,boolean,safetyChecker.Edge,int)>(r75, 0, r2, i0);

        r78 = virtualinvoke r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.Expr convertValue(soot.Value,boolean,safetyChecker.Edge,int)>(r76, 0, r2, i0);

        $r60 = r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        $r57 = newarray (com.microsoft.z3.ArithExpr)[2];

        $r58 = (com.microsoft.z3.ArithExpr) r77;

        $r57[0] = $r58;

        $r59 = (com.microsoft.z3.ArithExpr) r78;

        $r57[1] = $r59;

        $r61 = virtualinvoke $r60.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.ArithExpr mkSub(com.microsoft.z3.ArithExpr[])>($r57);

        return $r61;

     label02:
        $z2 = r1 instanceof soot.jimple.MulExpr;

        if $z2 == 0 goto label03;

        r79 = (soot.jimple.MulExpr) r1;

        r80 = interfaceinvoke r79.<soot.jimple.MulExpr: soot.Value getOp1()>();

        r81 = interfaceinvoke r79.<soot.jimple.MulExpr: soot.Value getOp2()>();

        r82 = virtualinvoke r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.Expr convertValue(soot.Value,boolean,safetyChecker.Edge,int)>(r80, 0, r2, i0);

        r83 = virtualinvoke r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.Expr convertValue(soot.Value,boolean,safetyChecker.Edge,int)>(r81, 0, r2, i0);

        $r55 = r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        $r52 = newarray (com.microsoft.z3.ArithExpr)[2];

        $r53 = (com.microsoft.z3.ArithExpr) r82;

        $r52[0] = $r53;

        $r54 = (com.microsoft.z3.ArithExpr) r83;

        $r52[1] = $r54;

        $r56 = virtualinvoke $r55.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.ArithExpr mkMul(com.microsoft.z3.ArithExpr[])>($r52);

        return $r56;

     label03:
        $z3 = r1 instanceof soot.jimple.DivExpr;

        if $z3 == 0 goto label04;

        r84 = (soot.jimple.DivExpr) r1;

        r85 = interfaceinvoke r84.<soot.jimple.DivExpr: soot.Value getOp1()>();

        r86 = interfaceinvoke r84.<soot.jimple.DivExpr: soot.Value getOp2()>();

        r87 = virtualinvoke r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.Expr convertValue(soot.Value,boolean,safetyChecker.Edge,int)>(r85, 0, r2, i0);

        r88 = virtualinvoke r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.Expr convertValue(soot.Value,boolean,safetyChecker.Edge,int)>(r86, 0, r2, i0);

        $r50 = r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        $r49 = (com.microsoft.z3.ArithExpr) r87;

        $r48 = (com.microsoft.z3.ArithExpr) r88;

        $r51 = virtualinvoke $r50.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.ArithExpr mkDiv(com.microsoft.z3.ArithExpr,com.microsoft.z3.ArithExpr)>($r49, $r48);

        return $r51;

     label04:
        $z4 = r1 instanceof soot.jimple.EqExpr;

        if $z4 == 0 goto label05;

        r89 = (soot.jimple.EqExpr) r1;

        r90 = interfaceinvoke r89.<soot.jimple.EqExpr: soot.Value getOp1()>();

        r91 = interfaceinvoke r89.<soot.jimple.EqExpr: soot.Value getOp2()>();

        $r44 = virtualinvoke r2.<safetyChecker.Edge: safetyChecker.Vertex getSource()>();

        $i13 = virtualinvoke $r44.<safetyChecker.Vertex: int getDistance()>();

        r92 = virtualinvoke r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.Expr convertValue(soot.Value,boolean,safetyChecker.Edge,int)>(r90, 0, r2, $i13);

        $r45 = virtualinvoke r2.<safetyChecker.Edge: safetyChecker.Vertex getSource()>();

        $i14 = virtualinvoke $r45.<safetyChecker.Vertex: int getDistance()>();

        r93 = virtualinvoke r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.Expr convertValue(soot.Value,boolean,safetyChecker.Edge,int)>(r91, 0, r2, $i14);

        $r46 = r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        $r47 = virtualinvoke $r46.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.BoolExpr mkEq(com.microsoft.z3.Expr,com.microsoft.z3.Expr)>(r92, r93);

        return $r47;

     label05:
        $z5 = r1 instanceof soot.jimple.NeExpr;

        if $z5 == 0 goto label06;

        r94 = (soot.jimple.NeExpr) r1;

        r95 = interfaceinvoke r94.<soot.jimple.NeExpr: soot.Value getOp1()>();

        r96 = interfaceinvoke r94.<soot.jimple.NeExpr: soot.Value getOp2()>();

        $r39 = virtualinvoke r2.<safetyChecker.Edge: safetyChecker.Vertex getSource()>();

        $i11 = virtualinvoke $r39.<safetyChecker.Vertex: int getDistance()>();

        r97 = virtualinvoke r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.Expr convertValue(soot.Value,boolean,safetyChecker.Edge,int)>(r95, 0, r2, $i11);

        $r40 = virtualinvoke r2.<safetyChecker.Edge: safetyChecker.Vertex getSource()>();

        $i12 = virtualinvoke $r40.<safetyChecker.Vertex: int getDistance()>();

        r98 = virtualinvoke r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.Expr convertValue(soot.Value,boolean,safetyChecker.Edge,int)>(r96, 0, r2, $i12);

        $r41 = r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        r3 = virtualinvoke $r41.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.BoolExpr mkEq(com.microsoft.z3.Expr,com.microsoft.z3.Expr)>(r97, r98);

        $r42 = r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        $r43 = virtualinvoke $r42.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.BoolExpr mkNot(com.microsoft.z3.BoolExpr)>(r3);

        return $r43;

     label06:
        $z6 = r1 instanceof soot.jimple.GtExpr;

        if $z6 == 0 goto label07;

        r99 = (soot.jimple.GtExpr) r1;

        r100 = interfaceinvoke r99.<soot.jimple.GtExpr: soot.Value getOp1()>();

        r101 = interfaceinvoke r99.<soot.jimple.GtExpr: soot.Value getOp2()>();

        $r33 = virtualinvoke r2.<safetyChecker.Edge: safetyChecker.Vertex getSource()>();

        $i9 = virtualinvoke $r33.<safetyChecker.Vertex: int getDistance()>();

        r102 = virtualinvoke r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.Expr convertValue(soot.Value,boolean,safetyChecker.Edge,int)>(r100, 0, r2, $i9);

        $r34 = virtualinvoke r2.<safetyChecker.Edge: safetyChecker.Vertex getSource()>();

        $i10 = virtualinvoke $r34.<safetyChecker.Vertex: int getDistance()>();

        r103 = virtualinvoke r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.Expr convertValue(soot.Value,boolean,safetyChecker.Edge,int)>(r101, 0, r2, $i10);

        $r37 = r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        $r36 = (com.microsoft.z3.ArithExpr) r102;

        $r35 = (com.microsoft.z3.ArithExpr) r103;

        $r38 = virtualinvoke $r37.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.BoolExpr mkGt(com.microsoft.z3.ArithExpr,com.microsoft.z3.ArithExpr)>($r36, $r35);

        return $r38;

     label07:
        $z7 = r1 instanceof soot.jimple.GeExpr;

        if $z7 == 0 goto label08;

        r104 = (soot.jimple.GeExpr) r1;

        r105 = interfaceinvoke r104.<soot.jimple.GeExpr: soot.Value getOp1()>();

        r106 = interfaceinvoke r104.<soot.jimple.GeExpr: soot.Value getOp2()>();

        $r27 = virtualinvoke r2.<safetyChecker.Edge: safetyChecker.Vertex getSource()>();

        $i7 = virtualinvoke $r27.<safetyChecker.Vertex: int getDistance()>();

        r107 = virtualinvoke r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.Expr convertValue(soot.Value,boolean,safetyChecker.Edge,int)>(r105, 0, r2, $i7);

        $r28 = virtualinvoke r2.<safetyChecker.Edge: safetyChecker.Vertex getSource()>();

        $i8 = virtualinvoke $r28.<safetyChecker.Vertex: int getDistance()>();

        r108 = virtualinvoke r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.Expr convertValue(soot.Value,boolean,safetyChecker.Edge,int)>(r106, 0, r2, $i8);

        $r31 = r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        $r30 = (com.microsoft.z3.ArithExpr) r107;

        $r29 = (com.microsoft.z3.ArithExpr) r108;

        $r32 = virtualinvoke $r31.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.BoolExpr mkGe(com.microsoft.z3.ArithExpr,com.microsoft.z3.ArithExpr)>($r30, $r29);

        return $r32;

     label08:
        $z8 = r1 instanceof soot.jimple.LtExpr;

        if $z8 == 0 goto label09;

        r109 = (soot.jimple.LtExpr) r1;

        r110 = interfaceinvoke r109.<soot.jimple.LtExpr: soot.Value getOp1()>();

        r111 = interfaceinvoke r109.<soot.jimple.LtExpr: soot.Value getOp2()>();

        $r21 = virtualinvoke r2.<safetyChecker.Edge: safetyChecker.Vertex getSource()>();

        $i5 = virtualinvoke $r21.<safetyChecker.Vertex: int getDistance()>();

        r112 = virtualinvoke r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.Expr convertValue(soot.Value,boolean,safetyChecker.Edge,int)>(r110, 0, r2, $i5);

        $r22 = virtualinvoke r2.<safetyChecker.Edge: safetyChecker.Vertex getSource()>();

        $i6 = virtualinvoke $r22.<safetyChecker.Vertex: int getDistance()>();

        r113 = virtualinvoke r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.Expr convertValue(soot.Value,boolean,safetyChecker.Edge,int)>(r111, 0, r2, $i6);

        $r25 = r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        $r24 = (com.microsoft.z3.ArithExpr) r112;

        $r23 = (com.microsoft.z3.ArithExpr) r113;

        $r26 = virtualinvoke $r25.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.BoolExpr mkLt(com.microsoft.z3.ArithExpr,com.microsoft.z3.ArithExpr)>($r24, $r23);

        return $r26;

     label09:
        $z9 = r1 instanceof soot.jimple.LeExpr;

        if $z9 == 0 goto label10;

        r114 = (soot.jimple.LeExpr) r1;

        r115 = interfaceinvoke r114.<soot.jimple.LeExpr: soot.Value getOp1()>();

        r116 = interfaceinvoke r114.<soot.jimple.LeExpr: soot.Value getOp2()>();

        $r15 = virtualinvoke r2.<safetyChecker.Edge: safetyChecker.Vertex getSource()>();

        $i3 = virtualinvoke $r15.<safetyChecker.Vertex: int getDistance()>();

        r117 = virtualinvoke r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.Expr convertValue(soot.Value,boolean,safetyChecker.Edge,int)>(r115, 0, r2, $i3);

        $r16 = virtualinvoke r2.<safetyChecker.Edge: safetyChecker.Vertex getSource()>();

        $i4 = virtualinvoke $r16.<safetyChecker.Vertex: int getDistance()>();

        r118 = virtualinvoke r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.Expr convertValue(soot.Value,boolean,safetyChecker.Edge,int)>(r116, 0, r2, $i4);

        $r19 = r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        $r18 = (com.microsoft.z3.ArithExpr) r117;

        $r17 = (com.microsoft.z3.ArithExpr) r118;

        $r20 = virtualinvoke $r19.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.BoolExpr mkLe(com.microsoft.z3.ArithExpr,com.microsoft.z3.ArithExpr)>($r18, $r17);

        return $r20;

     label10:
        $z10 = r1 instanceof soot.jimple.CmpExpr;

        if $z10 == 0 goto label11;

        r119 = (soot.jimple.CmpExpr) r1;

        r120 = interfaceinvoke r119.<soot.jimple.CmpExpr: soot.Value getOp1()>();

        r121 = interfaceinvoke r119.<soot.jimple.CmpExpr: soot.Value getOp2()>();

        $r8 = virtualinvoke r2.<safetyChecker.Edge: safetyChecker.Vertex getSource()>();

        $i1 = virtualinvoke $r8.<safetyChecker.Vertex: int getDistance()>();

        r122 = virtualinvoke r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.Expr convertValue(soot.Value,boolean,safetyChecker.Edge,int)>(r120, 0, r2, $i1);

        $r9 = virtualinvoke r2.<safetyChecker.Edge: safetyChecker.Vertex getSource()>();

        $i2 = virtualinvoke $r9.<safetyChecker.Vertex: int getDistance()>();

        r123 = virtualinvoke r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.Expr convertValue(soot.Value,boolean,safetyChecker.Edge,int)>(r121, 0, r2, $i2);

        $r13 = r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        $r10 = newarray (com.microsoft.z3.ArithExpr)[2];

        $r11 = (com.microsoft.z3.ArithExpr) r122;

        $r10[0] = $r11;

        $r12 = (com.microsoft.z3.ArithExpr) r123;

        $r10[1] = $r12;

        $r14 = virtualinvoke $r13.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.ArithExpr mkSub(com.microsoft.z3.ArithExpr[])>($r10);

        return $r14;

     label11:
        $r4 = newarray (java.lang.Object)[1];

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("Z3ScriptHandler.convertBoolExpr returns null for ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r4[0] = $r7;

        staticinvoke <safetyChecker.LogUtils: void fatalln(java.lang.Object[])>($r4);

        return null;
    }

    public com.microsoft.z3.Expr z3ObjectField(soot.jimple.InstanceFieldRef, boolean, safetyChecker.Edge)
    {
        safetyChecker.Z3ScriptHandler r0;
        soot.jimple.InstanceFieldRef r1;
        boolean z0, $z1;
        safetyChecker.Edge r2;
        soot.Value r3;
        soot.SootField r4;
        com.microsoft.z3.Expr r5, r7, r25;
        java.lang.String r6, r23;
        java.lang.Object[] $r8;
        safetyChecker.Vertex $r9;
        int $i0;
        java.util.Map $r10, $r11, $r20;
        java.lang.Object $r12;
        com.microsoft.z3.InterpolationContext $r13, $r14, $r15, $r17, $r19;
        com.microsoft.z3.IntSort $r16, $r18;
        com.microsoft.z3.ArraySort r22;
        com.microsoft.z3.ArrayExpr r24;

        r0 := @this: safetyChecker.Z3ScriptHandler;

        r1 := @parameter0: soot.jimple.InstanceFieldRef;

        z0 := @parameter1: boolean;

        r2 := @parameter2: safetyChecker.Edge;

        $r8 = newarray (java.lang.Object)[1];

        $r8[0] = "z3ObjectField";

        staticinvoke <safetyChecker.LogUtils: void debugln(java.lang.Object[])>($r8);

        r3 = interfaceinvoke r1.<soot.jimple.InstanceFieldRef: soot.Value getBase()>();

        r4 = interfaceinvoke r1.<soot.jimple.InstanceFieldRef: soot.SootField getField()>();

        $r9 = virtualinvoke r2.<safetyChecker.Edge: safetyChecker.Vertex getSource()>();

        $i0 = virtualinvoke $r9.<safetyChecker.Vertex: int getDistance()>();

        r5 = virtualinvoke r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.Expr convertValue(soot.Value,boolean,safetyChecker.Edge,int)>(r3, 0, r2, $i0);

        r6 = virtualinvoke r4.<soot.SootField: java.lang.String toString()>();

        $r10 = r0.<safetyChecker.Z3ScriptHandler: java.util.Map global>;

        $z1 = interfaceinvoke $r10.<java.util.Map: boolean containsKey(java.lang.Object)>(r6);

        if $z1 != 0 goto label1;

        $r15 = r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        $r14 = r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        $r16 = virtualinvoke $r14.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.IntSort getIntSort()>();

        $r17 = r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        $r18 = virtualinvoke $r17.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.IntSort getIntSort()>();

        r22 = virtualinvoke $r15.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.ArraySort mkArraySort(com.microsoft.z3.Sort,com.microsoft.z3.Sort)>($r16, $r18);

        r23 = virtualinvoke r0.<safetyChecker.Z3ScriptHandler: java.lang.String getGlobalName(java.lang.String)>(r6);

        $r19 = r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        r7 = virtualinvoke $r19.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.Expr mkConst(java.lang.String,com.microsoft.z3.Sort)>(r23, r22);

        $r20 = r0.<safetyChecker.Z3ScriptHandler: java.util.Map global>;

        interfaceinvoke $r20.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r6, r7);

     label1:
        if z0 == 0 goto label2;

        return r5;

     label2:
        $r11 = r0.<safetyChecker.Z3ScriptHandler: java.util.Map global>;

        $r12 = interfaceinvoke $r11.<java.util.Map: java.lang.Object get(java.lang.Object)>(r6);

        r24 = (com.microsoft.z3.ArrayExpr) $r12;

        $r13 = r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        r25 = virtualinvoke $r13.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.Expr mkSelect(com.microsoft.z3.ArrayExpr,com.microsoft.z3.Expr)>(r24, r5);

        return r25;
    }

    public com.microsoft.z3.InterpolationContext getIctx()
    {
        safetyChecker.Z3ScriptHandler r0;
        com.microsoft.z3.InterpolationContext $r1;

        r0 := @this: safetyChecker.Z3ScriptHandler;

        $r1 = r0.<safetyChecker.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        return $r1;
    }

    public java.util.Map getGlobal()
    {
        safetyChecker.Z3ScriptHandler r0;
        java.util.Map $r1;

        r0 := @this: safetyChecker.Z3ScriptHandler;

        $r1 = r0.<safetyChecker.Z3ScriptHandler: java.util.Map global>;

        return $r1;
    }

    public java.util.Map getSubstitute()
    {
        safetyChecker.Z3ScriptHandler r0;
        java.util.Map $r1;

        r0 := @this: safetyChecker.Z3ScriptHandler;

        $r1 = r0.<safetyChecker.Z3ScriptHandler: java.util.Map substitute>;

        return $r1;
    }

    public java.util.Map getSubstituteSort()
    {
        safetyChecker.Z3ScriptHandler r0;
        java.util.Map $r1;

        r0 := @this: safetyChecker.Z3ScriptHandler;

        $r1 = r0.<safetyChecker.Z3ScriptHandler: java.util.Map substituteSort>;

        return $r1;
    }

    public java.util.Map getArrayNameMap()
    {
        safetyChecker.Z3ScriptHandler r0;
        java.util.Map $r1;

        r0 := @this: safetyChecker.Z3ScriptHandler;

        $r1 = r0.<safetyChecker.Z3ScriptHandler: java.util.Map arrayNameMap>;

        return $r1;
    }

    public java.util.Map getLocalMap()
    {
        safetyChecker.Z3ScriptHandler r0;
        java.util.Map $r1;

        r0 := @this: safetyChecker.Z3ScriptHandler;

        $r1 = r0.<safetyChecker.Z3ScriptHandler: java.util.Map localMap>;

        return $r1;
    }

    public java.util.Map getSortId()
    {
        safetyChecker.Z3ScriptHandler r0;
        java.util.Map $r1;

        r0 := @this: safetyChecker.Z3ScriptHandler;

        $r1 = r0.<safetyChecker.Z3ScriptHandler: java.util.Map sortId>;

        return $r1;
    }

    public java.util.Map getNewSortMap()
    {
        safetyChecker.Z3ScriptHandler r0;
        java.util.Map $r1;

        r0 := @this: safetyChecker.Z3ScriptHandler;

        $r1 = r0.<safetyChecker.Z3ScriptHandler: java.util.Map newSortMap>;

        return $r1;
    }

    public java.util.Map getMaxArraySize()
    {
        safetyChecker.Z3ScriptHandler r0;
        java.util.Map $r1;

        r0 := @this: safetyChecker.Z3ScriptHandler;

        $r1 = r0.<safetyChecker.Z3ScriptHandler: java.util.Map maxArraySize>;

        return $r1;
    }
}
