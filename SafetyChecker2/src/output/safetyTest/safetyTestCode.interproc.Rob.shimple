public class safetyTestCode.interproc.Rob extends java.lang.Object
{

    public void <init>()
    {
        safetyTestCode.interproc.Rob r0;

        r0 := @this: safetyTestCode.interproc.Rob;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public int rob(int[])
    {
        safetyTestCode.interproc.Rob r0;
        int[] r1;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;

        r0 := @this: safetyTestCode.interproc.Rob;

        r1 := @parameter0: int[];

        if r1 == null goto label1;

        $i1 = lengthof r1;

        if $i1 != 0 goto label2;

     label1:
        return 0;

     label2:
        i0 = lengthof r1;

        if i0 != 1 goto label3;

        $i7 = r1[0];

        return $i7;

     label3:
        $i2 = i0 - 2;

        $i3 = specialinvoke r0.<safetyTestCode.interproc.Rob: int robInt(int[],int,int)>(r1, 0, $i2);

        $i4 = i0 - 1;

        $i5 = specialinvoke r0.<safetyTestCode.interproc.Rob: int robInt(int[],int,int)>(r1, 1, $i4);

        $i6 = staticinvoke <java.lang.Math: int max(int,int)>($i3, $i5);

        return $i6;
    }

    private int robInt(int[], int, int)
    {
        safetyTestCode.interproc.Rob r0;
        int[] r1;
        int i0, i1, i2, $i3, $i4, i5, i6, i7, i6_1, i5_1, i7_1, i5_2, i6_2, i7_2;

        r0 := @this: safetyTestCode.interproc.Rob;

        r1 := @parameter0: int[];

        i0 := @parameter1: int;

        i1 := @parameter2: int;

        i5 = 0;

        i6 = 0;

        i7 = i0;

(0)     goto label2;

     label1:
        $i3 = r1[i7_1];

        $i4 = i5_1 + $i3;

        i2 = staticinvoke <java.lang.Math: int max(int,int)>($i4, i6_1);

        i5_2 = i6_1;

        i6_2 = i2;

(1)     i7_2 = i7_1 + 1;

     label2:
        i6_1 = Phi(i6 #0, i6_2 #1);

        i5_1 = Phi(i5 #0, i5_2 #1);

        i7_1 = Phi(i7 #0, i7_2 #1);

        if i7_1 <= i1 goto label1;

        return i6_1;
    }
}
