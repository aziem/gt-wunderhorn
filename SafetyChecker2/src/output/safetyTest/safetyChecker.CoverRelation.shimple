public class safetyChecker.CoverRelation extends java.lang.Object
{
    private com.microsoft.z3.InterpolationContext ictx;
    private java.util.Map coveringMap;
    private java.util.Map coveredByMap;
    private java.util.Set ancestorCoveredSet;
    private java.util.Map unitVertexMap;
    private safetyChecker.ProgramTree programTree;
    int counter;

    public void <init>(com.microsoft.z3.InterpolationContext, safetyChecker.ProgramTree)
    {
        safetyChecker.CoverRelation r0;
        com.microsoft.z3.InterpolationContext r1;
        safetyChecker.ProgramTree r2;
        java.util.HashMap $r3, $r4, $r6;
        java.util.HashSet $r5;

        r0 := @this: safetyChecker.CoverRelation;

        r1 := @parameter0: com.microsoft.z3.InterpolationContext;

        r2 := @parameter1: safetyChecker.ProgramTree;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<safetyChecker.CoverRelation: int counter> = 0;

        r0.<safetyChecker.CoverRelation: com.microsoft.z3.InterpolationContext ictx> = r1;

        r0.<safetyChecker.CoverRelation: safetyChecker.ProgramTree programTree> = r2;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r0.<safetyChecker.CoverRelation: java.util.Map coveringMap> = $r3;

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        r0.<safetyChecker.CoverRelation: java.util.Map coveredByMap> = $r4;

        $r5 = new java.util.HashSet;

        specialinvoke $r5.<java.util.HashSet: void <init>()>();

        r0.<safetyChecker.CoverRelation: java.util.Set ancestorCoveredSet> = $r5;

        $r6 = new java.util.HashMap;

        specialinvoke $r6.<java.util.HashMap: void <init>()>();

        r0.<safetyChecker.CoverRelation: java.util.Map unitVertexMap> = $r6;

        return;
    }

    public void updateUnitVertexMap(safetyChecker.Vertex)
    {
        safetyChecker.CoverRelation r0;
        safetyChecker.Vertex r1, $r12, $r19;
        safetyChecker.Edge r2;
        soot.Unit r3, $r14, $r17;
        java.lang.Object[] $r4;
        java.lang.StringBuilder $r5, $r6, $r7, $r8;
        java.lang.String $r9;
        java.util.Map $r10, $r13, $r16;
        boolean $z0;
        java.util.LinkedList $r11, r20, r21;
        java.lang.Object $r18;

        r0 := @this: safetyChecker.CoverRelation;

        r1 := @parameter0: safetyChecker.Vertex;

        r2 = virtualinvoke r1.<safetyChecker.Vertex: safetyChecker.Edge getOutgoingEdge()>();

        r3 = virtualinvoke r2.<safetyChecker.Edge: soot.Unit getUnit()>();

        $r4 = newarray (java.lang.Object)[1];

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("add ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("--");

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        $r4[0] = $r9;

        staticinvoke <safetyChecker.LogUtils: void debugln(java.lang.Object[])>($r4);

        $r10 = r0.<safetyChecker.CoverRelation: java.util.Map unitVertexMap>;

        $z0 = interfaceinvoke $r10.<java.util.Map: boolean containsKey(java.lang.Object)>(r3);

        if $z0 == 0 goto label1;

        $r16 = r0.<safetyChecker.CoverRelation: java.util.Map unitVertexMap>;

        $r17 = virtualinvoke r2.<safetyChecker.Edge: soot.Unit getUnit()>();

        $r18 = interfaceinvoke $r16.<java.util.Map: java.lang.Object get(java.lang.Object)>($r17);

        r20 = (java.util.LinkedList) $r18;

        $r19 = virtualinvoke r2.<safetyChecker.Edge: safetyChecker.Vertex getSource()>();

        virtualinvoke r20.<java.util.LinkedList: boolean add(java.lang.Object)>($r19);

        goto label2;

     label1:
        $r11 = new java.util.LinkedList;

        specialinvoke $r11.<java.util.LinkedList: void <init>()>();

        r21 = $r11;

        $r12 = virtualinvoke r2.<safetyChecker.Edge: safetyChecker.Vertex getSource()>();

        virtualinvoke r21.<java.util.LinkedList: boolean add(java.lang.Object)>($r12);

        $r13 = r0.<safetyChecker.CoverRelation: java.util.Map unitVertexMap>;

        $r14 = virtualinvoke r2.<safetyChecker.Edge: soot.Unit getUnit()>();

        interfaceinvoke $r13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r14, r21);

     label2:
        return;
    }

    public void updateCover()
    {
        safetyChecker.CoverRelation r0;

        r0 := @this: safetyChecker.CoverRelation;

        specialinvoke r0.<safetyChecker.CoverRelation: void cover()>();

        return;
    }

    private void cover()
    {
        safetyChecker.CoverRelation r0;
        java.util.Map$Entry r1;
        java.util.Iterator r2;
        java.util.LinkedList r3;
        safetyChecker.Vertex r4, r5, $r17, $r24, $r25;
        boolean z0, z1, $z2, $z3, $z4, $z5;
        java.lang.Object[] $r6, $r11, $r21, $r32, $r36, $r37, $r44, $r51;
        java.util.Map $r7;
        java.util.Set $r8;
        java.lang.Object $r9, $r10, $r13, $r16, $r23, $r28, $r30;
        int $i0, i1, i2, i1_1, i1_2, i2_1, i2_2, i2_3, i2_4, i2_5, i1_3;
        java.lang.StringBuilder $r12, $r14, $r15, $r19, $r22, $r26, $r33, $r34, $r38, $r39, $r40, $r42, $r45, $r46, $r47, $r49, $r52, $r53, $r54, $r55;
        safetyChecker.Edge $r18;
        java.lang.String $r20, $r27, $r35, $r43, $r50, $r56;
        com.microsoft.z3.BoolExpr $r29, $r31, $r41, $r48;

        r0 := @this: safetyChecker.CoverRelation;

        $r6 = newarray (java.lang.Object)[1];

        $r6[0] = ">>>>>>>>>CoverRelation.cover";

        staticinvoke <safetyChecker.LogUtils: void debugln(java.lang.Object[])>($r6);

        $r7 = r0.<safetyChecker.CoverRelation: java.util.Map unitVertexMap>;

        $r8 = interfaceinvoke $r7.<java.util.Map: java.util.Set entrySet()>();

        r2 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>();

(0)     goto label13;

     label01:
        $r9 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r1 = (java.util.Map$Entry) $r9;

        $r10 = interfaceinvoke r1.<java.util.Map$Entry: java.lang.Object getValue()>();

        r3 = (java.util.LinkedList) $r10;

        $i0 = virtualinvoke r3.<java.util.LinkedList: int size()>();

        i1_1 = $i0 - 1;

(1)     goto label12;

     label02:
        $r11 = newarray (java.lang.Object)[1];

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>(java.lang.String)>("weakerVeertex=");

        $r13 = virtualinvoke r3.<java.util.LinkedList: java.lang.Object get(int)>(i1_2);

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("--");

        $r16 = virtualinvoke r3.<java.util.LinkedList: java.lang.Object get(int)>(i1_2);

        $r17 = (safetyChecker.Vertex) $r16;

        $r18 = virtualinvoke $r17.<safetyChecker.Vertex: safetyChecker.Edge getOutgoingEdge()>();

        $r19 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        $r11[0] = $r20;

        staticinvoke <safetyChecker.LogUtils: void debugln(java.lang.Object[])>($r11);

        $r21 = newarray (java.lang.Object)[1];

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>(java.lang.String)>("weakerControl=");

        $r23 = virtualinvoke r3.<java.util.LinkedList: java.lang.Object get(int)>(i1_2);

        $r24 = (safetyChecker.Vertex) $r23;

        $r25 = specialinvoke r0.<safetyChecker.CoverRelation: safetyChecker.Vertex findPrevControlLocation(safetyChecker.Vertex)>($r24);

        $r26 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r25);

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        $r21[0] = $r27;

        staticinvoke <safetyChecker.LogUtils: void debugln(java.lang.Object[])>($r21);

        $r28 = virtualinvoke r3.<java.util.LinkedList: java.lang.Object get(int)>(i1_2);

        r4 = (safetyChecker.Vertex) $r28;

(2)     if r4 == null goto label11;

        $r29 = virtualinvoke r4.<safetyChecker.Vertex: com.microsoft.z3.BoolExpr getInvariant()>();

        if $r29 != null goto label03;

(3)     goto label11;

     label03:
        $z3 = virtualinvoke r0.<safetyChecker.CoverRelation: boolean isCovered(safetyChecker.Vertex)>(r4);

        if $z3 == 0 goto label04;

(4)     goto label11;

     label04:
        i2_2 = 0;

(5)     goto label10;

     label05:
        $r30 = virtualinvoke r3.<java.util.LinkedList: java.lang.Object get(int)>(i2_3);

        r5 = (safetyChecker.Vertex) $r30;

        $z4 = virtualinvoke r0.<safetyChecker.CoverRelation: boolean isCovered(safetyChecker.Vertex)>(r4);

        if $z4 == 0 goto label06;

        goto label09;

     label06:
        $z5 = virtualinvoke r0.<safetyChecker.CoverRelation: boolean isCovered(safetyChecker.Vertex)>(r5);

        if $z5 == 0 goto label07;

        goto label09;

     label07:
        $r31 = virtualinvoke r5.<safetyChecker.Vertex: com.microsoft.z3.BoolExpr getInvariant()>();

        if $r31 != null goto label08;

        goto label09;

     label08:
        z0 = specialinvoke r0.<safetyChecker.CoverRelation: boolean checkCoveredBy(safetyChecker.Vertex,safetyChecker.Vertex)>(r4, r5);

        $r32 = newarray (java.lang.Object)[1];

        $r33 = new java.lang.StringBuilder;

        specialinvoke $r33.<java.lang.StringBuilder: void <init>(java.lang.String)>("coveredByResult=");

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        $r32[0] = $r35;

        staticinvoke <safetyChecker.LogUtils: void debugln(java.lang.Object[])>($r32);

        if z0 == 0 goto label09;

        $r36 = newarray (java.lang.Object)[1];

        $r36[0] = "----------";

        staticinvoke <safetyChecker.LogUtils: void debugln(java.lang.Object[])>($r36);

        $r37 = newarray (java.lang.Object)[1];

        $r38 = new java.lang.StringBuilder;

        specialinvoke $r38.<java.lang.StringBuilder: void <init>(java.lang.String)>("weakerVertex=");

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-");

        $r41 = virtualinvoke r4.<safetyChecker.Vertex: com.microsoft.z3.BoolExpr getInvariant()>();

        $r42 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r41);

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.String toString()>();

        $r37[0] = $r43;

        staticinvoke <safetyChecker.LogUtils: void debugln(java.lang.Object[])>($r37);

        $r44 = newarray (java.lang.Object)[1];

        $r45 = new java.lang.StringBuilder;

        specialinvoke $r45.<java.lang.StringBuilder: void <init>(java.lang.String)>("strongerVertex=");

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-");

        $r48 = virtualinvoke r5.<safetyChecker.Vertex: com.microsoft.z3.BoolExpr getInvariant()>();

        $r49 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r48);

        $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.String toString()>();

        $r44[0] = $r50;

        staticinvoke <safetyChecker.LogUtils: void debugln(java.lang.Object[])>($r44);

        z1 = virtualinvoke r0.<safetyChecker.CoverRelation: boolean isCovered(safetyChecker.Vertex)>(r5);

        $r51 = newarray (java.lang.Object)[1];

        $r52 = new java.lang.StringBuilder;

        specialinvoke $r52.<java.lang.StringBuilder: void <init>(java.lang.String)>("***");

        $r53 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);

        $r54 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("--");

        $r55 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z1);

        $r56 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.String toString()>();

        $r51[0] = $r56;

        staticinvoke <safetyChecker.LogUtils: void debugln(java.lang.Object[])>($r51);

        if z1 != 0 goto label09;

        specialinvoke r0.<safetyChecker.CoverRelation: void addCoverRelation(safetyChecker.Vertex,safetyChecker.Vertex)>(r4, r5);

     label09:
(6)     i2_4 = i2_3 + 1;

     label10:
        i2_3 = Phi(i2_2 #5, i2_4 #6);

(7)     if i2_3 < i1_2 goto label05;

     label11:
        i2_5 = Phi(i2_1 #2, i2_1 #3, i2_1 #4, i2_3 #7);

(8)     i1_3 = i1_2 + -1;

     label12:
        i1_2 = Phi(i1_1 #1, i1_3 #8);

        i2_1 = Phi(i2 #1, i2_5 #8);

(9)     if i1_2 >= 0 goto label02;

     label13:
        i1 = Phi(i1 #0, i1_2 #9);

        i2 = Phi(i2 #0, i2_1 #9);

        $z2 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z2 != 0 goto label01;

        return;
    }

    private safetyChecker.Vertex findPrevControlLocation(safetyChecker.Vertex)
    {
        safetyChecker.CoverRelation r0;
        safetyChecker.Vertex r1, $r6;
        safetyChecker.Edge r2;
        java.util.Iterator r3;
        java.util.Set $r4;
        boolean $z0, $z1;
        java.lang.Object $r5;

        r0 := @this: safetyChecker.CoverRelation;

        r1 := @parameter0: safetyChecker.Vertex;

        $r4 = virtualinvoke r1.<safetyChecker.Vertex: java.util.Set getIncomingEdges()>();

        r3 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r5 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r2 = (safetyChecker.Edge) $r5;

        $z1 = virtualinvoke r2.<safetyChecker.Edge: boolean isControlLocation()>();

        if $z1 == 0 goto label2;

        $r6 = virtualinvoke r2.<safetyChecker.Edge: safetyChecker.Vertex getSource()>();

        return $r6;

     label2:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return null;
    }

    private boolean checkCoveredBy(safetyChecker.Vertex, safetyChecker.Vertex)
    {
        safetyChecker.CoverRelation r0;
        safetyChecker.Vertex r1, r2;
        com.microsoft.z3.BoolExpr r3, r4;
        boolean $z0;

        r0 := @this: safetyChecker.CoverRelation;

        r1 := @parameter0: safetyChecker.Vertex;

        r2 := @parameter1: safetyChecker.Vertex;

        r3 = virtualinvoke r1.<safetyChecker.Vertex: com.microsoft.z3.BoolExpr getInvariant()>();

        r4 = virtualinvoke r2.<safetyChecker.Vertex: com.microsoft.z3.BoolExpr getInvariant()>();

        $z0 = specialinvoke r0.<safetyChecker.CoverRelation: boolean isWeakerThan(com.microsoft.z3.BoolExpr,com.microsoft.z3.BoolExpr)>(r3, r4);

        return $z0;
    }

    private boolean isWeakerThan(com.microsoft.z3.BoolExpr, com.microsoft.z3.BoolExpr)
    {
        safetyChecker.CoverRelation r0;
        com.microsoft.z3.BoolExpr r1, r2;
        boolean $z0;

        r0 := @this: safetyChecker.CoverRelation;

        r1 := @parameter0: com.microsoft.z3.BoolExpr;

        r2 := @parameter1: com.microsoft.z3.BoolExpr;

        $z0 = specialinvoke r0.<safetyChecker.CoverRelation: boolean isStrongerThan(com.microsoft.z3.BoolExpr,com.microsoft.z3.BoolExpr)>(r2, r1);

        return $z0;
    }

    private boolean isStrongerThan(com.microsoft.z3.BoolExpr, com.microsoft.z3.BoolExpr)
    {
        safetyChecker.CoverRelation r0;
        com.microsoft.z3.BoolExpr r1, r2, r3, r4;
        com.microsoft.z3.Solver r5;
        com.microsoft.z3.Status r6, $r25;
        java.lang.Object[] $r7, $r8, $r13, $r19, $r26, $r30;
        java.lang.StringBuilder $r9, $r10, $r14, $r15, $r20, $r21, $r27, $r28;
        java.lang.String $r11, $r16, $r22, $r29;
        com.microsoft.z3.InterpolationContext $r12, $r18, $r23;
        com.microsoft.z3.BoolExpr[] $r17, $r24;
        boolean z0, z1, z1_1, z1_2;

        r0 := @this: safetyChecker.CoverRelation;

        r1 := @parameter0: com.microsoft.z3.BoolExpr;

        r2 := @parameter1: com.microsoft.z3.BoolExpr;

        $r7 = newarray (java.lang.Object)[1];

        $r7[0] = "--->coverRelation.isStrongerThan";

        staticinvoke <safetyChecker.LogUtils: void debugln(java.lang.Object[])>($r7);

        $r8 = newarray (java.lang.Object)[1];

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>(java.lang.String)>("weakaer = ");

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8[0] = $r11;

        staticinvoke <safetyChecker.LogUtils: void debugln(java.lang.Object[])>($r8);

        $r12 = r0.<safetyChecker.CoverRelation: com.microsoft.z3.InterpolationContext ictx>;

        r3 = virtualinvoke $r12.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.BoolExpr mkNot(com.microsoft.z3.BoolExpr)>(r2);

        $r13 = newarray (java.lang.Object)[1];

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>(java.lang.String)>("not weaker = ");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        $r13[0] = $r16;

        staticinvoke <safetyChecker.LogUtils: void debugln(java.lang.Object[])>($r13);

        $r18 = r0.<safetyChecker.CoverRelation: com.microsoft.z3.InterpolationContext ictx>;

        $r17 = newarray (com.microsoft.z3.BoolExpr)[2];

        $r17[0] = r1;

        $r17[1] = r3;

        r4 = virtualinvoke $r18.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.BoolExpr mkAnd(com.microsoft.z3.BoolExpr[])>($r17);

        $r19 = newarray (java.lang.Object)[1];

        $r20 = new java.lang.StringBuilder;

        specialinvoke $r20.<java.lang.StringBuilder: void <init>(java.lang.String)>("stronger = ");

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        $r19[0] = $r22;

        staticinvoke <safetyChecker.LogUtils: void debugln(java.lang.Object[])>($r19);

        $r23 = r0.<safetyChecker.CoverRelation: com.microsoft.z3.InterpolationContext ictx>;

        r5 = virtualinvoke $r23.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.Solver mkSolver()>();

        virtualinvoke r5.<com.microsoft.z3.Solver: void reset()>();

        $r24 = newarray (com.microsoft.z3.BoolExpr)[1];

        $r24[0] = r4;

        virtualinvoke r5.<com.microsoft.z3.Solver: void add(com.microsoft.z3.BoolExpr[])>($r24);

        r6 = virtualinvoke r5.<com.microsoft.z3.Solver: com.microsoft.z3.Status check()>();

        z0 = 0;

        $r25 = <com.microsoft.z3.Status: com.microsoft.z3.Status UNSATISFIABLE>;

        if r6 != $r25 goto label1;

        z1 = 1;

(0)     goto label2;

     label1:
(1)     z1_1 = 0;

     label2:
        z1_2 = Phi(z1 #0, z1_1 #1);

        $r26 = newarray (java.lang.Object)[1];

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<java.lang.StringBuilder: void <init>(java.lang.String)>("result=");

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z1_2);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        $r26[0] = $r29;

        staticinvoke <safetyChecker.LogUtils: void debugln(java.lang.Object[])>($r26);

        virtualinvoke r5.<com.microsoft.z3.Solver: void dispose()>();

        $r30 = newarray (java.lang.Object)[1];

        $r30[0] = "<---coverRelation.isStrongerThan";

        staticinvoke <safetyChecker.LogUtils: void debugln(java.lang.Object[])>($r30);

        return z1_2;
    }

    public boolean isCovered(safetyChecker.Vertex)
    {
        safetyChecker.CoverRelation r0;
        safetyChecker.Vertex r1;
        boolean $z0, $z1;

        r0 := @this: safetyChecker.CoverRelation;

        r1 := @parameter0: safetyChecker.Vertex;

        $z0 = virtualinvoke r0.<safetyChecker.CoverRelation: boolean isDirectlyCovered(safetyChecker.Vertex)>(r1);

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r0.<safetyChecker.CoverRelation: boolean isAncestorCovered(safetyChecker.Vertex)>(r1);

        if $z1 != 0 goto label1;

        return 0;

     label1:
        return 1;
    }

    public boolean isDirectlyCovered(safetyChecker.Vertex)
    {
        safetyChecker.CoverRelation r0;
        safetyChecker.Vertex r1;
        java.util.Map $r2;
        boolean $z0;

        r0 := @this: safetyChecker.CoverRelation;

        r1 := @parameter0: safetyChecker.Vertex;

        $r2 = r0.<safetyChecker.CoverRelation: java.util.Map coveredByMap>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        return 1;

     label1:
        return 0;
    }

    public boolean isAncestorCovered(safetyChecker.Vertex)
    {
        safetyChecker.CoverRelation r0;
        safetyChecker.Vertex r1;
        java.util.Set $r2;
        boolean $z0;

        r0 := @this: safetyChecker.CoverRelation;

        r1 := @parameter0: safetyChecker.Vertex;

        $r2 = r0.<safetyChecker.CoverRelation: java.util.Set ancestorCoveredSet>;

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>(r1);

        return $z0;
    }

    private void addCoverRelation(safetyChecker.Vertex, safetyChecker.Vertex)
    {
        safetyChecker.CoverRelation r0;
        safetyChecker.Vertex r1, r2;
        java.util.HashSet r3, $r16;
        java.lang.Object[] $r4, $r5, $r12, $r19, $r23;
        java.lang.StringBuilder $r6, $r7, $r8, $r9, $r24, $r25;
        java.lang.String $r10, $r26;
        java.util.Map $r11, $r13, $r15, $r17, $r20;
        boolean $z0, $z1, $z2;
        java.lang.Object $r21;
        java.util.Set $r22;
        int $i0, $i1;

        r0 := @this: safetyChecker.CoverRelation;

        r1 := @parameter0: safetyChecker.Vertex;

        r2 := @parameter1: safetyChecker.Vertex;

        $r4 = newarray (java.lang.Object)[1];

        $r4[0] = ">>>>>CoverRelation.addCoverRelation";

        staticinvoke <safetyChecker.LogUtils: void debugln(java.lang.Object[])>($r4);

        $r5 = newarray (java.lang.Object)[1];

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>("weaker= ");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("--stronger=");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        $r5[0] = $r10;

        staticinvoke <safetyChecker.LogUtils: void debugln(java.lang.Object[])>($r5);

        $r11 = r0.<safetyChecker.CoverRelation: java.util.Map coveredByMap>;

        $z0 = interfaceinvoke $r11.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r23 = newarray (java.lang.Object)[1];

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<java.lang.StringBuilder: void <init>(java.lang.String)>("hooopaaa");

        $i0 = r0.<safetyChecker.CoverRelation: int counter>;

        $i1 = $i0 + 1;

        r0.<safetyChecker.CoverRelation: int counter> = $i1;

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        $r23[0] = $r26;

        staticinvoke <safetyChecker.LogUtils: void fatalln(java.lang.Object[])>($r23);

        staticinvoke <java.lang.System: void exit(int)>(0);

        return;

     label1:
        $r12 = newarray (java.lang.Object)[1];

        $r12[0] = "else coveredByMap. not contains";

        staticinvoke <safetyChecker.LogUtils: void debugln(java.lang.Object[])>($r12);

        $r13 = r0.<safetyChecker.CoverRelation: java.util.Map coveredByMap>;

        interfaceinvoke $r13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2);

        $z1 = virtualinvoke r0.<safetyChecker.CoverRelation: boolean isAncestorCovered(safetyChecker.Vertex)>(r1);

        if $z1 != 0 goto label2;

        specialinvoke r0.<safetyChecker.CoverRelation: void coverDescendants(safetyChecker.Vertex)>(r1);

     label2:
        specialinvoke r0.<safetyChecker.CoverRelation: void clearCoverRelation(safetyChecker.Vertex)>(r1);

        $r15 = r0.<safetyChecker.CoverRelation: java.util.Map coveringMap>;

        $z2 = interfaceinvoke $r15.<java.util.Map: boolean containsKey(java.lang.Object)>(r2);

        if $z2 == 0 goto label3;

        $r20 = r0.<safetyChecker.CoverRelation: java.util.Map coveringMap>;

        $r21 = interfaceinvoke $r20.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        $r22 = (java.util.Set) $r21;

        interfaceinvoke $r22.<java.util.Set: boolean add(java.lang.Object)>(r1);

        goto label4;

     label3:
        $r16 = new java.util.HashSet;

        specialinvoke $r16.<java.util.HashSet: void <init>()>();

        r3 = $r16;

        interfaceinvoke r3.<java.util.Set: boolean add(java.lang.Object)>(r1);

        $r17 = r0.<safetyChecker.CoverRelation: java.util.Map coveringMap>;

        interfaceinvoke $r17.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r3);

     label4:
        $r19 = newarray (java.lang.Object)[1];

        $r19[0] = "<<<<<CoverRelation.addCoverRelation";

        staticinvoke <safetyChecker.LogUtils: void debugln(java.lang.Object[])>($r19);

        return;
    }

    protected void checkHoldsAndClearCoverRelation(safetyChecker.Vertex)
    {
        safetyChecker.CoverRelation r0;
        safetyChecker.Vertex r1, r4;
        java.util.LinkedList r2, $r7;
        java.util.Set r3;
        java.util.Iterator r5;
        boolean z0, $z1, $z2, $z4;
        java.util.Map $r6, $r8, $r19;
        java.lang.Object $r9, $r10;
        com.microsoft.z3.BoolExpr $r11, $r12;
        java.lang.Object[] $r13;
        java.lang.StringBuilder $r14, $r15, $r16, $r17;
        java.lang.String $r18;

        r0 := @this: safetyChecker.CoverRelation;

        r1 := @parameter0: safetyChecker.Vertex;

        $r6 = r0.<safetyChecker.CoverRelation: java.util.Map coveringMap>;

        $z1 = interfaceinvoke $r6.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z1 == 0 goto label3;

        $r7 = new java.util.LinkedList;

        specialinvoke $r7.<java.util.LinkedList: void <init>()>();

        r2 = $r7;

        $r8 = r0.<safetyChecker.CoverRelation: java.util.Map coveringMap>;

        $r9 = interfaceinvoke $r8.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r3 = (java.util.Set) $r9;

        r5 = interfaceinvoke r3.<java.util.Set: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r10 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r4 = (safetyChecker.Vertex) $r10;

        $r11 = virtualinvoke r4.<safetyChecker.Vertex: com.microsoft.z3.BoolExpr getInvariant()>();

        $r12 = virtualinvoke r1.<safetyChecker.Vertex: com.microsoft.z3.BoolExpr getInvariant()>();

        z0 = specialinvoke r0.<safetyChecker.CoverRelation: boolean isWeakerThan(com.microsoft.z3.BoolExpr,com.microsoft.z3.BoolExpr)>($r11, $r12);

        if z0 != 0 goto label2;

        $r13 = newarray (java.lang.Object)[1];

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>(java.lang.String)>("^^^^^^checkHoldsAndClearCoverRelation=");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("--");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        $r13[0] = $r18;

        staticinvoke <safetyChecker.LogUtils: void debugln(java.lang.Object[])>($r13);

        specialinvoke r0.<safetyChecker.CoverRelation: void add2UncoveredMap(safetyChecker.Vertex)>(r4);

        virtualinvoke r2.<java.util.LinkedList: boolean add(java.lang.Object)>(r4);

        $r19 = r0.<safetyChecker.CoverRelation: java.util.Map coveredByMap>;

        interfaceinvoke $r19.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r4);

        $z4 = virtualinvoke r0.<safetyChecker.CoverRelation: boolean isAncestorCovered(safetyChecker.Vertex)>(r4);

        if $z4 != 0 goto label2;

        specialinvoke r0.<safetyChecker.CoverRelation: void uncoverDescendants(safetyChecker.Vertex)>(r4);

     label2:
        $z2 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z2 != 0 goto label1;

     label3:
        return;
    }

    private void clearCoverRelation(safetyChecker.Vertex)
    {
        safetyChecker.CoverRelation r0;
        safetyChecker.Vertex r1, r3;
        java.util.Set r2;
        java.util.Iterator r4;
        java.lang.Object[] $r5;
        java.lang.StringBuilder $r6, $r7;
        java.lang.String $r8;
        java.util.Map $r9, $r10, $r13;
        boolean $z0, $z1, $z2;
        java.lang.Object $r11, $r12;

        r0 := @this: safetyChecker.CoverRelation;

        r1 := @parameter0: safetyChecker.Vertex;

        $r5 = newarray (java.lang.Object)[1];

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>("*******clearCoverRelation=");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $r5[0] = $r8;

        staticinvoke <safetyChecker.LogUtils: void debugln(java.lang.Object[])>($r5);

        $r9 = r0.<safetyChecker.CoverRelation: java.util.Map coveringMap>;

        $z0 = interfaceinvoke $r9.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 == 0 goto label3;

        $r10 = r0.<safetyChecker.CoverRelation: java.util.Map coveringMap>;

        $r11 = interfaceinvoke $r10.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r2 = (java.util.Set) $r11;

        r4 = interfaceinvoke r2.<java.util.Set: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r12 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r3 = (safetyChecker.Vertex) $r12;

        specialinvoke r0.<safetyChecker.CoverRelation: void add2UncoveredMap(safetyChecker.Vertex)>(r3);

        $r13 = r0.<safetyChecker.CoverRelation: java.util.Map coveredByMap>;

        interfaceinvoke $r13.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r3);

        $z2 = virtualinvoke r0.<safetyChecker.CoverRelation: boolean isAncestorCovered(safetyChecker.Vertex)>(r3);

        if $z2 != 0 goto label2;

        specialinvoke r0.<safetyChecker.CoverRelation: void uncoverDescendants(safetyChecker.Vertex)>(r3);

     label2:
        $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label1;

        interfaceinvoke r2.<java.util.Set: void clear()>();

     label3:
        return;
    }

    private void uncoverDescendants(safetyChecker.Vertex)
    {
        safetyChecker.CoverRelation r0;
        safetyChecker.Vertex r1, r2;
        java.util.Iterator r3;
        java.lang.Object[] $r4;
        java.lang.StringBuilder $r5, $r6;
        java.lang.String $r7;
        java.util.Set $r8, $r10;
        boolean $z0;
        java.lang.Object $r9;

        r0 := @this: safetyChecker.CoverRelation;

        r1 := @parameter0: safetyChecker.Vertex;

        $r4 = newarray (java.lang.Object)[1];

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>(">>>>>>>>>CoverRelation.uncoverDescendants = ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r4[0] = $r7;

        staticinvoke <safetyChecker.LogUtils: void debugln(java.lang.Object[])>($r4);

        $r8 = virtualinvoke r1.<safetyChecker.Vertex: java.util.Set getPreviousVertexSet()>();

        r3 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r9 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r2 = (safetyChecker.Vertex) $r9;

        specialinvoke r0.<safetyChecker.CoverRelation: void add2UncoveredMap(safetyChecker.Vertex)>(r2);

        $r10 = r0.<safetyChecker.CoverRelation: java.util.Set ancestorCoveredSet>;

        interfaceinvoke $r10.<java.util.Set: boolean remove(java.lang.Object)>(r2);

        specialinvoke r0.<safetyChecker.CoverRelation: void uncoverDescendants(safetyChecker.Vertex)>(r2);

     label2:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return;
    }

    private void add2UncoveredMap(safetyChecker.Vertex)
    {
        safetyChecker.CoverRelation r0;
        safetyChecker.Vertex r1;
        java.util.Set $r2;
        int $i0, $i1;
        safetyChecker.ProgramTree $r3, $r8;
        soot.toolkits.graph.ExceptionalUnitGraph $r4;
        safetyChecker.Edge $r5;
        soot.Unit $r6;
        java.util.List $r7;
        java.util.Queue $r9;

        r0 := @this: safetyChecker.CoverRelation;

        r1 := @parameter0: safetyChecker.Vertex;

        $r2 = virtualinvoke r1.<safetyChecker.Vertex: java.util.Set getPreviousVertexSet()>();

        $i0 = interfaceinvoke $r2.<java.util.Set: int size()>();

        $r3 = r0.<safetyChecker.CoverRelation: safetyChecker.ProgramTree programTree>;

        $r4 = virtualinvoke $r3.<safetyChecker.ProgramTree: soot.toolkits.graph.ExceptionalUnitGraph getCfg()>();

        $r5 = virtualinvoke r1.<safetyChecker.Vertex: safetyChecker.Edge getOutgoingEdge()>();

        $r6 = virtualinvoke $r5.<safetyChecker.Edge: soot.Unit getUnit()>();

        $r7 = virtualinvoke $r4.<soot.toolkits.graph.ExceptionalUnitGraph: java.util.List getUnexceptionalPredsOf(soot.Unit)>($r6);

        $i1 = interfaceinvoke $r7.<java.util.List: int size()>();

        if $i0 >= $i1 goto label1;

        $r8 = r0.<safetyChecker.CoverRelation: safetyChecker.ProgramTree programTree>;

        $r9 = virtualinvoke $r8.<safetyChecker.ProgramTree: java.util.Queue getUncovered()>();

        interfaceinvoke $r9.<java.util.Queue: boolean add(java.lang.Object)>(r1);

     label1:
        return;
    }

    private void coverDescendants(safetyChecker.Vertex)
    {
        safetyChecker.CoverRelation r0;
        safetyChecker.Vertex r1, r2;
        java.util.Iterator r3;
        java.lang.Object[] $r4;
        java.lang.StringBuilder $r5, $r6;
        java.lang.String $r7;
        java.util.Set $r8, $r10;
        boolean $z0;
        java.lang.Object $r9;

        r0 := @this: safetyChecker.CoverRelation;

        r1 := @parameter0: safetyChecker.Vertex;

        $r4 = newarray (java.lang.Object)[1];

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>(">>>>>>>>CoverRelation.coverDescendants = ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r4[0] = $r7;

        staticinvoke <safetyChecker.LogUtils: void debugln(java.lang.Object[])>($r4);

        $r8 = virtualinvoke r1.<safetyChecker.Vertex: java.util.Set getPreviousVertexSet()>();

        r3 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r9 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r2 = (safetyChecker.Vertex) $r9;

        $r10 = r0.<safetyChecker.CoverRelation: java.util.Set ancestorCoveredSet>;

        interfaceinvoke $r10.<java.util.Set: boolean add(java.lang.Object)>(r2);

        specialinvoke r0.<safetyChecker.CoverRelation: void coverDescendants(safetyChecker.Vertex)>(r2);

     label2:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return;
    }

    public java.util.Map getCoveringMap()
    {
        safetyChecker.CoverRelation r0;
        java.util.Map $r1;

        r0 := @this: safetyChecker.CoverRelation;

        $r1 = r0.<safetyChecker.CoverRelation: java.util.Map coveringMap>;

        return $r1;
    }

    public java.util.Map getCoveredByMap()
    {
        safetyChecker.CoverRelation r0;
        java.util.Map $r1;

        r0 := @this: safetyChecker.CoverRelation;

        $r1 = r0.<safetyChecker.CoverRelation: java.util.Map coveredByMap>;

        return $r1;
    }

    public java.util.Map getUnitVertexMap()
    {
        safetyChecker.CoverRelation r0;
        java.util.Map $r1;

        r0 := @this: safetyChecker.CoverRelation;

        $r1 = r0.<safetyChecker.CoverRelation: java.util.Map unitVertexMap>;

        return $r1;
    }
}
