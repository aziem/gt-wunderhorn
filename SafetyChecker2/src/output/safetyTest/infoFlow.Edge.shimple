public class infoFlow.Edge extends java.lang.Object
{
    private soot.Unit unit;
    private infoFlow.Vertex source;
    private infoFlow.Vertex target;
    private infoFlow.ProgramTree programTree;
    private com.microsoft.z3.BoolExpr z3Expr;
    private boolean returnEdge;
    private boolean errorEdge;
    private boolean subFunction;
    private boolean sinkEdge;
    private boolean sourceEdge;
    private boolean objectEdge;
    private boolean newEdge;
    private boolean inErrorPath;
    private boolean arrayCopy;
    private java.util.List parameterList;

    public void <init>(soot.Unit)
    {
        infoFlow.Edge r0;
        soot.Unit r1;
        java.util.LinkedList $r2;

        r0 := @this: infoFlow.Edge;

        r1 := @parameter0: soot.Unit;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<infoFlow.Edge: boolean returnEdge> = 0;

        r0.<infoFlow.Edge: boolean errorEdge> = 0;

        r0.<infoFlow.Edge: boolean subFunction> = 0;

        r0.<infoFlow.Edge: boolean sinkEdge> = 0;

        r0.<infoFlow.Edge: boolean sourceEdge> = 0;

        r0.<infoFlow.Edge: boolean objectEdge> = 0;

        r0.<infoFlow.Edge: boolean newEdge> = 0;

        r0.<infoFlow.Edge: boolean inErrorPath> = 0;

        r0.<infoFlow.Edge: boolean arrayCopy> = 0;

        $r2 = new java.util.LinkedList;

        specialinvoke $r2.<java.util.LinkedList: void <init>()>();

        r0.<infoFlow.Edge: java.util.List parameterList> = $r2;

        r0.<infoFlow.Edge: soot.Unit unit> = r1;

        return;
    }

    public soot.Unit getUnit()
    {
        infoFlow.Edge r0;
        soot.Unit $r1;

        r0 := @this: infoFlow.Edge;

        $r1 = r0.<infoFlow.Edge: soot.Unit unit>;

        return $r1;
    }

    public void setUnit(soot.Unit)
    {
        infoFlow.Edge r0;
        soot.Unit r1;

        r0 := @this: infoFlow.Edge;

        r1 := @parameter0: soot.Unit;

        r0.<infoFlow.Edge: soot.Unit unit> = r1;

        return;
    }

    public infoFlow.Vertex getSource()
    {
        infoFlow.Edge r0;
        infoFlow.Vertex $r1;

        r0 := @this: infoFlow.Edge;

        $r1 = r0.<infoFlow.Edge: infoFlow.Vertex source>;

        return $r1;
    }

    public void setSource(infoFlow.Vertex)
    {
        infoFlow.Edge r0;
        infoFlow.Vertex r1;

        r0 := @this: infoFlow.Edge;

        r1 := @parameter0: infoFlow.Vertex;

        r0.<infoFlow.Edge: infoFlow.Vertex source> = r1;

        return;
    }

    public infoFlow.Vertex getTarget()
    {
        infoFlow.Edge r0;
        infoFlow.Vertex $r1;

        r0 := @this: infoFlow.Edge;

        $r1 = r0.<infoFlow.Edge: infoFlow.Vertex target>;

        return $r1;
    }

    public void setTarget(infoFlow.Vertex)
    {
        infoFlow.Edge r0;
        infoFlow.Vertex r1;

        r0 := @this: infoFlow.Edge;

        r1 := @parameter0: infoFlow.Vertex;

        r0.<infoFlow.Edge: infoFlow.Vertex target> = r1;

        return;
    }

    public boolean isReturnEdge()
    {
        infoFlow.Edge r0;
        boolean $z0;

        r0 := @this: infoFlow.Edge;

        $z0 = r0.<infoFlow.Edge: boolean returnEdge>;

        return $z0;
    }

    public void setReturnEdge(boolean)
    {
        infoFlow.Edge r0;
        boolean z0;

        r0 := @this: infoFlow.Edge;

        z0 := @parameter0: boolean;

        r0.<infoFlow.Edge: boolean returnEdge> = z0;

        return;
    }

    public boolean isErrorEdge()
    {
        infoFlow.Edge r0;
        boolean $z0;

        r0 := @this: infoFlow.Edge;

        $z0 = r0.<infoFlow.Edge: boolean errorEdge>;

        return $z0;
    }

    public void setErrorEdge(boolean)
    {
        infoFlow.Edge r0;
        boolean z0;

        r0 := @this: infoFlow.Edge;

        z0 := @parameter0: boolean;

        r0.<infoFlow.Edge: boolean errorEdge> = z0;

        return;
    }

    public boolean isSubFunction()
    {
        infoFlow.Edge r0;
        boolean $z0;

        r0 := @this: infoFlow.Edge;

        $z0 = r0.<infoFlow.Edge: boolean subFunction>;

        return $z0;
    }

    public void setSubFunction(boolean)
    {
        infoFlow.Edge r0;
        boolean z0;

        r0 := @this: infoFlow.Edge;

        z0 := @parameter0: boolean;

        r0.<infoFlow.Edge: boolean subFunction> = z0;

        return;
    }

    public boolean isSinkEdge()
    {
        infoFlow.Edge r0;
        boolean $z0;

        r0 := @this: infoFlow.Edge;

        $z0 = r0.<infoFlow.Edge: boolean sinkEdge>;

        return $z0;
    }

    public void setSinkEdge(boolean)
    {
        infoFlow.Edge r0;
        boolean z0;

        r0 := @this: infoFlow.Edge;

        z0 := @parameter0: boolean;

        r0.<infoFlow.Edge: boolean sinkEdge> = z0;

        return;
    }

    public boolean isSourceEdge()
    {
        infoFlow.Edge r0;
        boolean $z0;

        r0 := @this: infoFlow.Edge;

        $z0 = r0.<infoFlow.Edge: boolean sourceEdge>;

        return $z0;
    }

    public void setSourceEdge(boolean)
    {
        infoFlow.Edge r0;
        boolean z0;

        r0 := @this: infoFlow.Edge;

        z0 := @parameter0: boolean;

        r0.<infoFlow.Edge: boolean sourceEdge> = z0;

        return;
    }

    public boolean isNewEdge()
    {
        infoFlow.Edge r0;
        boolean $z0;

        r0 := @this: infoFlow.Edge;

        $z0 = r0.<infoFlow.Edge: boolean newEdge>;

        return $z0;
    }

    public void setNewEdge(boolean)
    {
        infoFlow.Edge r0;
        boolean z0;

        r0 := @this: infoFlow.Edge;

        z0 := @parameter0: boolean;

        r0.<infoFlow.Edge: boolean newEdge> = z0;

        return;
    }

    public boolean isObjectEdge()
    {
        infoFlow.Edge r0;
        boolean $z0;

        r0 := @this: infoFlow.Edge;

        $z0 = r0.<infoFlow.Edge: boolean objectEdge>;

        return $z0;
    }

    public void setObjectEdge(boolean)
    {
        infoFlow.Edge r0;
        boolean z0;

        r0 := @this: infoFlow.Edge;

        z0 := @parameter0: boolean;

        r0.<infoFlow.Edge: boolean objectEdge> = z0;

        return;
    }

    public boolean isArrayCopyEdge()
    {
        infoFlow.Edge r0;
        boolean $z0;

        r0 := @this: infoFlow.Edge;

        $z0 = r0.<infoFlow.Edge: boolean arrayCopy>;

        return $z0;
    }

    public void setArrayCopyEdge(boolean)
    {
        infoFlow.Edge r0;
        boolean z0;

        r0 := @this: infoFlow.Edge;

        z0 := @parameter0: boolean;

        r0.<infoFlow.Edge: boolean arrayCopy> = z0;

        return;
    }

    public infoFlow.ProgramTree getProgramTree()
    {
        infoFlow.Edge r0;
        infoFlow.ProgramTree $r1;

        r0 := @this: infoFlow.Edge;

        $r1 = r0.<infoFlow.Edge: infoFlow.ProgramTree programTree>;

        return $r1;
    }

    public void setProgramTree(infoFlow.ProgramTree)
    {
        infoFlow.Edge r0;
        infoFlow.ProgramTree r1;

        r0 := @this: infoFlow.Edge;

        r1 := @parameter0: infoFlow.ProgramTree;

        r0.<infoFlow.Edge: infoFlow.ProgramTree programTree> = r1;

        return;
    }

    public boolean isInErrorPath()
    {
        infoFlow.Edge r0;
        boolean $z0;

        r0 := @this: infoFlow.Edge;

        $z0 = r0.<infoFlow.Edge: boolean inErrorPath>;

        return $z0;
    }

    public void setInErrorPath(boolean)
    {
        infoFlow.Edge r0;
        boolean z0;

        r0 := @this: infoFlow.Edge;

        z0 := @parameter0: boolean;

        r0.<infoFlow.Edge: boolean inErrorPath> = z0;

        return;
    }

    public com.microsoft.z3.BoolExpr getZ3Expr()
    {
        infoFlow.Edge r0;
        com.microsoft.z3.BoolExpr $r1;

        r0 := @this: infoFlow.Edge;

        $r1 = r0.<infoFlow.Edge: com.microsoft.z3.BoolExpr z3Expr>;

        return $r1;
    }

    public void setZ3Expr(com.microsoft.z3.BoolExpr)
    {
        infoFlow.Edge r0;
        com.microsoft.z3.BoolExpr r1;

        r0 := @this: infoFlow.Edge;

        r1 := @parameter0: com.microsoft.z3.BoolExpr;

        r0.<infoFlow.Edge: com.microsoft.z3.BoolExpr z3Expr> = r1;

        return;
    }

    public java.util.List getParameterList()
    {
        infoFlow.Edge r0;
        java.util.List $r1;

        r0 := @this: infoFlow.Edge;

        $r1 = r0.<infoFlow.Edge: java.util.List parameterList>;

        return $r1;
    }

    public void addParameter(com.microsoft.z3.Expr)
    {
        infoFlow.Edge r0;
        com.microsoft.z3.Expr r1;
        java.util.List $r2;

        r0 := @this: infoFlow.Edge;

        r1 := @parameter0: com.microsoft.z3.Expr;

        $r2 = r0.<infoFlow.Edge: java.util.List parameterList>;

        interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1);

        return;
    }

    public void cleanParameterList()
    {
        infoFlow.Edge r0;
        java.util.LinkedList $r1;

        r0 := @this: infoFlow.Edge;

        $r1 = new java.util.LinkedList;

        specialinvoke $r1.<java.util.LinkedList: void <init>()>();

        r0.<infoFlow.Edge: java.util.List parameterList> = $r1;

        return;
    }

    public java.lang.String toString()
    {
        infoFlow.Edge r0;
        soot.Unit $r1;
        java.lang.String $r2;

        r0 := @this: infoFlow.Edge;

        $r1 = r0.<infoFlow.Edge: soot.Unit unit>;

        $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>();

        return $r2;
    }
}
