public class infoFlow.CoverRelation extends java.lang.Object
{
    private com.microsoft.z3.InterpolationContext ictx;
    private java.util.Map coveringMap;
    private java.util.Map coveredByMap;
    private java.util.Set ancestorCoveredSet;
    private java.util.Map unitVertexMap;

    public void <init>(com.microsoft.z3.InterpolationContext)
    {
        infoFlow.CoverRelation r0;
        com.microsoft.z3.InterpolationContext r1;
        java.util.HashMap $r2, $r3, $r5;
        java.util.HashSet $r4;

        r0 := @this: infoFlow.CoverRelation;

        r1 := @parameter0: com.microsoft.z3.InterpolationContext;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<infoFlow.CoverRelation: com.microsoft.z3.InterpolationContext ictx> = r1;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<infoFlow.CoverRelation: java.util.Map coveringMap> = $r2;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r0.<infoFlow.CoverRelation: java.util.Map coveredByMap> = $r3;

        $r4 = new java.util.HashSet;

        specialinvoke $r4.<java.util.HashSet: void <init>()>();

        r0.<infoFlow.CoverRelation: java.util.Set ancestorCoveredSet> = $r4;

        $r5 = new java.util.HashMap;

        specialinvoke $r5.<java.util.HashMap: void <init>()>();

        r0.<infoFlow.CoverRelation: java.util.Map unitVertexMap> = $r5;

        return;
    }

    public void updateUnitVertexMap(infoFlow.Edge)
    {
        infoFlow.CoverRelation r0;
        infoFlow.Edge r1;
        soot.Unit r2, $r7, $r10;
        java.util.Map $r3, $r6, $r9;
        boolean $z0;
        java.util.LinkedList $r4, r13, r14;
        infoFlow.Vertex $r5, $r12;
        java.lang.Object $r11;

        r0 := @this: infoFlow.CoverRelation;

        r1 := @parameter0: infoFlow.Edge;

        r2 = virtualinvoke r1.<infoFlow.Edge: soot.Unit getUnit()>();

        $r3 = r0.<infoFlow.CoverRelation: java.util.Map unitVertexMap>;

        $z0 = interfaceinvoke $r3.<java.util.Map: boolean containsKey(java.lang.Object)>(r2);

        if $z0 == 0 goto label1;

        $r9 = r0.<infoFlow.CoverRelation: java.util.Map unitVertexMap>;

        $r10 = virtualinvoke r1.<infoFlow.Edge: soot.Unit getUnit()>();

        $r11 = interfaceinvoke $r9.<java.util.Map: java.lang.Object get(java.lang.Object)>($r10);

        r13 = (java.util.LinkedList) $r11;

        $r12 = virtualinvoke r1.<infoFlow.Edge: infoFlow.Vertex getTarget()>();

        virtualinvoke r13.<java.util.LinkedList: boolean add(java.lang.Object)>($r12);

        goto label2;

     label1:
        $r4 = new java.util.LinkedList;

        specialinvoke $r4.<java.util.LinkedList: void <init>()>();

        r14 = $r4;

        $r5 = virtualinvoke r1.<infoFlow.Edge: infoFlow.Vertex getTarget()>();

        virtualinvoke r14.<java.util.LinkedList: boolean add(java.lang.Object)>($r5);

        $r6 = r0.<infoFlow.CoverRelation: java.util.Map unitVertexMap>;

        $r7 = virtualinvoke r1.<infoFlow.Edge: soot.Unit getUnit()>();

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, r14);

     label2:
        return;
    }

    public void updateCover()
    {
        infoFlow.CoverRelation r0;
        java.lang.Object[] $r1;

        r0 := @this: infoFlow.CoverRelation;

        $r1 = newarray (java.lang.Object)[1];

        $r1[0] = ">>>>>>>>>>CoverRelation.updateCover";

        staticinvoke <infoFlow.LogUtils: void debugln(java.lang.Object[])>($r1);

        specialinvoke r0.<infoFlow.CoverRelation: void clearCovers()>();

        specialinvoke r0.<infoFlow.CoverRelation: void cover()>();

        return;
    }

    private void clearCovers()
    {
        infoFlow.CoverRelation r0;
        java.util.Map $r1, $r2;
        java.util.Set $r3;

        r0 := @this: infoFlow.CoverRelation;

        $r1 = r0.<infoFlow.CoverRelation: java.util.Map coveringMap>;

        interfaceinvoke $r1.<java.util.Map: void clear()>();

        $r2 = r0.<infoFlow.CoverRelation: java.util.Map coveredByMap>;

        interfaceinvoke $r2.<java.util.Map: void clear()>();

        $r3 = r0.<infoFlow.CoverRelation: java.util.Set ancestorCoveredSet>;

        interfaceinvoke $r3.<java.util.Set: void clear()>();

        return;
    }

    private void cover()
    {
        infoFlow.CoverRelation r0;
        java.util.Map$Entry r1;
        java.util.Iterator r2;
        java.util.LinkedList r3;
        infoFlow.Vertex r4, r5;
        boolean z0, z1, $z2;
        java.lang.Object[] $r6, $r15, $r19, $r20, $r27;
        java.util.Map $r7;
        java.util.Set $r8;
        java.lang.Object $r9, $r10, $r11, $r13;
        int $i0, i1, i2, i1_1, i1_2, i2_1, i2_2, i2_3, i2_4, i2_5, i1_3;
        com.microsoft.z3.BoolExpr $r12, $r14, $r24, $r31;
        java.lang.StringBuilder $r16, $r17, $r21, $r22, $r23, $r25, $r28, $r29, $r30, $r32;
        java.lang.String $r18, $r26, $r33;

        r0 := @this: infoFlow.CoverRelation;

        $r6 = newarray (java.lang.Object)[1];

        $r6[0] = ">>>>>>>>>CoverRelation.cover";

        staticinvoke <infoFlow.LogUtils: void debugln(java.lang.Object[])>($r6);

        $r7 = r0.<infoFlow.CoverRelation: java.util.Map unitVertexMap>;

        $r8 = interfaceinvoke $r7.<java.util.Map: java.util.Set entrySet()>();

        r2 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>();

(0)     goto label10;

     label01:
        $r9 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r1 = (java.util.Map$Entry) $r9;

        $r10 = interfaceinvoke r1.<java.util.Map$Entry: java.lang.Object getValue()>();

        r3 = (java.util.LinkedList) $r10;

        $i0 = virtualinvoke r3.<java.util.LinkedList: int size()>();

        i1_1 = $i0 - 1;

(1)     goto label09;

     label02:
        $r11 = virtualinvoke r3.<java.util.LinkedList: java.lang.Object get(int)>(i1_2);

        r4 = (infoFlow.Vertex) $r11;

        $r12 = virtualinvoke r4.<infoFlow.Vertex: com.microsoft.z3.BoolExpr getInvariant()>();

        if $r12 != null goto label03;

(2)     goto label08;

     label03:
        i2_2 = 0;

(3)     goto label07;

     label04:
        $r13 = virtualinvoke r3.<java.util.LinkedList: java.lang.Object get(int)>(i2_3);

        r5 = (infoFlow.Vertex) $r13;

        $r14 = virtualinvoke r5.<infoFlow.Vertex: com.microsoft.z3.BoolExpr getInvariant()>();

        if $r14 != null goto label05;

        goto label06;

     label05:
        z0 = specialinvoke r0.<infoFlow.CoverRelation: boolean checkCoveredBy(infoFlow.Vertex,infoFlow.Vertex)>(r4, r5);

        $r15 = newarray (java.lang.Object)[1];

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>(java.lang.String)>("coveredByResult=");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        $r15[0] = $r18;

        staticinvoke <infoFlow.LogUtils: void debugln(java.lang.Object[])>($r15);

        if z0 == 0 goto label06;

        $r19 = newarray (java.lang.Object)[1];

        $r19[0] = "----------";

        staticinvoke <infoFlow.LogUtils: void debugln(java.lang.Object[])>($r19);

        $r20 = newarray (java.lang.Object)[1];

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>(java.lang.String)>("weakerVertex=");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-");

        $r24 = virtualinvoke r4.<infoFlow.Vertex: com.microsoft.z3.BoolExpr getInvariant()>();

        $r25 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r24);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        $r20[0] = $r26;

        staticinvoke <infoFlow.LogUtils: void debugln(java.lang.Object[])>($r20);

        $r27 = newarray (java.lang.Object)[1];

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>(java.lang.String)>("strongerVertex=");

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-");

        $r31 = virtualinvoke r5.<infoFlow.Vertex: com.microsoft.z3.BoolExpr getInvariant()>();

        $r32 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r31);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        $r27[0] = $r33;

        staticinvoke <infoFlow.LogUtils: void debugln(java.lang.Object[])>($r27);

        z1 = virtualinvoke r0.<infoFlow.CoverRelation: boolean isAncestorCovered(infoFlow.Vertex)>(r5);

        if z1 != 0 goto label06;

        specialinvoke r0.<infoFlow.CoverRelation: void addCoverRelation(infoFlow.Vertex,infoFlow.Vertex)>(r4, r5);

     label06:
(4)     i2_4 = i2_3 + 1;

     label07:
        i2_3 = Phi(i2_2 #3, i2_4 #4);

(5)     if i2_3 < i1_2 goto label04;

     label08:
        i2_5 = Phi(i2_1 #2, i2_3 #5);

(6)     i1_3 = i1_2 + -1;

     label09:
        i1_2 = Phi(i1_1 #1, i1_3 #6);

        i2_1 = Phi(i2 #1, i2_5 #6);

(7)     if i1_2 >= 0 goto label02;

     label10:
        i1 = Phi(i1 #0, i1_2 #7);

        i2 = Phi(i2 #0, i2_1 #7);

        $z2 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z2 != 0 goto label01;

        return;
    }

    private boolean checkCoveredBy(infoFlow.Vertex, infoFlow.Vertex)
    {
        infoFlow.CoverRelation r0;
        infoFlow.Vertex r1, r2;
        com.microsoft.z3.BoolExpr r3, r4;
        boolean $z0;

        r0 := @this: infoFlow.CoverRelation;

        r1 := @parameter0: infoFlow.Vertex;

        r2 := @parameter1: infoFlow.Vertex;

        r3 = virtualinvoke r1.<infoFlow.Vertex: com.microsoft.z3.BoolExpr getInvariant()>();

        r4 = virtualinvoke r2.<infoFlow.Vertex: com.microsoft.z3.BoolExpr getInvariant()>();

        $z0 = specialinvoke r0.<infoFlow.CoverRelation: boolean isWeakerThan(com.microsoft.z3.BoolExpr,com.microsoft.z3.BoolExpr)>(r3, r4);

        return $z0;
    }

    private boolean isWeakerThan(com.microsoft.z3.BoolExpr, com.microsoft.z3.BoolExpr)
    {
        infoFlow.CoverRelation r0;
        com.microsoft.z3.BoolExpr r1, r2;
        boolean $z0;

        r0 := @this: infoFlow.CoverRelation;

        r1 := @parameter0: com.microsoft.z3.BoolExpr;

        r2 := @parameter1: com.microsoft.z3.BoolExpr;

        $z0 = specialinvoke r0.<infoFlow.CoverRelation: boolean isStrongerThan(com.microsoft.z3.BoolExpr,com.microsoft.z3.BoolExpr)>(r2, r1);

        return $z0;
    }

    private boolean isStrongerThan(com.microsoft.z3.BoolExpr, com.microsoft.z3.BoolExpr)
    {
        infoFlow.CoverRelation r0;
        com.microsoft.z3.BoolExpr r1, r2, r3, r4;
        com.microsoft.z3.Solver r5;
        com.microsoft.z3.Status r6, $r24;
        java.lang.Object[] $r7, $r12, $r18;
        java.lang.StringBuilder $r8, $r9, $r13, $r14, $r19, $r20;
        java.lang.String $r10, $r15, $r21;
        com.microsoft.z3.InterpolationContext $r11, $r17, $r22;
        com.microsoft.z3.BoolExpr[] $r16, $r23;
        boolean $z0;

        r0 := @this: infoFlow.CoverRelation;

        r1 := @parameter0: com.microsoft.z3.BoolExpr;

        r2 := @parameter1: com.microsoft.z3.BoolExpr;

        $r7 = newarray (java.lang.Object)[1];

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>(java.lang.String)>("weakaer = ");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7[0] = $r10;

        staticinvoke <infoFlow.LogUtils: void debugln(java.lang.Object[])>($r7);

        $r11 = r0.<infoFlow.CoverRelation: com.microsoft.z3.InterpolationContext ictx>;

        r3 = virtualinvoke $r11.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.BoolExpr mkNot(com.microsoft.z3.BoolExpr)>(r2);

        $r12 = newarray (java.lang.Object)[1];

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>(java.lang.String)>("not weaker = ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        $r12[0] = $r15;

        staticinvoke <infoFlow.LogUtils: void debugln(java.lang.Object[])>($r12);

        $r17 = r0.<infoFlow.CoverRelation: com.microsoft.z3.InterpolationContext ictx>;

        $r16 = newarray (com.microsoft.z3.BoolExpr)[2];

        $r16[0] = r1;

        $r16[1] = r3;

        r4 = virtualinvoke $r17.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.BoolExpr mkAnd(com.microsoft.z3.BoolExpr[])>($r16);

        $r18 = newarray (java.lang.Object)[1];

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>(java.lang.String)>("stronger = ");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        $r18[0] = $r21;

        staticinvoke <infoFlow.LogUtils: void debugln(java.lang.Object[])>($r18);

        $z0 = specialinvoke r0.<infoFlow.CoverRelation: boolean isFalseImpliesAnything(com.microsoft.z3.BoolExpr)>(r1);

        if $z0 == 0 goto label1;

        return 0;

     label1:
        $r22 = r0.<infoFlow.CoverRelation: com.microsoft.z3.InterpolationContext ictx>;

        r5 = virtualinvoke $r22.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.Solver mkSolver()>();

        virtualinvoke r5.<com.microsoft.z3.Solver: void reset()>();

        $r23 = newarray (com.microsoft.z3.BoolExpr)[1];

        $r23[0] = r4;

        virtualinvoke r5.<com.microsoft.z3.Solver: void add(com.microsoft.z3.BoolExpr[])>($r23);

        r6 = virtualinvoke r5.<com.microsoft.z3.Solver: com.microsoft.z3.Status check()>();

        $r24 = <com.microsoft.z3.Status: com.microsoft.z3.Status UNSATISFIABLE>;

        if r6 != $r24 goto label2;

        return 1;

     label2:
        return 0;
    }

    private boolean isFalseImpliesAnything(com.microsoft.z3.BoolExpr)
    {
        infoFlow.CoverRelation r0;
        com.microsoft.z3.BoolExpr r1;
        java.lang.String r2, r4, $r6;
        java.lang.String[] r3, r5;
        int i0, i1, i1_1, i1_2;
        boolean $z0, $z1, $z2, $z3;

        r0 := @this: infoFlow.CoverRelation;

        r1 := @parameter0: com.microsoft.z3.BoolExpr;

        $r6 = virtualinvoke r1.<com.microsoft.z3.BoolExpr: java.lang.String toString()>();

        $z0 = virtualinvoke $r6.<java.lang.String: boolean contains(java.lang.CharSequence)>("false");

        if $z0 != 0 goto label1;

        return 0;

     label1:
        r2 = virtualinvoke r1.<com.microsoft.z3.BoolExpr: java.lang.String toString()>();

        r3 = virtualinvoke r2.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\s+");

        r5 = r3;

        i0 = lengthof r3;

        i1 = 0;

(0)     goto label4;

     label2:
        r4 = r5[i1_1];

        $z1 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>("(or");

        if $z1 != 0 goto label3;

        $z2 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>("false");

        if $z2 != 0 goto label3;

        $z3 = virtualinvoke r4.<java.lang.String: boolean equals(java.lang.Object)>("false)");

        if $z3 != 0 goto label3;

        return 0;

     label3:
(1)     i1_2 = i1_1 + 1;

     label4:
        i1_1 = Phi(i1 #0, i1_2 #1);

        if i1_1 < i0 goto label2;

        return 1;
    }

    public boolean isCovered(infoFlow.Vertex)
    {
        infoFlow.CoverRelation r0;
        infoFlow.Vertex r1;
        boolean $z0, $z1;

        r0 := @this: infoFlow.CoverRelation;

        r1 := @parameter0: infoFlow.Vertex;

        $z0 = virtualinvoke r0.<infoFlow.CoverRelation: boolean isDirectlyCovered(infoFlow.Vertex)>(r1);

        if $z0 != 0 goto label1;

        $z1 = virtualinvoke r0.<infoFlow.CoverRelation: boolean isAncestorCovered(infoFlow.Vertex)>(r1);

        if $z1 != 0 goto label1;

        return 0;

     label1:
        return 1;
    }

    public boolean isDirectlyCovered(infoFlow.Vertex)
    {
        infoFlow.CoverRelation r0;
        infoFlow.Vertex r1;
        java.util.Set r2;
        java.util.Map $r3;
        java.lang.Object $r4;
        int $i0;

        r0 := @this: infoFlow.CoverRelation;

        r1 := @parameter0: infoFlow.Vertex;

        $r3 = r0.<infoFlow.CoverRelation: java.util.Map coveredByMap>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r2 = (java.util.Set) $r4;

        if r2 == null goto label1;

        $i0 = interfaceinvoke r2.<java.util.Set: int size()>();

        if $i0 != 0 goto label2;

     label1:
        return 0;

     label2:
        return 1;
    }

    public boolean isAncestorCovered(infoFlow.Vertex)
    {
        infoFlow.CoverRelation r0;
        infoFlow.Vertex r1;
        java.util.Set $r2;
        boolean $z0;

        r0 := @this: infoFlow.CoverRelation;

        r1 := @parameter0: infoFlow.Vertex;

        $r2 = r0.<infoFlow.CoverRelation: java.util.Set ancestorCoveredSet>;

        $z0 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>(r1);

        return $z0;
    }

    private void addCoverRelation(infoFlow.Vertex, infoFlow.Vertex)
    {
        infoFlow.CoverRelation r0;
        infoFlow.Vertex r1, r2;
        java.lang.Object[] $r3, $r12;
        java.util.Map $r4, $r6, $r8, $r10, $r13, $r16;
        boolean $z0, $z2, $z3;
        java.util.HashSet $r5, $r9, r19, r20;
        java.lang.Object $r14, $r17;
        java.util.Set $r15, $r18;

        r0 := @this: infoFlow.CoverRelation;

        r1 := @parameter0: infoFlow.Vertex;

        r2 := @parameter1: infoFlow.Vertex;

        $r3 = newarray (java.lang.Object)[1];

        $r3[0] = ">>>>>CoverRelation.addCoverRelation";

        staticinvoke <infoFlow.LogUtils: void debugln(java.lang.Object[])>($r3);

        $r4 = r0.<infoFlow.CoverRelation: java.util.Map coveredByMap>;

        $z0 = interfaceinvoke $r4.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r16 = r0.<infoFlow.CoverRelation: java.util.Map coveredByMap>;

        $r17 = interfaceinvoke $r16.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r18 = (java.util.Set) $r17;

        interfaceinvoke $r18.<java.util.Set: boolean add(java.lang.Object)>(r2);

        goto label2;

     label1:
        $r5 = new java.util.HashSet;

        specialinvoke $r5.<java.util.HashSet: void <init>()>();

        r19 = $r5;

        interfaceinvoke r19.<java.util.Set: boolean add(java.lang.Object)>(r2);

        $r6 = r0.<infoFlow.CoverRelation: java.util.Map coveredByMap>;

        interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r19);

        specialinvoke r0.<infoFlow.CoverRelation: void clearCoverRelation(infoFlow.Vertex)>(r1);

        $z2 = virtualinvoke r0.<infoFlow.CoverRelation: boolean isAncestorCovered(infoFlow.Vertex)>(r1);

        if $z2 != 0 goto label2;

        specialinvoke r0.<infoFlow.CoverRelation: void coverDescendants(infoFlow.Vertex)>(r1);

     label2:
        $r8 = r0.<infoFlow.CoverRelation: java.util.Map coveringMap>;

        $z3 = interfaceinvoke $r8.<java.util.Map: boolean containsKey(java.lang.Object)>(r2);

        if $z3 == 0 goto label3;

        $r13 = r0.<infoFlow.CoverRelation: java.util.Map coveringMap>;

        $r14 = interfaceinvoke $r13.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2);

        $r15 = (java.util.Set) $r14;

        interfaceinvoke $r15.<java.util.Set: boolean add(java.lang.Object)>(r1);

        goto label4;

     label3:
        $r9 = new java.util.HashSet;

        specialinvoke $r9.<java.util.HashSet: void <init>()>();

        r20 = $r9;

        interfaceinvoke r20.<java.util.Set: boolean add(java.lang.Object)>(r1);

        $r10 = r0.<infoFlow.CoverRelation: java.util.Map coveringMap>;

        interfaceinvoke $r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r20);

     label4:
        $r12 = newarray (java.lang.Object)[1];

        $r12[0] = "<<<<<CoverRelation.addCoverRelation";

        staticinvoke <infoFlow.LogUtils: void debugln(java.lang.Object[])>($r12);

        return;
    }

    private void clearCoverRelation(infoFlow.Vertex)
    {
        infoFlow.CoverRelation r0;
        infoFlow.Vertex r1, r3;
        java.util.Set r2, $r11;
        java.util.Iterator r4;
        java.util.Map $r5, $r6, $r9;
        boolean $z0, $z1, $z3;
        java.lang.Object $r7, $r8, $r10;

        r0 := @this: infoFlow.CoverRelation;

        r1 := @parameter0: infoFlow.Vertex;

        $r5 = r0.<infoFlow.CoverRelation: java.util.Map coveringMap>;

        $z0 = interfaceinvoke $r5.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 == 0 goto label3;

        $r6 = r0.<infoFlow.CoverRelation: java.util.Map coveringMap>;

        $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r2 = (java.util.Set) $r7;

        r4 = interfaceinvoke r2.<java.util.Set: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r8 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>();

        r3 = (infoFlow.Vertex) $r8;

        $r9 = r0.<infoFlow.CoverRelation: java.util.Map coveredByMap>;

        $r10 = interfaceinvoke $r9.<java.util.Map: java.lang.Object get(java.lang.Object)>(r3);

        $r11 = (java.util.Set) $r10;

        interfaceinvoke $r11.<java.util.Set: boolean remove(java.lang.Object)>(r1);

        $z3 = virtualinvoke r0.<infoFlow.CoverRelation: boolean isAncestorCovered(infoFlow.Vertex)>(r3);

        if $z3 != 0 goto label2;

        specialinvoke r0.<infoFlow.CoverRelation: void uncoverDescendants(infoFlow.Vertex)>(r3);

     label2:
        $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label1;

        interfaceinvoke r2.<java.util.Set: void clear()>();

     label3:
        return;
    }

    private void uncoverDescendants(infoFlow.Vertex)
    {
        infoFlow.CoverRelation r0;
        infoFlow.Vertex r1, r2;
        java.util.Iterator r3;
        java.lang.Object[] $r4;
        java.lang.StringBuilder $r5, $r6;
        java.lang.String $r7;
        java.util.Set $r8, $r10;
        boolean $z0;
        java.lang.Object $r9;

        r0 := @this: infoFlow.CoverRelation;

        r1 := @parameter0: infoFlow.Vertex;

        $r4 = newarray (java.lang.Object)[1];

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>(">>>>>>>>>CoverRelation.uncoverDescendants = ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r4[0] = $r7;

        staticinvoke <infoFlow.LogUtils: void debugln(java.lang.Object[])>($r4);

        $r8 = virtualinvoke r1.<infoFlow.Vertex: java.util.Set getPreviousVertexSet()>();

        r3 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r9 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r2 = (infoFlow.Vertex) $r9;

        $r10 = r0.<infoFlow.CoverRelation: java.util.Set ancestorCoveredSet>;

        interfaceinvoke $r10.<java.util.Set: boolean remove(java.lang.Object)>(r2);

        specialinvoke r0.<infoFlow.CoverRelation: void uncoverDescendants(infoFlow.Vertex)>(r2);

     label2:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return;
    }

    private void coverDescendants(infoFlow.Vertex)
    {
        infoFlow.CoverRelation r0;
        infoFlow.Vertex r1, r2;
        java.util.Iterator r3;
        java.lang.Object[] $r4;
        java.lang.StringBuilder $r5, $r6;
        java.lang.String $r7;
        java.util.Set $r8, $r10;
        boolean $z0;
        java.lang.Object $r9;

        r0 := @this: infoFlow.CoverRelation;

        r1 := @parameter0: infoFlow.Vertex;

        $r4 = newarray (java.lang.Object)[1];

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>(">>>>>>>>CoverRelation.coverDescendants = ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r4[0] = $r7;

        staticinvoke <infoFlow.LogUtils: void debugln(java.lang.Object[])>($r4);

        $r8 = virtualinvoke r1.<infoFlow.Vertex: java.util.Set getPreviousVertexSet()>();

        r3 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r9 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r2 = (infoFlow.Vertex) $r9;

        $r10 = r0.<infoFlow.CoverRelation: java.util.Set ancestorCoveredSet>;

        interfaceinvoke $r10.<java.util.Set: boolean add(java.lang.Object)>(r2);

        specialinvoke r0.<infoFlow.CoverRelation: void coverDescendants(infoFlow.Vertex)>(r2);

     label2:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return;
    }

    private void isDone(infoFlow.Vertex)
    {
        infoFlow.CoverRelation r0;
        infoFlow.Vertex r1;

        r0 := @this: infoFlow.CoverRelation;

        r1 := @parameter0: infoFlow.Vertex;

        return;
    }

    public java.util.Map getCoveringMap()
    {
        infoFlow.CoverRelation r0;
        java.util.Map $r1;

        r0 := @this: infoFlow.CoverRelation;

        $r1 = r0.<infoFlow.CoverRelation: java.util.Map coveringMap>;

        return $r1;
    }

    public java.util.Map getCoveredByMap()
    {
        infoFlow.CoverRelation r0;
        java.util.Map $r1;

        r0 := @this: infoFlow.CoverRelation;

        $r1 = r0.<infoFlow.CoverRelation: java.util.Map coveredByMap>;

        return $r1;
    }

    public java.util.Map getUnitVertexMap()
    {
        infoFlow.CoverRelation r0;
        java.util.Map $r1;

        r0 := @this: infoFlow.CoverRelation;

        $r1 = r0.<infoFlow.CoverRelation: java.util.Map unitVertexMap>;

        return $r1;
    }
}
