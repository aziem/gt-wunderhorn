public class SelfCompositionTest.NoLeak1 extends java.lang.Object
{
    static java.util.Map stores;

    static void <clinit>()
    {
        java.util.HashMap $r0;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        <SelfCompositionTest.NoLeak1: java.util.Map stores> = $r0;

        return;
    }

    public void <init>()
    {
        SelfCompositionTest.NoLeak1 r0;

        r0 := @this: SelfCompositionTest.NoLeak1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void main(java.lang.String[]) throws java.io.FileNotFoundException, java.io.UnsupportedEncodingException
    {
        java.lang.String[] r0, r1, $r7;
        java.lang.String r2, r3;
        soot.options.Options $r4, $r5, $r6;
        soot.PackManager $r8;
        soot.Pack $r9;
        java.util.Map $r12, $r16;
        java.io.PrintStream $r13;
        int $i0;
        java.lang.Object[] $r14, $r17, $r19, $r20, $r21, $r22, $r23, $r25;
        java.lang.Exception $r18, r27;
        java.lang.StackTraceElement[] $r24;
        infoFlow.ProgramTree r26, r30;
        SelfCompositionTest.NoLeak1$1 r28;
        soot.Transform r29;
        soot.Transformer r31;

        r0 := @parameter0: java.lang.String[];

        $r4 = staticinvoke <soot.options.Options: soot.options.Options v()>();

        virtualinvoke $r4.<soot.options.Options: void set_src_prec(int)>(1);

        $r5 = staticinvoke <soot.options.Options: soot.options.Options v()>();

        virtualinvoke $r5.<soot.options.Options: void set_output_format(int)>(3);

        $r6 = staticinvoke <soot.options.Options: soot.options.Options v()>();

        virtualinvoke $r6.<soot.options.Options: void set_allow_phantom_refs(boolean)>(1);

        $r7 = newarray (java.lang.String)[4];

        $r7[0] = "-process-dir";

        $r7[1] = "/Users/burak/Documents/WHarris/droidsafe-src/android-apps/examples/DroidBech/ImplicitFlows/ImplicitFlow3_changed/bin/classes";

        $r7[2] = "-output-dir";

        $r7[3] = "src/output/SelfCompositionTest1";

        r1 = $r7;

        $r8 = staticinvoke <soot.PackManager: soot.PackManager v()>();

        $r9 = virtualinvoke $r8.<soot.PackManager: soot.Pack getPack(java.lang.String)>("stp");

        r29 = new soot.Transform;

        r28 = new SelfCompositionTest.NoLeak1$1;

        specialinvoke r28.<SelfCompositionTest.NoLeak1$1: void <init>()>();

        r31 = (soot.Transformer) r28;

        specialinvoke r29.<soot.Transform: void <init>(java.lang.String,soot.Transformer)>("stp.test", r31);

        virtualinvoke $r9.<soot.Pack: void add(soot.Transform)>(r29);

        staticinvoke <soot.Main: void main(java.lang.String[])>(r1);

        $r13 = <java.lang.System: java.io.PrintStream out>;

        $r12 = <SelfCompositionTest.NoLeak1: java.util.Map stores>;

        $i0 = interfaceinvoke $r12.<java.util.Map: int size()>();

        virtualinvoke $r13.<java.io.PrintStream: void println(int)>($i0);

        r2 = "<de.ecspride.ImplicitFlow3: void tester()>";

        r3 = "<de.ecspride.ImplicitFlow3: void onCreate2(android.os.Bundle)>";

        $r14 = newarray (java.lang.Object)[1];

        $r14[0] = "SelfCompositionTest.NoLeak1... Test started...";

        staticinvoke <infoFlow.LogUtils: void infoln(java.lang.Object[])>($r14);

     label1:
        r30 = new infoFlow.ProgramTree;

        $r16 = <SelfCompositionTest.NoLeak1: java.util.Map stores>;

        specialinvoke r30.<infoFlow.ProgramTree: void <init>(java.util.Map,java.lang.String,boolean)>($r16, r2, 1);

        r26 = r30;

     label2:
        goto label4;

     label3:
        $r18 := @caughtexception;

        r27 = $r18;

        $r19 = newarray (java.lang.Object)[1];

        $r19[0] = "*******************************************";

        staticinvoke <infoFlow.LogUtils: void fatalln(java.lang.Object[])>($r19);

        $r20 = newarray (java.lang.Object)[1];

        $r20[0] = "*********** EXCEPTION OCCURRED ************";

        staticinvoke <infoFlow.LogUtils: void fatalln(java.lang.Object[])>($r20);

        $r21 = newarray (java.lang.Object)[1];

        $r21[0] = "*******************************************";

        staticinvoke <infoFlow.LogUtils: void fatalln(java.lang.Object[])>($r21);

        $r22 = newarray (java.lang.Object)[1];

        $r22[0] = r27;

        staticinvoke <infoFlow.LogUtils: void fatalln(java.lang.Object[])>($r22);

        $r23 = newarray (java.lang.Object)[1];

        $r23[0] = "******************";

        staticinvoke <infoFlow.LogUtils: void fatalln(java.lang.Object[])>($r23);

        $r24 = virtualinvoke r27.<java.lang.Exception: java.lang.StackTraceElement[] getStackTrace()>();

        staticinvoke <infoFlow.LogUtils: void fatalln(java.lang.Object[])>($r24);

        $r25 = newarray (java.lang.Object)[1];

        $r25[0] = "******************";

        staticinvoke <infoFlow.LogUtils: void fatalln(java.lang.Object[])>($r25);

        virtualinvoke r27.<java.lang.Exception: void printStackTrace()>();

     label4:
        $r17 = newarray (java.lang.Object)[1];

        $r17[0] = "SelfCompositionTest.NoLeak1... Test finished...";

        staticinvoke <infoFlow.LogUtils: void infoln(java.lang.Object[])>($r17);

        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }
}
