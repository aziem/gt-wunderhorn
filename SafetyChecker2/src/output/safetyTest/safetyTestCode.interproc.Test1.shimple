public class safetyTestCode.interproc.Test1 extends java.lang.Object
{
    int j;
    static final boolean $assertionsDisabled;

    static void <clinit>()
    {
        java.lang.Class $r0;
        boolean $z0, $z1, $z1_1, $z1_2;

        $r0 = class "safetyTestCode/interproc/Test1";

        $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>();

        if $z0 != 0 goto label1;

        $z1 = 1;

(0)     goto label2;

     label1:
(1)     $z1_1 = 0;

     label2:
        $z1_2 = Phi($z1 #0, $z1_1 #1);

        <safetyTestCode.interproc.Test1: boolean $assertionsDisabled> = $z1_2;

        return;
    }

    public void <init>()
    {
        safetyTestCode.interproc.Test1 r0;

        r0 := @this: safetyTestCode.interproc.Test1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void test(int)
    {
        safetyTestCode.interproc.Test1 r0;
        int i0, i1, i2;
        boolean $z0;
        java.lang.AssertionError $r1;

        r0 := @this: safetyTestCode.interproc.Test1;

        i0 := @parameter0: int;

        i1 = virtualinvoke r0.<safetyTestCode.interproc.Test1: int recursive(int)>(3);

        i2 = i1 + 2147483647;

        $z0 = <safetyTestCode.interproc.Test1: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if i1 == 3 goto label1;

        $r1 = new java.lang.AssertionError;

        specialinvoke $r1.<java.lang.AssertionError: void <init>()>();

        throw $r1;

     label1:
        return;
    }

    public int recursive(int)
    {
        safetyTestCode.interproc.Test1 r0;
        int i0, $i1, $i2, $i3, $i4, $i5;

        r0 := @this: safetyTestCode.interproc.Test1;

        i0 := @parameter0: int;

        if i0 == 1 goto label1;

        if i0 != 2 goto label2;

     label1:
        return 1;

     label2:
        $i1 = i0 - 1;

        $i2 = virtualinvoke r0.<safetyTestCode.interproc.Test1: int recursive(int)>($i1);

        $i3 = i0 - 2;

        $i4 = virtualinvoke r0.<safetyTestCode.interproc.Test1: int recursive(int)>($i3);

        $i5 = $i2 + $i4;

        return $i5;
    }

    public int recursive2(int)
    {
        safetyTestCode.interproc.Test1 r0;
        int i0, $i1, $i2, i3, i3_1, i3_2;
        boolean z0;

        r0 := @this: safetyTestCode.interproc.Test1;

        i0 := @parameter0: int;

        z0 = 0;

        if i0 != 1 goto label1;

        i3 = 1;

(0)     goto label2;

     label1:
        $i1 = i0 - 1;

        $i2 = virtualinvoke r0.<safetyTestCode.interproc.Test1: int recursive(int)>($i1);

(1)     i3_1 = $i2 + i0;

     label2:
        i3_2 = Phi(i3 #0, i3_1 #1);

        return i3_2;
    }

    public int getHalf(int)
    {
        safetyTestCode.interproc.Test1 r0;
        int i0, $i1, i2, i2_1, i2_2;
        boolean z0, z1;

        r0 := @this: safetyTestCode.interproc.Test1;

        i0 := @parameter0: int;

        z0 = virtualinvoke r0.<safetyTestCode.interproc.Test1: boolean isEven(int)>(i0);

        z1 = 0;

        if z0 == 0 goto label1;

        i2 = i0 / 2;

(0)     goto label2;

     label1:
        $i1 = i0 + 1;

(1)     i2_1 = $i1 / 2;

     label2:
        i2_2 = Phi(i2 #0, i2_1 #1);

        return i2_2;
    }

    public boolean isEven(int)
    {
        safetyTestCode.interproc.Test1 r0;
        int i0, $i1;
        boolean z0, z1, z1_1, z1_2;

        r0 := @this: safetyTestCode.interproc.Test1;

        i0 := @parameter0: int;

        z0 = 0;

        $i1 = i0 % 2;

        if $i1 != 0 goto label1;

        z1 = 1;

(0)     goto label2;

     label1:
(1)     z1_1 = 0;

     label2:
        z1_2 = Phi(z1 #0, z1_1 #1);

        return z1_2;
    }

    public int fun1(int)
    {
        safetyTestCode.interproc.Test1 r0;
        int i0, i1, i2, i2_1, i2_2;
        boolean z0;

        r0 := @this: safetyTestCode.interproc.Test1;

        i0 := @parameter0: int;

        z0 = 0;

        i1 = virtualinvoke r0.<safetyTestCode.interproc.Test1: int fun2(int)>(i0);

        if i0 != 2 goto label1;

        i2 = i0 * i1;

(0)     goto label2;

     label1:
(1)     i2_1 = i1;

     label2:
        i2_2 = Phi(i2 #0, i2_1 #1);

        return i2_2;
    }

    public int fun2(int)
    {
        safetyTestCode.interproc.Test1 r0;
        int i0;

        r0 := @this: safetyTestCode.interproc.Test1;

        i0 := @parameter0: int;

        return 50;
    }

    public static void main(java.lang.String[])
    {
        java.lang.String[] r0;
        safetyTestCode.interproc.Test1 r1, $r2;
        int i0, i1, i2;
        java.io.PrintStream $r3, $r4;
        boolean $z0;
        java.lang.Object[] $r5, $r6, $r8, $r10, $r12;
        java.lang.Integer $r7, $r9, $r11;
        java.lang.AssertionError $r13;

        r0 := @parameter0: java.lang.String[];

        $r2 = new safetyTestCode.interproc.Test1;

        specialinvoke $r2.<safetyTestCode.interproc.Test1: void <init>()>();

        r1 = $r2;

        i0 = virtualinvoke r1.<safetyTestCode.interproc.Test1: int recursive(int)>(5);

        $r3 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r3.<java.io.PrintStream: void println(int)>(i0);

        $z0 = <safetyTestCode.interproc.Test1: boolean $assertionsDisabled>;

        if $z0 != 0 goto label1;

        if i0 == 4 goto label1;

        $r13 = new java.lang.AssertionError;

        specialinvoke $r13.<java.lang.AssertionError: void <init>()>();

        throw $r13;

     label1:
        $r4 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r4.<java.io.PrintStream: void println(int)>(i0);

        i1 = 2147483647;

        i2 = i1 + 10;

        if i2 >= -2147483599 goto label2;

        $r12 = newarray (java.lang.Object)[1];

        $r12[0] = "Haha";

        staticinvoke <safetyChecker.utilities.LogUtils: void warningln(java.lang.Object[])>($r12);

     label2:
        $r5 = newarray (java.lang.Object)[1];

        $r5[0] = "test";

        staticinvoke <safetyChecker.utilities.LogUtils: void warningln(java.lang.Object[])>($r5);

        $r6 = newarray (java.lang.Object)[1];

        $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2147483647);

        $r6[0] = $r7;

        staticinvoke <safetyChecker.utilities.LogUtils: void warningln(java.lang.Object[])>($r6);

        $r8 = newarray (java.lang.Object)[1];

        $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(-2147483648);

        $r8[0] = $r9;

        staticinvoke <safetyChecker.utilities.LogUtils: void warningln(java.lang.Object[])>($r8);

        $r10 = newarray (java.lang.Object)[1];

        $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2);

        $r10[0] = $r11;

        staticinvoke <safetyChecker.utilities.LogUtils: void warningln(java.lang.Object[])>($r10);

        return;
    }

    public void test4(int)
    {
        safetyTestCode.interproc.Test1 r0;
        int i0, i1;
        boolean z0;

        r0 := @this: safetyTestCode.interproc.Test1;

        i0 := @parameter0: int;

        z0 = 0;

        i1 = staticinvoke <safetyTestCode.interproc.Test1: int getOne()>();

        if i1 != 5 goto label1;

        staticinvoke <safetyChecker.utilities.ErrorLable: void Error()>();

     label1:
        return;
    }

    public static int getOne()
    {
        return 5;
    }

    public static int staticSum(int, int)
    {
        int i0, i1, $i2;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i2 = i0 + i1;

        return $i2;
    }

    public int sum(int, int)
    {
        safetyTestCode.interproc.Test1 r0;
        int i0, i1, $i2;

        r0 := @this: safetyTestCode.interproc.Test1;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        $i2 = i0 + i1;

        return $i2;
    }

    public void test3(int)
    {
        safetyTestCode.interproc.Test1 r0;
        int i0, i2, i3;
        byte b1;
        safetyTestCode.interproc.Obj r1, $r2;
        boolean z0;

        r0 := @this: safetyTestCode.interproc.Test1;

        i0 := @parameter0: int;

        z0 = 1;

        b1 = 5;

        $r2 = new safetyTestCode.interproc.Obj;

        specialinvoke $r2.<safetyTestCode.interproc.Obj: void <init>()>();

        r1 = $r2;

        i3 = virtualinvoke r1.<safetyTestCode.interproc.Obj: int getSix()>();

        i2 = virtualinvoke r0.<safetyTestCode.interproc.Test1: int getNumber(int,int,safetyTestCode.interproc.Obj)>(i3, b1, r1);

        if i2 != 211 goto label1;

        staticinvoke <safetyChecker.utilities.ErrorLable: void Error()>();

     label1:
        return;
    }

    public int getNumber(int, int, safetyTestCode.interproc.Obj)
    {
        safetyTestCode.interproc.Test1 r0;
        int i0, i1, i2, $i3;
        safetyTestCode.interproc.Obj r1;

        r0 := @this: safetyTestCode.interproc.Test1;

        i0 := @parameter0: int;

        i1 := @parameter1: int;

        r1 := @parameter2: safetyTestCode.interproc.Obj;

        $i3 = virtualinvoke r1.<safetyTestCode.interproc.Obj: int getDouble(int)>(i1);

        i2 = i0 + $i3;

        return i2;
    }

    int getDouble(int)
    {
        safetyTestCode.interproc.Test1 r0;
        int i0, $i1;

        r0 := @this: safetyTestCode.interproc.Test1;

        i0 := @parameter0: int;

        $i1 = i0 * 2;

        return $i1;
    }

    public void test2(int)
    {
        safetyTestCode.interproc.Test1 r0;
        int i0, i1;

        r0 := @this: safetyTestCode.interproc.Test1;

        i0 := @parameter0: int;

        i1 = virtualinvoke r0.<safetyTestCode.interproc.Test1: int fibonacciRecusion(int)>(i0);

        if i1 != 2 goto label1;

        staticinvoke <safetyChecker.utilities.ErrorLable: void Error()>();

     label1:
        return;
    }

    public int fibonacciRecusion(int)
    {
        safetyTestCode.interproc.Test1 r0;
        int i0, $i1, $i2, $i3, $i4, $i5;

        r0 := @this: safetyTestCode.interproc.Test1;

        i0 := @parameter0: int;

        if i0 == 1 goto label1;

        if i0 != 2 goto label2;

     label1:
        return 1;

     label2:
        $i1 = i0 - 1;

        $i2 = virtualinvoke r0.<safetyTestCode.interproc.Test1: int fibonacciRecusion(int)>($i1);

        $i3 = i0 - 2;

        $i4 = virtualinvoke r0.<safetyTestCode.interproc.Test1: int fibonacciRecusion(int)>($i3);

        $i5 = $i2 + $i4;

        return $i5;
    }
}
