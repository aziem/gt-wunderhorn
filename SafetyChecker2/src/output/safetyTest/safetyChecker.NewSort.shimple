public class safetyChecker.NewSort extends java.lang.Object
{
    private com.microsoft.z3.Sort Type;
    private int currentId;
    private int ObejctId;
    private java.util.Map index;
    private java.util.Set realObject;
    private com.microsoft.z3.InterpolationContext iCtx;
    private int Path;

    public void <init>(com.microsoft.z3.Sort, com.microsoft.z3.InterpolationContext)
    {
        safetyChecker.NewSort r0;
        com.microsoft.z3.Sort r1;
        com.microsoft.z3.InterpolationContext r2;
        java.util.HashMap $r3;
        java.util.HashSet $r4;

        r0 := @this: safetyChecker.NewSort;

        r1 := @parameter0: com.microsoft.z3.Sort;

        r2 := @parameter1: com.microsoft.z3.InterpolationContext;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<safetyChecker.NewSort: com.microsoft.z3.Sort Type> = r1;

        r0.<safetyChecker.NewSort: int currentId> = 1;

        r0.<safetyChecker.NewSort: int ObejctId> = 1;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r0.<safetyChecker.NewSort: java.util.Map index> = $r3;

        $r4 = new java.util.HashSet;

        specialinvoke $r4.<java.util.HashSet: void <init>()>();

        r0.<safetyChecker.NewSort: java.util.Set realObject> = $r4;

        r0.<safetyChecker.NewSort: com.microsoft.z3.InterpolationContext iCtx> = r2;

        return;
    }

    public void creatNewOject(com.microsoft.z3.Expr)
    {
        safetyChecker.NewSort r0;
        com.microsoft.z3.Expr r1;
        java.lang.Integer r2;
        com.microsoft.z3.IntNum r3;
        int $i0, $i1, $i2, $i3, $i4;
        com.microsoft.z3.InterpolationContext $r4;
        java.util.Map $r5;
        java.lang.Object[] $r7;
        java.lang.StringBuilder $r8, $r9, $r10, $r11, $r12, $r13;
        java.lang.String $r14;

        r0 := @this: safetyChecker.NewSort;

        r1 := @parameter0: com.microsoft.z3.Expr;

        $i0 = r0.<safetyChecker.NewSort: int currentId>;

        r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r4 = r0.<safetyChecker.NewSort: com.microsoft.z3.InterpolationContext iCtx>;

        $i1 = virtualinvoke r2.<java.lang.Integer: int intValue()>();

        r3 = virtualinvoke $r4.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.IntNum mkInt(int)>($i1);

        $r5 = r0.<safetyChecker.NewSort: java.util.Map index>;

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r3);

        $i2 = r0.<safetyChecker.NewSort: int currentId>;

        $i3 = $i2 + 1;

        r0.<safetyChecker.NewSort: int currentId> = $i3;

        $r7 = newarray (java.lang.Object)[1];

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<java.lang.StringBuilder: void <init>(java.lang.String)>("NewSort.creatNewOject**name=");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("--iExpr");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("--currentId-");

        $i4 = r0.<safetyChecker.NewSort: int currentId>;

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7[0] = $r14;

        staticinvoke <safetyChecker.LogUtils: void debugln(java.lang.Object[])>($r7);

        return;
    }

    public com.microsoft.z3.IntExpr getId(com.microsoft.z3.Expr)
    {
        safetyChecker.NewSort r0;
        com.microsoft.z3.Expr r1;
        com.microsoft.z3.IntExpr r2;
        java.util.Map $r3;
        java.lang.Object $r4;
        java.lang.Object[] $r5;
        java.lang.StringBuilder $r6, $r7, $r8, $r9;
        java.lang.String $r10;

        r0 := @this: safetyChecker.NewSort;

        r1 := @parameter0: com.microsoft.z3.Expr;

        $r3 = r0.<safetyChecker.NewSort: java.util.Map index>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r2 = (com.microsoft.z3.IntExpr) $r4;

        $r5 = newarray (java.lang.Object)[1];

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>("NewSort.getID**name=");

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("--index=");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        $r5[0] = $r10;

        staticinvoke <safetyChecker.LogUtils: void debugln(java.lang.Object[])>($r5);

        return r2;
    }

    public boolean ifHasExpr(com.microsoft.z3.Expr)
    {
        safetyChecker.NewSort r0;
        com.microsoft.z3.Expr r1;
        java.lang.Object[] $r2;
        java.lang.StringBuilder $r3, $r4;
        java.lang.String $r5;
        java.util.Map $r6;
        boolean $z0;

        r0 := @this: safetyChecker.NewSort;

        r1 := @parameter0: com.microsoft.z3.Expr;

        $r2 = newarray (java.lang.Object)[1];

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("NewSort.ifHasExpr name=");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>();

        $r2[0] = $r5;

        staticinvoke <safetyChecker.LogUtils: void debugln(java.lang.Object[])>($r2);

        $r6 = r0.<safetyChecker.NewSort: java.util.Map index>;

        $z0 = interfaceinvoke $r6.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        return $z0;
    }

    public com.microsoft.z3.Expr getNewObject()
    {
        safetyChecker.NewSort r0;
        int i0, $i1, $i2, $i3;
        com.microsoft.z3.IntNum r1;
        com.microsoft.z3.InterpolationContext $r2;
        java.lang.Object[] $r3;
        java.lang.StringBuilder $r4, $r5, $r6, $r7;
        java.lang.String $r8;

        r0 := @this: safetyChecker.NewSort;

        i0 = r0.<safetyChecker.NewSort: int ObejctId>;

        $r2 = r0.<safetyChecker.NewSort: com.microsoft.z3.InterpolationContext iCtx>;

        r1 = virtualinvoke $r2.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.IntNum mkInt(int)>(i0);

        $i1 = r0.<safetyChecker.NewSort: int ObejctId>;

        $i2 = $i1 + 1;

        r0.<safetyChecker.NewSort: int ObejctId> = $i2;

        $r3 = newarray (java.lang.Object)[1];

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>(java.lang.String)>("NewSort.getNewObject index=");

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-- ObejctId=");

        $i3 = r0.<safetyChecker.NewSort: int ObejctId>;

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>();

        $r3[0] = $r8;

        staticinvoke <safetyChecker.LogUtils: void debugln(java.lang.Object[])>($r3);

        return r1;
    }
}
