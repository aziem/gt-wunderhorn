public class safetyTestCode.arraytest.Test1 extends java.lang.Object
{

    public void <init>()
    {
        safetyTestCode.arraytest.Test1 r0;

        r0 := @this: safetyTestCode.arraytest.Test1;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public void test(int)
    {
        safetyTestCode.arraytest.Test1 r0;
        int i0, $i1, i2, i3;
        int[] r1, r2;

        r0 := @this: safetyTestCode.arraytest.Test1;

        i0 := @parameter0: int;

        r1 = newarray (int)[2];

        r2 = newarray (int)[2];

        i2 = r1[0];

        i3 = r2[0];

        $i1 = r1[0];

        if $i1 != 2 goto label1;

        staticinvoke <safetyChecker.utilities.ErrorLable: void Error()>();

     label1:
        return;
    }

    public void test3(int)
    {
        safetyTestCode.arraytest.Test1 r0;
        int i0, $i2, $i3, $i4, $i5, $i6, $i7;
        byte b1;
        int[] r1, r2, r3;
        boolean $z0;

        r0 := @this: safetyTestCode.arraytest.Test1;

        i0 := @parameter0: int;

        b1 = 3;

        r1 = newarray (int)[3];

        r2 = newarray (int)[3];

        r1[0] = 25;

        r1[1] = 20;

        r1[2] = 15;

        $i2 = r1[2];

        r2[0] = $i2;

        $i3 = r1[1];

        r2[1] = $i3;

        $i4 = r1[0];

        r2[2] = $i4;

        r3 = newarray (int)[3];

        $i5 = r2[2];

        r3[0] = $i5;

        $i6 = r2[1];

        r3[1] = $i6;

        $i7 = r2[0];

        r3[2] = $i7;

        staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, r2, 0, 3);

        $z0 = staticinvoke <java.util.Arrays: boolean equals(int[],int[])>(r1, r3);

        if $z0 == 0 goto label1;

        staticinvoke <safetyChecker.utilities.ErrorLable: void Error()>();

     label1:
        return;
    }

    public void test4(int)
    {
        safetyTestCode.arraytest.Test1 r0;
        int i0, i1, i1_1, i1_2;
        int[] r1, r2;
        boolean $z0;

        r0 := @this: safetyTestCode.arraytest.Test1;

        i0 := @parameter0: int;

        r1 = newarray (int)[i0];

        r2 = newarray (int)[i0];

        i1 = 0;

(0)     goto label2;

     label1:
        r1[i1_1] = i1_1;

        r2[i1_1] = i1_1;

(1)     i1_2 = i1_1 + 1;

     label2:
        i1_1 = Phi(i1 #0, i1_2 #1);

        if i1_1 < i0 goto label1;

        $z0 = staticinvoke <java.util.Arrays: boolean equals(int[],int[])>(r1, r2);

        if $z0 == 0 goto label3;

        staticinvoke <safetyChecker.utilities.ErrorLable: void Error()>();

     label3:
        return;
    }
}
