public class safetyChecker.z3ScriptManager.Z3ScriptHandler extends java.lang.Object
{
    private com.microsoft.z3.InterpolationContext ictx;
    private java.util.Map stores;
    private java.util.Map newSortMap;
    private java.util.Map sortId;
    private java.util.Map global;
    private java.util.Map localMap;
    private java.util.Map arrayNameMap;
    private java.util.Map realArraySize;
    private java.util.Map maxArraySize;
    private java.util.Map substitute;
    private java.util.Map substituteSort;
    private java.util.Stack parameters;
    private safetyChecker.z3ScriptManager.Z3ArrayHandler arrayHandler;
    private safetyChecker.z3ScriptManager.Z3ObjectFieldHandler objFieldHandler;
    private safetyChecker.z3ScriptManager.Z3JavaMathLibrary z3MathLibrary;
    private safetyChecker.z3ScriptManager.Z3JavaStringLibrary z3StringLibrary;
    private safetyChecker.Vertex errorPathRoot;
    private safetyChecker.Edge currentEdge;

    public void <init>(com.microsoft.z3.InterpolationContext, java.util.Map)
    {
        safetyChecker.z3ScriptManager.Z3ScriptHandler r0;
        com.microsoft.z3.InterpolationContext r1;
        java.util.Map r2;
        java.util.HashMap $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11;
        java.util.Stack $r12;
        safetyChecker.z3ScriptManager.Z3ArrayHandler $r13;
        safetyChecker.z3ScriptManager.Z3ObjectFieldHandler $r14;
        safetyChecker.z3ScriptManager.Z3JavaMathLibrary $r15;
        safetyChecker.z3ScriptManager.Z3JavaStringLibrary $r16;

        r0 := @this: safetyChecker.z3ScriptManager.Z3ScriptHandler;

        r1 := @parameter0: com.microsoft.z3.InterpolationContext;

        r2 := @parameter1: java.util.Map;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: java.util.Map newSortMap> = $r3;

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: java.util.Map sortId> = $r4;

        $r5 = new java.util.HashMap;

        specialinvoke $r5.<java.util.HashMap: void <init>()>();

        r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: java.util.Map global> = $r5;

        $r6 = new java.util.HashMap;

        specialinvoke $r6.<java.util.HashMap: void <init>()>();

        r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: java.util.Map localMap> = $r6;

        $r7 = new java.util.HashMap;

        specialinvoke $r7.<java.util.HashMap: void <init>()>();

        r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: java.util.Map arrayNameMap> = $r7;

        $r8 = new java.util.HashMap;

        specialinvoke $r8.<java.util.HashMap: void <init>()>();

        r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: java.util.Map realArraySize> = $r8;

        $r9 = new java.util.HashMap;

        specialinvoke $r9.<java.util.HashMap: void <init>()>();

        r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: java.util.Map maxArraySize> = $r9;

        $r10 = new java.util.HashMap;

        specialinvoke $r10.<java.util.HashMap: void <init>()>();

        r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: java.util.Map substitute> = $r10;

        $r11 = new java.util.HashMap;

        specialinvoke $r11.<java.util.HashMap: void <init>()>();

        r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: java.util.Map substituteSort> = $r11;

        $r12 = new java.util.Stack;

        specialinvoke $r12.<java.util.Stack: void <init>()>();

        r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: java.util.Stack parameters> = $r12;

        $r13 = new safetyChecker.z3ScriptManager.Z3ArrayHandler;

        specialinvoke $r13.<safetyChecker.z3ScriptManager.Z3ArrayHandler: void <init>()>();

        r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: safetyChecker.z3ScriptManager.Z3ArrayHandler arrayHandler> = $r13;

        $r14 = new safetyChecker.z3ScriptManager.Z3ObjectFieldHandler;

        specialinvoke $r14.<safetyChecker.z3ScriptManager.Z3ObjectFieldHandler: void <init>()>();

        r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: safetyChecker.z3ScriptManager.Z3ObjectFieldHandler objFieldHandler> = $r14;

        $r15 = new safetyChecker.z3ScriptManager.Z3JavaMathLibrary;

        specialinvoke $r15.<safetyChecker.z3ScriptManager.Z3JavaMathLibrary: void <init>()>();

        r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: safetyChecker.z3ScriptManager.Z3JavaMathLibrary z3MathLibrary> = $r15;

        $r16 = new safetyChecker.z3ScriptManager.Z3JavaStringLibrary;

        specialinvoke $r16.<safetyChecker.z3ScriptManager.Z3JavaStringLibrary: void <init>()>();

        r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: safetyChecker.z3ScriptManager.Z3JavaStringLibrary z3StringLibrary> = $r16;

        r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx> = r1;

        r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: java.util.Map stores> = r2;

        return;
    }

    public void convertPathtoZ3Script(safetyChecker.Vertex)
    {
        safetyChecker.z3ScriptManager.Z3ScriptHandler r0;
        java.lang.Object[] $r1, $r2, $r3, $r23;
        java.lang.StringBuilder $r4, $r5, $r6, $r8, $r9, $r12, $r13, $r15, $r16, $r19;
        safetyChecker.Edge $r7, $r10, $r17, $r21, $r22;
        safetyChecker.Vertex $r11, $r14, $r18, r24, r24_1, r24_2;
        java.lang.String $r20;
        boolean $z1, z2, z2_1, z2_2;

        r0 := @this: safetyChecker.z3ScriptManager.Z3ScriptHandler;

        r24 := @parameter0: safetyChecker.Vertex;

        $r1 = newarray (java.lang.Object)[1];

        $r1[0] = ">>>>>>> Z3ScriptHandler.convertPathtoZ3Script";

        staticinvoke <safetyChecker.utilities.LogUtils: void debugln(java.lang.Object[])>($r1);

        r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: safetyChecker.Vertex errorPathRoot> = r24;

        z2 = 0;

(0)     goto label3;

     label1:
        if z2_1 == 0 goto label2;

        goto label4;

     label2:
        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = "^^^^^";

        staticinvoke <safetyChecker.utilities.LogUtils: void debug(java.lang.Object[])>($r2);

        $r3 = newarray (java.lang.Object)[1];

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<java.lang.StringBuilder: void <init>()>();

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r24_1);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" *** ");

        $r7 = virtualinvoke r24_1.<safetyChecker.Vertex: safetyChecker.Edge getOutgoingEdge()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("***");

        $r10 = virtualinvoke r24_1.<safetyChecker.Vertex: safetyChecker.Edge getOutgoingEdge()>();

        $r11 = virtualinvoke $r10.<safetyChecker.Edge: safetyChecker.Vertex getSource()>();

        $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r11);

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("***");

        $r14 = virtualinvoke r24_1.<safetyChecker.Vertex: safetyChecker.Vertex getNextVertex()>();

        $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("***");

        $r17 = virtualinvoke r24_1.<safetyChecker.Vertex: safetyChecker.Edge getOutgoingEdge()>();

        $r18 = virtualinvoke $r17.<safetyChecker.Edge: safetyChecker.Vertex getTarget()>();

        $r19 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r18);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        $r3[0] = $r20;

        staticinvoke <safetyChecker.utilities.LogUtils: void debugln(java.lang.Object[])>($r3);

        $r21 = virtualinvoke r24_1.<safetyChecker.Vertex: safetyChecker.Edge getOutgoingEdge()>();

        virtualinvoke r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: boolean createZ3Script(safetyChecker.Edge)>($r21);

        r24_2 = virtualinvoke r24_1.<safetyChecker.Vertex: safetyChecker.Vertex getNextVertex()>();

        $r22 = virtualinvoke r24_2.<safetyChecker.Vertex: safetyChecker.Edge getOutgoingEdge()>();

        $z1 = virtualinvoke $r22.<safetyChecker.Edge: boolean isErrorEdge()>();

(1)     if $z1 == 0 goto label3;

(2)     z2_2 = 1;

     label3:
        r24_1 = Phi(r24 #0, r24_2 #1, r24_2 #2);

        z2_1 = Phi(z2 #0, z2_1 #1, z2_2 #2);

        if r24_1 != null goto label1;

     label4:
        $r23 = newarray (java.lang.Object)[1];

        $r23[0] = "<<<<<<<< Z3ScriptHandler.convertPathtoZ3Script";

        staticinvoke <safetyChecker.utilities.LogUtils: void debugln(java.lang.Object[])>($r23);

        return;
    }

    public boolean createZ3Script(safetyChecker.Edge)
    {
        safetyChecker.z3ScriptManager.Z3ScriptHandler r0;
        safetyChecker.Edge r1;
        soot.Unit r2, $r35;
        java.lang.Object[] $r3, $r4, $r11, $r16, $r17, $r24, $r29, $r30, $r40;
        java.lang.StringBuilder $r5, $r7, $r8, $r9, $r12, $r14, $r18, $r20, $r21, $r22, $r25, $r27, $r31, $r33, $r34, $r38;
        safetyChecker.Vertex $r6, $r19;
        java.lang.String $r10, $r15, $r23, $r28, $r37, $r39;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, z13, z13_1, z13_2, z13_3, z13_4, z13_5, z13_6, z13_7, z13_8, z13_9, z13_10, z13_11, z13_12, z13_13, z13_14, z13_15, z13_16, z13_17, z13_18, z13_19, z13_20, z13_21, z13_22;
        com.microsoft.z3.BoolExpr $r13, $r26, $r32;
        java.lang.Class $r36;

        r0 := @this: safetyChecker.z3ScriptManager.Z3ScriptHandler;

        r1 := @parameter0: safetyChecker.Edge;

        $r3 = newarray (java.lang.Object)[1];

        $r3[0] = ">>>>>>";

        staticinvoke <safetyChecker.utilities.LogUtils: void warning(java.lang.Object[])>($r3);

        $r4 = newarray (java.lang.Object)[1];

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>()>();

        $r6 = virtualinvoke r1.<safetyChecker.Edge: safetyChecker.Vertex getSource()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("***");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        $r4[0] = $r10;

        staticinvoke <safetyChecker.utilities.LogUtils: void infoln(java.lang.Object[])>($r4);

        z13 = 0;

        r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: safetyChecker.Edge currentEdge> = r1;

        $z0 = virtualinvoke r1.<safetyChecker.Edge: boolean isErrorEdge()>();

(0)     if $z0 == 0 goto label01;

(1)     z13_1 = specialinvoke r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: boolean convertErrorEdge(safetyChecker.Edge)>(r1);

     label01:
        z13_2 = Phi(z13 #0, z13_1 #1);

        r2 = virtualinvoke r1.<safetyChecker.Edge: soot.Unit getUnit()>();

        $z1 = r2 instanceof soot.jimple.IfStmt;

(2)     if $z1 == 0 goto label02;

(3)     z13_3 = specialinvoke r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: boolean convertIfStmt(safetyChecker.Edge)>(r1);

     label02:
        z13_4 = Phi(z13_2 #2, z13_3 #3);

        $z2 = r2 instanceof soot.jimple.GotoStmt;

(4)     if $z2 == 0 goto label03;

(5)     z13_5 = specialinvoke r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: boolean convertGotoStmt(safetyChecker.Edge)>(r1);

     label03:
        z13_6 = Phi(z13_4 #4, z13_5 #5);

        $z3 = r2 instanceof soot.jimple.AssignStmt;

(6)     if $z3 == 0 goto label04;

(7)     z13_7 = specialinvoke r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: boolean convertAssignStmtEdge(safetyChecker.Edge)>(r1);

     label04:
        z13_8 = Phi(z13_6 #6, z13_7 #7);

        $z4 = r2 instanceof soot.jimple.IdentityStmt;

(8)     if $z4 == 0 goto label05;

(9)     z13_9 = specialinvoke r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: boolean convertIdentityStmt(safetyChecker.Edge)>(r1);

     label05:
        z13_10 = Phi(z13_8 #8, z13_9 #9);

        $z5 = r2 instanceof soot.jimple.InvokeStmt;

(10)    if $z5 == 0 goto label06;

        $z12 = virtualinvoke r1.<safetyChecker.Edge: boolean isFunctionCall()>();

(11)    if $z12 != 0 goto label06;

(12)    z13_11 = specialinvoke r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: boolean convertNotSubFuntionInvoke(safetyChecker.Edge)>(r1);

     label06:
        z13_12 = Phi(z13_10 #10, z13_10 #11, z13_11 #12);

        $z6 = virtualinvoke r1.<safetyChecker.Edge: boolean isSinkEdge()>();

(13)    if $z6 == 0 goto label07;

(14)    z13_13 = specialinvoke r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: boolean convertSinkInvoke2Z3(safetyChecker.Edge)>(r1);

     label07:
        z13_14 = Phi(z13_12 #13, z13_13 #14);

        $z7 = virtualinvoke r1.<safetyChecker.Edge: boolean isArrayCopyEdge()>();

(15)    if $z7 == 0 goto label08;

(16)    z13_15 = specialinvoke r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: boolean convertArrayCopy(safetyChecker.Edge)>(r1);

     label08:
        z13_16 = Phi(z13_14 #15, z13_15 #16);

        $z8 = virtualinvoke r1.<safetyChecker.Edge: boolean isNewString()>();

(17)    if $z8 == 0 goto label09;

(18)    z13_17 = specialinvoke r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: boolean convertNewStringExpr(safetyChecker.Edge)>(r1);

     label09:
        z13_18 = Phi(z13_16 #17, z13_17 #18);

        $z9 = r2 instanceof soot.jimple.ReturnStmt;

(19)    if $z9 == 0 goto label10;

(20)    z13_19 = specialinvoke r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: boolean convertReturnStmt(safetyChecker.Edge)>(r1);

     label10:
        z13_20 = Phi(z13_18 #19, z13_19 #20);

        $z10 = virtualinvoke r1.<safetyChecker.Edge: boolean isFunctionCall()>();

(21)    if $z10 == 0 goto label11;

        $z11 = r2 instanceof soot.jimple.AssignStmt;

(22)    if $z11 != 0 goto label11;

(23)    z13_21 = specialinvoke r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: boolean convertFunctionCallOnly(safetyChecker.Edge)>(r1);

     label11:
        z13_22 = Phi(z13_20 #21, z13_20 #22, z13_21 #23);

        $r11 = newarray (java.lang.Object)[1];

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>(java.lang.String)>("z3Expr=");

        $r13 = virtualinvoke r1.<safetyChecker.Edge: com.microsoft.z3.BoolExpr getZ3Expr()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        $r11[0] = $r15;

        staticinvoke <safetyChecker.utilities.LogUtils: void infoln(java.lang.Object[])>($r11);

        if z13_22 != 0 goto label12;

        $r16 = newarray (java.lang.Object)[1];

        $r16[0] = "---------------";

        staticinvoke <safetyChecker.utilities.LogUtils: void warningln(java.lang.Object[])>($r16);

        $r17 = newarray (java.lang.Object)[1];

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>(java.lang.String)>("Vertex=");

        $r19 = virtualinvoke r1.<safetyChecker.Edge: safetyChecker.Vertex getSource()>();

        $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r19);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("---- Unit=");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        $r17[0] = $r23;

        staticinvoke <safetyChecker.utilities.LogUtils: void warningln(java.lang.Object[])>($r17);

        $r24 = newarray (java.lang.Object)[1];

        $r25 = new java.lang.StringBuilder;

        specialinvoke $r25.<java.lang.StringBuilder: void <init>(java.lang.String)>("Expr=");

        $r26 = virtualinvoke r1.<safetyChecker.Edge: com.microsoft.z3.BoolExpr getZ3Expr()>();

        $r27 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r26);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        $r24[0] = $r28;

        staticinvoke <safetyChecker.utilities.LogUtils: void warningln(java.lang.Object[])>($r24);

        $r29 = newarray (java.lang.Object)[1];

        $r29[0] = "Converstion failed";

        staticinvoke <safetyChecker.utilities.LogUtils: void fatalln(java.lang.Object[])>($r29);

        $r30 = newarray (java.lang.Object)[1];

        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>(java.lang.String)>("type  fo the ");

        $r32 = virtualinvoke r1.<safetyChecker.Edge: com.microsoft.z3.BoolExpr getZ3Expr()>();

        $r33 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r32);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is ");

        $r35 = virtualinvoke r1.<safetyChecker.Edge: soot.Unit getUnit()>();

        $r36 = virtualinvoke $r35.<java.lang.Object: java.lang.Class getClass()>();

        $r37 = virtualinvoke $r36.<java.lang.Class: java.lang.String getName()>();

        $r38 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r37);

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>();

        $r30[0] = $r39;

        staticinvoke <safetyChecker.utilities.LogUtils: void warningln(java.lang.Object[])>($r30);

        $r40 = newarray (java.lang.Object)[1];

        $r40[0] = "Z3ScriptHandler.createZ3Script";

        staticinvoke <safetyChecker.utilities.LogUtils: void fatalln(java.lang.Object[])>($r40);

     label12:
        return z13_22;
    }

    private boolean convertFunctionCallOnly(safetyChecker.Edge)
    {
        safetyChecker.z3ScriptManager.Z3ScriptHandler r0;
        safetyChecker.Edge r1;
        com.microsoft.z3.InterpolationContext $r2;
        com.microsoft.z3.BoolExpr $r3;

        r0 := @this: safetyChecker.z3ScriptManager.Z3ScriptHandler;

        r1 := @parameter0: safetyChecker.Edge;

        $r2 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        $r3 = virtualinvoke $r2.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.BoolExpr mkTrue()>();

        virtualinvoke r1.<safetyChecker.Edge: void setZ3Expr(com.microsoft.z3.BoolExpr)>($r3);

        return 1;
    }

    private boolean convertReturnStmt(safetyChecker.Edge)
    {
        safetyChecker.z3ScriptManager.Z3ScriptHandler r0;
        safetyChecker.Edge r1, $r4;
        safetyChecker.ProgramTree $r2;
        safetyChecker.Vertex $r3;
        soot.Unit $r5;
        com.microsoft.z3.InterpolationContext $r6;
        com.microsoft.z3.BoolExpr $r7;

        r0 := @this: safetyChecker.z3ScriptManager.Z3ScriptHandler;

        r1 := @parameter0: safetyChecker.Edge;

        $r2 = virtualinvoke r1.<safetyChecker.Edge: safetyChecker.ProgramTree getProgramTree()>();

        $r3 = virtualinvoke $r2.<safetyChecker.ProgramTree: safetyChecker.Vertex getCallerVertex()>();

        $r4 = virtualinvoke $r3.<safetyChecker.Vertex: safetyChecker.Edge getOutgoingEdge()>();

        $r5 = virtualinvoke r1.<safetyChecker.Edge: soot.Unit getUnit()>();

        virtualinvoke $r4.<safetyChecker.Edge: void setReturnUnit(soot.Unit)>($r5);

        $r6 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        $r7 = virtualinvoke $r6.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.BoolExpr mkTrue()>();

        virtualinvoke r1.<safetyChecker.Edge: void setZ3Expr(com.microsoft.z3.BoolExpr)>($r7);

        return 1;
    }

    private boolean convertNewStringExpr(safetyChecker.Edge)
    {
        safetyChecker.z3ScriptManager.Z3ScriptHandler r0;
        safetyChecker.Edge r1;
        soot.jimple.InvokeStmt r2;
        soot.jimple.InvokeExpr r3;
        soot.jimple.StringConstant r4;
        soot.ValueBox r5;
        soot.Value r6, $r11;
        com.microsoft.z3.Expr r7;
        com.microsoft.z3.BoolExpr r8, r9;
        soot.Unit $r10;
        java.util.List $r12;
        java.lang.Object $r13;
        java.lang.Object[] $r14, $r15;
        com.microsoft.z3.InterpolationContext $r16;

        r0 := @this: safetyChecker.z3ScriptManager.Z3ScriptHandler;

        r1 := @parameter0: safetyChecker.Edge;

        $r10 = virtualinvoke r1.<safetyChecker.Edge: soot.Unit getUnit()>();

        r2 = (soot.jimple.InvokeStmt) $r10;

        r3 = interfaceinvoke r2.<soot.jimple.InvokeStmt: soot.jimple.InvokeExpr getInvokeExpr()>();

        $r11 = interfaceinvoke r3.<soot.jimple.InvokeExpr: soot.Value getArg(int)>(0);

        r4 = (soot.jimple.StringConstant) $r11;

        $r12 = interfaceinvoke r3.<soot.jimple.InvokeExpr: java.util.List getUseBoxes()>();

        $r13 = interfaceinvoke $r12.<java.util.List: java.lang.Object get(int)>(1);

        r5 = (soot.ValueBox) $r13;

        r6 = interfaceinvoke r5.<soot.ValueBox: soot.Value getValue()>();

        r7 = virtualinvoke r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.Expr convertValue(soot.Value,boolean,safetyChecker.Edge,int)>(r6, 1, r1, 0);

        r8 = staticinvoke <safetyChecker.z3ScriptManager.Z3StringHandler: com.microsoft.z3.BoolExpr covertString(soot.jimple.StringConstant,safetyChecker.z3ScriptManager.Z3ScriptHandler,com.microsoft.z3.Expr)>(r4, r0, r7);

        $r14 = newarray (java.lang.Object)[1];

        $r14[0] = r7;

        staticinvoke <safetyChecker.utilities.LogUtils: void fatalln(java.lang.Object[])>($r14);

        $r15 = newarray (java.lang.Object)[1];

        $r15[0] = r8;

        staticinvoke <safetyChecker.utilities.LogUtils: void fatalln(java.lang.Object[])>($r15);

        $r16 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        r9 = virtualinvoke $r16.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.BoolExpr mkEq(com.microsoft.z3.Expr,com.microsoft.z3.Expr)>(r7, r8);

        virtualinvoke r1.<safetyChecker.Edge: void setZ3Expr(com.microsoft.z3.BoolExpr)>(r9);

        return 1;
    }

    private boolean convertNotSubFuntionInvoke(safetyChecker.Edge)
    {
        safetyChecker.z3ScriptManager.Z3ScriptHandler r0;
        safetyChecker.Edge r1;
        com.microsoft.z3.InterpolationContext $r2;
        com.microsoft.z3.BoolExpr $r3;

        r0 := @this: safetyChecker.z3ScriptManager.Z3ScriptHandler;

        r1 := @parameter0: safetyChecker.Edge;

        $r2 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        $r3 = virtualinvoke $r2.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.BoolExpr mkTrue()>();

        virtualinvoke r1.<safetyChecker.Edge: void setZ3Expr(com.microsoft.z3.BoolExpr)>($r3);

        return 1;
    }

    private boolean convertArrayCopy(safetyChecker.Edge)
    {
        safetyChecker.z3ScriptManager.Z3ScriptHandler r0;
        safetyChecker.Edge r1;
        com.microsoft.z3.BoolExpr r2;
        safetyChecker.z3ScriptManager.Z3ArrayHandler $r3;
        java.lang.Object[] $r4;
        java.lang.StringBuilder $r5, $r6;
        java.lang.String $r7;

        r0 := @this: safetyChecker.z3ScriptManager.Z3ScriptHandler;

        r1 := @parameter0: safetyChecker.Edge;

        $r3 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: safetyChecker.z3ScriptManager.Z3ArrayHandler arrayHandler>;

        r2 = virtualinvoke $r3.<safetyChecker.z3ScriptManager.Z3ArrayHandler: com.microsoft.z3.BoolExpr z3ArrayCopy(safetyChecker.Edge,safetyChecker.z3ScriptManager.Z3ScriptHandler)>(r1, r0);

        virtualinvoke r1.<safetyChecker.Edge: void setZ3Expr(com.microsoft.z3.BoolExpr)>(r2);

        $r4 = newarray (java.lang.Object)[1];

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("arrayCopy=");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r4[0] = $r7;

        staticinvoke <safetyChecker.utilities.LogUtils: void debugln(java.lang.Object[])>($r4);

        if r2 == null goto label1;

        return 1;

     label1:
        return 0;
    }

    private boolean convertErrorEdge(safetyChecker.Edge)
    {
        safetyChecker.z3ScriptManager.Z3ScriptHandler r0;
        safetyChecker.Edge r1;
        soot.jimple.InvokeStmt r2;
        soot.Unit $r3;

        r0 := @this: safetyChecker.z3ScriptManager.Z3ScriptHandler;

        r1 := @parameter0: safetyChecker.Edge;

        $r3 = virtualinvoke r1.<safetyChecker.Edge: soot.Unit getUnit()>();

        r2 = (soot.jimple.InvokeStmt) $r3;

        return 1;
    }

    private boolean convertIfStmt(safetyChecker.Edge)
    {
        safetyChecker.z3ScriptManager.Z3ScriptHandler r0;
        safetyChecker.Edge r1, r5;
        soot.jimple.IfStmt r2;
        soot.Value r3;
        com.microsoft.z3.BoolExpr r4, $r27, $r33;
        soot.Unit r6, r7, $r9, $r30;
        soot.jimple.Stmt r8;
        safetyChecker.Vertex $r10, $r13;
        int $i0;
        com.microsoft.z3.Expr $r11;
        java.lang.Object[] $r12, $r14, $r18, $r22, $r28;
        java.lang.StringBuilder $r15, $r16, $r19, $r20, $r23, $r24, $r29, $r31, $r32, $r34;
        java.lang.String $r17, $r21, $r25, $r35;
        boolean $z0;
        com.microsoft.z3.InterpolationContext $r26;

        r0 := @this: safetyChecker.z3ScriptManager.Z3ScriptHandler;

        r1 := @parameter0: safetyChecker.Edge;

        $r9 = virtualinvoke r1.<safetyChecker.Edge: soot.Unit getUnit()>();

        r2 = (soot.jimple.IfStmt) $r9;

        r3 = interfaceinvoke r2.<soot.jimple.IfStmt: soot.Value getCondition()>();

        $r10 = virtualinvoke r1.<safetyChecker.Edge: safetyChecker.Vertex getSource()>();

        $i0 = virtualinvoke $r10.<safetyChecker.Vertex: int getDistance()>();

        $r11 = virtualinvoke r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.Expr convertValue(soot.Value,boolean,safetyChecker.Edge,int)>(r3, 0, r1, $i0);

        r4 = (com.microsoft.z3.BoolExpr) $r11;

        $r12 = newarray (java.lang.Object)[1];

        $r12[0] = r3;

        staticinvoke <safetyChecker.utilities.LogUtils: void debugln(java.lang.Object[])>($r12);

        $r13 = virtualinvoke r1.<safetyChecker.Edge: safetyChecker.Vertex getTarget()>();

        r5 = virtualinvoke $r13.<safetyChecker.Vertex: safetyChecker.Edge getOutgoingEdge()>();

        r6 = virtualinvoke r1.<safetyChecker.Edge: soot.Unit getUnit()>();

        $r14 = newarray (java.lang.Object)[1];

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<java.lang.StringBuilder: void <init>(java.lang.String)>("currentUnit=");

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r6);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        $r14[0] = $r17;

        staticinvoke <safetyChecker.utilities.LogUtils: void debugln(java.lang.Object[])>($r14);

        r7 = virtualinvoke r5.<safetyChecker.Edge: soot.Unit getUnit()>();

        $r18 = newarray (java.lang.Object)[1];

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>(java.lang.String)>("nextUnit=");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r7);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        $r18[0] = $r21;

        staticinvoke <safetyChecker.utilities.LogUtils: void debugln(java.lang.Object[])>($r18);

        r8 = interfaceinvoke r2.<soot.jimple.IfStmt: soot.jimple.Stmt getTarget()>();

        $r22 = newarray (java.lang.Object)[1];

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>(java.lang.String)>("targetUnit = ");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r8);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        $r22[0] = $r25;

        staticinvoke <safetyChecker.utilities.LogUtils: void debugln(java.lang.Object[])>($r22);

        $z0 = virtualinvoke r8.<java.lang.Object: boolean equals(java.lang.Object)>(r7);

        if $z0 == 0 goto label1;

        virtualinvoke r1.<safetyChecker.Edge: void setZ3Expr(com.microsoft.z3.BoolExpr)>(r4);

        goto label2;

     label1:
        $r26 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        $r27 = virtualinvoke $r26.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.BoolExpr mkNot(com.microsoft.z3.BoolExpr)>(r4);

        virtualinvoke r1.<safetyChecker.Edge: void setZ3Expr(com.microsoft.z3.BoolExpr)>($r27);

     label2:
        $r28 = newarray (java.lang.Object)[1];

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>()>();

        $r30 = virtualinvoke r1.<safetyChecker.Edge: soot.Unit getUnit()>();

        $r31 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r30);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=");

        $r33 = virtualinvoke r1.<safetyChecker.Edge: com.microsoft.z3.BoolExpr getZ3Expr()>();

        $r34 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r33);

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        $r28[0] = $r35;

        staticinvoke <safetyChecker.utilities.LogUtils: void debugln(java.lang.Object[])>($r28);

        return 1;
    }

    private boolean convertIdentityStmt(safetyChecker.Edge)
    {
        safetyChecker.z3ScriptManager.Z3ScriptHandler r0;
        safetyChecker.Edge r1, r35;
        soot.jimple.IdentityStmt r2;
        soot.Value r3, r8, $r23, r33, r40;
        soot.Type r4, r6;
        com.microsoft.z3.Expr r5, r31, r38, r38_1, r38_2, r38_3;
        soot.Unit r7, $r13;
        java.lang.Object[] $r9, $r16;
        java.lang.StringBuilder $r10, $r11;
        java.lang.String $r12;
        safetyChecker.Vertex $r14, $r19, $r21, $r22, $r24, $r28;
        int $i0, $i1, $i2, $i3, $i4, i5;
        java.util.Stack $r15;
        boolean $z0, $z1, $z2, $z3, $z4;
        safetyChecker.ProgramTree $r17, $r18;
        soot.jimple.InvokeExpr $r20, r37;
        com.microsoft.z3.InterpolationContext $r25;
        com.microsoft.z3.BoolExpr $r26, r32, r41;
        soot.jimple.internal.JNewExpr $r27, r30;
        soot.RefType r29;
        soot.jimple.ParameterRef r34;
        soot.jimple.AssignStmt r36;
        soot.jimple.InvokeStmt r39;

        r0 := @this: safetyChecker.z3ScriptManager.Z3ScriptHandler;

        r1 := @parameter0: safetyChecker.Edge;

        $r9 = newarray (java.lang.Object)[1];

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<java.lang.StringBuilder: void <init>(java.lang.String)>("Z3ScriptHandler.convertIdentityStmt=");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        $r9[0] = $r12;

        staticinvoke <safetyChecker.utilities.LogUtils: void debugln(java.lang.Object[])>($r9);

        $r13 = virtualinvoke r1.<safetyChecker.Edge: soot.Unit getUnit()>();

        r2 = (soot.jimple.IdentityStmt) $r13;

        r3 = interfaceinvoke r2.<soot.jimple.IdentityStmt: soot.Value getLeftOp()>();

        r4 = interfaceinvoke r3.<soot.Value: soot.Type getType()>();

        $r14 = virtualinvoke r1.<safetyChecker.Edge: safetyChecker.Vertex getSource()>();

        $i0 = virtualinvoke $r14.<safetyChecker.Vertex: int getDistance()>();

        r5 = virtualinvoke r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.Expr convertValue(soot.Value,boolean,safetyChecker.Edge,int)>(r3, 1, r1, $i0);

        $r15 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: java.util.Stack parameters>;

        $z0 = virtualinvoke $r15.<java.util.Stack: boolean isEmpty()>();

        if $z0 == 0 goto label7;

        r6 = interfaceinvoke r3.<soot.Value: soot.Type getType()>();

        $z1 = r6 instanceof soot.RefType;

        if $z1 == 0 goto label2;

        r29 = (soot.RefType) r6;

        $r27 = new soot.jimple.internal.JNewExpr;

        specialinvoke $r27.<soot.jimple.internal.JNewExpr: void <init>(soot.RefType)>(r29);

        r30 = $r27;

        r31 = virtualinvoke r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.Expr convertValue(soot.Value,boolean,safetyChecker.Edge,int)>(r30, 0, r1, 0);

        $r28 = virtualinvoke r1.<safetyChecker.Edge: safetyChecker.Vertex getSource()>();

        $i4 = virtualinvoke $r28.<safetyChecker.Vertex: int getDistance()>();

        r32 = specialinvoke r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.BoolExpr convertAssignStmt(com.microsoft.z3.Expr,com.microsoft.z3.Expr,soot.Type,soot.Value,int)>(r31, r5, r4, r3, $i4);

        virtualinvoke r1.<safetyChecker.Edge: void setZ3Expr(com.microsoft.z3.BoolExpr)>(r32);

        if r32 != null goto label1;

        return 0;

     label1:
        return 1;

     label2:
        $r17 = virtualinvoke r1.<safetyChecker.Edge: safetyChecker.ProgramTree getProgramTree()>();

        $z2 = virtualinvoke $r17.<safetyChecker.ProgramTree: boolean isMainFunction()>();

        if $z2 == 0 goto label3;

        $r25 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        $r26 = virtualinvoke $r25.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.BoolExpr mkTrue()>();

        virtualinvoke r1.<safetyChecker.Edge: void setZ3Expr(com.microsoft.z3.BoolExpr)>($r26);

        return 1;

     label3:
        r33 = interfaceinvoke r2.<soot.jimple.IdentityStmt: soot.Value getRightOp()>();

        $z3 = r33 instanceof soot.jimple.ParameterRef;

(0)     if $z3 == 0 goto label6;

        r34 = (soot.jimple.ParameterRef) r33;

        i5 = virtualinvoke r34.<soot.jimple.ParameterRef: int getIndex()>();

        $r18 = virtualinvoke r1.<safetyChecker.Edge: safetyChecker.ProgramTree getProgramTree()>();

        $r19 = virtualinvoke $r18.<safetyChecker.ProgramTree: safetyChecker.Vertex getCallerVertex()>();

        r35 = virtualinvoke $r19.<safetyChecker.Vertex: safetyChecker.Edge getOutgoingEdge()>();

        r7 = virtualinvoke r35.<safetyChecker.Edge: soot.Unit getUnit()>();

        $z4 = r7 instanceof soot.jimple.AssignStmt;

        if $z4 == 0 goto label4;

        r36 = (soot.jimple.AssignStmt) r7;

        $r23 = interfaceinvoke r36.<soot.jimple.AssignStmt: soot.Value getRightOp()>();

        r37 = (soot.jimple.InvokeExpr) $r23;

        r8 = interfaceinvoke r37.<soot.jimple.InvokeExpr: soot.Value getArg(int)>(i5);

        $r24 = virtualinvoke r35.<safetyChecker.Edge: safetyChecker.Vertex getSource()>();

        $i3 = virtualinvoke $r24.<safetyChecker.Vertex: int getDistance()>();

        r38 = virtualinvoke r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.Expr convertValue(soot.Value,boolean,safetyChecker.Edge,int)>(r8, 0, r35, $i3);

(1)     goto label5;

     label4:
        r39 = (soot.jimple.InvokeStmt) r7;

        $r20 = interfaceinvoke r39.<soot.jimple.InvokeStmt: soot.jimple.InvokeExpr getInvokeExpr()>();

        r40 = interfaceinvoke $r20.<soot.jimple.InvokeExpr: soot.Value getArg(int)>(i5);

        $r21 = virtualinvoke r35.<safetyChecker.Edge: safetyChecker.Vertex getSource()>();

        $i1 = virtualinvoke $r21.<safetyChecker.Vertex: int getDistance()>();

(2)     r38_1 = virtualinvoke r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.Expr convertValue(soot.Value,boolean,safetyChecker.Edge,int)>(r40, 0, r35, $i1);

     label5:
        r38_2 = Phi(r38 #1, r38_1 #2);

        $r22 = virtualinvoke r1.<safetyChecker.Edge: safetyChecker.Vertex getSource()>();

        $i2 = virtualinvoke $r22.<safetyChecker.Vertex: int getDistance()>();

        r41 = specialinvoke r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.BoolExpr convertAssignStmt(com.microsoft.z3.Expr,com.microsoft.z3.Expr,soot.Type,soot.Value,int)>(r38_2, r5, r4, r3, $i2);

(3)     virtualinvoke r1.<safetyChecker.Edge: void setZ3Expr(com.microsoft.z3.BoolExpr)>(r41);

     label6:
        r38_3 = Phi(r38 #0, r38_2 #3);

        return 1;

     label7:
        $r16 = newarray (java.lang.Object)[1];

        $r16[0] = "Z3ScriptHandler.convertIdentityStmt needs to be handled";

        staticinvoke <safetyChecker.utilities.LogUtils: void fatalln(java.lang.Object[])>($r16);

        return 0;
    }

    private boolean convertAssignStmtEdge(safetyChecker.Edge)
    {
        safetyChecker.z3ScriptManager.Z3ScriptHandler r0;
        safetyChecker.Edge r1;
        soot.jimple.AssignStmt r2;
        soot.Value r3, r74, r93, r94, r95, r96, r97, r98, r99, r100, r101, r103, r105, r107;
        soot.Type r4, $r14, $r34, $r36, $r40, $r44, $r61, $r70;
        com.microsoft.z3.BoolExpr r5, r77, r78, r79, r80, r81, r82, r83, r85, r77_1, r77_2;
        java.lang.Object[] $r6, $r16, $r21, $r26;
        safetyChecker.Vertex $r8, $r20, $r25, $r31, $r52, $r65;
        java.lang.StringBuilder $r9, $r10, $r11, $r18, $r23, $r28, $r55, r86, r89, r90, r91, r92;
        java.lang.String $r12, $r15, $r19, $r24, $r29, $r35, $r37, $r56;
        soot.Unit $r13, r73;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17, $z18, $z19;
        int $i0, $i1, $i2, $i3, $i4, $i5;
        safetyChecker.z3ScriptManager.Z3JavaMathLibrary $r30, $r49, $r50, $r58;
        com.microsoft.z3.BoolExpr[] $r32, $r41, $r45, $r47;
        com.microsoft.z3.InterpolationContext $r33, $r42, $r46, $r48, $r54;
        safetyChecker.z3ScriptManager.Z3ArrayHandler $r38, $r43;
        soot.jimple.NewMultiArrayExpr $r39;
        safetyChecker.z3ScriptManager.Z3JavaStringLibrary $r51, $r57;
        soot.jimple.InvokeExpr $r59;
        soot.SootMethod $r60;
        java.util.List $r62;
        java.lang.Object $r63, r72, r75, r72_1, r72_2, r72_3, r75_1, r75_2, r75_3, r75_4, r75_5, r75_6;
        soot.ValueBox $r64;
        soot.RefType $r67, $r71;
        soot.jimple.IntConstant $r68;
        com.microsoft.z3.Expr r76, r102, r104, r106, r108, r109;
        soot.jimple.StringConstant r84;
        soot.jimple.internal.JNewExpr r87;
        soot.jimple.internal.JNewArrayExpr r88;

        r0 := @this: safetyChecker.z3ScriptManager.Z3ScriptHandler;

        r1 := @parameter0: safetyChecker.Edge;

        $r6 = newarray (java.lang.Object)[1];

        r86 = new java.lang.StringBuilder;

        specialinvoke r86.<java.lang.StringBuilder: void <init>(java.lang.String)>("Z3ScriptHandler.convertAssignStmtEdge=");

        $r8 = virtualinvoke r1.<safetyChecker.Edge: safetyChecker.Vertex getSource()>();

        $r9 = virtualinvoke r86.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("***");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6[0] = $r12;

        staticinvoke <safetyChecker.utilities.LogUtils: void debugln(java.lang.Object[])>($r6);

        $r13 = virtualinvoke r1.<safetyChecker.Edge: soot.Unit getUnit()>();

        r2 = (soot.jimple.AssignStmt) $r13;

        r3 = interfaceinvoke r2.<soot.jimple.AssignStmt: soot.Value getLeftOp()>();

        r72 = interfaceinvoke r2.<soot.jimple.AssignStmt: soot.Value getRightOp()>();

        $r14 = interfaceinvoke r3.<soot.Value: soot.Type getType()>();

        $z0 = $r14 instanceof soot.RefType;

        if $z0 == 0 goto label01;

        $z19 = r72 instanceof soot.jimple.VirtualInvokeExpr;

        if $z19 == 0 goto label01;

        r87 = new soot.jimple.internal.JNewExpr;

        $r70 = interfaceinvoke r3.<soot.Value: soot.Type getType()>();

        $r71 = (soot.RefType) $r70;

        specialinvoke r87.<soot.jimple.internal.JNewExpr: void <init>(soot.RefType)>($r71);

        r72_1 = r87;

(0)     goto label02;

     label01:
        $r15 = virtualinvoke r72.<java.lang.Object: java.lang.String toString()>();

        $z1 = virtualinvoke $r15.<java.lang.String: boolean contains(java.lang.CharSequence)>("java.lang.String[] split(java.lang.String)");

(1)     if $z1 == 0 goto label02;

        r88 = new soot.jimple.internal.JNewArrayExpr;

        $r67 = staticinvoke <soot.RefType: soot.RefType v(java.lang.String)>("java.lang.String");

        $r68 = staticinvoke <soot.jimple.IntConstant: soot.jimple.IntConstant v(int)>(0);

        specialinvoke r88.<soot.jimple.internal.JNewArrayExpr: void <init>(soot.Type,soot.Value)>($r67, $r68);

(2)     r72_2 = r88;

     label02:
        r72_3 = Phi(r72_1 #0, r72 #1, r72_2 #2);

        $r16 = newarray (java.lang.Object)[1];

        r89 = new java.lang.StringBuilder;

        specialinvoke r89.<java.lang.StringBuilder: void <init>(java.lang.String)>("right=");

        $r18 = virtualinvoke r89.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r72_3);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        $r16[0] = $r19;

        staticinvoke <safetyChecker.utilities.LogUtils: void debugln(java.lang.Object[])>($r16);

        r4 = interfaceinvoke r3.<soot.Value: soot.Type getType()>();

        $z2 = virtualinvoke r1.<safetyChecker.Edge: boolean isFunctionCall()>();

        if $z2 == 0 goto label03;

        $r59 = (soot.jimple.InvokeExpr) r72_3;

        $r60 = interfaceinvoke $r59.<soot.jimple.InvokeExpr: soot.SootMethod getMethod()>();

        $r61 = virtualinvoke $r60.<soot.SootMethod: soot.Type getReturnType()>();

        $z18 = $r61 instanceof soot.VoidType;

        if $z18 != 0 goto label03;

        r73 = virtualinvoke r1.<safetyChecker.Edge: soot.Unit getReturnUnit()>();

        $r62 = interfaceinvoke r73.<soot.Unit: java.util.List getUseBoxes()>();

        $r63 = interfaceinvoke $r62.<java.util.List: java.lang.Object get(int)>(0);

        $r64 = (soot.ValueBox) $r63;

        r74 = interfaceinvoke $r64.<soot.ValueBox: soot.Value getValue()>();

        $r65 = virtualinvoke r1.<safetyChecker.Edge: safetyChecker.Vertex getSource()>();

        $i5 = virtualinvoke $r65.<safetyChecker.Vertex: int getDistance()>();

        r75 = virtualinvoke r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.Expr convertValue(soot.Value,boolean,safetyChecker.Edge,int)>(r74, 0, r1, $i5);

(3)     goto label09;

     label03:
        $z3 = r72_3 instanceof soot.jimple.InvokeExpr;

        if $z3 == 0 goto label08;

        $z13 = virtualinvoke r1.<safetyChecker.Edge: boolean isFunctionCall()>();

        if $z13 != 0 goto label08;

        $r50 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: safetyChecker.z3ScriptManager.Z3JavaMathLibrary z3MathLibrary>;

        r93 = (soot.Value) r72_3;

        $z14 = virtualinvoke $r50.<safetyChecker.z3ScriptManager.Z3JavaMathLibrary: boolean isJavaMathLibrary(soot.Value)>(r93);

        if $z14 == 0 goto label04;

        $r58 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: safetyChecker.z3ScriptManager.Z3JavaMathLibrary z3MathLibrary>;

        r94 = (soot.Value) r72_3;

        r75_1 = virtualinvoke $r58.<safetyChecker.z3ScriptManager.Z3JavaMathLibrary: com.microsoft.z3.Expr createMathEquality(soot.Value,safetyChecker.z3ScriptManager.Z3ScriptHandler,safetyChecker.Edge)>(r94, r0, r1);

(4)     goto label09;

     label04:
        $r51 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: safetyChecker.z3ScriptManager.Z3JavaStringLibrary z3StringLibrary>;

        r95 = (soot.Value) r72_3;

        $z15 = virtualinvoke $r51.<safetyChecker.z3ScriptManager.Z3JavaStringLibrary: boolean isJavaStringLibrary(soot.Value)>(r95);

        if $z15 == 0 goto label05;

        $r57 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: safetyChecker.z3ScriptManager.Z3JavaStringLibrary z3StringLibrary>;

        r96 = (soot.Value) r72_3;

        r75_2 = virtualinvoke $r57.<safetyChecker.z3ScriptManager.Z3JavaStringLibrary: com.microsoft.z3.Expr createStringEquality(soot.Value,safetyChecker.z3ScriptManager.Z3ScriptHandler,safetyChecker.Edge)>(r96, r0, r1);

(5)     goto label09;

     label05:
        $z16 = virtualinvoke r1.<safetyChecker.Edge: boolean isArrayCopyEdge()>();

        if $z16 != 0 goto label06;

        r97 = (soot.Value) r72_3;

        $z17 = staticinvoke <safetyChecker.UnitController: boolean isArraysEqualsInvoke(soot.Value)>(r97);

        if $z17 == 0 goto label07;

     label06:
        $r52 = virtualinvoke r1.<safetyChecker.Edge: safetyChecker.Vertex getSource()>();

        $i3 = virtualinvoke $r52.<safetyChecker.Vertex: int getDistance()>();

        r98 = (soot.Value) r72_3;

        r75_4 = virtualinvoke r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.Expr convertValue(soot.Value,boolean,safetyChecker.Edge,int)>(r98, 0, r1, $i3);

(6)     goto label09;

     label07:
        $r54 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        r90 = new java.lang.StringBuilder;

        specialinvoke r90.<java.lang.StringBuilder: void <init>(java.lang.String)>("nonSubFunction_");

        $i4 = virtualinvoke r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: int getRealArraySize(java.lang.String)>("nonSubFunction_");

        $r55 = virtualinvoke r90.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r56 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.String toString()>();

        r75_3 = virtualinvoke $r54.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.IntExpr mkIntConst(java.lang.String)>($r56);

(7)     goto label09;

     label08:
        $r20 = virtualinvoke r1.<safetyChecker.Edge: safetyChecker.Vertex getSource()>();

        $i0 = virtualinvoke $r20.<safetyChecker.Vertex: int getDistance()>();

        r99 = (soot.Value) r72_3;

(8)     r75_5 = virtualinvoke r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.Expr convertValue(soot.Value,boolean,safetyChecker.Edge,int)>(r99, 0, r1, $i0);

     label09:
        r75_6 = Phi(r75 #3, r75_1 #4, r75_2 #5, r75_4 #6, r75_3 #7, r75_5 #8);

        $r21 = newarray (java.lang.Object)[1];

        r91 = new java.lang.StringBuilder;

        specialinvoke r91.<java.lang.StringBuilder: void <init>(java.lang.String)>("rightZ3=");

        $r23 = virtualinvoke r91.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r75_6);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        $r21[0] = $r24;

        staticinvoke <safetyChecker.utilities.LogUtils: void debugln(java.lang.Object[])>($r21);

        $r25 = virtualinvoke r1.<safetyChecker.Edge: safetyChecker.Vertex getSource()>();

        $i1 = virtualinvoke $r25.<safetyChecker.Vertex: int getDistance()>();

        r76 = virtualinvoke r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.Expr convertValue(soot.Value,boolean,safetyChecker.Edge,int)>(r3, 1, r1, $i1);

        $r26 = newarray (java.lang.Object)[1];

        r92 = new java.lang.StringBuilder;

        specialinvoke r92.<java.lang.StringBuilder: void <init>(java.lang.String)>("leftZ3=");

        $r28 = virtualinvoke r92.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r76);

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        $r26[0] = $r29;

        staticinvoke <safetyChecker.utilities.LogUtils: void debugln(java.lang.Object[])>($r26);

        $r30 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: safetyChecker.z3ScriptManager.Z3JavaMathLibrary z3MathLibrary>;

        r100 = (soot.Value) r72_3;

        $z4 = virtualinvoke $r30.<safetyChecker.z3ScriptManager.Z3JavaMathLibrary: boolean isModulusInstruction(soot.Value)>(r100);

        if $z4 == 0 goto label10;

        $r49 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: safetyChecker.z3ScriptManager.Z3JavaMathLibrary z3MathLibrary>;

        r101 = (soot.Value) r72_3;

        r77 = virtualinvoke $r49.<safetyChecker.z3ScriptManager.Z3JavaMathLibrary: com.microsoft.z3.BoolExpr createModuleExpr(com.microsoft.z3.Expr,soot.Value,safetyChecker.z3ScriptManager.Z3ScriptHandler,safetyChecker.Edge)>(r76, r101, r0, r1);

(9)     goto label11;

     label10:
        $r31 = virtualinvoke r1.<safetyChecker.Edge: safetyChecker.Vertex getSource()>();

        $i2 = virtualinvoke $r31.<safetyChecker.Vertex: int getDistance()>();

        r102 = (com.microsoft.z3.Expr) r75_6;

(10)    r77_1 = specialinvoke r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.BoolExpr convertAssignStmt(com.microsoft.z3.Expr,com.microsoft.z3.Expr,soot.Type,soot.Value,int)>(r102, r76, r4, r3, $i2);

     label11:
        r77_2 = Phi(r77 #9, r77_1 #10);

        $z5 = r72_3 instanceof soot.jimple.AnyNewExpr;

        if $z5 == 0 goto label15;

        r103 = (soot.Value) r72_3;

        $r36 = interfaceinvoke r103.<soot.Value: soot.Type getType()>();

        $r37 = virtualinvoke $r36.<soot.Type: java.lang.String toString()>();

        $z9 = virtualinvoke $r37.<java.lang.String: boolean equals(java.lang.Object)>("java.lang.String");

        if $z9 == 0 goto label12;

        r104 = (com.microsoft.z3.Expr) r75_6;

        r78 = staticinvoke <safetyChecker.z3ScriptManager.Z3StringHandler: com.microsoft.z3.BoolExpr covertString(soot.jimple.StringConstant,safetyChecker.z3ScriptManager.Z3ScriptHandler,com.microsoft.z3.Expr)>(null, r0, r104);

        $r48 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        $r47 = newarray (com.microsoft.z3.BoolExpr)[2];

        $r47[0] = r77_2;

        $r47[1] = r78;

        r79 = virtualinvoke $r48.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.BoolExpr mkAnd(com.microsoft.z3.BoolExpr[])>($r47);

        virtualinvoke r1.<safetyChecker.Edge: void setZ3Expr(com.microsoft.z3.BoolExpr)>(r79);

     label12:
        $z10 = r72_3 instanceof soot.jimple.NewArrayExpr;

        if $z10 == 0 goto label13;

        $r43 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: safetyChecker.z3ScriptManager.Z3ArrayHandler arrayHandler>;

        r105 = (soot.Value) r72_3;

        $r44 = interfaceinvoke r105.<soot.Value: soot.Type getType()>();

        r106 = (com.microsoft.z3.Expr) r75_6;

        r80 = virtualinvoke $r43.<safetyChecker.z3ScriptManager.Z3ArrayHandler: com.microsoft.z3.BoolExpr newArrayExpr(com.microsoft.z3.Expr,soot.Type,safetyChecker.z3ScriptManager.Z3ScriptHandler)>(r106, $r44, r0);

        $r46 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        $r45 = newarray (com.microsoft.z3.BoolExpr)[2];

        $r45[0] = r77_2;

        $r45[1] = r80;

        r81 = virtualinvoke $r46.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.BoolExpr mkAnd(com.microsoft.z3.BoolExpr[])>($r45);

        virtualinvoke r1.<safetyChecker.Edge: void setZ3Expr(com.microsoft.z3.BoolExpr)>(r81);

        goto label18;

     label13:
        $z11 = r72_3 instanceof soot.jimple.NewMultiArrayExpr;

        if $z11 == 0 goto label14;

        $r38 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: safetyChecker.z3ScriptManager.Z3ArrayHandler arrayHandler>;

        $r39 = (soot.jimple.NewMultiArrayExpr) r72_3;

        r107 = (soot.Value) r72_3;

        $r40 = interfaceinvoke r107.<soot.Value: soot.Type getType()>();

        r108 = (com.microsoft.z3.Expr) r75_6;

        r82 = virtualinvoke $r38.<safetyChecker.z3ScriptManager.Z3ArrayHandler: com.microsoft.z3.BoolExpr newMultiArrayExpr(soot.jimple.NewMultiArrayExpr,soot.Type,safetyChecker.z3ScriptManager.Z3ScriptHandler,com.microsoft.z3.Expr)>($r39, $r40, r0, r108);

        $r42 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        $r41 = newarray (com.microsoft.z3.BoolExpr)[2];

        $r41[0] = r77_2;

        $r41[1] = r82;

        r83 = virtualinvoke $r42.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.BoolExpr mkAnd(com.microsoft.z3.BoolExpr[])>($r41);

        virtualinvoke r1.<safetyChecker.Edge: void setZ3Expr(com.microsoft.z3.BoolExpr)>(r83);

        goto label18;

     label14:
        $z12 = r72_3 instanceof soot.jimple.NewExpr;

        if $z12 == 0 goto label18;

        virtualinvoke r1.<safetyChecker.Edge: void setZ3Expr(com.microsoft.z3.BoolExpr)>(r77_2);

        goto label18;

     label15:
        $z6 = r72_3 instanceof soot.jimple.StringConstant;

        if $z6 != 0 goto label16;

        $r34 = interfaceinvoke r3.<soot.Value: soot.Type getType()>();

        $z7 = virtualinvoke $r34.<java.lang.Object: boolean equals(java.lang.Object)>("java.lang.String");

        if $z7 == 0 goto label17;

        $r35 = virtualinvoke r72_3.<java.lang.Object: java.lang.String toString()>();

        $z8 = virtualinvoke $r35.<java.lang.String: boolean contains(java.lang.CharSequence)>("readLine");

        if $z8 == 0 goto label17;

     label16:
        r84 = (soot.jimple.StringConstant) r72_3;

        r109 = (com.microsoft.z3.Expr) r75_6;

        r85 = staticinvoke <safetyChecker.z3ScriptManager.Z3StringHandler: com.microsoft.z3.BoolExpr covertString(soot.jimple.StringConstant,safetyChecker.z3ScriptManager.Z3ScriptHandler,com.microsoft.z3.Expr)>(r84, r0, r109);

        $r33 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        $r32 = newarray (com.microsoft.z3.BoolExpr)[2];

        $r32[0] = r77_2;

        $r32[1] = r85;

        r5 = virtualinvoke $r33.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.BoolExpr mkAnd(com.microsoft.z3.BoolExpr[])>($r32);

        virtualinvoke r1.<safetyChecker.Edge: void setZ3Expr(com.microsoft.z3.BoolExpr)>(r5);

        goto label18;

     label17:
        virtualinvoke r1.<safetyChecker.Edge: void setZ3Expr(com.microsoft.z3.BoolExpr)>(r77_2);

     label18:
        if r77_2 != null goto label19;

        return 0;

     label19:
        return 1;
    }

    private boolean convertGotoStmt(safetyChecker.Edge)
    {
        safetyChecker.z3ScriptManager.Z3ScriptHandler r0;
        safetyChecker.Edge r1;
        com.microsoft.z3.InterpolationContext $r2;
        com.microsoft.z3.BoolExpr $r3;

        r0 := @this: safetyChecker.z3ScriptManager.Z3ScriptHandler;

        r1 := @parameter0: safetyChecker.Edge;

        $r2 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        $r3 = virtualinvoke $r2.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.BoolExpr mkTrue()>();

        virtualinvoke r1.<safetyChecker.Edge: void setZ3Expr(com.microsoft.z3.BoolExpr)>($r3);

        return 1;
    }

    private boolean convertSinkInvoke2Z3(safetyChecker.Edge)
    {
        safetyChecker.z3ScriptManager.Z3ScriptHandler r0;
        safetyChecker.Edge r1;
        java.lang.String r2, r3, $r17, $r21;
        int i0, $i1, i2, i2_1, i2_2;
        java.lang.String[] r4, $r6;
        soot.Unit $r5, $r7, $r15;
        boolean $z0;
        soot.jimple.InvokeStmt $r8;
        soot.jimple.InvokeExpr $r9;
        java.util.Map $r10;
        java.lang.Object $r11;
        java.lang.Integer $r12;
        java.lang.Object[] $r13, $r18;
        java.lang.StringBuilder $r14, $r16, $r19, $r20;
        soot.Value r22, r22_1, r22_2, r22_3;

        r0 := @this: safetyChecker.z3ScriptManager.Z3ScriptHandler;

        r1 := @parameter0: safetyChecker.Edge;

        $r5 = virtualinvoke r1.<safetyChecker.Edge: soot.Unit getUnit()>();

        r2 = staticinvoke <safetyChecker.UnitController: java.lang.String getMethodSignature(soot.Unit)>($r5);

        r22 = null;

        $r6 = <safetyChecker.UnitController: java.lang.String[] sinkSignatureDB>;

        r4 = $r6;

        i0 = lengthof $r6;

        i2 = 0;

(0)     goto label3;

     label1:
        r3 = r4[i2_1];

        $z0 = virtualinvoke r2.<java.lang.String: boolean contains(java.lang.CharSequence)>(r3);

(1)     if $z0 == 0 goto label2;

        $r7 = virtualinvoke r1.<safetyChecker.Edge: soot.Unit getUnit()>();

        $r8 = (soot.jimple.InvokeStmt) $r7;

        $r9 = interfaceinvoke $r8.<soot.jimple.InvokeStmt: soot.jimple.InvokeExpr getInvokeExpr()>();

        $r10 = <safetyChecker.UnitController: java.util.Map sensitiveParameterMap>;

        $r11 = interfaceinvoke $r10.<java.util.Map: java.lang.Object get(java.lang.Object)>(r3);

        $r12 = (java.lang.Integer) $r11;

        $i1 = virtualinvoke $r12.<java.lang.Integer: int intValue()>();

(2)     r22_2 = interfaceinvoke $r9.<soot.jimple.InvokeExpr: soot.Value getArg(int)>($i1);

     label2:
        r22_3 = Phi(r22_1 #1, r22_2 #2);

(3)     i2_2 = i2_1 + 1;

     label3:
        i2_1 = Phi(i2 #0, i2_2 #3);

        r22_1 = Phi(r22 #0, r22_3 #3);

        if i2_1 < i0 goto label1;

        $r13 = newarray (java.lang.Object)[1];

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>(java.lang.String)>("Unit : ");

        $r15 = virtualinvoke r1.<safetyChecker.Edge: soot.Unit getUnit()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        $r13[0] = $r17;

        staticinvoke <safetyChecker.utilities.LogUtils: void infoln(java.lang.Object[])>($r13);

        $r18 = newarray (java.lang.Object)[1];

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>(java.lang.String)>("leakCandidate : ");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r22_1);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        $r18[0] = $r21;

        staticinvoke <safetyChecker.utilities.LogUtils: void infoln(java.lang.Object[])>($r18);

        return 0;
    }

    protected com.microsoft.z3.Expr convertValue(soot.Value, boolean, safetyChecker.Edge, int)
    {
        safetyChecker.z3ScriptManager.Z3ScriptHandler r0;
        soot.Value r1;
        boolean z0, $z1, $z2;
        safetyChecker.Edge r2;
        int i0;
        soot.Type r3;
        java.lang.Object[] $r4;
        com.microsoft.z3.Expr $r5, $r6;

        r0 := @this: safetyChecker.z3ScriptManager.Z3ScriptHandler;

        r1 := @parameter0: soot.Value;

        z0 := @parameter1: boolean;

        r2 := @parameter2: safetyChecker.Edge;

        i0 := @parameter3: int;

        r3 = interfaceinvoke r1.<soot.Value: soot.Type getType()>();

        $z1 = r3 instanceof soot.PrimType;

        if $z1 == 0 goto label1;

        $r6 = specialinvoke r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.Expr convertPrimitiveValue(soot.Value,boolean,safetyChecker.Edge,int)>(r1, z0, r2, i0);

        return $r6;

     label1:
        $z2 = r3 instanceof soot.RefLikeType;

        if $z2 == 0 goto label2;

        $r5 = specialinvoke r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.Expr convertRefLikeValue(soot.Value,boolean,safetyChecker.Edge,int)>(r1, z0, r2, i0);

        return $r5;

     label2:
        $r4 = newarray (java.lang.Object)[1];

        $r4[0] = "not a primtype or a refliketype";

        staticinvoke <safetyChecker.utilities.LogUtils: void fatalln(java.lang.Object[])>($r4);

        return null;
    }

    private com.microsoft.z3.Expr convertPrimitiveValue(soot.Value, boolean, safetyChecker.Edge, int)
    {
        safetyChecker.z3ScriptManager.Z3ScriptHandler r0;
        soot.Value r1, r4, r97, r102, r102_1, r102_2, r102_3, r102_4, r102_5, r102_6;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16, $z17;
        safetyChecker.Edge r2, $r37, r101, r101_1, r101_2, r101_3, r101_4, r101_5, r101_6;
        int i0, $i1, $i2, $i3, $i4, $i5, i6;
        java.util.Iterator r3;
        soot.Unit r5, r6;
        java.lang.Object[] $r7, $r11, $r12, $r19, $r23, $r28, $r32, $r39, $r45, $r53;
        java.lang.StringBuilder $r9, $r15, $r16, $r17, $r25, $r30, $r34, $r41, $r42, $r43, $r47, $r48, $r50, $r55, $r69, r110, r111, r112, r113, r114, r115, r116, r117, r118;
        java.lang.String $r10, $r18, $r26, $r31, $r35, $r44, $r51, $r56, $r67, $r68, r87, r89;
        safetyChecker.Vertex $r14, $r36, $r38, $r49, $r52, r104, r104_1, r104_2, r104_3;
        safetyChecker.z3ScriptManager.Z3ArrayHandler $r20, $r21;
        com.microsoft.z3.Expr $r22, $r58, $r62, $r65, r107, r109, r119;
        java.lang.Object $r27, $r64, r105, r105_1, r105_2;
        com.microsoft.z3.InterpolationContext $r57, $r59, $r60, $r72, $r75, $r79, $r82;
        soot.jimple.BinopExpr $r61;
        java.util.Map $r63, $r70, $r73, $r76, $r80, $r83;
        com.microsoft.z3.IntSort $r77, $r84;
        soot.Local r86;
        soot.Type r88;
        com.microsoft.z3.IntExpr r90, r90_1, r90_2, r90_3, r90_4;
        soot.jimple.Constant r91;
        soot.jimple.IntConstant r92;
        com.microsoft.z3.IntNum r93, r95;
        soot.jimple.LongConstant r94;
        long l7;
        soot.jimple.CastExpr r96;
        soot.shimple.PhiExpr r98;
        java.util.List r99;
        soot.toolkits.scalar.ValueUnitPair r103;
        soot.jimple.ArrayRef r106;
        soot.jimple.InstanceFieldRef r108;

        r0 := @this: safetyChecker.z3ScriptManager.Z3ScriptHandler;

        r1 := @parameter0: soot.Value;

        z0 := @parameter1: boolean;

        r2 := @parameter2: safetyChecker.Edge;

        i0 := @parameter3: int;

        $r7 = newarray (java.lang.Object)[1];

        r110 = new java.lang.StringBuilder;

        specialinvoke r110.<java.lang.StringBuilder: void <init>(java.lang.String)>("Z3ScriptHandler.convertPrimitiveValue=");

        $r9 = virtualinvoke r110.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7[0] = $r10;

        staticinvoke <safetyChecker.utilities.LogUtils: void debugln(java.lang.Object[])>($r7);

        $z2 = r1 instanceof soot.Local;

        if $z2 == 0 goto label04;

        r86 = (soot.Local) r1;

        r87 = interfaceinvoke r86.<soot.Local: java.lang.String getName()>();

        if z0 == 0 goto label03;

        r88 = interfaceinvoke r1.<soot.Value: soot.Type getType()>();

        r111 = new java.lang.StringBuilder;

        $r67 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r87);

        specialinvoke r111.<java.lang.StringBuilder: void <init>(java.lang.String)>($r67);

        $r68 = specialinvoke r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: java.lang.String getNameSuffix(safetyChecker.Edge)>(r2);

        $r69 = virtualinvoke r111.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r68);

        r89 = virtualinvoke $r69.<java.lang.StringBuilder: java.lang.String toString()>();

        r90 = null;

        $z16 = r88 instanceof soot.IntegerType;

(0)     if $z16 == 0 goto label01;

        $r79 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        r90_1 = virtualinvoke $r79.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.IntExpr mkIntConst(java.lang.String)>(r89);

        $r80 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: java.util.Map substitute>;

        interfaceinvoke $r80.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r89, r87);

        $r83 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: java.util.Map substituteSort>;

        $r82 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        $r84 = virtualinvoke $r82.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.IntSort mkIntSort()>();

(1)     interfaceinvoke $r83.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r89, $r84);

     label01:
        r90_2 = Phi(r90 #0, r90_1 #1);

        $z17 = r88 instanceof soot.LongType;

(2)     if $z17 == 0 goto label02;

        $r72 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        r90_3 = virtualinvoke $r72.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.IntExpr mkIntConst(java.lang.String)>(r89);

        $r73 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: java.util.Map substitute>;

        interfaceinvoke $r73.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r89, r87);

        $r76 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: java.util.Map substituteSort>;

        $r75 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        $r77 = virtualinvoke $r75.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.IntSort mkIntSort()>();

(3)     interfaceinvoke $r76.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r89, $r77);

     label02:
        r90_4 = Phi(r90_2 #2, r90_3 #3);

        $r70 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: java.util.Map localMap>;

        interfaceinvoke $r70.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r87, r90_4);

        return r90_4;

     label03:
        $r63 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: java.util.Map localMap>;

        $r64 = interfaceinvoke $r63.<java.util.Map: java.lang.Object get(java.lang.Object)>(r87);

        $r65 = (com.microsoft.z3.Expr) $r64;

        return $r65;

     label04:
        $z3 = r1 instanceof soot.jimple.BinopExpr;

        if $z3 == 0 goto label05;

        $r61 = (soot.jimple.BinopExpr) r1;

        $r62 = specialinvoke r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.Expr convertBoolExpr(soot.jimple.BinopExpr,safetyChecker.Edge,int)>($r61, r2, i0);

        return $r62;

     label05:
        $z4 = r1 instanceof soot.jimple.Constant;

        if $z4 == 0 goto label07;

        r91 = (soot.jimple.Constant) r1;

        $z14 = r91 instanceof soot.jimple.IntConstant;

        if $z14 == 0 goto label06;

        r92 = (soot.jimple.IntConstant) r91;

        i6 = r92.<soot.jimple.IntConstant: int value>;

        $r60 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        r93 = virtualinvoke $r60.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.IntNum mkInt(int)>(i6);

        return r93;

     label06:
        $z15 = r91 instanceof soot.jimple.LongConstant;

        if $z15 == 0 goto label07;

        r94 = (soot.jimple.LongConstant) r91;

        l7 = r94.<soot.jimple.LongConstant: long value>;

        $r59 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        r95 = virtualinvoke $r59.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.IntNum mkInt(long)>(l7);

        return r95;

     label07:
        $z5 = r1 instanceof soot.jimple.CastExpr;

        if $z5 == 0 goto label08;

        r96 = (soot.jimple.CastExpr) r1;

        r97 = interfaceinvoke r96.<soot.jimple.CastExpr: soot.Value getOp()>();

        $r58 = virtualinvoke r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.Expr convertValue(soot.Value,boolean,safetyChecker.Edge,int)>(r97, z0, r2, i0);

        return $r58;

     label08:
        $z6 = r1 instanceof soot.shimple.PhiExpr;

        if $z6 == 0 goto label17;

        r98 = (soot.shimple.PhiExpr) r1;

        r99 = interfaceinvoke r98.<soot.shimple.PhiExpr: java.util.List getArgs()>();

        virtualinvoke r2.<safetyChecker.Edge: safetyChecker.Vertex getSource()>();

        r101 = null;

        r102 = null;

        z1 = 0;

        r3 = interfaceinvoke r99.<java.util.List: java.util.Iterator iterator()>();

(4)     goto label15;

     label09:
        $r27 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r103 = (soot.toolkits.scalar.ValueUnitPair) $r27;

        r4 = virtualinvoke r103.<soot.toolkits.scalar.ValueUnitPair: soot.Value getValue()>();

        $r28 = newarray (java.lang.Object)[1];

        r112 = new java.lang.StringBuilder;

        specialinvoke r112.<java.lang.StringBuilder: void <init>(java.lang.String)>("valuePair=");

        $r30 = virtualinvoke r112.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        $r28[0] = $r31;

        staticinvoke <safetyChecker.utilities.LogUtils: void debugln(java.lang.Object[])>($r28);

        r5 = virtualinvoke r103.<soot.toolkits.scalar.ValueUnitPair: soot.Unit getUnit()>();

        $r32 = newarray (java.lang.Object)[1];

        r113 = new java.lang.StringBuilder;

        specialinvoke r113.<java.lang.StringBuilder: void <init>(java.lang.String)>("unitPair=");

        $r34 = virtualinvoke r113.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        $r32[0] = $r35;

        staticinvoke <safetyChecker.utilities.LogUtils: void debugln(java.lang.Object[])>($r32);

        r104_1 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: safetyChecker.Vertex errorPathRoot>;

(5)     goto label14;

     label10:
        $r37 = virtualinvoke r104_2.<safetyChecker.Vertex: safetyChecker.Edge getOutgoingEdge()>();

        r6 = virtualinvoke $r37.<safetyChecker.Edge: soot.Unit getUnit()>();

        $z13 = virtualinvoke r6.<java.lang.Object: boolean equals(java.lang.Object)>(r5);

(6)     if $z13 == 0 goto label13;

        if r101_2 != null goto label11;

        r101_3 = virtualinvoke r104_2.<safetyChecker.Vertex: safetyChecker.Edge getOutgoingEdge()>();

        r102_3 = r4;

(7)     goto label12;

     label11:
        $i1 = virtualinvoke r104_2.<safetyChecker.Vertex: int getDistance()>();

        $r38 = virtualinvoke r101_2.<safetyChecker.Edge: safetyChecker.Vertex getSource()>();

        $i2 = virtualinvoke $r38.<safetyChecker.Vertex: int getDistance()>();

(8)     if $i1 >= $i2 goto label12;

        r101_4 = virtualinvoke r104_2.<safetyChecker.Vertex: safetyChecker.Edge getOutgoingEdge()>();

(9)     r102_4 = r4;

     label12:
        r102_5 = Phi(r102_3 #7, r102_2 #8, r102_4 #9);

        r101_5 = Phi(r101_3 #7, r101_2 #8, r101_4 #9);

        $r39 = newarray (java.lang.Object)[1];

        r114 = new java.lang.StringBuilder;

        specialinvoke r114.<java.lang.StringBuilder: void <init>(java.lang.String)>("phiEqualityUnit=");

        $r41 = virtualinvoke r114.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r6);

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-- Dist-");

        $i3 = virtualinvoke r104_2.<safetyChecker.Vertex: int getDistance()>();

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.String toString()>();

        $r39[0] = $r44;

        staticinvoke <safetyChecker.utilities.LogUtils: void detailln(java.lang.Object[])>($r39);

        $r45 = newarray (java.lang.Object)[1];

        r115 = new java.lang.StringBuilder;

        specialinvoke r115.<java.lang.StringBuilder: void <init>(java.lang.String)>("resultunit=");

        $r47 = virtualinvoke r115.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r101_5);

        $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" -- Dis=");

        $r49 = virtualinvoke r101_5.<safetyChecker.Edge: safetyChecker.Vertex getSource()>();

        $i4 = virtualinvoke $r49.<safetyChecker.Vertex: int getDistance()>();

        $r50 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.String toString()>();

        $r45[0] = $r51;

(10)    staticinvoke <safetyChecker.utilities.LogUtils: void detailln(java.lang.Object[])>($r45);

     label13:
        r102_6 = Phi(r102_2 #6, r102_5 #10);

        r101_6 = Phi(r101_2 #6, r101_5 #10);

(11)    r104_3 = virtualinvoke r104_2.<safetyChecker.Vertex: safetyChecker.Vertex getNextVertex()>();

     label14:
        r102_2 = Phi(r102_1 #5, r102_6 #11);

        r104_2 = Phi(r104_1 #5, r104_3 #11);

        r101_2 = Phi(r101_1 #5, r101_6 #11);

        $r36 = virtualinvoke r2.<safetyChecker.Edge: safetyChecker.Vertex getSource()>();

(12)    if r104_2 != $r36 goto label10;

     label15:
        r102_1 = Phi(r102 #4, r102_2 #12);

        r104 = Phi(r104 #4, r104_2 #12);

        r101_1 = Phi(r101 #4, r101_2 #12);

        $z12 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z12 != 0 goto label09;

        $r52 = virtualinvoke r2.<safetyChecker.Edge: safetyChecker.Vertex getSource()>();

        $i5 = virtualinvoke $r52.<safetyChecker.Vertex: int getDistance()>();

        r105 = virtualinvoke r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.Expr convertValue(soot.Value,boolean,safetyChecker.Edge,int)>(r102_1, 0, r2, $i5);

(13)    if r105 != null goto label16;

        $r57 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

(14)    r105_1 = virtualinvoke $r57.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.IntNum mkInt(int)>(0);

     label16:
        r105_2 = Phi(r105 #13, r105_1 #14);

        $r53 = newarray (java.lang.Object)[1];

        r116 = new java.lang.StringBuilder;

        specialinvoke r116.<java.lang.StringBuilder: void <init>(java.lang.String)>("resultExpr=");

        $r55 = virtualinvoke r116.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r105_2);

        $r56 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.String toString()>();

        $r53[0] = $r56;

        staticinvoke <safetyChecker.utilities.LogUtils: void debugln(java.lang.Object[])>($r53);

        r119 = (com.microsoft.z3.Expr) r105_2;

        return r119;

     label17:
        $z7 = r1 instanceof soot.jimple.InvokeExpr;

        if $z7 == 0 goto label18;

        $z11 = virtualinvoke r2.<safetyChecker.Edge: boolean isFunctionCall()>();

        if $z11 == 0 goto label18;

        $r23 = newarray (java.lang.Object)[1];

        r117 = new java.lang.StringBuilder;

        specialinvoke r117.<java.lang.StringBuilder: void <init>(java.lang.String)>("****");

        $r25 = virtualinvoke r117.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        $r23[0] = $r26;

        staticinvoke <safetyChecker.utilities.LogUtils: void warningln(java.lang.Object[])>($r23);

     label18:
        $z8 = r1 instanceof soot.jimple.ArrayRef;

        if $z8 == 0 goto label19;

        r106 = (soot.jimple.ArrayRef) r1;

        $r21 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: safetyChecker.z3ScriptManager.Z3ArrayHandler arrayHandler>;

        $r22 = virtualinvoke $r21.<safetyChecker.z3ScriptManager.Z3ArrayHandler: com.microsoft.z3.Expr z3ArrayRef(soot.jimple.ArrayRef,safetyChecker.z3ScriptManager.Z3ScriptHandler,safetyChecker.Edge)>(r106, r0, r2);

        return $r22;

     label19:
        $z9 = staticinvoke <safetyChecker.UnitController: boolean isArraysEqualsInvoke(soot.Value)>(r1);

        if $z9 == 0 goto label20;

        $r20 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: safetyChecker.z3ScriptManager.Z3ArrayHandler arrayHandler>;

        r107 = virtualinvoke $r20.<safetyChecker.z3ScriptManager.Z3ArrayHandler: com.microsoft.z3.Expr z3ArraysEqual(soot.Value,safetyChecker.z3ScriptManager.Z3ScriptHandler,safetyChecker.Edge)>(r1, r0, r2);

        return r107;

     label20:
        $z10 = r1 instanceof soot.jimple.InstanceFieldRef;

        if $z10 == 0 goto label21;

        r108 = (soot.jimple.InstanceFieldRef) r1;

        r109 = virtualinvoke r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.Expr z3ObjectField(soot.jimple.InstanceFieldRef,boolean,safetyChecker.Edge)>(r108, z0, r2);

        return r109;

     label21:
        $r11 = newarray (java.lang.Object)[1];

        $r11[0] = "returning null";

        staticinvoke <safetyChecker.utilities.LogUtils: void fatalln(java.lang.Object[])>($r11);

        $r12 = newarray (java.lang.Object)[1];

        r118 = new java.lang.StringBuilder;

        specialinvoke r118.<java.lang.StringBuilder: void <init>(java.lang.String)>("Vertex=");

        $r14 = virtualinvoke r2.<safetyChecker.Edge: safetyChecker.Vertex getSource()>();

        $r15 = virtualinvoke r118.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("---Edge=");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        $r12[0] = $r18;

        staticinvoke <safetyChecker.utilities.LogUtils: void fatalln(java.lang.Object[])>($r12);

        $r19 = newarray (java.lang.Object)[1];

        $r19[0] = "Z3ScriptHandler.convertPrimitiveValue";

        staticinvoke <safetyChecker.utilities.LogUtils: void fatalln(java.lang.Object[])>($r19);

        return null;
    }

    private com.microsoft.z3.Expr convertRefLikeValue(soot.Value, boolean, safetyChecker.Edge, int)
    {
        safetyChecker.z3ScriptManager.Z3ScriptHandler r0;
        soot.Value r1, r4, r74, r86, r74_1, r74_2, r74_3, r74_4, r74_5, r74_6;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14;
        safetyChecker.Edge r2, $r49, r73, r73_1, r73_2, r73_3, r73_4, r73_5, r73_6;
        int i0, $i1, $i2, $i3, $i4, $i5;
        java.util.Iterator r3;
        soot.Unit r5, r6, $r20;
        java.lang.Object[] $r7, $r11, $r17, $r18, $r25, $r40, $r44, $r51, $r57, $r65;
        java.lang.StringBuilder $r9, $r15, $r21, $r22, $r23, $r42, $r46, $r53, $r54, $r55, $r59, $r60, $r62, $r67, r91, r92, r93, r94, r95, r96, r97, r99;
        java.lang.String $r10, $r14, $r16, $r24, $r43, $r47, $r56, $r63, $r68, r89;
        java.lang.Class $r13;
        com.microsoft.z3.InterpolationContext $r26, $r69;
        com.microsoft.z3.IntNum $r27;
        soot.Type $r29, r78;
        safetyChecker.z3ScriptManager.Z3ObjectFieldHandler $r30;
        com.microsoft.z3.Expr $r31, $r32, $r33, $r35, $r38, r80, r81, r82, r100;
        safetyChecker.z3ScriptManager.Z3ArrayHandler $r34, $r37;
        soot.jimple.AnyNewExpr $r36;
        java.lang.Object $r39, r77, r77_1, r77_2;
        safetyChecker.Vertex $r48, $r50, $r61, $r64, r76, r76_1, r76_2, r76_3;
        soot.shimple.PhiExpr r70;
        java.util.List r71;
        soot.toolkits.scalar.ValueUnitPair r75;
        soot.Local r79;
        soot.jimple.ArrayRef r83;
        soot.jimple.InstanceFieldRef r84;
        soot.jimple.CastExpr r85;
        soot.jimple.StaticFieldRef r87;
        soot.SootField r88;
        soot.jimple.internal.JimpleLocal r90, r98;

        r0 := @this: safetyChecker.z3ScriptManager.Z3ScriptHandler;

        r1 := @parameter0: soot.Value;

        z0 := @parameter1: boolean;

        r2 := @parameter2: safetyChecker.Edge;

        i0 := @parameter3: int;

        $r7 = newarray (java.lang.Object)[1];

        r91 = new java.lang.StringBuilder;

        specialinvoke r91.<java.lang.StringBuilder: void <init>(java.lang.String)>("Z3ScriptHandler.convertRefLikeValue=");

        $r9 = virtualinvoke r91.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7[0] = $r10;

        staticinvoke <safetyChecker.utilities.LogUtils: void debugln(java.lang.Object[])>($r7);

        $r11 = newarray (java.lang.Object)[1];

        r92 = new java.lang.StringBuilder;

        specialinvoke r92.<java.lang.StringBuilder: void <init>(java.lang.String)>("type  fo the value is ");

        $r13 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r14 = virtualinvoke $r13.<java.lang.Class: java.lang.String getName()>();

        $r15 = virtualinvoke r92.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        $r11[0] = $r16;

        staticinvoke <safetyChecker.utilities.LogUtils: void detailln(java.lang.Object[])>($r11);

        $z2 = r1 instanceof soot.shimple.PhiExpr;

        if $z2 == 0 goto label09;

        r70 = (soot.shimple.PhiExpr) r1;

        r71 = interfaceinvoke r70.<soot.shimple.PhiExpr: java.util.List getArgs()>();

        virtualinvoke r2.<safetyChecker.Edge: safetyChecker.Vertex getSource()>();

        r73 = null;

        r74 = null;

        z1 = 0;

        r3 = interfaceinvoke r71.<java.util.List: java.util.Iterator iterator()>();

(0)     goto label07;

     label01:
        $r39 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r75 = (soot.toolkits.scalar.ValueUnitPair) $r39;

        r4 = virtualinvoke r75.<soot.toolkits.scalar.ValueUnitPair: soot.Value getValue()>();

        $r40 = newarray (java.lang.Object)[1];

        r93 = new java.lang.StringBuilder;

        specialinvoke r93.<java.lang.StringBuilder: void <init>(java.lang.String)>("valuePair=");

        $r42 = virtualinvoke r93.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.String toString()>();

        $r40[0] = $r43;

        staticinvoke <safetyChecker.utilities.LogUtils: void debugln(java.lang.Object[])>($r40);

        r5 = virtualinvoke r75.<soot.toolkits.scalar.ValueUnitPair: soot.Unit getUnit()>();

        $r44 = newarray (java.lang.Object)[1];

        r94 = new java.lang.StringBuilder;

        specialinvoke r94.<java.lang.StringBuilder: void <init>(java.lang.String)>("unitPair=");

        $r46 = virtualinvoke r94.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.String toString()>();

        $r44[0] = $r47;

        staticinvoke <safetyChecker.utilities.LogUtils: void debugln(java.lang.Object[])>($r44);

        r76_1 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: safetyChecker.Vertex errorPathRoot>;

(1)     goto label06;

     label02:
        $r49 = virtualinvoke r76_2.<safetyChecker.Vertex: safetyChecker.Edge getOutgoingEdge()>();

        r6 = virtualinvoke $r49.<safetyChecker.Edge: soot.Unit getUnit()>();

        $z14 = virtualinvoke r6.<java.lang.Object: boolean equals(java.lang.Object)>(r5);

(2)     if $z14 == 0 goto label05;

        if r73_2 != null goto label03;

        r73_3 = virtualinvoke r76_2.<safetyChecker.Vertex: safetyChecker.Edge getOutgoingEdge()>();

        r74_3 = r4;

(3)     goto label04;

     label03:
        $i1 = virtualinvoke r76_2.<safetyChecker.Vertex: int getDistance()>();

        $r50 = virtualinvoke r73_2.<safetyChecker.Edge: safetyChecker.Vertex getSource()>();

        $i2 = virtualinvoke $r50.<safetyChecker.Vertex: int getDistance()>();

(4)     if $i1 >= $i2 goto label04;

        r73_4 = virtualinvoke r76_2.<safetyChecker.Vertex: safetyChecker.Edge getOutgoingEdge()>();

(5)     r74_4 = r4;

     label04:
        r74_5 = Phi(r74_3 #3, r74_2 #4, r74_4 #5);

        r73_5 = Phi(r73_3 #3, r73_2 #4, r73_4 #5);

        $r51 = newarray (java.lang.Object)[1];

        r95 = new java.lang.StringBuilder;

        specialinvoke r95.<java.lang.StringBuilder: void <init>(java.lang.String)>("phiEqualityUnit=");

        $r53 = virtualinvoke r95.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r6);

        $r54 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-- Dist-");

        $i3 = virtualinvoke r76_2.<safetyChecker.Vertex: int getDistance()>();

        $r55 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r56 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.String toString()>();

        $r51[0] = $r56;

        staticinvoke <safetyChecker.utilities.LogUtils: void detailln(java.lang.Object[])>($r51);

        $r57 = newarray (java.lang.Object)[1];

        r96 = new java.lang.StringBuilder;

        specialinvoke r96.<java.lang.StringBuilder: void <init>(java.lang.String)>("resultunit=");

        $r59 = virtualinvoke r96.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r73_5);

        $r60 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" -- Dis=");

        $r61 = virtualinvoke r73_5.<safetyChecker.Edge: safetyChecker.Vertex getSource()>();

        $i4 = virtualinvoke $r61.<safetyChecker.Vertex: int getDistance()>();

        $r62 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r63 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.String toString()>();

        $r57[0] = $r63;

(6)     staticinvoke <safetyChecker.utilities.LogUtils: void detailln(java.lang.Object[])>($r57);

     label05:
        r74_6 = Phi(r74_2 #2, r74_5 #6);

        r73_6 = Phi(r73_2 #2, r73_5 #6);

(7)     r76_3 = virtualinvoke r76_2.<safetyChecker.Vertex: safetyChecker.Vertex getNextVertex()>();

     label06:
        r74_2 = Phi(r74_1 #1, r74_6 #7);

        r76_2 = Phi(r76_1 #1, r76_3 #7);

        r73_2 = Phi(r73_1 #1, r73_6 #7);

        $r48 = virtualinvoke r2.<safetyChecker.Edge: safetyChecker.Vertex getSource()>();

(8)     if r76_2 != $r48 goto label02;

     label07:
        r74_1 = Phi(r74 #0, r74_2 #8);

        r76 = Phi(r76 #0, r76_2 #8);

        r73_1 = Phi(r73 #0, r73_2 #8);

        $z13 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z13 != 0 goto label01;

        $r64 = virtualinvoke r2.<safetyChecker.Edge: safetyChecker.Vertex getSource()>();

        $i5 = virtualinvoke $r64.<safetyChecker.Vertex: int getDistance()>();

        r77 = virtualinvoke r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.Expr convertValue(soot.Value,boolean,safetyChecker.Edge,int)>(r74_1, 0, r2, $i5);

(9)     if r77 != null goto label08;

        $r69 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

(10)    r77_1 = virtualinvoke $r69.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.IntNum mkInt(int)>(0);

     label08:
        r77_2 = Phi(r77 #9, r77_1 #10);

        $r65 = newarray (java.lang.Object)[1];

        r97 = new java.lang.StringBuilder;

        specialinvoke r97.<java.lang.StringBuilder: void <init>(java.lang.String)>("resultExpr=");

        $r67 = virtualinvoke r97.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r77_2);

        $r68 = virtualinvoke $r67.<java.lang.StringBuilder: java.lang.String toString()>();

        $r65[0] = $r68;

        staticinvoke <safetyChecker.utilities.LogUtils: void debugln(java.lang.Object[])>($r65);

        r100 = (com.microsoft.z3.Expr) r77_2;

        return r100;

     label09:
        $z3 = r1 instanceof soot.Local;

        if $z3 == 0 goto label11;

        r78 = interfaceinvoke r1.<soot.Value: soot.Type getType()>();

        r79 = (soot.Local) r1;

        $z11 = r78 instanceof soot.RefType;

        if $z11 == 0 goto label10;

        $r38 = specialinvoke r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.Expr createZ3Object(soot.Local,boolean,safetyChecker.Edge)>(r79, z0, r2);

        return $r38;

     label10:
        $z12 = r78 instanceof soot.ArrayType;

        if $z12 == 0 goto label11;

        $r37 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: safetyChecker.z3ScriptManager.Z3ArrayHandler arrayHandler>;

        r80 = virtualinvoke $r37.<safetyChecker.z3ScriptManager.Z3ArrayHandler: com.microsoft.z3.Expr z3Local(soot.Local,boolean,int,safetyChecker.z3ScriptManager.Z3ScriptHandler)>(r79, z0, i0, r0);

        return r80;

     label11:
        $z4 = r1 instanceof soot.jimple.AnyNewExpr;

        if $z4 == 0 goto label12;

        $r36 = (soot.jimple.AnyNewExpr) r1;

        r81 = specialinvoke r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.Expr convertAnyNewExpr(soot.jimple.AnyNewExpr,safetyChecker.Edge)>($r36, r2);

        return r81;

     label12:
        $z5 = r1 instanceof soot.jimple.StringConstant;

        if $z5 == 0 goto label13;

        r82 = staticinvoke <safetyChecker.z3ScriptManager.Z3StringHandler: com.microsoft.z3.Expr z3NewString(safetyChecker.z3ScriptManager.Z3ScriptHandler)>(r0);

        return r82;

     label13:
        $z6 = r1 instanceof soot.jimple.ArrayRef;

        if $z6 == 0 goto label14;

        r83 = (soot.jimple.ArrayRef) r1;

        $r34 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: safetyChecker.z3ScriptManager.Z3ArrayHandler arrayHandler>;

        $r35 = virtualinvoke $r34.<safetyChecker.z3ScriptManager.Z3ArrayHandler: com.microsoft.z3.Expr z3ArrayRef(soot.jimple.ArrayRef,safetyChecker.z3ScriptManager.Z3ScriptHandler,safetyChecker.Edge)>(r83, r0, r2);

        return $r35;

     label14:
        $z7 = r1 instanceof soot.jimple.InstanceFieldRef;

        if $z7 == 0 goto label15;

        r84 = (soot.jimple.InstanceFieldRef) r1;

        $r33 = specialinvoke r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.Expr z3InstanceFieldRef(soot.jimple.InstanceFieldRef,boolean,safetyChecker.Edge)>(r84, z0, r2);

        return $r33;

     label15:
        $z8 = r1 instanceof soot.jimple.CastExpr;

        if $z8 == 0 goto label16;

        r85 = (soot.jimple.CastExpr) r1;

        r86 = interfaceinvoke r85.<soot.jimple.CastExpr: soot.Value getOp()>();

        $r32 = virtualinvoke r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.Expr convertValue(soot.Value,boolean,safetyChecker.Edge,int)>(r86, z0, r2, i0);

        return $r32;

     label16:
        $z9 = r1 instanceof soot.jimple.StaticFieldRef;

        if $z9 == 0 goto label17;

        r87 = (soot.jimple.StaticFieldRef) r1;

        r88 = virtualinvoke r87.<soot.jimple.StaticFieldRef: soot.SootField getField()>();

        r89 = virtualinvoke r88.<soot.SootField: java.lang.String getName()>();

        r98 = new soot.jimple.internal.JimpleLocal;

        $r29 = virtualinvoke r88.<soot.SootField: soot.Type getType()>();

        specialinvoke r98.<soot.jimple.internal.JimpleLocal: void <init>(java.lang.String,soot.Type)>(r89, $r29);

        r90 = r98;

        $r30 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: safetyChecker.z3ScriptManager.Z3ObjectFieldHandler objFieldHandler>;

        $r31 = virtualinvoke $r30.<safetyChecker.z3ScriptManager.Z3ObjectFieldHandler: com.microsoft.z3.Expr handleStaticFieldRef(soot.Local,boolean,safetyChecker.z3ScriptManager.Z3ScriptHandler)>(r90, z0, r0);

        return $r31;

     label17:
        $z10 = r1 instanceof soot.jimple.NullConstant;

        if $z10 == 0 goto label18;

        $r26 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        $r27 = virtualinvoke $r26.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.IntNum mkInt(int)>(0);

        return $r27;

     label18:
        $r17 = newarray (java.lang.Object)[1];

        $r17[0] = "FATAL: Conversion cannot be done";

        staticinvoke <safetyChecker.utilities.LogUtils: void fatalln(java.lang.Object[])>($r17);

        $r18 = newarray (java.lang.Object)[1];

        r99 = new java.lang.StringBuilder;

        specialinvoke r99.<java.lang.StringBuilder: void <init>(java.lang.String)>("FATAL: Unit : ");

        $r20 = virtualinvoke r2.<safetyChecker.Edge: soot.Unit getUnit()>();

        $r21 = virtualinvoke r99.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r20);

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" - Value : ");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        $r18[0] = $r24;

        staticinvoke <safetyChecker.utilities.LogUtils: void fatalln(java.lang.Object[])>($r18);

        $r25 = newarray (java.lang.Object)[1];

        $r25[0] = "Z3ScriptHandler.convertRefLikeValue";

        staticinvoke <safetyChecker.utilities.LogUtils: void fatalln(java.lang.Object[])>($r25);

        return null;
    }

    private com.microsoft.z3.Expr z3InstanceFieldRef(soot.jimple.InstanceFieldRef, boolean, safetyChecker.Edge)
    {
        safetyChecker.z3ScriptManager.Z3ScriptHandler r0;
        soot.jimple.InstanceFieldRef r1;
        boolean z0, $z1;
        safetyChecker.Edge r2;
        soot.Value r3;
        soot.SootField r4;
        com.microsoft.z3.Expr r5, r7, r23;
        java.lang.String r6, r21;
        java.util.Map $r8, $r9, $r18;
        java.lang.Object $r10;
        com.microsoft.z3.InterpolationContext $r11, $r12, $r13, $r15, $r17;
        com.microsoft.z3.IntSort $r14, $r16;
        com.microsoft.z3.ArraySort r20;
        com.microsoft.z3.ArrayExpr r22;

        r0 := @this: safetyChecker.z3ScriptManager.Z3ScriptHandler;

        r1 := @parameter0: soot.jimple.InstanceFieldRef;

        z0 := @parameter1: boolean;

        r2 := @parameter2: safetyChecker.Edge;

        r3 = interfaceinvoke r1.<soot.jimple.InstanceFieldRef: soot.Value getBase()>();

        r4 = interfaceinvoke r1.<soot.jimple.InstanceFieldRef: soot.SootField getField()>();

        r5 = virtualinvoke r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.Expr convertValue(soot.Value,boolean,safetyChecker.Edge,int)>(r3, 0, r2, 0);

        r6 = virtualinvoke r4.<soot.SootField: java.lang.String toString()>();

        $r8 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: java.util.Map global>;

        $z1 = interfaceinvoke $r8.<java.util.Map: boolean containsKey(java.lang.Object)>(r6);

        if $z1 != 0 goto label1;

        $r13 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        $r12 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        $r14 = virtualinvoke $r12.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.IntSort getIntSort()>();

        $r15 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        $r16 = virtualinvoke $r15.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.IntSort getIntSort()>();

        r20 = virtualinvoke $r13.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.ArraySort mkArraySort(com.microsoft.z3.Sort,com.microsoft.z3.Sort)>($r14, $r16);

        r21 = virtualinvoke r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: java.lang.String getGlobalName(java.lang.String)>(r6);

        $r17 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        r7 = virtualinvoke $r17.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.Expr mkConst(java.lang.String,com.microsoft.z3.Sort)>(r21, r20);

        $r18 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: java.util.Map global>;

        interfaceinvoke $r18.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r6, r7);

     label1:
        if z0 == 0 goto label2;

        return r5;

     label2:
        $r9 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: java.util.Map global>;

        $r10 = interfaceinvoke $r9.<java.util.Map: java.lang.Object get(java.lang.Object)>(r6);

        r22 = (com.microsoft.z3.ArrayExpr) $r10;

        $r11 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        r23 = virtualinvoke $r11.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.Expr mkSelect(com.microsoft.z3.ArrayExpr,com.microsoft.z3.Expr)>(r22, r5);

        return r23;
    }

    private com.microsoft.z3.Expr createZ3Object(soot.Local, boolean, safetyChecker.Edge)
    {
        safetyChecker.z3ScriptManager.Z3ScriptHandler r0;
        soot.Local r1;
        boolean z0, $z1, $z2, $z3;
        safetyChecker.Edge r2;
        soot.Type r3;
        java.lang.String r4, $r18, $r19, $r21, $r27, $r28, $r30, r53, r56, r61;
        com.microsoft.z3.Expr r5, r54, r57, r62;
        java.lang.Object[] $r6;
        java.util.Map $r7, $r11, $r12, $r13, $r15, $r32, $r36, $r44, $r45, $r48, $r49;
        com.microsoft.z3.InterpolationContext $r8, $r9, $r23, $r24, $r33, $r38, $r39, $r41, $r43, $r47;
        com.microsoft.z3.StringSymbol $r10;
        java.lang.Object $r14, $r16, $r34, $r37, $r50, r51, r51_1, r51_2;
        safetyChecker.ProgramTree $r20, $r29;
        java.lang.StringBuilder $r22, $r31, r64, r65;
        com.microsoft.z3.IntExpr $r25;
        com.microsoft.z3.Sort $r35, r66, r67;
        com.microsoft.z3.IntSort $r40, $r42;
        com.microsoft.z3.ArraySort r52;
        safetyChecker.NewSort r55, r58, r60, r63;
        com.microsoft.z3.ArrayExpr r59;

        r0 := @this: safetyChecker.z3ScriptManager.Z3ScriptHandler;

        r1 := @parameter0: soot.Local;

        z0 := @parameter1: boolean;

        r2 := @parameter2: safetyChecker.Edge;

        $r6 = newarray (java.lang.Object)[1];

        $r6[0] = "createZ3Object";

        staticinvoke <safetyChecker.utilities.LogUtils: void debugln(java.lang.Object[])>($r6);

        r3 = interfaceinvoke r1.<soot.Local: soot.Type getType()>();

        r4 = virtualinvoke r3.<soot.Type: java.lang.String toString()>();

        $r7 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: java.util.Map newSortMap>;

        $z1 = interfaceinvoke $r7.<java.util.Map: boolean containsKey(java.lang.Object)>(r4);

        if $z1 == 0 goto label1;

        $r49 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: java.util.Map newSortMap>;

        $r50 = interfaceinvoke $r49.<java.util.Map: java.lang.Object get(java.lang.Object)>(r4);

        r51 = (com.microsoft.z3.Sort) $r50;

(0)     goto label2;

     label1:
        $r9 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        $r8 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        $r10 = virtualinvoke $r8.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.StringSymbol mkSymbol(java.lang.String)>(r4);

        r51_1 = virtualinvoke $r9.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.UninterpretedSort mkUninterpretedSort(com.microsoft.z3.Symbol)>($r10);

        $r11 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: java.util.Map newSortMap>;

(1)     interfaceinvoke $r11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, r51_1);

     label2:
        r51_2 = Phi(r51 #0, r51_1 #1);

        $r12 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: java.util.Map global>;

        $z2 = interfaceinvoke $r12.<java.util.Map: boolean containsKey(java.lang.Object)>(r4);

        if $z2 != 0 goto label3;

        $r39 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        $r38 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        $r40 = virtualinvoke $r38.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.IntSort getIntSort()>();

        $r41 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        $r42 = virtualinvoke $r41.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.IntSort getIntSort()>();

        r52 = virtualinvoke $r39.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.ArraySort mkArraySort(com.microsoft.z3.Sort,com.microsoft.z3.Sort)>($r40, $r42);

        r53 = virtualinvoke r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: java.lang.String getGlobalName(java.lang.String)>(r4);

        $r43 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        r54 = virtualinvoke $r43.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.Expr mkConst(java.lang.String,com.microsoft.z3.Sort)>(r53, r52);

        $r44 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: java.util.Map global>;

        interfaceinvoke $r44.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, r54);

        $r45 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: java.util.Map substitute>;

        interfaceinvoke $r45.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, r53);

        r63 = new safetyChecker.NewSort;

        $r47 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        r66 = (com.microsoft.z3.Sort) r51_2;

        specialinvoke r63.<safetyChecker.NewSort: void <init>(com.microsoft.z3.Sort,com.microsoft.z3.InterpolationContext)>(r66, $r47);

        r55 = r63;

        $r48 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: java.util.Map sortId>;

        interfaceinvoke $r48.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, r55);

     label3:
        if z0 == 0 goto label5;

        r64 = new java.lang.StringBuilder;

        $r27 = interfaceinvoke r1.<soot.Local: java.lang.String getName()>();

        $r28 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r27);

        specialinvoke r64.<java.lang.StringBuilder: void <init>(java.lang.String)>($r28);

        $r29 = virtualinvoke r2.<safetyChecker.Edge: safetyChecker.ProgramTree getProgramTree()>();

        $r30 = virtualinvoke $r29.<safetyChecker.ProgramTree: java.lang.String getProgramDefinition()>();

        $r31 = virtualinvoke r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r30);

        r56 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        $r33 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        $r32 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: java.util.Map newSortMap>;

        $r34 = interfaceinvoke $r32.<java.util.Map: java.lang.Object get(java.lang.Object)>(r4);

        $r35 = (com.microsoft.z3.Sort) $r34;

        r57 = virtualinvoke $r33.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.Expr mkConst(java.lang.String,com.microsoft.z3.Sort)>(r56, $r35);

        $r36 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: java.util.Map sortId>;

        $r37 = interfaceinvoke $r36.<java.util.Map: java.lang.Object get(java.lang.Object)>(r4);

        r58 = (safetyChecker.NewSort) $r37;

        $z3 = virtualinvoke r58.<safetyChecker.NewSort: boolean ifHasExpr(com.microsoft.z3.Expr)>(r57);

        if $z3 == 0 goto label4;

        return r57;

     label4:
        virtualinvoke r58.<safetyChecker.NewSort: void creatNewOject(com.microsoft.z3.Expr)>(r57);

        return r57;

     label5:
        $r13 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: java.util.Map global>;

        $r14 = interfaceinvoke $r13.<java.util.Map: java.lang.Object get(java.lang.Object)>(r4);

        r59 = (com.microsoft.z3.ArrayExpr) $r14;

        $r15 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: java.util.Map sortId>;

        $r16 = interfaceinvoke $r15.<java.util.Map: java.lang.Object get(java.lang.Object)>(r4);

        r60 = (safetyChecker.NewSort) $r16;

        r65 = new java.lang.StringBuilder;

        $r18 = interfaceinvoke r1.<soot.Local: java.lang.String getName()>();

        $r19 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r18);

        specialinvoke r65.<java.lang.StringBuilder: void <init>(java.lang.String)>($r19);

        $r20 = virtualinvoke r2.<safetyChecker.Edge: safetyChecker.ProgramTree getProgramTree()>();

        $r21 = virtualinvoke $r20.<safetyChecker.ProgramTree: java.lang.String getProgramDefinition()>();

        $r22 = virtualinvoke r65.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21);

        r61 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        $r23 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        r67 = (com.microsoft.z3.Sort) r51_2;

        r62 = virtualinvoke $r23.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.Expr mkConst(java.lang.String,com.microsoft.z3.Sort)>(r61, r67);

        $r24 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        $r25 = virtualinvoke r60.<safetyChecker.NewSort: com.microsoft.z3.IntExpr getId(com.microsoft.z3.Expr)>(r62);

        r5 = virtualinvoke $r24.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.Expr mkSelect(com.microsoft.z3.ArrayExpr,com.microsoft.z3.Expr)>(r59, $r25);

        return r5;
    }

    public java.lang.String getGlobalName(java.lang.String)
    {
        safetyChecker.z3ScriptManager.Z3ScriptHandler r0;
        java.lang.String r1, r12;
        java.util.Map $r2, $r7, $r9;
        boolean $z0;
        java.lang.StringBuilder $r3, $r4, $r5, $r6;
        java.lang.Integer $r8, $r11;
        java.lang.Object $r10;
        int i0, i1, i0_1, i0_2;

        r0 := @this: safetyChecker.z3ScriptManager.Z3ScriptHandler;

        r1 := @parameter0: java.lang.String;

        i0 = 1;

        $r2 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: java.util.Map arrayNameMap>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

(0)     if $z0 == 0 goto label1;

        $r9 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: java.util.Map arrayNameMap>;

        $r10 = interfaceinvoke $r9.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r11 = (java.lang.Integer) $r10;

        i1 = virtualinvoke $r11.<java.lang.Integer: int intValue()>();

(1)     i0_1 = i1 + 1;

     label1:
        i0_2 = Phi(i0 #0, i0_1 #1);

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("Global_");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0_2);

        r12 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: java.util.Map arrayNameMap>;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0_2);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r8);

        return r12;
    }

    private com.microsoft.z3.BoolExpr convertAssignStmt(com.microsoft.z3.Expr, com.microsoft.z3.Expr, soot.Type, soot.Value, int)
    {
        safetyChecker.z3ScriptManager.Z3ScriptHandler r0;
        com.microsoft.z3.Expr r1, r2, $r39, r74, r75;
        soot.Type r3;
        soot.Value r4;
        int i0;
        com.microsoft.z3.ArrayExpr r5, $r16, $r23, r66, r67, r77, r77_1, r77_2;
        com.microsoft.z3.BoolExpr r6, r62, r71, r78;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.util.Map $r7, $r11, $r12, $r13, $r31, $r44, $r45, $r47, $r52;
        java.lang.Object $r8, $r14, $r32, $r53;
        com.microsoft.z3.InterpolationContext $r9, $r15, $r22, $r24, $r37, $r54, $r60, $r61;
        com.microsoft.z3.Sort $r10, $r38, $r46;
        com.microsoft.z3.IntExpr $r17, $r55;
        java.lang.Object[] $r18, $r33, $r40, $r56;
        java.lang.StringBuilder $r19, $r20, $r27, $r30, $r34, $r35, $r41, $r42, $r48, $r51, $r57, $r58;
        java.lang.String $r21, $r28, $r29, $r36, $r43, $r49, $r50, $r59, r63, r64, r65, r68, r72, r73;
        safetyChecker.Edge $r25;
        safetyChecker.z3ScriptManager.Z3ArrayHandler $r26;
        safetyChecker.NewSort r69, r76;
        soot.jimple.ArrayRef r70;

        r0 := @this: safetyChecker.z3ScriptManager.Z3ScriptHandler;

        r1 := @parameter0: com.microsoft.z3.Expr;

        r2 := @parameter1: com.microsoft.z3.Expr;

        r3 := @parameter2: soot.Type;

        r4 := @parameter3: soot.Value;

        i0 := @parameter4: int;

        $z0 = r3 instanceof soot.PrimType;

        if $z0 == 0 goto label1;

        $z6 = r4 instanceof soot.Local;

        if $z6 == 0 goto label1;

        $r61 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        r62 = virtualinvoke $r61.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.BoolExpr mkEq(com.microsoft.z3.Expr,com.microsoft.z3.Expr)>(r2, r1);

        return r62;

     label1:
        $z1 = r3 instanceof soot.ArrayType;

        if $z1 == 0 goto label2;

        $z5 = r4 instanceof soot.Local;

        if $z5 == 0 goto label2;

        r63 = virtualinvoke r3.<soot.Type: java.lang.String toString()>();

        r64 = r63;

        $r27 = new java.lang.StringBuilder;

        $r28 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r64);

        specialinvoke $r27.<java.lang.StringBuilder: void <init>(java.lang.String)>($r28);

        $r29 = virtualinvoke r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: java.lang.String getNameSuffix()>();

        $r30 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r29);

        r65 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        $r31 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: java.util.Map localMap>;

        $r32 = interfaceinvoke $r31.<java.util.Map: java.lang.Object get(java.lang.Object)>(r64);

        r66 = (com.microsoft.z3.ArrayExpr) $r32;

        $r33 = newarray (java.lang.Object)[1];

        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>(java.lang.String)>("latestArray=");

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r66);

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>();

        $r33[0] = $r36;

        staticinvoke <safetyChecker.utilities.LogUtils: void debugln(java.lang.Object[])>($r33);

        $r37 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        $r38 = virtualinvoke r66.<com.microsoft.z3.ArrayExpr: com.microsoft.z3.Sort getSort()>();

        $r39 = virtualinvoke $r37.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.Expr mkConst(java.lang.String,com.microsoft.z3.Sort)>(r65, $r38);

        r67 = (com.microsoft.z3.ArrayExpr) $r39;

        $r40 = newarray (java.lang.Object)[1];

        $r41 = new java.lang.StringBuilder;

        specialinvoke $r41.<java.lang.StringBuilder: void <init>(java.lang.String)>("newArray=");

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r67);

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.String toString()>();

        $r40[0] = $r43;

        staticinvoke <safetyChecker.utilities.LogUtils: void debugln(java.lang.Object[])>($r40);

        $r44 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: java.util.Map substitute>;

        interfaceinvoke $r44.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r65, r64);

        $r45 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: java.util.Map substituteSort>;

        $r46 = virtualinvoke r67.<com.microsoft.z3.ArrayExpr: com.microsoft.z3.Sort getSort()>();

        interfaceinvoke $r45.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r65, $r46);

        $r47 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: java.util.Map localMap>;

        interfaceinvoke $r47.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r64, r67);

        $r48 = new java.lang.StringBuilder;

        $r49 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r63);

        specialinvoke $r48.<java.lang.StringBuilder: void <init>(java.lang.String)>($r49);

        $r50 = virtualinvoke r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: java.lang.String getArraySortSuffix()>();

        $r51 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r50);

        r68 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.String toString()>();

        $r52 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: java.util.Map sortId>;

        $r53 = interfaceinvoke $r52.<java.util.Map: java.lang.Object get(java.lang.Object)>(r68);

        r69 = (safetyChecker.NewSort) $r53;

        $r54 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        $r55 = virtualinvoke r69.<safetyChecker.NewSort: com.microsoft.z3.IntExpr getId(com.microsoft.z3.Expr)>(r2);

        r5 = virtualinvoke $r54.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.ArrayExpr mkStore(com.microsoft.z3.ArrayExpr,com.microsoft.z3.Expr,com.microsoft.z3.Expr)>(r66, $r55, r1);

        $r56 = newarray (java.lang.Object)[1];

        $r57 = new java.lang.StringBuilder;

        specialinvoke $r57.<java.lang.StringBuilder: void <init>(java.lang.String)>("afterStore=");

        $r58 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);

        $r59 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.String toString()>();

        $r56[0] = $r59;

        staticinvoke <safetyChecker.utilities.LogUtils: void debugln(java.lang.Object[])>($r56);

        $r60 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        r6 = virtualinvoke $r60.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.BoolExpr mkEq(com.microsoft.z3.Expr,com.microsoft.z3.Expr)>(r67, r5);

        return r6;

     label2:
        $z2 = r4 instanceof soot.jimple.ArrayRef;

        if $z2 == 0 goto label3;

        r70 = (soot.jimple.ArrayRef) r4;

        $r26 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: safetyChecker.z3ScriptManager.Z3ArrayHandler arrayHandler>;

        $r25 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: safetyChecker.Edge currentEdge>;

        r71 = virtualinvoke $r26.<safetyChecker.z3ScriptManager.Z3ArrayHandler: com.microsoft.z3.BoolExpr updateArrayRef(soot.jimple.ArrayRef,safetyChecker.z3ScriptManager.Z3ScriptHandler,com.microsoft.z3.Expr,safetyChecker.Edge)>(r70, r0, r1, $r25);

        return r71;

     label3:
        r72 = specialinvoke r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: java.lang.String getArrayName(soot.Value)>(r4);

        r73 = virtualinvoke r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: java.lang.String getGlobalName(java.lang.String)>(r72);

        $r7 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: java.util.Map global>;

        $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>(r72);

        r74 = (com.microsoft.z3.Expr) $r8;

        $r9 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        $r10 = virtualinvoke r74.<com.microsoft.z3.Expr: com.microsoft.z3.Sort getSort()>();

        r75 = virtualinvoke $r9.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.Expr mkConst(java.lang.String,com.microsoft.z3.Sort)>(r73, $r10);

        $r11 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: java.util.Map substitute>;

        interfaceinvoke $r11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r73, r72);

        $r12 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: java.util.Map global>;

        interfaceinvoke $r12.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r72, r75);

        $r13 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: java.util.Map sortId>;

        $r14 = interfaceinvoke $r13.<java.util.Map: java.lang.Object get(java.lang.Object)>(r72);

        r76 = (safetyChecker.NewSort) $r14;

        $z3 = r4 instanceof soot.jimple.FieldRef;

        if $z3 == 0 goto label4;

        $z4 = r4 instanceof soot.jimple.StaticFieldRef;

        if $z4 != 0 goto label4;

        $r24 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        $r23 = (com.microsoft.z3.ArrayExpr) r74;

        r77 = virtualinvoke $r24.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.ArrayExpr mkStore(com.microsoft.z3.ArrayExpr,com.microsoft.z3.Expr,com.microsoft.z3.Expr)>($r23, r2, r1);

(0)     goto label5;

     label4:
        $r15 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        $r16 = (com.microsoft.z3.ArrayExpr) r74;

        $r17 = virtualinvoke r76.<safetyChecker.NewSort: com.microsoft.z3.IntExpr getId(com.microsoft.z3.Expr)>(r2);

(1)     r77_1 = virtualinvoke $r15.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.ArrayExpr mkStore(com.microsoft.z3.ArrayExpr,com.microsoft.z3.Expr,com.microsoft.z3.Expr)>($r16, $r17, r1);

     label5:
        r77_2 = Phi(r77 #0, r77_1 #1);

        $r18 = newarray (java.lang.Object)[1];

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>(java.lang.String)>("afterStore=");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r77_2);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        $r18[0] = $r21;

        staticinvoke <safetyChecker.utilities.LogUtils: void debugln(java.lang.Object[])>($r18);

        $r22 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        r78 = virtualinvoke $r22.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.BoolExpr mkEq(com.microsoft.z3.Expr,com.microsoft.z3.Expr)>(r75, r77_2);

        return r78;
    }

    private com.microsoft.z3.Expr convertAnyNewExpr(soot.jimple.AnyNewExpr, safetyChecker.Edge)
    {
        safetyChecker.z3ScriptManager.Z3ScriptHandler r0;
        soot.jimple.AnyNewExpr r1;
        safetyChecker.Edge r2;
        java.lang.Object[] $r3;
        boolean $z0, $z1, $z2;
        soot.jimple.NewMultiArrayExpr $r4;
        safetyChecker.z3ScriptManager.Z3ArrayHandler $r5, $r8;
        com.microsoft.z3.Expr $r6, $r9, $r11;
        soot.jimple.NewArrayExpr $r7;
        soot.jimple.NewExpr $r10;

        r0 := @this: safetyChecker.z3ScriptManager.Z3ScriptHandler;

        r1 := @parameter0: soot.jimple.AnyNewExpr;

        r2 := @parameter1: safetyChecker.Edge;

        $r3 = newarray (java.lang.Object)[1];

        $r3[0] = "Z3ScriptHandler.convertAnyNewExpr";

        staticinvoke <safetyChecker.utilities.LogUtils: void debugln(java.lang.Object[])>($r3);

        $z0 = r1 instanceof soot.jimple.NewExpr;

        if $z0 == 0 goto label1;

        $r10 = (soot.jimple.NewExpr) r1;

        $r11 = specialinvoke r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.Expr convertNewExpr(soot.jimple.NewExpr,safetyChecker.Edge)>($r10, r2);

        return $r11;

     label1:
        $z1 = r1 instanceof soot.jimple.NewArrayExpr;

        if $z1 == 0 goto label2;

        $r8 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: safetyChecker.z3ScriptManager.Z3ArrayHandler arrayHandler>;

        $r7 = (soot.jimple.NewArrayExpr) r1;

        $r9 = virtualinvoke $r8.<safetyChecker.z3ScriptManager.Z3ArrayHandler: com.microsoft.z3.Expr convertNewArrayExpr(soot.jimple.NewArrayExpr,safetyChecker.Edge,safetyChecker.z3ScriptManager.Z3ScriptHandler)>($r7, r2, r0);

        return $r9;

     label2:
        $z2 = r1 instanceof soot.jimple.NewMultiArrayExpr;

        if $z2 == 0 goto label3;

        $r5 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: safetyChecker.z3ScriptManager.Z3ArrayHandler arrayHandler>;

        $r4 = (soot.jimple.NewMultiArrayExpr) r1;

        $r6 = virtualinvoke $r5.<safetyChecker.z3ScriptManager.Z3ArrayHandler: com.microsoft.z3.Expr convertNewMultiArrayExpr(soot.jimple.NewMultiArrayExpr,safetyChecker.Edge,safetyChecker.z3ScriptManager.Z3ScriptHandler)>($r4, r2, r0);

        return $r6;

     label3:
        return null;
    }

    private com.microsoft.z3.Expr convertNewExpr(soot.jimple.NewExpr, safetyChecker.Edge)
    {
        safetyChecker.z3ScriptManager.Z3ScriptHandler r0;
        soot.jimple.NewExpr r1;
        safetyChecker.Edge r2;
        soot.Type r3;
        java.lang.String r4;
        safetyChecker.NewSort r5, r19, r21;
        java.util.Map $r6, $r7, $r9, $r12, $r14, $r16;
        boolean $z0, $z1;
        com.microsoft.z3.InterpolationContext $r8, $r11;
        com.microsoft.z3.Expr $r13, $r18;
        java.lang.Object $r15, $r17, r20, r20_1, r20_2;
        com.microsoft.z3.Sort r22;

        r0 := @this: safetyChecker.z3ScriptManager.Z3ScriptHandler;

        r1 := @parameter0: soot.jimple.NewExpr;

        r2 := @parameter1: safetyChecker.Edge;

        r3 = interfaceinvoke r1.<soot.jimple.NewExpr: soot.Type getType()>();

        r4 = virtualinvoke r3.<soot.Type: java.lang.String toString()>();

        $r6 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: java.util.Map sortId>;

        $z0 = interfaceinvoke $r6.<java.util.Map: boolean containsKey(java.lang.Object)>(r4);

        if $z0 == 0 goto label1;

        $r16 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: java.util.Map sortId>;

        $r17 = interfaceinvoke $r16.<java.util.Map: java.lang.Object get(java.lang.Object)>(r4);

        r19 = (safetyChecker.NewSort) $r17;

        $r18 = virtualinvoke r19.<safetyChecker.NewSort: com.microsoft.z3.Expr getNewObject()>();

        return $r18;

     label1:
        $r7 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: java.util.Map newSortMap>;

        $z1 = interfaceinvoke $r7.<java.util.Map: boolean containsKey(java.lang.Object)>(r4);

        if $z1 == 0 goto label2;

        $r14 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: java.util.Map newSortMap>;

        $r15 = interfaceinvoke $r14.<java.util.Map: java.lang.Object get(java.lang.Object)>(r4);

        r20 = (com.microsoft.z3.Sort) $r15;

(0)     goto label3;

     label2:
        $r8 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        r20_1 = virtualinvoke $r8.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.UninterpretedSort mkUninterpretedSort(java.lang.String)>(r4);

        $r9 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: java.util.Map newSortMap>;

(1)     interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, r20_1);

     label3:
        r20_2 = Phi(r20 #0, r20_1 #1);

        r21 = new safetyChecker.NewSort;

        $r11 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        r22 = (com.microsoft.z3.Sort) r20_2;

        specialinvoke r21.<safetyChecker.NewSort: void <init>(com.microsoft.z3.Sort,com.microsoft.z3.InterpolationContext)>(r22, $r11);

        r5 = r21;

        $r12 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: java.util.Map sortId>;

        interfaceinvoke $r12.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, r5);

        $r13 = virtualinvoke r5.<safetyChecker.NewSort: com.microsoft.z3.Expr getNewObject()>();

        return $r13;
    }

    private java.lang.String getArrayName(soot.Value)
    {
        safetyChecker.z3ScriptManager.Z3ScriptHandler r0;
        soot.Value r1;
        soot.Type r2;
        soot.jimple.InstanceFieldRef r3;
        soot.SootField r4;
        boolean $z0, $z1;
        java.lang.RuntimeException $r5;
        java.lang.String $r6, $r7;

        r0 := @this: safetyChecker.z3ScriptManager.Z3ScriptHandler;

        r1 := @parameter0: soot.Value;

        r2 = interfaceinvoke r1.<soot.Value: soot.Type getType()>();

        $z0 = r1 instanceof soot.Local;

        if $z0 == 0 goto label1;

        $r7 = virtualinvoke r2.<soot.Type: java.lang.String toString()>();

        return $r7;

     label1:
        $z1 = r1 instanceof soot.jimple.InstanceFieldRef;

        if $z1 == 0 goto label2;

        r3 = (soot.jimple.InstanceFieldRef) r1;

        r4 = interfaceinvoke r3.<soot.jimple.InstanceFieldRef: soot.SootField getField()>();

        $r6 = virtualinvoke r4.<soot.SootField: java.lang.String toString()>();

        return $r6;

     label2:
        $r5 = new java.lang.RuntimeException;

        specialinvoke $r5.<java.lang.RuntimeException: void <init>()>();

        throw $r5;
    }

    private java.lang.String getNameSuffix(safetyChecker.Edge)
    {
        safetyChecker.z3ScriptManager.Z3ScriptHandler r0;
        safetyChecker.Edge r1;
        java.lang.StringBuilder $r2, $r5, $r6, $r8;
        safetyChecker.ProgramTree $r3;
        java.lang.String $r4, $r9;
        safetyChecker.Vertex $r7;
        int $i0;

        r0 := @this: safetyChecker.z3ScriptManager.Z3ScriptHandler;

        r1 := @parameter0: safetyChecker.Edge;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>("_");

        $r3 = virtualinvoke r1.<safetyChecker.Edge: safetyChecker.ProgramTree getProgramTree()>();

        $r4 = virtualinvoke $r3.<safetyChecker.ProgramTree: java.lang.String getProgramDefinition()>();

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_");

        $r7 = virtualinvoke r1.<safetyChecker.Edge: safetyChecker.Vertex getSource()>();

        $i0 = virtualinvoke $r7.<safetyChecker.Vertex: int getDistance()>();

        $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;
    }

    protected java.lang.String getNameSuffix()
    {
        safetyChecker.z3ScriptManager.Z3ScriptHandler r0;
        java.lang.StringBuilder $r1, $r5, $r6, $r9;
        safetyChecker.Edge $r2, $r7;
        safetyChecker.ProgramTree $r3;
        java.lang.String $r4, $r10;
        safetyChecker.Vertex $r8;
        int $i0;

        r0 := @this: safetyChecker.z3ScriptManager.Z3ScriptHandler;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>("_");

        $r2 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: safetyChecker.Edge currentEdge>;

        $r3 = virtualinvoke $r2.<safetyChecker.Edge: safetyChecker.ProgramTree getProgramTree()>();

        $r4 = virtualinvoke $r3.<safetyChecker.ProgramTree: java.lang.String getProgramDefinition()>();

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_");

        $r7 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: safetyChecker.Edge currentEdge>;

        $r8 = virtualinvoke $r7.<safetyChecker.Edge: safetyChecker.Vertex getSource()>();

        $i0 = virtualinvoke $r8.<safetyChecker.Vertex: int getDistance()>();

        $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r10;
    }

    protected java.lang.String getArrayNameSuffix()
    {
        safetyChecker.z3ScriptManager.Z3ScriptHandler r0;
        java.lang.StringBuilder $r1, $r5;
        safetyChecker.Edge $r2;
        safetyChecker.ProgramTree $r3;
        java.lang.String $r4, $r6;

        r0 := @this: safetyChecker.z3ScriptManager.Z3ScriptHandler;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>("_");

        $r2 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: safetyChecker.Edge currentEdge>;

        $r3 = virtualinvoke $r2.<safetyChecker.Edge: safetyChecker.ProgramTree getProgramTree()>();

        $r4 = virtualinvoke $r3.<safetyChecker.ProgramTree: java.lang.String getProgramDefinition()>();

        $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    protected java.lang.String getArraySortSuffix()
    {
        safetyChecker.z3ScriptManager.Z3ScriptHandler r0;

        r0 := @this: safetyChecker.z3ScriptManager.Z3ScriptHandler;

        return "_arraySort";
    }

    protected int getRealArraySize(java.lang.String)
    {
        safetyChecker.z3ScriptManager.Z3ScriptHandler r0;
        java.lang.String r1;
        java.util.Map $r2, $r3, $r6, $r9;
        boolean $z0;
        java.lang.Integer $r4, $r8, $r10;
        java.lang.Object $r7;
        int i0, i1;
        byte b2;

        r0 := @this: safetyChecker.z3ScriptManager.Z3ScriptHandler;

        r1 := @parameter0: java.lang.String;

        $r2 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: java.util.Map realArraySize>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 == 0 goto label1;

        $r6 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: java.util.Map realArraySize>;

        $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r8 = (java.lang.Integer) $r7;

        i0 = virtualinvoke $r8.<java.lang.Integer: int intValue()>();

        $r9 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: java.util.Map realArraySize>;

        i1 = i0 + 1;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r10);

        return i1;

     label1:
        b2 = 1;

        $r3 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: java.util.Map realArraySize>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(b2);

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r4);

        return b2;
    }

    private com.microsoft.z3.Expr convertBoolExpr(soot.jimple.BinopExpr, safetyChecker.Edge, int)
    {
        safetyChecker.z3ScriptManager.Z3ScriptHandler r0;
        soot.jimple.BinopExpr r1;
        safetyChecker.Edge r2;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13, $i14, $i15, $i16;
        com.microsoft.z3.BoolExpr r3, $r28, $r34, $r40, $r46, $r51, $r55;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;
        java.lang.Object[] $r4, $r12;
        java.lang.StringBuilder $r5, $r6, $r7, $r10, $r13, $r14;
        java.lang.Class $r8;
        java.lang.String $r9, $r11, $r15;
        safetyChecker.Vertex $r16, $r17, $r23, $r24, $r29, $r30, $r35, $r36, $r41, $r42, $r47, $r48, $r52, $r53, $r70, $r71;
        com.microsoft.z3.ArithExpr[] $r18, $r60, $r65, $r72;
        com.microsoft.z3.ArithExpr $r19, $r20, $r22, $r25, $r26, $r31, $r32, $r37, $r38, $r43, $r44, $r56, $r57, $r59, $r61, $r62, $r64, $r66, $r67, $r69, $r73, $r74, $r76;
        com.microsoft.z3.InterpolationContext $r21, $r27, $r33, $r39, $r45, $r49, $r50, $r54, $r58, $r63, $r68, $r75;
        soot.jimple.AddExpr r77;
        soot.Value r78, r79, r83, r84, r88, r89, r93, r94, r98, r99, r103, r104, r108, r109, r113, r114, r118, r119, r123, r124, r128, r129;
        com.microsoft.z3.Expr r80, r81, r85, r86, r90, r91, r95, r96, r100, r101, r105, r106, r110, r111, r115, r116, r120, r121, r125, r126, r130, r131;
        soot.jimple.SubExpr r82;
        soot.jimple.MulExpr r87;
        soot.jimple.DivExpr r92;
        soot.jimple.EqExpr r97;
        soot.jimple.NeExpr r102;
        soot.jimple.GtExpr r107;
        soot.jimple.GeExpr r112;
        soot.jimple.LtExpr r117;
        soot.jimple.LeExpr r122;
        soot.jimple.CmpExpr r127;

        r0 := @this: safetyChecker.z3ScriptManager.Z3ScriptHandler;

        r1 := @parameter0: soot.jimple.BinopExpr;

        r2 := @parameter1: safetyChecker.Edge;

        i0 := @parameter2: int;

        $z0 = r1 instanceof soot.jimple.AddExpr;

        if $z0 == 0 goto label01;

        r77 = (soot.jimple.AddExpr) r1;

        r78 = interfaceinvoke r77.<soot.jimple.AddExpr: soot.Value getOp1()>();

        r79 = interfaceinvoke r77.<soot.jimple.AddExpr: soot.Value getOp2()>();

        $r70 = virtualinvoke r2.<safetyChecker.Edge: safetyChecker.Vertex getSource()>();

        $i15 = virtualinvoke $r70.<safetyChecker.Vertex: int getDistance()>();

        r80 = virtualinvoke r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.Expr convertValue(soot.Value,boolean,safetyChecker.Edge,int)>(r78, 0, r2, $i15);

        $r71 = virtualinvoke r2.<safetyChecker.Edge: safetyChecker.Vertex getSource()>();

        $i16 = virtualinvoke $r71.<safetyChecker.Vertex: int getDistance()>();

        r81 = virtualinvoke r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.Expr convertValue(soot.Value,boolean,safetyChecker.Edge,int)>(r79, 0, r2, $i16);

        $r75 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        $r72 = newarray (com.microsoft.z3.ArithExpr)[2];

        $r73 = (com.microsoft.z3.ArithExpr) r80;

        $r72[0] = $r73;

        $r74 = (com.microsoft.z3.ArithExpr) r81;

        $r72[1] = $r74;

        $r76 = virtualinvoke $r75.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.ArithExpr mkAdd(com.microsoft.z3.ArithExpr[])>($r72);

        return $r76;

     label01:
        $z1 = r1 instanceof soot.jimple.SubExpr;

        if $z1 == 0 goto label02;

        r82 = (soot.jimple.SubExpr) r1;

        r83 = interfaceinvoke r82.<soot.jimple.SubExpr: soot.Value getOp1()>();

        r84 = interfaceinvoke r82.<soot.jimple.SubExpr: soot.Value getOp2()>();

        r85 = virtualinvoke r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.Expr convertValue(soot.Value,boolean,safetyChecker.Edge,int)>(r83, 0, r2, i0);

        r86 = virtualinvoke r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.Expr convertValue(soot.Value,boolean,safetyChecker.Edge,int)>(r84, 0, r2, i0);

        $r68 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        $r65 = newarray (com.microsoft.z3.ArithExpr)[2];

        $r66 = (com.microsoft.z3.ArithExpr) r85;

        $r65[0] = $r66;

        $r67 = (com.microsoft.z3.ArithExpr) r86;

        $r65[1] = $r67;

        $r69 = virtualinvoke $r68.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.ArithExpr mkSub(com.microsoft.z3.ArithExpr[])>($r65);

        return $r69;

     label02:
        $z2 = r1 instanceof soot.jimple.MulExpr;

        if $z2 == 0 goto label03;

        r87 = (soot.jimple.MulExpr) r1;

        r88 = interfaceinvoke r87.<soot.jimple.MulExpr: soot.Value getOp1()>();

        r89 = interfaceinvoke r87.<soot.jimple.MulExpr: soot.Value getOp2()>();

        r90 = virtualinvoke r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.Expr convertValue(soot.Value,boolean,safetyChecker.Edge,int)>(r88, 0, r2, i0);

        r91 = virtualinvoke r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.Expr convertValue(soot.Value,boolean,safetyChecker.Edge,int)>(r89, 0, r2, i0);

        $r63 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        $r60 = newarray (com.microsoft.z3.ArithExpr)[2];

        $r61 = (com.microsoft.z3.ArithExpr) r90;

        $r60[0] = $r61;

        $r62 = (com.microsoft.z3.ArithExpr) r91;

        $r60[1] = $r62;

        $r64 = virtualinvoke $r63.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.ArithExpr mkMul(com.microsoft.z3.ArithExpr[])>($r60);

        return $r64;

     label03:
        $z3 = r1 instanceof soot.jimple.DivExpr;

        if $z3 == 0 goto label04;

        r92 = (soot.jimple.DivExpr) r1;

        r93 = interfaceinvoke r92.<soot.jimple.DivExpr: soot.Value getOp1()>();

        r94 = interfaceinvoke r92.<soot.jimple.DivExpr: soot.Value getOp2()>();

        r95 = virtualinvoke r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.Expr convertValue(soot.Value,boolean,safetyChecker.Edge,int)>(r93, 0, r2, i0);

        r96 = virtualinvoke r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.Expr convertValue(soot.Value,boolean,safetyChecker.Edge,int)>(r94, 0, r2, i0);

        $r58 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        $r57 = (com.microsoft.z3.ArithExpr) r95;

        $r56 = (com.microsoft.z3.ArithExpr) r96;

        $r59 = virtualinvoke $r58.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.ArithExpr mkDiv(com.microsoft.z3.ArithExpr,com.microsoft.z3.ArithExpr)>($r57, $r56);

        return $r59;

     label04:
        $z4 = r1 instanceof soot.jimple.EqExpr;

        if $z4 == 0 goto label05;

        r97 = (soot.jimple.EqExpr) r1;

        r98 = interfaceinvoke r97.<soot.jimple.EqExpr: soot.Value getOp1()>();

        r99 = interfaceinvoke r97.<soot.jimple.EqExpr: soot.Value getOp2()>();

        $r52 = virtualinvoke r2.<safetyChecker.Edge: safetyChecker.Vertex getSource()>();

        $i13 = virtualinvoke $r52.<safetyChecker.Vertex: int getDistance()>();

        r100 = virtualinvoke r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.Expr convertValue(soot.Value,boolean,safetyChecker.Edge,int)>(r98, 0, r2, $i13);

        $r53 = virtualinvoke r2.<safetyChecker.Edge: safetyChecker.Vertex getSource()>();

        $i14 = virtualinvoke $r53.<safetyChecker.Vertex: int getDistance()>();

        r101 = virtualinvoke r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.Expr convertValue(soot.Value,boolean,safetyChecker.Edge,int)>(r99, 0, r2, $i14);

        $r54 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        $r55 = virtualinvoke $r54.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.BoolExpr mkEq(com.microsoft.z3.Expr,com.microsoft.z3.Expr)>(r100, r101);

        return $r55;

     label05:
        $z5 = r1 instanceof soot.jimple.NeExpr;

        if $z5 == 0 goto label06;

        r102 = (soot.jimple.NeExpr) r1;

        r103 = interfaceinvoke r102.<soot.jimple.NeExpr: soot.Value getOp1()>();

        r104 = interfaceinvoke r102.<soot.jimple.NeExpr: soot.Value getOp2()>();

        $r47 = virtualinvoke r2.<safetyChecker.Edge: safetyChecker.Vertex getSource()>();

        $i11 = virtualinvoke $r47.<safetyChecker.Vertex: int getDistance()>();

        r105 = virtualinvoke r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.Expr convertValue(soot.Value,boolean,safetyChecker.Edge,int)>(r103, 0, r2, $i11);

        $r48 = virtualinvoke r2.<safetyChecker.Edge: safetyChecker.Vertex getSource()>();

        $i12 = virtualinvoke $r48.<safetyChecker.Vertex: int getDistance()>();

        r106 = virtualinvoke r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.Expr convertValue(soot.Value,boolean,safetyChecker.Edge,int)>(r104, 0, r2, $i12);

        $r49 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        r3 = virtualinvoke $r49.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.BoolExpr mkEq(com.microsoft.z3.Expr,com.microsoft.z3.Expr)>(r105, r106);

        $r50 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        $r51 = virtualinvoke $r50.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.BoolExpr mkNot(com.microsoft.z3.BoolExpr)>(r3);

        return $r51;

     label06:
        $z6 = r1 instanceof soot.jimple.GtExpr;

        if $z6 == 0 goto label07;

        r107 = (soot.jimple.GtExpr) r1;

        r108 = interfaceinvoke r107.<soot.jimple.GtExpr: soot.Value getOp1()>();

        r109 = interfaceinvoke r107.<soot.jimple.GtExpr: soot.Value getOp2()>();

        $r41 = virtualinvoke r2.<safetyChecker.Edge: safetyChecker.Vertex getSource()>();

        $i9 = virtualinvoke $r41.<safetyChecker.Vertex: int getDistance()>();

        r110 = virtualinvoke r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.Expr convertValue(soot.Value,boolean,safetyChecker.Edge,int)>(r108, 0, r2, $i9);

        $r42 = virtualinvoke r2.<safetyChecker.Edge: safetyChecker.Vertex getSource()>();

        $i10 = virtualinvoke $r42.<safetyChecker.Vertex: int getDistance()>();

        r111 = virtualinvoke r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.Expr convertValue(soot.Value,boolean,safetyChecker.Edge,int)>(r109, 0, r2, $i10);

        $r45 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        $r44 = (com.microsoft.z3.ArithExpr) r110;

        $r43 = (com.microsoft.z3.ArithExpr) r111;

        $r46 = virtualinvoke $r45.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.BoolExpr mkGt(com.microsoft.z3.ArithExpr,com.microsoft.z3.ArithExpr)>($r44, $r43);

        return $r46;

     label07:
        $z7 = r1 instanceof soot.jimple.GeExpr;

        if $z7 == 0 goto label08;

        r112 = (soot.jimple.GeExpr) r1;

        r113 = interfaceinvoke r112.<soot.jimple.GeExpr: soot.Value getOp1()>();

        r114 = interfaceinvoke r112.<soot.jimple.GeExpr: soot.Value getOp2()>();

        $r35 = virtualinvoke r2.<safetyChecker.Edge: safetyChecker.Vertex getSource()>();

        $i7 = virtualinvoke $r35.<safetyChecker.Vertex: int getDistance()>();

        r115 = virtualinvoke r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.Expr convertValue(soot.Value,boolean,safetyChecker.Edge,int)>(r113, 0, r2, $i7);

        $r36 = virtualinvoke r2.<safetyChecker.Edge: safetyChecker.Vertex getSource()>();

        $i8 = virtualinvoke $r36.<safetyChecker.Vertex: int getDistance()>();

        r116 = virtualinvoke r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.Expr convertValue(soot.Value,boolean,safetyChecker.Edge,int)>(r114, 0, r2, $i8);

        $r39 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        $r38 = (com.microsoft.z3.ArithExpr) r115;

        $r37 = (com.microsoft.z3.ArithExpr) r116;

        $r40 = virtualinvoke $r39.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.BoolExpr mkGe(com.microsoft.z3.ArithExpr,com.microsoft.z3.ArithExpr)>($r38, $r37);

        return $r40;

     label08:
        $z8 = r1 instanceof soot.jimple.LtExpr;

        if $z8 == 0 goto label09;

        r117 = (soot.jimple.LtExpr) r1;

        r118 = interfaceinvoke r117.<soot.jimple.LtExpr: soot.Value getOp1()>();

        r119 = interfaceinvoke r117.<soot.jimple.LtExpr: soot.Value getOp2()>();

        $r29 = virtualinvoke r2.<safetyChecker.Edge: safetyChecker.Vertex getSource()>();

        $i5 = virtualinvoke $r29.<safetyChecker.Vertex: int getDistance()>();

        r120 = virtualinvoke r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.Expr convertValue(soot.Value,boolean,safetyChecker.Edge,int)>(r118, 0, r2, $i5);

        $r30 = virtualinvoke r2.<safetyChecker.Edge: safetyChecker.Vertex getSource()>();

        $i6 = virtualinvoke $r30.<safetyChecker.Vertex: int getDistance()>();

        r121 = virtualinvoke r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.Expr convertValue(soot.Value,boolean,safetyChecker.Edge,int)>(r119, 0, r2, $i6);

        $r33 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        $r32 = (com.microsoft.z3.ArithExpr) r120;

        $r31 = (com.microsoft.z3.ArithExpr) r121;

        $r34 = virtualinvoke $r33.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.BoolExpr mkLt(com.microsoft.z3.ArithExpr,com.microsoft.z3.ArithExpr)>($r32, $r31);

        return $r34;

     label09:
        $z9 = r1 instanceof soot.jimple.LeExpr;

        if $z9 == 0 goto label10;

        r122 = (soot.jimple.LeExpr) r1;

        r123 = interfaceinvoke r122.<soot.jimple.LeExpr: soot.Value getOp1()>();

        r124 = interfaceinvoke r122.<soot.jimple.LeExpr: soot.Value getOp2()>();

        $r23 = virtualinvoke r2.<safetyChecker.Edge: safetyChecker.Vertex getSource()>();

        $i3 = virtualinvoke $r23.<safetyChecker.Vertex: int getDistance()>();

        r125 = virtualinvoke r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.Expr convertValue(soot.Value,boolean,safetyChecker.Edge,int)>(r123, 0, r2, $i3);

        $r24 = virtualinvoke r2.<safetyChecker.Edge: safetyChecker.Vertex getSource()>();

        $i4 = virtualinvoke $r24.<safetyChecker.Vertex: int getDistance()>();

        r126 = virtualinvoke r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.Expr convertValue(soot.Value,boolean,safetyChecker.Edge,int)>(r124, 0, r2, $i4);

        $r27 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        $r26 = (com.microsoft.z3.ArithExpr) r125;

        $r25 = (com.microsoft.z3.ArithExpr) r126;

        $r28 = virtualinvoke $r27.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.BoolExpr mkLe(com.microsoft.z3.ArithExpr,com.microsoft.z3.ArithExpr)>($r26, $r25);

        return $r28;

     label10:
        $z10 = r1 instanceof soot.jimple.CmpExpr;

        if $z10 == 0 goto label11;

        r127 = (soot.jimple.CmpExpr) r1;

        r128 = interfaceinvoke r127.<soot.jimple.CmpExpr: soot.Value getOp1()>();

        r129 = interfaceinvoke r127.<soot.jimple.CmpExpr: soot.Value getOp2()>();

        $r16 = virtualinvoke r2.<safetyChecker.Edge: safetyChecker.Vertex getSource()>();

        $i1 = virtualinvoke $r16.<safetyChecker.Vertex: int getDistance()>();

        r130 = virtualinvoke r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.Expr convertValue(soot.Value,boolean,safetyChecker.Edge,int)>(r128, 0, r2, $i1);

        $r17 = virtualinvoke r2.<safetyChecker.Edge: safetyChecker.Vertex getSource()>();

        $i2 = virtualinvoke $r17.<safetyChecker.Vertex: int getDistance()>();

        r131 = virtualinvoke r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.Expr convertValue(soot.Value,boolean,safetyChecker.Edge,int)>(r129, 0, r2, $i2);

        $r21 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        $r18 = newarray (com.microsoft.z3.ArithExpr)[2];

        $r19 = (com.microsoft.z3.ArithExpr) r130;

        $r18[0] = $r19;

        $r20 = (com.microsoft.z3.ArithExpr) r131;

        $r18[1] = $r20;

        $r22 = virtualinvoke $r21.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.ArithExpr mkSub(com.microsoft.z3.ArithExpr[])>($r18);

        return $r22;

     label11:
        $r4 = newarray (java.lang.Object)[1];

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("type  fo the ");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is ");

        $r8 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>();

        $r9 = virtualinvoke $r8.<java.lang.Class: java.lang.String getName()>();

        $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9);

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>();

        $r4[0] = $r11;

        staticinvoke <safetyChecker.utilities.LogUtils: void fatalln(java.lang.Object[])>($r4);

        $r12 = newarray (java.lang.Object)[1];

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<java.lang.StringBuilder: void <init>(java.lang.String)>("Z3ScriptHandler.convertBoolExpr returns null for ");

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        $r12[0] = $r15;

        staticinvoke <safetyChecker.utilities.LogUtils: void fatalln(java.lang.Object[])>($r12);

        return null;
    }

    public com.microsoft.z3.Expr z3ObjectField(soot.jimple.InstanceFieldRef, boolean, safetyChecker.Edge)
    {
        safetyChecker.z3ScriptManager.Z3ScriptHandler r0;
        soot.jimple.InstanceFieldRef r1;
        boolean z0, $z1;
        safetyChecker.Edge r2;
        soot.Value r3;
        soot.SootField r4;
        com.microsoft.z3.Expr r5, r7, r25;
        java.lang.String r6, r23;
        java.lang.Object[] $r8;
        safetyChecker.Vertex $r9;
        int $i0;
        java.util.Map $r10, $r11, $r20;
        java.lang.Object $r12;
        com.microsoft.z3.InterpolationContext $r13, $r14, $r15, $r17, $r19;
        com.microsoft.z3.IntSort $r16, $r18;
        com.microsoft.z3.ArraySort r22;
        com.microsoft.z3.ArrayExpr r24;

        r0 := @this: safetyChecker.z3ScriptManager.Z3ScriptHandler;

        r1 := @parameter0: soot.jimple.InstanceFieldRef;

        z0 := @parameter1: boolean;

        r2 := @parameter2: safetyChecker.Edge;

        $r8 = newarray (java.lang.Object)[1];

        $r8[0] = "z3ObjectField";

        staticinvoke <safetyChecker.utilities.LogUtils: void debugln(java.lang.Object[])>($r8);

        r3 = interfaceinvoke r1.<soot.jimple.InstanceFieldRef: soot.Value getBase()>();

        r4 = interfaceinvoke r1.<soot.jimple.InstanceFieldRef: soot.SootField getField()>();

        $r9 = virtualinvoke r2.<safetyChecker.Edge: safetyChecker.Vertex getSource()>();

        $i0 = virtualinvoke $r9.<safetyChecker.Vertex: int getDistance()>();

        r5 = virtualinvoke r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.Expr convertValue(soot.Value,boolean,safetyChecker.Edge,int)>(r3, 0, r2, $i0);

        r6 = virtualinvoke r4.<soot.SootField: java.lang.String toString()>();

        $r10 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: java.util.Map global>;

        $z1 = interfaceinvoke $r10.<java.util.Map: boolean containsKey(java.lang.Object)>(r6);

        if $z1 != 0 goto label1;

        $r15 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        $r14 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        $r16 = virtualinvoke $r14.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.IntSort getIntSort()>();

        $r17 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        $r18 = virtualinvoke $r17.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.IntSort getIntSort()>();

        r22 = virtualinvoke $r15.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.ArraySort mkArraySort(com.microsoft.z3.Sort,com.microsoft.z3.Sort)>($r16, $r18);

        r23 = virtualinvoke r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: java.lang.String getGlobalName(java.lang.String)>(r6);

        $r19 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        r7 = virtualinvoke $r19.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.Expr mkConst(java.lang.String,com.microsoft.z3.Sort)>(r23, r22);

        $r20 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: java.util.Map global>;

        interfaceinvoke $r20.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r6, r7);

     label1:
        if z0 == 0 goto label2;

        return r5;

     label2:
        $r11 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: java.util.Map global>;

        $r12 = interfaceinvoke $r11.<java.util.Map: java.lang.Object get(java.lang.Object)>(r6);

        r24 = (com.microsoft.z3.ArrayExpr) $r12;

        $r13 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        r25 = virtualinvoke $r13.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.Expr mkSelect(com.microsoft.z3.ArrayExpr,com.microsoft.z3.Expr)>(r24, r5);

        return r25;
    }

    public com.microsoft.z3.InterpolationContext getIctx()
    {
        safetyChecker.z3ScriptManager.Z3ScriptHandler r0;
        com.microsoft.z3.InterpolationContext $r1;

        r0 := @this: safetyChecker.z3ScriptManager.Z3ScriptHandler;

        $r1 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        return $r1;
    }

    public java.util.Map getGlobal()
    {
        safetyChecker.z3ScriptManager.Z3ScriptHandler r0;
        java.util.Map $r1;

        r0 := @this: safetyChecker.z3ScriptManager.Z3ScriptHandler;

        $r1 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: java.util.Map global>;

        return $r1;
    }

    public java.util.Map getSubstitute()
    {
        safetyChecker.z3ScriptManager.Z3ScriptHandler r0;
        java.util.Map $r1;

        r0 := @this: safetyChecker.z3ScriptManager.Z3ScriptHandler;

        $r1 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: java.util.Map substitute>;

        return $r1;
    }

    public java.util.Map getSubstituteSort()
    {
        safetyChecker.z3ScriptManager.Z3ScriptHandler r0;
        java.util.Map $r1;

        r0 := @this: safetyChecker.z3ScriptManager.Z3ScriptHandler;

        $r1 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: java.util.Map substituteSort>;

        return $r1;
    }

    public java.util.Map getArrayNameMap()
    {
        safetyChecker.z3ScriptManager.Z3ScriptHandler r0;
        java.util.Map $r1;

        r0 := @this: safetyChecker.z3ScriptManager.Z3ScriptHandler;

        $r1 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: java.util.Map arrayNameMap>;

        return $r1;
    }

    public java.util.Map getLocalMap()
    {
        safetyChecker.z3ScriptManager.Z3ScriptHandler r0;
        java.util.Map $r1;

        r0 := @this: safetyChecker.z3ScriptManager.Z3ScriptHandler;

        $r1 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: java.util.Map localMap>;

        return $r1;
    }

    public java.util.Map getSortId()
    {
        safetyChecker.z3ScriptManager.Z3ScriptHandler r0;
        java.util.Map $r1;

        r0 := @this: safetyChecker.z3ScriptManager.Z3ScriptHandler;

        $r1 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: java.util.Map sortId>;

        return $r1;
    }

    public java.util.Map getNewSortMap()
    {
        safetyChecker.z3ScriptManager.Z3ScriptHandler r0;
        java.util.Map $r1;

        r0 := @this: safetyChecker.z3ScriptManager.Z3ScriptHandler;

        $r1 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: java.util.Map newSortMap>;

        return $r1;
    }

    public java.util.Map getMaxArraySize()
    {
        safetyChecker.z3ScriptManager.Z3ScriptHandler r0;
        java.util.Map $r1;

        r0 := @this: safetyChecker.z3ScriptManager.Z3ScriptHandler;

        $r1 = r0.<safetyChecker.z3ScriptManager.Z3ScriptHandler: java.util.Map maxArraySize>;

        return $r1;
    }
}
