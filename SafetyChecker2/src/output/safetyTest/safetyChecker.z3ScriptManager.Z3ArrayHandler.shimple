public class safetyChecker.z3ScriptManager.Z3ArrayHandler extends java.lang.Object
{
    private int argSrcIndex;
    private int argSrcStartIndex;
    private int argDtcIndex;
    private int argDtcStartIndex;
    private int argLengthIndex;
    private int argArray1;
    private int argArray2;

    public void <init>()
    {
        safetyChecker.z3ScriptManager.Z3ArrayHandler r0;

        r0 := @this: safetyChecker.z3ScriptManager.Z3ArrayHandler;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<safetyChecker.z3ScriptManager.Z3ArrayHandler: int argSrcIndex> = 0;

        r0.<safetyChecker.z3ScriptManager.Z3ArrayHandler: int argSrcStartIndex> = 1;

        r0.<safetyChecker.z3ScriptManager.Z3ArrayHandler: int argDtcIndex> = 2;

        r0.<safetyChecker.z3ScriptManager.Z3ArrayHandler: int argDtcStartIndex> = 3;

        r0.<safetyChecker.z3ScriptManager.Z3ArrayHandler: int argLengthIndex> = 4;

        r0.<safetyChecker.z3ScriptManager.Z3ArrayHandler: int argArray1> = 0;

        r0.<safetyChecker.z3ScriptManager.Z3ArrayHandler: int argArray2> = 1;

        return;
    }

    public com.microsoft.z3.Expr z3Local(soot.Local, boolean, int, safetyChecker.z3ScriptManager.Z3ScriptHandler, safetyChecker.Edge)
    {
        safetyChecker.z3ScriptManager.Z3ArrayHandler r0;
        soot.Local r1;
        boolean z0, $z1, $z2, $z3;
        int i0;
        safetyChecker.z3ScriptManager.Z3ScriptHandler r2;
        safetyChecker.Edge r3;
        com.microsoft.z3.InterpolationContext r4;
        soot.Type r5;
        java.lang.String r6, r7, r8, $r16, $r17, $r25, $r26, $r27, $r34, $r35, $r36, $r47, r58, r63;
        com.microsoft.z3.Expr r9, r10, r56, r59;
        java.util.Map $r11, $r14, $r19, $r20, $r22, $r29, $r38, $r41, $r45, $r49, $r51, $r52;
        com.microsoft.z3.IntSort $r12, $r13, $r43, $r44;
        java.lang.StringBuilder $r18, $r28, $r37, r64, r66, r67;
        java.lang.Object $r21, $r23, $r30, $r39, $r42, $r48, $r53, r54, r54_1, r54_2;
        com.microsoft.z3.Sort $r31, $r40, r68;
        com.microsoft.z3.IntExpr $r32;
        safetyChecker.ProgramTree $r46;
        com.microsoft.z3.ArraySort r55;
        safetyChecker.NewSort r57, r60, r62, r65;
        com.microsoft.z3.ArrayExpr r61;

        r0 := @this: safetyChecker.z3ScriptManager.Z3ArrayHandler;

        r1 := @parameter0: soot.Local;

        z0 := @parameter1: boolean;

        i0 := @parameter2: int;

        r2 := @parameter3: safetyChecker.z3ScriptManager.Z3ScriptHandler;

        r3 := @parameter4: safetyChecker.Edge;

        r4 = virtualinvoke r2.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.InterpolationContext getIctx()>();

        r5 = interfaceinvoke r1.<soot.Local: soot.Type getType()>();

        r6 = virtualinvoke r5.<soot.Type: java.lang.String toString()>();

        $r11 = virtualinvoke r2.<safetyChecker.z3ScriptManager.Z3ScriptHandler: java.util.Map getNewSortMap()>();

        $z1 = interfaceinvoke $r11.<java.util.Map: boolean containsKey(java.lang.Object)>(r6);

        if $z1 == 0 goto label1;

        $r52 = virtualinvoke r2.<safetyChecker.z3ScriptManager.Z3ScriptHandler: java.util.Map getNewSortMap()>();

        $r53 = interfaceinvoke $r52.<java.util.Map: java.lang.Object get(java.lang.Object)>(r6);

        r54 = (com.microsoft.z3.Sort) $r53;

(0)     goto label2;

     label1:
        $r12 = virtualinvoke r4.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.IntSort getIntSort()>();

        $r13 = virtualinvoke r4.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.IntSort getIntSort()>();

        r54_1 = virtualinvoke r4.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.ArraySort mkArraySort(com.microsoft.z3.Sort,com.microsoft.z3.Sort)>($r12, $r13);

        $r14 = virtualinvoke r2.<safetyChecker.z3ScriptManager.Z3ScriptHandler: java.util.Map getNewSortMap()>();

(1)     interfaceinvoke $r14.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r6, r54_1);

     label2:
        r54_2 = Phi(r54 #0, r54_1 #1);

        r64 = new java.lang.StringBuilder;

        $r16 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r6);

        specialinvoke r64.<java.lang.StringBuilder: void <init>(java.lang.String)>($r16);

        $r17 = virtualinvoke r2.<safetyChecker.z3ScriptManager.Z3ScriptHandler: java.lang.String getArraySortSuffix()>();

        $r18 = virtualinvoke r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17);

        r7 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        r8 = r6;

        $r19 = virtualinvoke r2.<safetyChecker.z3ScriptManager.Z3ScriptHandler: java.util.Map getLocalMap()>();

        $z2 = interfaceinvoke $r19.<java.util.Map: boolean containsKey(java.lang.Object)>(r8);

        if $z2 != 0 goto label3;

        $r43 = virtualinvoke r4.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.IntSort getIntSort()>();

        $r44 = virtualinvoke r4.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.IntSort getIntSort()>();

        r55 = virtualinvoke r4.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.ArraySort mkArraySort(com.microsoft.z3.Sort,com.microsoft.z3.Sort)>($r43, $r44);

        r56 = virtualinvoke r4.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.Expr mkConst(java.lang.String,com.microsoft.z3.Sort)>(r8, r55);

        $r45 = virtualinvoke r2.<safetyChecker.z3ScriptManager.Z3ScriptHandler: java.util.Map getLocalMap()>();

        $r46 = virtualinvoke r3.<safetyChecker.Edge: safetyChecker.ProgramTree getProgramTree()>();

        $r47 = virtualinvoke $r46.<safetyChecker.ProgramTree: java.lang.String getProgramDefinition()>();

        $r48 = interfaceinvoke $r45.<java.util.Map: java.lang.Object get(java.lang.Object)>($r47);

        $r49 = (java.util.Map) $r48;

        interfaceinvoke $r49.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r8, r56);

        r65 = new safetyChecker.NewSort;

        r68 = (com.microsoft.z3.Sort) r54_2;

        specialinvoke r65.<safetyChecker.NewSort: void <init>(com.microsoft.z3.Sort,com.microsoft.z3.InterpolationContext)>(r68, r4);

        r57 = r65;

        $r51 = virtualinvoke r2.<safetyChecker.z3ScriptManager.Z3ScriptHandler: java.util.Map getSortId()>();

        interfaceinvoke $r51.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r7, r57);

     label3:
        if z0 == 0 goto label5;

        r66 = new java.lang.StringBuilder;

        $r34 = interfaceinvoke r1.<soot.Local: java.lang.String getName()>();

        $r35 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r34);

        specialinvoke r66.<java.lang.StringBuilder: void <init>(java.lang.String)>($r35);

        $r36 = virtualinvoke r2.<safetyChecker.z3ScriptManager.Z3ScriptHandler: java.lang.String getArrayNameSuffix()>();

        $r37 = virtualinvoke r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r36);

        r58 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        $r38 = virtualinvoke r2.<safetyChecker.z3ScriptManager.Z3ScriptHandler: java.util.Map getNewSortMap()>();

        $r39 = interfaceinvoke $r38.<java.util.Map: java.lang.Object get(java.lang.Object)>(r6);

        $r40 = (com.microsoft.z3.Sort) $r39;

        r59 = virtualinvoke r4.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.Expr mkConst(java.lang.String,com.microsoft.z3.Sort)>(r58, $r40);

        $r41 = virtualinvoke r2.<safetyChecker.z3ScriptManager.Z3ScriptHandler: java.util.Map getSortId()>();

        $r42 = interfaceinvoke $r41.<java.util.Map: java.lang.Object get(java.lang.Object)>(r7);

        r60 = (safetyChecker.NewSort) $r42;

        $z3 = virtualinvoke r60.<safetyChecker.NewSort: boolean ifHasExpr(com.microsoft.z3.Expr)>(r59);

        if $z3 != 0 goto label4;

        virtualinvoke r60.<safetyChecker.NewSort: void creatNewOject(com.microsoft.z3.Expr)>(r59);

     label4:
        return r59;

     label5:
        $r20 = virtualinvoke r2.<safetyChecker.z3ScriptManager.Z3ScriptHandler: java.util.Map getLocalMap()>();

        $r21 = interfaceinvoke $r20.<java.util.Map: java.lang.Object get(java.lang.Object)>(r8);

        r61 = (com.microsoft.z3.ArrayExpr) $r21;

        $r22 = virtualinvoke r2.<safetyChecker.z3ScriptManager.Z3ScriptHandler: java.util.Map getSortId()>();

        $r23 = interfaceinvoke $r22.<java.util.Map: java.lang.Object get(java.lang.Object)>(r7);

        r62 = (safetyChecker.NewSort) $r23;

        r67 = new java.lang.StringBuilder;

        $r25 = interfaceinvoke r1.<soot.Local: java.lang.String getName()>();

        $r26 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r25);

        specialinvoke r67.<java.lang.StringBuilder: void <init>(java.lang.String)>($r26);

        $r27 = virtualinvoke r2.<safetyChecker.z3ScriptManager.Z3ScriptHandler: java.lang.String getArrayNameSuffix()>();

        $r28 = virtualinvoke r67.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r27);

        r63 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>();

        $r29 = virtualinvoke r2.<safetyChecker.z3ScriptManager.Z3ScriptHandler: java.util.Map getNewSortMap()>();

        $r30 = interfaceinvoke $r29.<java.util.Map: java.lang.Object get(java.lang.Object)>(r6);

        $r31 = (com.microsoft.z3.Sort) $r30;

        r9 = virtualinvoke r4.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.Expr mkConst(java.lang.String,com.microsoft.z3.Sort)>(r63, $r31);

        $r32 = virtualinvoke r62.<safetyChecker.NewSort: com.microsoft.z3.IntExpr getId(com.microsoft.z3.Expr)>(r9);

        r10 = virtualinvoke r4.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.Expr mkSelect(com.microsoft.z3.ArrayExpr,com.microsoft.z3.Expr)>(r61, $r32);

        return r10;
    }

    protected com.microsoft.z3.Expr convertNewArrayExpr(soot.jimple.NewArrayExpr, safetyChecker.Edge, safetyChecker.z3ScriptManager.Z3ScriptHandler)
    {
        safetyChecker.z3ScriptManager.Z3ArrayHandler r0;
        soot.jimple.NewArrayExpr r1;
        safetyChecker.Edge r2;
        safetyChecker.z3ScriptManager.Z3ScriptHandler r3;
        soot.Type r4;
        java.lang.String r5;
        java.util.Map r6, r7;
        com.microsoft.z3.InterpolationContext r8;
        safetyChecker.NewSort r9, r15, r17;
        boolean $z0, $z1;
        com.microsoft.z3.Expr $r11, $r14;
        java.lang.Object $r12, $r13, r16, r16_1, r16_2;
        com.microsoft.z3.Sort r18;

        r0 := @this: safetyChecker.z3ScriptManager.Z3ArrayHandler;

        r1 := @parameter0: soot.jimple.NewArrayExpr;

        r2 := @parameter1: safetyChecker.Edge;

        r3 := @parameter2: safetyChecker.z3ScriptManager.Z3ScriptHandler;

        r4 = interfaceinvoke r1.<soot.jimple.NewArrayExpr: soot.Type getType()>();

        r5 = virtualinvoke r4.<soot.Type: java.lang.String toString()>();

        r6 = virtualinvoke r3.<safetyChecker.z3ScriptManager.Z3ScriptHandler: java.util.Map getSortId()>();

        r7 = virtualinvoke r3.<safetyChecker.z3ScriptManager.Z3ScriptHandler: java.util.Map getNewSortMap()>();

        r8 = virtualinvoke r3.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.InterpolationContext getIctx()>();

        $z0 = interfaceinvoke r6.<java.util.Map: boolean containsKey(java.lang.Object)>(r5);

        if $z0 == 0 goto label1;

        $r13 = interfaceinvoke r6.<java.util.Map: java.lang.Object get(java.lang.Object)>(r5);

        r15 = (safetyChecker.NewSort) $r13;

        $r14 = virtualinvoke r15.<safetyChecker.NewSort: com.microsoft.z3.Expr getNewObject()>();

        return $r14;

     label1:
        $z1 = interfaceinvoke r7.<java.util.Map: boolean containsKey(java.lang.Object)>(r5);

        if $z1 == 0 goto label2;

        $r12 = interfaceinvoke r7.<java.util.Map: java.lang.Object get(java.lang.Object)>(r5);

        r16 = (com.microsoft.z3.Sort) $r12;

(0)     goto label3;

     label2:
        r16_1 = virtualinvoke r8.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.UninterpretedSort mkUninterpretedSort(java.lang.String)>(r5);

(1)     interfaceinvoke r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r5, r16_1);

     label3:
        r16_2 = Phi(r16 #0, r16_1 #1);

        r17 = new safetyChecker.NewSort;

        r18 = (com.microsoft.z3.Sort) r16_2;

        specialinvoke r17.<safetyChecker.NewSort: void <init>(com.microsoft.z3.Sort,com.microsoft.z3.InterpolationContext)>(r18, r8);

        r9 = r17;

        interfaceinvoke r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r5, r9);

        $r11 = virtualinvoke r9.<safetyChecker.NewSort: com.microsoft.z3.Expr getNewObject()>();

        return $r11;
    }

    protected com.microsoft.z3.Expr convertNewMultiArrayExpr(soot.jimple.NewMultiArrayExpr, safetyChecker.Edge, safetyChecker.z3ScriptManager.Z3ScriptHandler)
    {
        safetyChecker.z3ScriptManager.Z3ArrayHandler r0;
        soot.jimple.NewMultiArrayExpr r1;
        safetyChecker.Edge r2;
        safetyChecker.z3ScriptManager.Z3ScriptHandler r3;
        soot.Type r4;
        java.lang.String r5;
        java.util.Map r6, r7;
        com.microsoft.z3.InterpolationContext r8;
        safetyChecker.NewSort r9, r15, r17;
        boolean $z0, $z1;
        com.microsoft.z3.Expr $r11, $r14;
        java.lang.Object $r12, $r13, r16, r16_1, r16_2;
        com.microsoft.z3.Sort r18;

        r0 := @this: safetyChecker.z3ScriptManager.Z3ArrayHandler;

        r1 := @parameter0: soot.jimple.NewMultiArrayExpr;

        r2 := @parameter1: safetyChecker.Edge;

        r3 := @parameter2: safetyChecker.z3ScriptManager.Z3ScriptHandler;

        r4 = interfaceinvoke r1.<soot.jimple.NewMultiArrayExpr: soot.Type getType()>();

        r5 = virtualinvoke r4.<soot.Type: java.lang.String toString()>();

        r6 = virtualinvoke r3.<safetyChecker.z3ScriptManager.Z3ScriptHandler: java.util.Map getSortId()>();

        r7 = virtualinvoke r3.<safetyChecker.z3ScriptManager.Z3ScriptHandler: java.util.Map getNewSortMap()>();

        r8 = virtualinvoke r3.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.InterpolationContext getIctx()>();

        $z0 = interfaceinvoke r6.<java.util.Map: boolean containsKey(java.lang.Object)>(r5);

        if $z0 == 0 goto label1;

        $r13 = interfaceinvoke r6.<java.util.Map: java.lang.Object get(java.lang.Object)>(r5);

        r15 = (safetyChecker.NewSort) $r13;

        $r14 = virtualinvoke r15.<safetyChecker.NewSort: com.microsoft.z3.Expr getNewObject()>();

        return $r14;

     label1:
        $z1 = interfaceinvoke r7.<java.util.Map: boolean containsKey(java.lang.Object)>(r5);

        if $z1 == 0 goto label2;

        $r12 = interfaceinvoke r7.<java.util.Map: java.lang.Object get(java.lang.Object)>(r5);

        r16 = (com.microsoft.z3.Sort) $r12;

(0)     goto label3;

     label2:
        r16_1 = virtualinvoke r8.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.UninterpretedSort mkUninterpretedSort(java.lang.String)>(r5);

(1)     interfaceinvoke r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r5, r16_1);

     label3:
        r16_2 = Phi(r16 #0, r16_1 #1);

        r17 = new safetyChecker.NewSort;

        r18 = (com.microsoft.z3.Sort) r16_2;

        specialinvoke r17.<safetyChecker.NewSort: void <init>(com.microsoft.z3.Sort,com.microsoft.z3.InterpolationContext)>(r18, r8);

        r9 = r17;

        interfaceinvoke r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r5, r9);

        $r11 = virtualinvoke r9.<safetyChecker.NewSort: com.microsoft.z3.Expr getNewObject()>();

        return $r11;
    }

    public com.microsoft.z3.BoolExpr newArrayExpr(com.microsoft.z3.Expr, soot.Type, safetyChecker.z3ScriptManager.Z3ScriptHandler)
    {
        safetyChecker.z3ScriptManager.Z3ArrayHandler r0;
        com.microsoft.z3.Expr r1, $r21, r40;
        soot.Type r2;
        safetyChecker.z3ScriptManager.Z3ScriptHandler r3;
        com.microsoft.z3.InterpolationContext r4;
        java.lang.String r5, r6, $r9, $r10, $r12, $r13, $r31, r39, r43;
        com.microsoft.z3.ArrayExpr r7, r41, r42, r44;
        com.microsoft.z3.BoolExpr r8;
        int $i0, $i1;
        java.lang.StringBuilder $r11, $r14, $r29, $r30;
        java.util.Map $r15, $r18, $r22, $r24, $r32, $r34;
        boolean $z0;
        com.microsoft.z3.IntSort $r16, $r26, $r27, r37;
        com.microsoft.z3.IntNum $r17;
        java.lang.Object $r19;
        com.microsoft.z3.Sort $r20;
        java.lang.Object[] $r28;
        com.microsoft.z3.ArraySort r36, r38;

        r0 := @this: safetyChecker.z3ScriptManager.Z3ArrayHandler;

        r1 := @parameter0: com.microsoft.z3.Expr;

        r2 := @parameter1: soot.Type;

        r3 := @parameter2: safetyChecker.z3ScriptManager.Z3ScriptHandler;

        r4 = virtualinvoke r3.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.InterpolationContext getIctx()>();

        $r9 = virtualinvoke r2.<soot.Type: java.lang.String toString()>();

        $r10 = virtualinvoke r2.<soot.Type: java.lang.String toString()>();

        $i0 = virtualinvoke $r10.<java.lang.String: int indexOf(java.lang.String)>("]");

        $i1 = $i0 + 1;

        r5 = virtualinvoke $r9.<java.lang.String: java.lang.String substring(int,int)>(0, $i1);

        $r11 = new java.lang.StringBuilder;

        $r12 = specialinvoke r0.<safetyChecker.z3ScriptManager.Z3ArrayHandler: java.lang.String getArrayPrefix()>();

        $r13 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r12);

        specialinvoke $r11.<java.lang.StringBuilder: void <init>(java.lang.String)>($r13);

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5);

        r6 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        $r15 = virtualinvoke r3.<safetyChecker.z3ScriptManager.Z3ScriptHandler: java.util.Map getGlobal()>();

        $z0 = interfaceinvoke $r15.<java.util.Map: boolean containsKey(java.lang.Object)>(r6);

        if $z0 != 0 goto label1;

        $r26 = virtualinvoke r4.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.IntSort getIntSort()>();

        $r27 = virtualinvoke r4.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.IntSort getIntSort()>();

        r36 = virtualinvoke r4.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.ArraySort mkArraySort(com.microsoft.z3.Sort,com.microsoft.z3.Sort)>($r26, $r27);

        r37 = virtualinvoke r4.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.IntSort getIntSort()>();

        r38 = virtualinvoke r4.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.ArraySort mkArraySort(com.microsoft.z3.Sort,com.microsoft.z3.Sort)>(r37, r36);

        r39 = virtualinvoke r3.<safetyChecker.z3ScriptManager.Z3ScriptHandler: java.lang.String getGlobalName(java.lang.String)>(r6);

        r40 = virtualinvoke r4.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.Expr mkConst(java.lang.String,com.microsoft.z3.Sort)>(r39, r38);

        $r28 = newarray (java.lang.Object)[1];

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<java.lang.StringBuilder: void <init>(java.lang.String)>("arrayCellConst=");

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r40);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        $r28[0] = $r31;

        staticinvoke <safetyChecker.utilities.LogUtils: void debugln(java.lang.Object[])>($r28);

        $r32 = virtualinvoke r3.<safetyChecker.z3ScriptManager.Z3ScriptHandler: java.util.Map getSubstitute()>();

        interfaceinvoke $r32.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r39, r6);

        $r34 = virtualinvoke r3.<safetyChecker.z3ScriptManager.Z3ScriptHandler: java.util.Map getGlobal()>();

        interfaceinvoke $r34.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r6, r40);

     label1:
        virtualinvoke r3.<safetyChecker.z3ScriptManager.Z3ScriptHandler: int getRealArraySize(java.lang.String)>(r6);

        $r16 = virtualinvoke r4.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.IntSort getIntSort()>();

        $r17 = virtualinvoke r4.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.IntNum mkInt(int)>(0);

        r41 = virtualinvoke r4.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.ArrayExpr mkConstArray(com.microsoft.z3.Sort,com.microsoft.z3.Expr)>($r16, $r17);

        $r18 = virtualinvoke r3.<safetyChecker.z3ScriptManager.Z3ScriptHandler: java.util.Map getGlobal()>();

        $r19 = interfaceinvoke $r18.<java.util.Map: java.lang.Object get(java.lang.Object)>(r6);

        r42 = (com.microsoft.z3.ArrayExpr) $r19;

        r43 = virtualinvoke r3.<safetyChecker.z3ScriptManager.Z3ScriptHandler: java.lang.String getGlobalName(java.lang.String)>(r6);

        $r20 = virtualinvoke r42.<com.microsoft.z3.ArrayExpr: com.microsoft.z3.Sort getSort()>();

        $r21 = virtualinvoke r4.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.Expr mkConst(java.lang.String,com.microsoft.z3.Sort)>(r43, $r20);

        r44 = (com.microsoft.z3.ArrayExpr) $r21;

        $r22 = virtualinvoke r3.<safetyChecker.z3ScriptManager.Z3ScriptHandler: java.util.Map getGlobal()>();

        interfaceinvoke $r22.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r6, r44);

        $r24 = virtualinvoke r3.<safetyChecker.z3ScriptManager.Z3ScriptHandler: java.util.Map getSubstitute()>();

        interfaceinvoke $r24.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r43, r6);

        r7 = virtualinvoke r4.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.ArrayExpr mkStore(com.microsoft.z3.ArrayExpr,com.microsoft.z3.Expr,com.microsoft.z3.Expr)>(r42, r1, r41);

        r8 = virtualinvoke r4.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.BoolExpr mkEq(com.microsoft.z3.Expr,com.microsoft.z3.Expr)>(r44, r7);

        return r8;
    }

    public com.microsoft.z3.BoolExpr newMultiArrayExpr(soot.jimple.NewMultiArrayExpr, soot.Type, safetyChecker.z3ScriptManager.Z3ScriptHandler, com.microsoft.z3.Expr)
    {
        safetyChecker.z3ScriptManager.Z3ArrayHandler r0;
        soot.jimple.NewMultiArrayExpr r1;
        soot.Type r2, r74, r79;
        safetyChecker.z3ScriptManager.Z3ScriptHandler r3;
        com.microsoft.z3.Expr r4, $r23, $r24, $r36, $r47, r83, r86;
        com.microsoft.z3.InterpolationContext r5;
        com.microsoft.z3.Expr[] r6;
        com.microsoft.z3.BoolExpr[] r7, $r50, r85;
        java.lang.String r8, r9, r10, $r27, $r28, $r43, $r66, r82, r88;
        com.microsoft.z3.ArrayExpr r11, r12, r84, r87;
        com.microsoft.z3.BoolExpr r13, r14, r15, r16, $r25, $r37, $r40;
        java.lang.Object[] $r17, $r20, $r38, $r58, $r61, $r67;
        soot.Value $r18, $r19, $r59, $r60, $r68, $r69;
        boolean $z0, $z1, $z2, $z3, $z4;
        soot.ArrayType $r21;
        java.lang.StringBuilder $r29, $r41, $r42, $r63, $r64, $r65, r89, r91, r92;
        java.util.Map $r30, $r44, $r48, $r49, $r54, $r55, r75, r76;
        com.microsoft.z3.IntSort $r31, $r32, $r33, $r51, $r52, $r53;
        com.microsoft.z3.IntNum $r34, $r35;
        java.lang.Object $r45, $r56, $r57, r78, r78_1, r78_2, r78_3;
        com.microsoft.z3.Sort $r46, r93;
        int i0, i1, i2, i3, i4, i0_1, i0_2, i3_1, i3_2, i4_1, i4_2;
        soot.jimple.IntConstant r70, r71;
        soot.Local r72, r73;
        safetyChecker.NewSort r77, r90, r77_1, r77_2;
        com.microsoft.z3.ArraySort r80, r81;

        r0 := @this: safetyChecker.z3ScriptManager.Z3ArrayHandler;

        r1 := @parameter0: soot.jimple.NewMultiArrayExpr;

        r2 := @parameter1: soot.Type;

        r3 := @parameter2: safetyChecker.z3ScriptManager.Z3ScriptHandler;

        r4 := @parameter3: com.microsoft.z3.Expr;

        $r17 = newarray (java.lang.Object)[1];

        $r17[0] = "1111";

        staticinvoke <safetyChecker.utilities.LogUtils: void fatalln(java.lang.Object[])>($r17);

        i0 = 0;

        r5 = virtualinvoke r3.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.InterpolationContext getIctx()>();

        $r18 = interfaceinvoke r1.<soot.jimple.NewMultiArrayExpr: soot.Value getSize(int)>(0);

        $z0 = $r18 instanceof soot.jimple.IntConstant;

        if $z0 == 0 goto label01;

        $r67 = newarray (java.lang.Object)[1];

        $r67[0] = "IntConstant";

        staticinvoke <safetyChecker.utilities.LogUtils: void warningln(java.lang.Object[])>($r67);

        $r68 = interfaceinvoke r1.<soot.jimple.NewMultiArrayExpr: soot.Value getSize(int)>(0);

        r70 = (soot.jimple.IntConstant) $r68;

        $r69 = interfaceinvoke r1.<soot.jimple.NewMultiArrayExpr: soot.Value getSize(int)>(1);

        r71 = (soot.jimple.IntConstant) $r69;

        i1 = r70.<soot.jimple.IntConstant: int value>;

        i2 = r71.<soot.jimple.IntConstant: int value>;

        i0_1 = i1 + 1;

(0)     goto label02;

     label01:
        $r19 = interfaceinvoke r1.<soot.jimple.NewMultiArrayExpr: soot.Value getSize(int)>(0);

        $z1 = $r19 instanceof soot.Local;

(1)     if $z1 == 0 goto label02;

        $r58 = newarray (java.lang.Object)[1];

        $r58[0] = "local mis";

        staticinvoke <safetyChecker.utilities.LogUtils: void warningln(java.lang.Object[])>($r58);

        $r59 = interfaceinvoke r1.<soot.jimple.NewMultiArrayExpr: soot.Value getSize(int)>(0);

        r72 = (soot.Local) $r59;

        $r60 = interfaceinvoke r1.<soot.jimple.NewMultiArrayExpr: soot.Value getSize(int)>(1);

        r73 = (soot.Local) $r60;

        $r61 = newarray (java.lang.Object)[1];

        r89 = new java.lang.StringBuilder;

        specialinvoke r89.<java.lang.StringBuilder: void <init>()>();

        $r63 = virtualinvoke r89.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r72);

        $r64 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("--");

        $r65 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r73);

        $r66 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.String toString()>();

        $r61[0] = $r66;

        staticinvoke <safetyChecker.utilities.LogUtils: void fatalln(java.lang.Object[])>($r61);

(2)     staticinvoke <java.lang.System: void exit(int)>(0);

     label02:
        i0_2 = Phi(i0_1 #0, i0 #1, i0 #2);

        $r20 = newarray (java.lang.Object)[1];

        $r20[0] = "1111";

        staticinvoke <safetyChecker.utilities.LogUtils: void fatalln(java.lang.Object[])>($r20);

        $r21 = interfaceinvoke r1.<soot.jimple.NewMultiArrayExpr: soot.ArrayType getBaseType()>();

        r74 = virtualinvoke $r21.<soot.ArrayType: soot.Type getElementType()>();

        r75 = virtualinvoke r3.<safetyChecker.z3ScriptManager.Z3ScriptHandler: java.util.Map getSortId()>();

        r76 = virtualinvoke r3.<safetyChecker.z3ScriptManager.Z3ScriptHandler: java.util.Map getNewSortMap()>();

        r6 = newarray (com.microsoft.z3.Expr)[i0_2];

        r7 = newarray (com.microsoft.z3.BoolExpr)[i0_2];

        r8 = virtualinvoke r74.<soot.Type: java.lang.String toString()>();

        $z2 = interfaceinvoke r75.<java.util.Map: boolean containsKey(java.lang.Object)>(r8);

        if $z2 == 0 goto label03;

        $r57 = interfaceinvoke r75.<java.util.Map: java.lang.Object get(java.lang.Object)>(r8);

        r77 = (safetyChecker.NewSort) $r57;

(3)     goto label06;

     label03:
        $z3 = interfaceinvoke r76.<java.util.Map: boolean containsKey(java.lang.Object)>(r8);

        if $z3 == 0 goto label04;

        $r56 = interfaceinvoke r76.<java.util.Map: java.lang.Object get(java.lang.Object)>(r8);

        r78 = (com.microsoft.z3.Sort) $r56;

(4)     goto label05;

     label04:
        r78_1 = virtualinvoke r5.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.UninterpretedSort mkUninterpretedSort(java.lang.String)>(r8);

(5)     interfaceinvoke r76.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r8, r78_1);

     label05:
        r78_2 = Phi(r78 #4, r78_1 #5);

        r90 = new safetyChecker.NewSort;

        r93 = (com.microsoft.z3.Sort) r78_2;

        specialinvoke r90.<safetyChecker.NewSort: void <init>(com.microsoft.z3.Sort,com.microsoft.z3.InterpolationContext)>(r93, r5);

        r77_1 = r90;

(6)     interfaceinvoke r75.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r8, r77_1);

     label06:
        r78_3 = Phi(r78 #3, r78_2 #6);

        r77_2 = Phi(r77 #3, r77_1 #6);

        i3 = 0;

(7)     goto label08;

     label07:
        $r23 = virtualinvoke r77_2.<safetyChecker.NewSort: com.microsoft.z3.Expr getNewObject()>();

        r6[i3_1] = $r23;

        $r24 = r6[i3_1];

        $r25 = virtualinvoke r0.<safetyChecker.z3ScriptManager.Z3ArrayHandler: com.microsoft.z3.BoolExpr newArrayExpr(com.microsoft.z3.Expr,soot.Type,safetyChecker.z3ScriptManager.Z3ScriptHandler)>($r24, r74, r3);

        r7[i3_1] = $r25;

(8)     i3_2 = i3_1 + 1;

     label08:
        i3_1 = Phi(i3 #7, i3_2 #8);

        if i3_1 < i0_2 goto label07;

        r79 = interfaceinvoke r1.<soot.jimple.NewMultiArrayExpr: soot.Type getType()>();

        r9 = virtualinvoke r79.<soot.Type: java.lang.String toString()>();

        r91 = new java.lang.StringBuilder;

        $r27 = specialinvoke r0.<safetyChecker.z3ScriptManager.Z3ArrayHandler: java.lang.String getArrayPrefix()>();

        $r28 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r27);

        specialinvoke r91.<java.lang.StringBuilder: void <init>(java.lang.String)>($r28);

        $r29 = virtualinvoke r91.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r9);

        r10 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        $r30 = virtualinvoke r3.<safetyChecker.z3ScriptManager.Z3ScriptHandler: java.util.Map getGlobal()>();

        $z4 = interfaceinvoke $r30.<java.util.Map: boolean containsKey(java.lang.Object)>(r10);

        if $z4 != 0 goto label09;

        $r51 = virtualinvoke r5.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.IntSort getIntSort()>();

        $r52 = virtualinvoke r5.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.IntSort getIntSort()>();

        r80 = virtualinvoke r5.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.ArraySort mkArraySort(com.microsoft.z3.Sort,com.microsoft.z3.Sort)>($r51, $r52);

        $r53 = virtualinvoke r5.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.IntSort getIntSort()>();

        r81 = virtualinvoke r5.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.ArraySort mkArraySort(com.microsoft.z3.Sort,com.microsoft.z3.Sort)>($r53, r80);

        r82 = virtualinvoke r3.<safetyChecker.z3ScriptManager.Z3ScriptHandler: java.lang.String getGlobalName(java.lang.String)>(r10);

        r83 = virtualinvoke r5.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.Expr mkConst(java.lang.String,com.microsoft.z3.Sort)>(r82, r81);

        $r54 = virtualinvoke r3.<safetyChecker.z3ScriptManager.Z3ScriptHandler: java.util.Map getSubstitute()>();

        interfaceinvoke $r54.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r82, r10);

        $r55 = virtualinvoke r3.<safetyChecker.z3ScriptManager.Z3ScriptHandler: java.util.Map getGlobal()>();

        interfaceinvoke $r55.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r10, r83);

     label09:
        $r31 = virtualinvoke r5.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.IntSort getIntSort()>();

        $r32 = virtualinvoke r5.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.IntSort getIntSort()>();

        virtualinvoke r5.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.ArraySort mkArraySort(com.microsoft.z3.Sort,com.microsoft.z3.Sort)>($r31, $r32);

        virtualinvoke r3.<safetyChecker.z3ScriptManager.Z3ScriptHandler: int getRealArraySize(java.lang.String)>(r10);

        $r33 = virtualinvoke r5.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.IntSort getIntSort()>();

        $r34 = virtualinvoke r5.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.IntNum mkInt(int)>(0);

        r84 = virtualinvoke r5.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.ArrayExpr mkConstArray(com.microsoft.z3.Sort,com.microsoft.z3.Expr)>($r33, $r34);

        r85 = newarray (com.microsoft.z3.BoolExpr)[i0_2];

        i4 = 0;

(9)     goto label11;

     label10:
        $r35 = virtualinvoke r5.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.IntNum mkInt(int)>(i4_1);

        r86 = virtualinvoke r5.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.Expr mkSelect(com.microsoft.z3.ArrayExpr,com.microsoft.z3.Expr)>(r84, $r35);

        $r36 = r6[i4_1];

        $r37 = virtualinvoke r5.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.BoolExpr mkEq(com.microsoft.z3.Expr,com.microsoft.z3.Expr)>(r86, $r36);

        r85[i4_1] = $r37;

        $r38 = newarray (java.lang.Object)[1];

        r92 = new java.lang.StringBuilder;

        specialinvoke r92.<java.lang.StringBuilder: void <init>()>();

        $r40 = r85[i4_1];

        $r41 = virtualinvoke r92.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r40);

        $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n-----------------");

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.String toString()>();

        $r38[0] = $r43;

        staticinvoke <safetyChecker.utilities.LogUtils: void warningln(java.lang.Object[])>($r38);

(10)    i4_2 = i4_1 + 1;

     label11:
        i4_1 = Phi(i4 #9, i4_2 #10);

        if i4_1 < i0_2 goto label10;

        staticinvoke <java.lang.System: void exit(int)>(0);

        $r44 = virtualinvoke r3.<safetyChecker.z3ScriptManager.Z3ScriptHandler: java.util.Map getGlobal()>();

        $r45 = interfaceinvoke $r44.<java.util.Map: java.lang.Object get(java.lang.Object)>(r10);

        r87 = (com.microsoft.z3.ArrayExpr) $r45;

        r88 = virtualinvoke r3.<safetyChecker.z3ScriptManager.Z3ScriptHandler: java.lang.String getGlobalName(java.lang.String)>(r10);

        $r46 = virtualinvoke r87.<com.microsoft.z3.ArrayExpr: com.microsoft.z3.Sort getSort()>();

        $r47 = virtualinvoke r5.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.Expr mkConst(java.lang.String,com.microsoft.z3.Sort)>(r88, $r46);

        r11 = (com.microsoft.z3.ArrayExpr) $r47;

        r12 = virtualinvoke r5.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.ArrayExpr mkStore(com.microsoft.z3.ArrayExpr,com.microsoft.z3.Expr,com.microsoft.z3.Expr)>(r87, r4, r84);

        r13 = virtualinvoke r5.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.BoolExpr mkEq(com.microsoft.z3.Expr,com.microsoft.z3.Expr)>(r11, r12);

        $r48 = virtualinvoke r3.<safetyChecker.z3ScriptManager.Z3ScriptHandler: java.util.Map getGlobal()>();

        interfaceinvoke $r48.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r10, r11);

        $r49 = virtualinvoke r3.<safetyChecker.z3ScriptManager.Z3ScriptHandler: java.util.Map getSubstitute()>();

        interfaceinvoke $r49.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r88, r10);

        r14 = virtualinvoke r5.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.BoolExpr mkAnd(com.microsoft.z3.BoolExpr[])>(r7);

        r15 = virtualinvoke r5.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.BoolExpr mkAnd(com.microsoft.z3.BoolExpr[])>(r85);

        $r50 = newarray (com.microsoft.z3.BoolExpr)[3];

        $r50[0] = r14;

        $r50[1] = r15;

        $r50[2] = r13;

        r16 = virtualinvoke r5.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.BoolExpr mkAnd(com.microsoft.z3.BoolExpr[])>($r50);

        return r16;
    }

    public com.microsoft.z3.BoolExpr newMultiArrayExpr2(soot.jimple.NewMultiArrayExpr, soot.Type, safetyChecker.z3ScriptManager.Z3ScriptHandler, com.microsoft.z3.Expr)
    {
        safetyChecker.z3ScriptManager.Z3ArrayHandler r0;
        soot.jimple.NewMultiArrayExpr r1;
        soot.Type r2, r6, r10;
        safetyChecker.z3ScriptManager.Z3ScriptHandler r3;
        com.microsoft.z3.Expr r4, r13, r14, $r44, r62, r66, r68;
        com.microsoft.z3.InterpolationContext r5;
        java.util.Map r7, r8, $r33, $r41, $r45, $r46, $r55, $r56;
        com.microsoft.z3.BoolExpr r9, r15, r20, r21, r22, r23, r24, r69;
        java.lang.String r11, r12, r17, $r26, $r27, $r30, $r31, $r36, r59, r65;
        com.microsoft.z3.ArrayExpr r16, r18, r19, r67;
        java.lang.Object[] $r25, $r51;
        int $i0, $i1, i2;
        boolean $z0, $z1, $z2;
        java.lang.StringBuilder $r32, $r35, r71, r72;
        com.microsoft.z3.IntSort $r37, $r38, $r52, $r53, $r54;
        com.microsoft.z3.IntNum $r39, $r40;
        java.lang.Object $r42, $r57, $r58, r61, r61_1, r61_2, r61_3;
        com.microsoft.z3.Sort $r43, r73;
        com.microsoft.z3.BoolExpr[] $r47, $r48, $r49, $r50;
        safetyChecker.NewSort r60, r70, r60_1, r60_2;
        com.microsoft.z3.ArraySort r63, r64;

        r0 := @this: safetyChecker.z3ScriptManager.Z3ArrayHandler;

        r1 := @parameter0: soot.jimple.NewMultiArrayExpr;

        r2 := @parameter1: soot.Type;

        r3 := @parameter2: safetyChecker.z3ScriptManager.Z3ScriptHandler;

        r4 := @parameter3: com.microsoft.z3.Expr;

        $r25 = newarray (java.lang.Object)[1];

        $r25[0] = "22222";

        staticinvoke <safetyChecker.utilities.LogUtils: void fatalln(java.lang.Object[])>($r25);

        r5 = virtualinvoke r3.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.InterpolationContext getIctx()>();

        r6 = interfaceinvoke r1.<soot.jimple.NewMultiArrayExpr: soot.Type getType()>();

        r7 = virtualinvoke r3.<safetyChecker.z3ScriptManager.Z3ScriptHandler: java.util.Map getSortId()>();

        r8 = virtualinvoke r3.<safetyChecker.z3ScriptManager.Z3ScriptHandler: java.util.Map getNewSortMap()>();

        virtualinvoke r6.<soot.Type: java.lang.String toString()>();

        $r26 = virtualinvoke r2.<soot.Type: java.lang.String toString()>();

        $r27 = virtualinvoke r2.<soot.Type: java.lang.String toString()>();

        $i0 = virtualinvoke $r27.<java.lang.String: int indexOf(java.lang.String)>("]");

        $i1 = $i0 + 1;

        r59 = virtualinvoke $r26.<java.lang.String: java.lang.String substring(int,int)>(0, $i1);

        $z0 = interfaceinvoke r7.<java.util.Map: boolean containsKey(java.lang.Object)>(r59);

        if $z0 == 0 goto label1;

        $r58 = interfaceinvoke r7.<java.util.Map: java.lang.Object get(java.lang.Object)>(r59);

        r60 = (safetyChecker.NewSort) $r58;

(0)     goto label4;

     label1:
        $z1 = interfaceinvoke r8.<java.util.Map: boolean containsKey(java.lang.Object)>(r59);

        if $z1 == 0 goto label2;

        $r57 = interfaceinvoke r8.<java.util.Map: java.lang.Object get(java.lang.Object)>(r59);

        r61 = (com.microsoft.z3.Sort) $r57;

(1)     goto label3;

     label2:
        r61_1 = virtualinvoke r5.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.UninterpretedSort mkUninterpretedSort(java.lang.String)>(r59);

(2)     interfaceinvoke r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r59, r61_1);

     label3:
        r61_2 = Phi(r61 #1, r61_1 #2);

        r70 = new safetyChecker.NewSort;

        r73 = (com.microsoft.z3.Sort) r61_2;

        specialinvoke r70.<safetyChecker.NewSort: void <init>(com.microsoft.z3.Sort,com.microsoft.z3.InterpolationContext)>(r73, r5);

        r60_1 = r70;

(3)     interfaceinvoke r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r59, r60_1);

     label4:
        r61_3 = Phi(r61 #0, r61_2 #3);

        r60_2 = Phi(r60 #0, r60_1 #3);

        r62 = virtualinvoke r60_2.<safetyChecker.NewSort: com.microsoft.z3.Expr getNewObject()>();

        r9 = virtualinvoke r0.<safetyChecker.z3ScriptManager.Z3ArrayHandler: com.microsoft.z3.BoolExpr newArrayExpr(com.microsoft.z3.Expr,soot.Type,safetyChecker.z3ScriptManager.Z3ScriptHandler)>(r62, r6, r3);

        r10 = interfaceinvoke r1.<soot.jimple.NewMultiArrayExpr: soot.Type getType()>();

        r11 = virtualinvoke r10.<soot.Type: java.lang.String toString()>();

        r71 = new java.lang.StringBuilder;

        $r30 = specialinvoke r0.<safetyChecker.z3ScriptManager.Z3ArrayHandler: java.lang.String getArrayPrefix()>();

        $r31 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r30);

        specialinvoke r71.<java.lang.StringBuilder: void <init>(java.lang.String)>($r31);

        $r32 = virtualinvoke r71.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r11);

        r12 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        $r33 = virtualinvoke r3.<safetyChecker.z3ScriptManager.Z3ScriptHandler: java.util.Map getGlobal()>();

        $z2 = interfaceinvoke $r33.<java.util.Map: boolean containsKey(java.lang.Object)>(r12);

        if $z2 != 0 goto label5;

        $r52 = virtualinvoke r5.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.IntSort getIntSort()>();

        $r53 = virtualinvoke r5.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.IntSort getIntSort()>();

        r63 = virtualinvoke r5.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.ArraySort mkArraySort(com.microsoft.z3.Sort,com.microsoft.z3.Sort)>($r52, $r53);

        $r54 = virtualinvoke r5.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.IntSort getIntSort()>();

        r64 = virtualinvoke r5.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.ArraySort mkArraySort(com.microsoft.z3.Sort,com.microsoft.z3.Sort)>($r54, r63);

        r65 = virtualinvoke r3.<safetyChecker.z3ScriptManager.Z3ScriptHandler: java.lang.String getGlobalName(java.lang.String)>(r12);

        r66 = virtualinvoke r5.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.Expr mkConst(java.lang.String,com.microsoft.z3.Sort)>(r65, r64);

        $r55 = virtualinvoke r3.<safetyChecker.z3ScriptManager.Z3ScriptHandler: java.util.Map getSubstitute()>();

        interfaceinvoke $r55.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r65, r12);

        $r56 = virtualinvoke r3.<safetyChecker.z3ScriptManager.Z3ScriptHandler: java.util.Map getGlobal()>();

        interfaceinvoke $r56.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r12, r66);

     label5:
        i2 = virtualinvoke r3.<safetyChecker.z3ScriptManager.Z3ScriptHandler: int getRealArraySize(java.lang.String)>(r12);

        r72 = new java.lang.StringBuilder;

        specialinvoke r72.<java.lang.StringBuilder: void <init>(java.lang.String)>("array_");

        $r35 = virtualinvoke r72.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i2);

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>();

        $r37 = virtualinvoke r5.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.IntSort getIntSort()>();

        $r38 = virtualinvoke r5.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.IntSort getIntSort()>();

        r67 = virtualinvoke r5.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.ArrayExpr mkArrayConst(java.lang.String,com.microsoft.z3.Sort,com.microsoft.z3.Sort)>($r36, $r37, $r38);

        $r39 = virtualinvoke r5.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.IntNum mkInt(int)>(0);

        r68 = virtualinvoke r5.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.Expr mkSelect(com.microsoft.z3.ArrayExpr,com.microsoft.z3.Expr)>(r67, $r39);

        r69 = virtualinvoke r5.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.BoolExpr mkEq(com.microsoft.z3.Expr,com.microsoft.z3.Expr)>(r68, r62);

        r13 = virtualinvoke r60_2.<safetyChecker.NewSort: com.microsoft.z3.Expr getNewObject()>();

        $r40 = virtualinvoke r5.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.IntNum mkInt(int)>(1);

        r14 = virtualinvoke r5.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.Expr mkSelect(com.microsoft.z3.ArrayExpr,com.microsoft.z3.Expr)>(r67, $r40);

        r15 = virtualinvoke r5.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.BoolExpr mkEq(com.microsoft.z3.Expr,com.microsoft.z3.Expr)>(r14, r13);

        $r41 = virtualinvoke r3.<safetyChecker.z3ScriptManager.Z3ScriptHandler: java.util.Map getGlobal()>();

        $r42 = interfaceinvoke $r41.<java.util.Map: java.lang.Object get(java.lang.Object)>(r12);

        r16 = (com.microsoft.z3.ArrayExpr) $r42;

        r17 = virtualinvoke r3.<safetyChecker.z3ScriptManager.Z3ScriptHandler: java.lang.String getGlobalName(java.lang.String)>(r12);

        $r43 = virtualinvoke r16.<com.microsoft.z3.ArrayExpr: com.microsoft.z3.Sort getSort()>();

        $r44 = virtualinvoke r5.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.Expr mkConst(java.lang.String,com.microsoft.z3.Sort)>(r17, $r43);

        r18 = (com.microsoft.z3.ArrayExpr) $r44;

        r19 = virtualinvoke r5.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.ArrayExpr mkStore(com.microsoft.z3.ArrayExpr,com.microsoft.z3.Expr,com.microsoft.z3.Expr)>(r16, r4, r67);

        r20 = virtualinvoke r5.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.BoolExpr mkEq(com.microsoft.z3.Expr,com.microsoft.z3.Expr)>(r18, r19);

        $r45 = virtualinvoke r3.<safetyChecker.z3ScriptManager.Z3ScriptHandler: java.util.Map getGlobal()>();

        interfaceinvoke $r45.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r12, r18);

        $r46 = virtualinvoke r3.<safetyChecker.z3ScriptManager.Z3ScriptHandler: java.util.Map getSubstitute()>();

        interfaceinvoke $r46.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r17, r12);

        $r47 = newarray (com.microsoft.z3.BoolExpr)[1];

        $r47[0] = r9;

        r21 = virtualinvoke r5.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.BoolExpr mkAnd(com.microsoft.z3.BoolExpr[])>($r47);

        $r48 = newarray (com.microsoft.z3.BoolExpr)[1];

        $r48[0] = r69;

        r22 = virtualinvoke r5.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.BoolExpr mkAnd(com.microsoft.z3.BoolExpr[])>($r48);

        $r49 = newarray (com.microsoft.z3.BoolExpr)[1];

        $r49[0] = r15;

        r23 = virtualinvoke r5.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.BoolExpr mkAnd(com.microsoft.z3.BoolExpr[])>($r49);

        $r50 = newarray (com.microsoft.z3.BoolExpr)[4];

        $r50[0] = r21;

        $r50[1] = r22;

        $r50[2] = r20;

        $r50[3] = r23;

        r24 = virtualinvoke r5.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.BoolExpr mkAnd(com.microsoft.z3.BoolExpr[])>($r50);

        $r51 = newarray (java.lang.Object)[1];

        $r51[0] = r24;

        staticinvoke <safetyChecker.utilities.LogUtils: void debugln(java.lang.Object[])>($r51);

        return r24;
    }

    public com.microsoft.z3.Expr z3ArrayRef(soot.jimple.ArrayRef, safetyChecker.z3ScriptManager.Z3ScriptHandler, safetyChecker.Edge)
    {
        safetyChecker.z3ScriptManager.Z3ArrayHandler r0;
        soot.jimple.ArrayRef r1;
        safetyChecker.z3ScriptManager.Z3ScriptHandler r2;
        safetyChecker.Edge r3;
        soot.Value r4, r5;
        com.microsoft.z3.Expr r6, r13, $r16, $r25;
        com.microsoft.z3.IntExpr r7;
        soot.Type r8;
        java.lang.String r9, r10, $r19, $r20;
        com.microsoft.z3.ArrayExpr r11, r12;
        safetyChecker.Vertex $r14, $r15;
        int $i0, $i1;
        java.lang.Object[] $r17;
        java.lang.StringBuilder $r18, $r21;
        java.util.Map $r22;
        java.lang.Object $r23;
        com.microsoft.z3.InterpolationContext $r24, $r26;

        r0 := @this: safetyChecker.z3ScriptManager.Z3ArrayHandler;

        r1 := @parameter0: soot.jimple.ArrayRef;

        r2 := @parameter1: safetyChecker.z3ScriptManager.Z3ScriptHandler;

        r3 := @parameter2: safetyChecker.Edge;

        r4 = interfaceinvoke r1.<soot.jimple.ArrayRef: soot.Value getBase()>();

        r5 = interfaceinvoke r1.<soot.jimple.ArrayRef: soot.Value getIndex()>();

        $r14 = virtualinvoke r3.<safetyChecker.Edge: safetyChecker.Vertex getSource()>();

        $i0 = virtualinvoke $r14.<safetyChecker.Vertex: int getDistance()>();

        r6 = virtualinvoke r2.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.Expr convertValue(soot.Value,boolean,safetyChecker.Edge,int)>(r4, 0, r3, $i0);

        $r15 = virtualinvoke r3.<safetyChecker.Edge: safetyChecker.Vertex getSource()>();

        $i1 = virtualinvoke $r15.<safetyChecker.Vertex: int getDistance()>();

        $r16 = virtualinvoke r2.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.Expr convertValue(soot.Value,boolean,safetyChecker.Edge,int)>(r5, 0, r3, $i1);

        r7 = (com.microsoft.z3.IntExpr) $r16;

        r8 = interfaceinvoke r4.<soot.Value: soot.Type getType()>();

        r9 = virtualinvoke r8.<soot.Type: java.lang.String toString()>();

        $r17 = newarray (java.lang.Object)[1];

        $r17[0] = r9;

        staticinvoke <safetyChecker.utilities.LogUtils: void debugln(java.lang.Object[])>($r17);

        $r18 = new java.lang.StringBuilder;

        $r19 = specialinvoke r0.<safetyChecker.z3ScriptManager.Z3ArrayHandler: java.lang.String getArrayPrefix()>();

        $r20 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r19);

        specialinvoke $r18.<java.lang.StringBuilder: void <init>(java.lang.String)>($r20);

        $r21 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r9);

        r10 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>();

        $r22 = virtualinvoke r2.<safetyChecker.z3ScriptManager.Z3ScriptHandler: java.util.Map getGlobal()>();

        $r23 = interfaceinvoke $r22.<java.util.Map: java.lang.Object get(java.lang.Object)>(r10);

        r11 = (com.microsoft.z3.ArrayExpr) $r23;

        $r24 = virtualinvoke r2.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.InterpolationContext getIctx()>();

        $r25 = virtualinvoke $r24.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.Expr mkSelect(com.microsoft.z3.ArrayExpr,com.microsoft.z3.Expr)>(r11, r6);

        r12 = (com.microsoft.z3.ArrayExpr) $r25;

        $r26 = virtualinvoke r2.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.InterpolationContext getIctx()>();

        r13 = virtualinvoke $r26.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.Expr mkSelect(com.microsoft.z3.ArrayExpr,com.microsoft.z3.Expr)>(r12, r7);

        return r13;
    }

    private com.microsoft.z3.Expr z3ArrayRef(soot.Value, safetyChecker.z3ScriptManager.Z3ScriptHandler, safetyChecker.Edge, int)
    {
        safetyChecker.z3ScriptManager.Z3ArrayHandler r0;
        soot.Value r1;
        safetyChecker.z3ScriptManager.Z3ScriptHandler r2;
        safetyChecker.Edge r3;
        int i0, $i1;
        com.microsoft.z3.Expr r4, r11, $r21;
        com.microsoft.z3.IntNum r5;
        soot.Type r6;
        java.lang.String r7, r8, $r15, $r16;
        com.microsoft.z3.ArrayExpr r9, r10;
        safetyChecker.Vertex $r12;
        com.microsoft.z3.InterpolationContext $r13, $r20, $r22;
        java.lang.StringBuilder $r14, $r17;
        java.util.Map $r18;
        java.lang.Object $r19;

        r0 := @this: safetyChecker.z3ScriptManager.Z3ArrayHandler;

        r1 := @parameter0: soot.Value;

        r2 := @parameter1: safetyChecker.z3ScriptManager.Z3ScriptHandler;

        r3 := @parameter2: safetyChecker.Edge;

        i0 := @parameter3: int;

        $r12 = virtualinvoke r3.<safetyChecker.Edge: safetyChecker.Vertex getSource()>();

        $i1 = virtualinvoke $r12.<safetyChecker.Vertex: int getDistance()>();

        r4 = virtualinvoke r2.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.Expr convertValue(soot.Value,boolean,safetyChecker.Edge,int)>(r1, 0, r3, $i1);

        $r13 = virtualinvoke r2.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.InterpolationContext getIctx()>();

        r5 = virtualinvoke $r13.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.IntNum mkInt(int)>(i0);

        r6 = interfaceinvoke r1.<soot.Value: soot.Type getType()>();

        r7 = virtualinvoke r6.<soot.Type: java.lang.String toString()>();

        $r14 = new java.lang.StringBuilder;

        $r15 = specialinvoke r0.<safetyChecker.z3ScriptManager.Z3ArrayHandler: java.lang.String getArrayPrefix()>();

        $r16 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r15);

        specialinvoke $r14.<java.lang.StringBuilder: void <init>(java.lang.String)>($r16);

        $r17 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7);

        r8 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        $r18 = virtualinvoke r2.<safetyChecker.z3ScriptManager.Z3ScriptHandler: java.util.Map getGlobal()>();

        $r19 = interfaceinvoke $r18.<java.util.Map: java.lang.Object get(java.lang.Object)>(r8);

        r9 = (com.microsoft.z3.ArrayExpr) $r19;

        $r20 = virtualinvoke r2.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.InterpolationContext getIctx()>();

        $r21 = virtualinvoke $r20.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.Expr mkSelect(com.microsoft.z3.ArrayExpr,com.microsoft.z3.Expr)>(r9, r4);

        r10 = (com.microsoft.z3.ArrayExpr) $r21;

        $r22 = virtualinvoke r2.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.InterpolationContext getIctx()>();

        r11 = virtualinvoke $r22.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.Expr mkSelect(com.microsoft.z3.ArrayExpr,com.microsoft.z3.Expr)>(r10, r5);

        return r11;
    }

    private com.microsoft.z3.BoolExpr updateArrayRef(soot.Value, safetyChecker.z3ScriptManager.Z3ScriptHandler, com.microsoft.z3.Expr, safetyChecker.Edge, int)
    {
        safetyChecker.z3ScriptManager.Z3ArrayHandler r0;
        soot.Value r1;
        safetyChecker.z3ScriptManager.Z3ScriptHandler r2;
        com.microsoft.z3.Expr r3, r6, $r29, $r38;
        safetyChecker.Edge r4;
        int i0, i1, $i2;
        com.microsoft.z3.InterpolationContext r5, $r22;
        com.microsoft.z3.IntNum r7;
        soot.Type r8;
        java.lang.String r9, r10, r17, $r24, $r25, $r32;
        com.microsoft.z3.ArrayExpr r11, r12, r13, r14, r16, r18, r19;
        com.microsoft.z3.BoolExpr r15, r20, $r42;
        safetyChecker.Vertex $r21;
        java.lang.StringBuilder $r23, $r26, $r30, $r31;
        java.util.Map $r27, $r35, $r39;
        java.lang.Object $r28, $r36;
        com.microsoft.z3.IntSort $r33, $r34;
        com.microsoft.z3.Sort $r37;
        com.microsoft.z3.BoolExpr[] $r41;

        r0 := @this: safetyChecker.z3ScriptManager.Z3ArrayHandler;

        r1 := @parameter0: soot.Value;

        r2 := @parameter1: safetyChecker.z3ScriptManager.Z3ScriptHandler;

        r3 := @parameter2: com.microsoft.z3.Expr;

        r4 := @parameter3: safetyChecker.Edge;

        i0 := @parameter4: int;

        r5 = virtualinvoke r2.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.InterpolationContext getIctx()>();

        $r21 = virtualinvoke r4.<safetyChecker.Edge: safetyChecker.Vertex getSource()>();

        $i2 = virtualinvoke $r21.<safetyChecker.Vertex: int getDistance()>();

        r6 = virtualinvoke r2.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.Expr convertValue(soot.Value,boolean,safetyChecker.Edge,int)>(r1, 0, r4, $i2);

        $r22 = virtualinvoke r2.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.InterpolationContext getIctx()>();

        r7 = virtualinvoke $r22.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.IntNum mkInt(int)>(i0);

        r8 = interfaceinvoke r1.<soot.Value: soot.Type getType()>();

        r9 = virtualinvoke r8.<soot.Type: java.lang.String toString()>();

        $r23 = new java.lang.StringBuilder;

        $r24 = specialinvoke r0.<safetyChecker.z3ScriptManager.Z3ArrayHandler: java.lang.String getArrayPrefix()>();

        $r25 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r24);

        specialinvoke $r23.<java.lang.StringBuilder: void <init>(java.lang.String)>($r25);

        $r26 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r9);

        r10 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>();

        $r27 = virtualinvoke r2.<safetyChecker.z3ScriptManager.Z3ScriptHandler: java.util.Map getGlobal()>();

        $r28 = interfaceinvoke $r27.<java.util.Map: java.lang.Object get(java.lang.Object)>(r10);

        r11 = (com.microsoft.z3.ArrayExpr) $r28;

        $r29 = virtualinvoke r5.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.Expr mkSelect(com.microsoft.z3.ArrayExpr,com.microsoft.z3.Expr)>(r11, r6);

        r12 = (com.microsoft.z3.ArrayExpr) $r29;

        r13 = virtualinvoke r5.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.ArrayExpr mkStore(com.microsoft.z3.ArrayExpr,com.microsoft.z3.Expr,com.microsoft.z3.Expr)>(r12, r7, r3);

        i1 = virtualinvoke r2.<safetyChecker.z3ScriptManager.Z3ScriptHandler: int getRealArraySize(java.lang.String)>(r10);

        $r30 = new java.lang.StringBuilder;

        specialinvoke $r30.<java.lang.StringBuilder: void <init>(java.lang.String)>("array_");

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        $r33 = virtualinvoke r5.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.IntSort getIntSort()>();

        $r34 = virtualinvoke r5.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.IntSort getIntSort()>();

        r14 = virtualinvoke r5.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.ArrayExpr mkArrayConst(java.lang.String,com.microsoft.z3.Sort,com.microsoft.z3.Sort)>($r32, $r33, $r34);

        r15 = virtualinvoke r5.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.BoolExpr mkEq(com.microsoft.z3.Expr,com.microsoft.z3.Expr)>(r14, r13);

        $r35 = virtualinvoke r2.<safetyChecker.z3ScriptManager.Z3ScriptHandler: java.util.Map getGlobal()>();

        $r36 = interfaceinvoke $r35.<java.util.Map: java.lang.Object get(java.lang.Object)>(r10);

        r16 = (com.microsoft.z3.ArrayExpr) $r36;

        r17 = virtualinvoke r2.<safetyChecker.z3ScriptManager.Z3ScriptHandler: java.lang.String getGlobalName(java.lang.String)>(r10);

        $r37 = virtualinvoke r16.<com.microsoft.z3.ArrayExpr: com.microsoft.z3.Sort getSort()>();

        $r38 = virtualinvoke r5.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.Expr mkConst(java.lang.String,com.microsoft.z3.Sort)>(r17, $r37);

        r18 = (com.microsoft.z3.ArrayExpr) $r38;

        r19 = virtualinvoke r5.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.ArrayExpr mkStore(com.microsoft.z3.ArrayExpr,com.microsoft.z3.Expr,com.microsoft.z3.Expr)>(r16, r6, r14);

        r20 = virtualinvoke r5.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.BoolExpr mkEq(com.microsoft.z3.Expr,com.microsoft.z3.Expr)>(r18, r19);

        $r39 = virtualinvoke r2.<safetyChecker.z3ScriptManager.Z3ScriptHandler: java.util.Map getGlobal()>();

        interfaceinvoke $r39.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r10, r18);

        $r41 = newarray (com.microsoft.z3.BoolExpr)[2];

        $r41[0] = r15;

        $r41[1] = r20;

        $r42 = virtualinvoke r5.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.BoolExpr mkAnd(com.microsoft.z3.BoolExpr[])>($r41);

        return $r42;
    }

    public com.microsoft.z3.BoolExpr updateArrayRef(soot.jimple.ArrayRef, safetyChecker.z3ScriptManager.Z3ScriptHandler, com.microsoft.z3.Expr, safetyChecker.Edge)
    {
        safetyChecker.z3ScriptManager.Z3ArrayHandler r0;
        soot.jimple.ArrayRef r1;
        safetyChecker.z3ScriptManager.Z3ScriptHandler r2;
        com.microsoft.z3.Expr r3, r8, $r25, $r32, $r41;
        safetyChecker.Edge r4;
        com.microsoft.z3.InterpolationContext r5;
        soot.Value r6, r7;
        com.microsoft.z3.IntExpr r9;
        soot.Type r10;
        java.lang.String r11, r12, r19, $r27, $r28, $r35;
        com.microsoft.z3.ArrayExpr r13, r14, r15, r16, r18, r20, r21;
        int i0, $i1, $i2;
        com.microsoft.z3.BoolExpr r17, r22, $r45;
        safetyChecker.Vertex $r23, $r24;
        java.lang.StringBuilder $r26, $r29, $r33, $r34;
        java.util.Map $r30, $r38, $r42;
        java.lang.Object $r31, $r39;
        com.microsoft.z3.IntSort $r36, $r37;
        com.microsoft.z3.Sort $r40;
        com.microsoft.z3.BoolExpr[] $r44;

        r0 := @this: safetyChecker.z3ScriptManager.Z3ArrayHandler;

        r1 := @parameter0: soot.jimple.ArrayRef;

        r2 := @parameter1: safetyChecker.z3ScriptManager.Z3ScriptHandler;

        r3 := @parameter2: com.microsoft.z3.Expr;

        r4 := @parameter3: safetyChecker.Edge;

        r5 = virtualinvoke r2.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.InterpolationContext getIctx()>();

        r6 = interfaceinvoke r1.<soot.jimple.ArrayRef: soot.Value getBase()>();

        r7 = interfaceinvoke r1.<soot.jimple.ArrayRef: soot.Value getIndex()>();

        $r23 = virtualinvoke r4.<safetyChecker.Edge: safetyChecker.Vertex getSource()>();

        $i1 = virtualinvoke $r23.<safetyChecker.Vertex: int getDistance()>();

        r8 = virtualinvoke r2.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.Expr convertValue(soot.Value,boolean,safetyChecker.Edge,int)>(r6, 0, r4, $i1);

        $r24 = virtualinvoke r4.<safetyChecker.Edge: safetyChecker.Vertex getSource()>();

        $i2 = virtualinvoke $r24.<safetyChecker.Vertex: int getDistance()>();

        $r25 = virtualinvoke r2.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.Expr convertValue(soot.Value,boolean,safetyChecker.Edge,int)>(r7, 0, r4, $i2);

        r9 = (com.microsoft.z3.IntExpr) $r25;

        r10 = interfaceinvoke r6.<soot.Value: soot.Type getType()>();

        r11 = virtualinvoke r10.<soot.Type: java.lang.String toString()>();

        $r26 = new java.lang.StringBuilder;

        $r27 = specialinvoke r0.<safetyChecker.z3ScriptManager.Z3ArrayHandler: java.lang.String getArrayPrefix()>();

        $r28 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r27);

        specialinvoke $r26.<java.lang.StringBuilder: void <init>(java.lang.String)>($r28);

        $r29 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r11);

        r12 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        $r30 = virtualinvoke r2.<safetyChecker.z3ScriptManager.Z3ScriptHandler: java.util.Map getGlobal()>();

        $r31 = interfaceinvoke $r30.<java.util.Map: java.lang.Object get(java.lang.Object)>(r12);

        r13 = (com.microsoft.z3.ArrayExpr) $r31;

        $r32 = virtualinvoke r5.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.Expr mkSelect(com.microsoft.z3.ArrayExpr,com.microsoft.z3.Expr)>(r13, r8);

        r14 = (com.microsoft.z3.ArrayExpr) $r32;

        r15 = virtualinvoke r5.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.ArrayExpr mkStore(com.microsoft.z3.ArrayExpr,com.microsoft.z3.Expr,com.microsoft.z3.Expr)>(r14, r9, r3);

        i0 = virtualinvoke r2.<safetyChecker.z3ScriptManager.Z3ScriptHandler: int getRealArraySize(java.lang.String)>(r12);

        $r33 = new java.lang.StringBuilder;

        specialinvoke $r33.<java.lang.StringBuilder: void <init>(java.lang.String)>("array_");

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0);

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        $r36 = virtualinvoke r5.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.IntSort getIntSort()>();

        $r37 = virtualinvoke r5.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.IntSort getIntSort()>();

        r16 = virtualinvoke r5.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.ArrayExpr mkArrayConst(java.lang.String,com.microsoft.z3.Sort,com.microsoft.z3.Sort)>($r35, $r36, $r37);

        r17 = virtualinvoke r5.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.BoolExpr mkEq(com.microsoft.z3.Expr,com.microsoft.z3.Expr)>(r16, r15);

        $r38 = virtualinvoke r2.<safetyChecker.z3ScriptManager.Z3ScriptHandler: java.util.Map getGlobal()>();

        $r39 = interfaceinvoke $r38.<java.util.Map: java.lang.Object get(java.lang.Object)>(r12);

        r18 = (com.microsoft.z3.ArrayExpr) $r39;

        r19 = virtualinvoke r2.<safetyChecker.z3ScriptManager.Z3ScriptHandler: java.lang.String getGlobalName(java.lang.String)>(r12);

        $r40 = virtualinvoke r18.<com.microsoft.z3.ArrayExpr: com.microsoft.z3.Sort getSort()>();

        $r41 = virtualinvoke r5.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.Expr mkConst(java.lang.String,com.microsoft.z3.Sort)>(r19, $r40);

        r20 = (com.microsoft.z3.ArrayExpr) $r41;

        r21 = virtualinvoke r5.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.ArrayExpr mkStore(com.microsoft.z3.ArrayExpr,com.microsoft.z3.Expr,com.microsoft.z3.Expr)>(r18, r8, r16);

        r22 = virtualinvoke r5.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.BoolExpr mkEq(com.microsoft.z3.Expr,com.microsoft.z3.Expr)>(r20, r21);

        $r42 = virtualinvoke r2.<safetyChecker.z3ScriptManager.Z3ScriptHandler: java.util.Map getGlobal()>();

        interfaceinvoke $r42.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r12, r20);

        $r44 = newarray (com.microsoft.z3.BoolExpr)[2];

        $r44[0] = r17;

        $r44[1] = r22;

        $r45 = virtualinvoke r5.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.BoolExpr mkAnd(com.microsoft.z3.BoolExpr[])>($r44);

        return $r45;
    }

    public com.microsoft.z3.BoolExpr z3ArrayCopy(safetyChecker.Edge, safetyChecker.z3ScriptManager.Z3ScriptHandler)
    {
        safetyChecker.z3ScriptManager.Z3ArrayHandler r0;
        safetyChecker.Edge r1;
        safetyChecker.z3ScriptManager.Z3ScriptHandler r2;
        com.microsoft.z3.InterpolationContext r3;
        soot.jimple.InvokeStmt r4;
        soot.jimple.InvokeExpr r5;
        soot.Value r6, r7, r9, r10, r12;
        soot.jimple.IntConstant r8, r11, r13;
        int i0, i1, $i2, $i3, $i4, $i5, $i6, $i7, i8, i9, i10, i10_1, i8_1, i9_1, i8_2, i9_2, i10_2;
        soot.Local r14, r15;
        com.microsoft.z3.ArrayExpr r16, r21, r25, r28, r30, r32, r67;
        soot.Type r17;
        java.lang.String r18, r19, r27, r29, $r36, $r37, $r41, $r47, $r49, $r50, $r57;
        com.microsoft.z3.BoolExpr[] r20, $r62;
        com.microsoft.z3.IntNum r22, r23;
        com.microsoft.z3.Expr r24, r31, $r59;
        com.microsoft.z3.BoolExpr r26, r33, $r63, $r65, $r66, r68;
        soot.Unit $r34;
        java.lang.StringBuilder $r35, $r38, $r39, $r40, $r45, $r46, $r48, $r51, $r55, $r56;
        com.microsoft.z3.IntSort $r42, $r43;
        java.lang.Object[] $r44, $r54, $r64;
        java.util.Map $r52, $r61;
        java.lang.Object $r53;
        com.microsoft.z3.Sort $r58;
        safetyChecker.Vertex $r60;

        r0 := @this: safetyChecker.z3ScriptManager.Z3ArrayHandler;

        r1 := @parameter0: safetyChecker.Edge;

        r2 := @parameter1: safetyChecker.z3ScriptManager.Z3ScriptHandler;

        r3 = virtualinvoke r2.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.InterpolationContext getIctx()>();

        $r34 = virtualinvoke r1.<safetyChecker.Edge: soot.Unit getUnit()>();

        r4 = (soot.jimple.InvokeStmt) $r34;

        r5 = interfaceinvoke r4.<soot.jimple.InvokeStmt: soot.jimple.InvokeExpr getInvokeExpr()>();

        $i2 = r0.<safetyChecker.z3ScriptManager.Z3ArrayHandler: int argSrcIndex>;

        r6 = interfaceinvoke r5.<soot.jimple.InvokeExpr: soot.Value getArg(int)>($i2);

        $i3 = r0.<safetyChecker.z3ScriptManager.Z3ArrayHandler: int argSrcStartIndex>;

        r7 = interfaceinvoke r5.<soot.jimple.InvokeExpr: soot.Value getArg(int)>($i3);

        r8 = (soot.jimple.IntConstant) r7;

        i8 = r8.<soot.jimple.IntConstant: int value>;

        $i4 = r0.<safetyChecker.z3ScriptManager.Z3ArrayHandler: int argDtcIndex>;

        r9 = interfaceinvoke r5.<soot.jimple.InvokeExpr: soot.Value getArg(int)>($i4);

        $i5 = r0.<safetyChecker.z3ScriptManager.Z3ArrayHandler: int argDtcStartIndex>;

        r10 = interfaceinvoke r5.<soot.jimple.InvokeExpr: soot.Value getArg(int)>($i5);

        r11 = (soot.jimple.IntConstant) r10;

        i9 = r11.<soot.jimple.IntConstant: int value>;

        $i6 = r0.<safetyChecker.z3ScriptManager.Z3ArrayHandler: int argLengthIndex>;

        r12 = interfaceinvoke r5.<soot.jimple.InvokeExpr: soot.Value getArg(int)>($i6);

        r13 = (soot.jimple.IntConstant) r12;

        i0 = r13.<soot.jimple.IntConstant: int value>;

        if i0 > 0 goto label1;

        $r66 = virtualinvoke r3.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.BoolExpr mkTrue()>();

        return $r66;

     label1:
        r14 = (soot.Local) r6;

        r15 = (soot.Local) r9;

        r16 = specialinvoke r0.<safetyChecker.z3ScriptManager.Z3ArrayHandler: com.microsoft.z3.ArrayExpr getRealArray(soot.Local,safetyChecker.Edge,safetyChecker.z3ScriptManager.Z3ScriptHandler)>(r14, r1, r2);

        r17 = interfaceinvoke r14.<soot.Local: soot.Type getType()>();

        r18 = virtualinvoke r17.<soot.Type: java.lang.String toString()>();

        $r35 = new java.lang.StringBuilder;

        $r36 = specialinvoke r0.<safetyChecker.z3ScriptManager.Z3ArrayHandler: java.lang.String getArrayPrefix()>();

        $r37 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r36);

        specialinvoke $r35.<java.lang.StringBuilder: void <init>(java.lang.String)>($r37);

        $r38 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r18);

        r19 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>();

        r20 = newarray (com.microsoft.z3.BoolExpr)[i0];

        i10 = 0;

(0)     goto label3;

     label2:
        r21 = specialinvoke r0.<safetyChecker.z3ScriptManager.Z3ArrayHandler: com.microsoft.z3.ArrayExpr getRealArray(soot.Local,safetyChecker.Edge,safetyChecker.z3ScriptManager.Z3ScriptHandler)>(r15, r1, r2);

        i1 = virtualinvoke r2.<safetyChecker.z3ScriptManager.Z3ScriptHandler: int getRealArraySize(java.lang.String)>(r19);

        $r39 = new java.lang.StringBuilder;

        specialinvoke $r39.<java.lang.StringBuilder: void <init>(java.lang.String)>("array_");

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1);

        $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.String toString()>();

        $r42 = virtualinvoke r3.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.IntSort getIntSort()>();

        $r43 = virtualinvoke r3.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.IntSort getIntSort()>();

        r67 = virtualinvoke r3.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.ArrayExpr mkArrayConst(java.lang.String,com.microsoft.z3.Sort,com.microsoft.z3.Sort)>($r41, $r42, $r43);

        r22 = virtualinvoke r3.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.IntNum mkInt(int)>(i8_1);

        r23 = virtualinvoke r3.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.IntNum mkInt(int)>(i9_1);

        i8_2 = i8_1 + 1;

        i9_2 = i9_1 + 1;

        r24 = virtualinvoke r3.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.Expr mkSelect(com.microsoft.z3.ArrayExpr,com.microsoft.z3.Expr)>(r16, r22);

        r25 = virtualinvoke r3.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.ArrayExpr mkStore(com.microsoft.z3.ArrayExpr,com.microsoft.z3.Expr,com.microsoft.z3.Expr)>(r21, r23, r24);

        r26 = virtualinvoke r3.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.BoolExpr mkEq(com.microsoft.z3.Expr,com.microsoft.z3.Expr)>(r67, r25);

        $r44 = newarray (java.lang.Object)[1];

        $r45 = new java.lang.StringBuilder;

        specialinvoke $r45.<java.lang.StringBuilder: void <init>(java.lang.String)>("dtcArray=");

        $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r21);

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.String toString()>();

        $r44[0] = $r47;

        staticinvoke <safetyChecker.utilities.LogUtils: void debugln(java.lang.Object[])>($r44);

        $r48 = new java.lang.StringBuilder;

        $r49 = specialinvoke r0.<safetyChecker.z3ScriptManager.Z3ArrayHandler: java.lang.String getArrayPrefix()>();

        $r50 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r49);

        specialinvoke $r48.<java.lang.StringBuilder: void <init>(java.lang.String)>($r50);

        $r51 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r18);

        r27 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.String toString()>();

        $r52 = virtualinvoke r2.<safetyChecker.z3ScriptManager.Z3ScriptHandler: java.util.Map getGlobal()>();

        $r53 = interfaceinvoke $r52.<java.util.Map: java.lang.Object get(java.lang.Object)>(r27);

        r28 = (com.microsoft.z3.ArrayExpr) $r53;

        r29 = virtualinvoke r2.<safetyChecker.z3ScriptManager.Z3ScriptHandler: java.lang.String getGlobalName(java.lang.String)>(r27);

        $r54 = newarray (java.lang.Object)[1];

        $r55 = new java.lang.StringBuilder;

        specialinvoke $r55.<java.lang.StringBuilder: void <init>(java.lang.String)>(">>>>>>>>>>>>>NewName=");

        $r56 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r29);

        $r57 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.String toString()>();

        $r54[0] = $r57;

        staticinvoke <safetyChecker.utilities.LogUtils: void debugln(java.lang.Object[])>($r54);

        $r58 = virtualinvoke r28.<com.microsoft.z3.ArrayExpr: com.microsoft.z3.Sort getSort()>();

        $r59 = virtualinvoke r3.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.Expr mkConst(java.lang.String,com.microsoft.z3.Sort)>(r29, $r58);

        r30 = (com.microsoft.z3.ArrayExpr) $r59;

        $r60 = virtualinvoke r1.<safetyChecker.Edge: safetyChecker.Vertex getSource()>();

        $i7 = virtualinvoke $r60.<safetyChecker.Vertex: int getDistance()>();

        r31 = virtualinvoke r2.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.Expr convertValue(soot.Value,boolean,safetyChecker.Edge,int)>(r15, 0, r1, $i7);

        r32 = virtualinvoke r3.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.ArrayExpr mkStore(com.microsoft.z3.ArrayExpr,com.microsoft.z3.Expr,com.microsoft.z3.Expr)>(r28, r31, r67);

        r33 = virtualinvoke r3.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.BoolExpr mkEq(com.microsoft.z3.Expr,com.microsoft.z3.Expr)>(r30, r32);

        $r61 = virtualinvoke r2.<safetyChecker.z3ScriptManager.Z3ScriptHandler: java.util.Map getGlobal()>();

        interfaceinvoke $r61.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r27, r30);

        $r62 = newarray (com.microsoft.z3.BoolExpr)[2];

        $r62[0] = r26;

        $r62[1] = r33;

        $r63 = virtualinvoke r3.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.BoolExpr mkAnd(com.microsoft.z3.BoolExpr[])>($r62);

        r20[i10_1] = $r63;

        $r64 = newarray (java.lang.Object)[1];

        $r65 = r20[i10_1];

        $r64[0] = $r65;

        staticinvoke <safetyChecker.utilities.LogUtils: void debugln(java.lang.Object[])>($r64);

(1)     i10_2 = i10_1 + 1;

     label3:
        i10_1 = Phi(i10 #0, i10_2 #1);

        i8_1 = Phi(i8 #0, i8_2 #1);

        i9_1 = Phi(i9 #0, i9_2 #1);

        if i10_1 < i0 goto label2;

        r68 = virtualinvoke r3.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.BoolExpr mkAnd(com.microsoft.z3.BoolExpr[])>(r20);

        return r68;
    }

    public com.microsoft.z3.Expr z3ArraysEqual(soot.Value, safetyChecker.z3ScriptManager.Z3ScriptHandler, safetyChecker.Edge)
    {
        safetyChecker.z3ScriptManager.Z3ArrayHandler r0;
        soot.Value r1, r6, r7;
        safetyChecker.z3ScriptManager.Z3ScriptHandler r2;
        safetyChecker.Edge r3;
        com.microsoft.z3.InterpolationContext r4;
        soot.jimple.InvokeExpr r5;
        com.microsoft.z3.ArrayExpr r8, r9;
        com.microsoft.z3.BoolExpr r11, r16, $r29;
        com.microsoft.z3.IntExpr r12;
        com.microsoft.z3.Expr r13, r14, r18;
        com.microsoft.z3.IntExpr[] r17;
        int $i0, $i1;
        soot.Local $r19, $r20;
        java.lang.Object[] $r21, $r25, $r30, $r36;
        java.lang.StringBuilder $r22, $r23, $r26, $r27, $r31, $r32;
        java.lang.String $r24, $r28, $r33;
        com.microsoft.z3.IntNum $r34, $r35;

        r0 := @this: safetyChecker.z3ScriptManager.Z3ArrayHandler;

        r1 := @parameter0: soot.Value;

        r2 := @parameter1: safetyChecker.z3ScriptManager.Z3ScriptHandler;

        r3 := @parameter2: safetyChecker.Edge;

        r4 = virtualinvoke r2.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.InterpolationContext getIctx()>();

        r5 = (soot.jimple.InvokeExpr) r1;

        $i0 = r0.<safetyChecker.z3ScriptManager.Z3ArrayHandler: int argArray1>;

        r6 = interfaceinvoke r5.<soot.jimple.InvokeExpr: soot.Value getArg(int)>($i0);

        $i1 = r0.<safetyChecker.z3ScriptManager.Z3ArrayHandler: int argArray2>;

        r7 = interfaceinvoke r5.<soot.jimple.InvokeExpr: soot.Value getArg(int)>($i1);

        $r19 = (soot.Local) r6;

        r8 = specialinvoke r0.<safetyChecker.z3ScriptManager.Z3ArrayHandler: com.microsoft.z3.ArrayExpr getRealArray(soot.Local,safetyChecker.Edge,safetyChecker.z3ScriptManager.Z3ScriptHandler)>($r19, r3, r2);

        $r20 = (soot.Local) r7;

        r9 = specialinvoke r0.<safetyChecker.z3ScriptManager.Z3ArrayHandler: com.microsoft.z3.ArrayExpr getRealArray(soot.Local,safetyChecker.Edge,safetyChecker.z3ScriptManager.Z3ScriptHandler)>($r20, r3, r2);

        virtualinvoke r4.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.Expr mkArrayExt(com.microsoft.z3.ArrayExpr,com.microsoft.z3.ArrayExpr)>(r8, r9);

        r11 = virtualinvoke r4.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.BoolExpr mkEq(com.microsoft.z3.Expr,com.microsoft.z3.Expr)>(r8, r9);

        r12 = virtualinvoke r4.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.IntExpr mkIntConst(java.lang.String)>("i");

        r13 = virtualinvoke r4.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.Expr mkSelect(com.microsoft.z3.ArrayExpr,com.microsoft.z3.Expr)>(r8, r12);

        $r21 = newarray (java.lang.Object)[1];

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>(java.lang.String)>("firstSelect=");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r13);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        $r21[0] = $r24;

        staticinvoke <safetyChecker.utilities.LogUtils: void detailln(java.lang.Object[])>($r21);

        r14 = virtualinvoke r4.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.Expr mkSelect(com.microsoft.z3.ArrayExpr,com.microsoft.z3.Expr)>(r9, r12);

        $r25 = newarray (java.lang.Object)[1];

        $r26 = new java.lang.StringBuilder;

        specialinvoke $r26.<java.lang.StringBuilder: void <init>(java.lang.String)>("secondSelect=");

        $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r14);

        $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>();

        $r25[0] = $r28;

        staticinvoke <safetyChecker.utilities.LogUtils: void detailln(java.lang.Object[])>($r25);

        virtualinvoke r4.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.BoolExpr mkEq(com.microsoft.z3.Expr,com.microsoft.z3.Expr)>(r13, r14);

        $r29 = virtualinvoke r4.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.BoolExpr mkEq(com.microsoft.z3.Expr,com.microsoft.z3.Expr)>(r13, r14);

        r16 = virtualinvoke r4.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.BoolExpr mkNot(com.microsoft.z3.BoolExpr)>($r29);

        $r30 = newarray (java.lang.Object)[1];

        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<java.lang.StringBuilder: void <init>(java.lang.String)>("notEq=");

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r16);

        $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>();

        $r30[0] = $r33;

        staticinvoke <safetyChecker.utilities.LogUtils: void detailln(java.lang.Object[])>($r30);

        r17 = newarray (com.microsoft.z3.IntExpr)[1];

        r17[0] = r12;

        $r34 = virtualinvoke r4.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.IntNum mkInt(int)>(1);

        $r35 = virtualinvoke r4.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.IntNum mkInt(int)>(0);

        r18 = virtualinvoke r4.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.Expr mkITE(com.microsoft.z3.BoolExpr,com.microsoft.z3.Expr,com.microsoft.z3.Expr)>(r11, $r34, $r35);

        $r36 = newarray (java.lang.Object)[1];

        $r36[0] = r18;

        staticinvoke <safetyChecker.utilities.LogUtils: void detailln(java.lang.Object[])>($r36);

        return r18;
    }

    private com.microsoft.z3.ArrayExpr getRealArray(soot.Local, safetyChecker.Edge, safetyChecker.z3ScriptManager.Z3ScriptHandler)
    {
        safetyChecker.z3ScriptManager.Z3ArrayHandler r0;
        soot.Local r1;
        safetyChecker.Edge r2;
        safetyChecker.z3ScriptManager.Z3ScriptHandler r3;
        com.microsoft.z3.Expr r4, $r18;
        soot.Type r5;
        java.lang.String r6, r7, $r12, $r13;
        com.microsoft.z3.ArrayExpr r8, r9;
        safetyChecker.Vertex $r10;
        int $i0;
        java.lang.StringBuilder $r11, $r14;
        java.util.Map $r15;
        java.lang.Object $r16;
        com.microsoft.z3.InterpolationContext $r17;

        r0 := @this: safetyChecker.z3ScriptManager.Z3ArrayHandler;

        r1 := @parameter0: soot.Local;

        r2 := @parameter1: safetyChecker.Edge;

        r3 := @parameter2: safetyChecker.z3ScriptManager.Z3ScriptHandler;

        $r10 = virtualinvoke r2.<safetyChecker.Edge: safetyChecker.Vertex getSource()>();

        $i0 = virtualinvoke $r10.<safetyChecker.Vertex: int getDistance()>();

        r4 = virtualinvoke r3.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.Expr convertValue(soot.Value,boolean,safetyChecker.Edge,int)>(r1, 0, r2, $i0);

        r5 = interfaceinvoke r1.<soot.Local: soot.Type getType()>();

        r6 = virtualinvoke r5.<soot.Type: java.lang.String toString()>();

        $r11 = new java.lang.StringBuilder;

        $r12 = specialinvoke r0.<safetyChecker.z3ScriptManager.Z3ArrayHandler: java.lang.String getArrayPrefix()>();

        $r13 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r12);

        specialinvoke $r11.<java.lang.StringBuilder: void <init>(java.lang.String)>($r13);

        $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6);

        r7 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        $r15 = virtualinvoke r3.<safetyChecker.z3ScriptManager.Z3ScriptHandler: java.util.Map getGlobal()>();

        $r16 = interfaceinvoke $r15.<java.util.Map: java.lang.Object get(java.lang.Object)>(r7);

        r8 = (com.microsoft.z3.ArrayExpr) $r16;

        $r17 = virtualinvoke r3.<safetyChecker.z3ScriptManager.Z3ScriptHandler: com.microsoft.z3.InterpolationContext getIctx()>();

        $r18 = virtualinvoke $r17.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.Expr mkSelect(com.microsoft.z3.ArrayExpr,com.microsoft.z3.Expr)>(r8, r4);

        r9 = (com.microsoft.z3.ArrayExpr) $r18;

        return r9;
    }

    private java.lang.String getArrayPrefix()
    {
        safetyChecker.z3ScriptManager.Z3ArrayHandler r0;

        r0 := @this: safetyChecker.z3ScriptManager.Z3ArrayHandler;

        return "ArrayMem_";
    }
}
