public class infoFlow.Z3ScriptHandler extends java.lang.Object
{
    private com.microsoft.z3.InterpolationContext ictx;
    private java.util.Map newSortMap;
    private java.util.Map sortId;
    private java.util.Map global;
    private java.util.Map localMap;
    private java.util.Map arrayNameMap;
    private java.util.Map substitute;
    private java.util.Map substituteSort;
    private java.util.Stack parameters;
    private infoFlow.Vertex errorPathRoot;

    public void <init>(com.microsoft.z3.InterpolationContext)
    {
        infoFlow.Z3ScriptHandler r0;
        com.microsoft.z3.InterpolationContext r1;
        java.util.HashMap $r2, $r3, $r4, $r5, $r6, $r7, $r8;
        java.util.Stack $r9;

        r0 := @this: infoFlow.Z3ScriptHandler;

        r1 := @parameter0: com.microsoft.z3.InterpolationContext;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<java.util.HashMap: void <init>()>();

        r0.<infoFlow.Z3ScriptHandler: java.util.Map newSortMap> = $r2;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r0.<infoFlow.Z3ScriptHandler: java.util.Map sortId> = $r3;

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        r0.<infoFlow.Z3ScriptHandler: java.util.Map global> = $r4;

        $r5 = new java.util.HashMap;

        specialinvoke $r5.<java.util.HashMap: void <init>()>();

        r0.<infoFlow.Z3ScriptHandler: java.util.Map localMap> = $r5;

        $r6 = new java.util.HashMap;

        specialinvoke $r6.<java.util.HashMap: void <init>()>();

        r0.<infoFlow.Z3ScriptHandler: java.util.Map arrayNameMap> = $r6;

        $r7 = new java.util.HashMap;

        specialinvoke $r7.<java.util.HashMap: void <init>()>();

        r0.<infoFlow.Z3ScriptHandler: java.util.Map substitute> = $r7;

        $r8 = new java.util.HashMap;

        specialinvoke $r8.<java.util.HashMap: void <init>()>();

        r0.<infoFlow.Z3ScriptHandler: java.util.Map substituteSort> = $r8;

        $r9 = new java.util.Stack;

        specialinvoke $r9.<java.util.Stack: void <init>()>();

        r0.<infoFlow.Z3ScriptHandler: java.util.Stack parameters> = $r9;

        r0.<infoFlow.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx> = r1;

        return;
    }

    public void convertPathtoZ3Script(infoFlow.Vertex)
    {
        infoFlow.Z3ScriptHandler r0;
        java.lang.Object[] $r1, $r2, $r6;
        infoFlow.Edge $r3, $r4, $r5;
        boolean $z1, z2, z2_1, z2_2;
        infoFlow.Vertex r7, r7_1, r7_2;

        r0 := @this: infoFlow.Z3ScriptHandler;

        r7 := @parameter0: infoFlow.Vertex;

        $r1 = newarray (java.lang.Object)[1];

        $r1[0] = ">>>>>>> Z3ScriptHandler.convertPathtoZ3Script";

        staticinvoke <infoFlow.LogUtils: void debugln(java.lang.Object[])>($r1);

        r0.<infoFlow.Z3ScriptHandler: infoFlow.Vertex errorPathRoot> = r7;

        z2 = 0;

(0)     goto label3;

     label1:
        if z2_1 == 0 goto label2;

        goto label4;

     label2:
        $r2 = newarray (java.lang.Object)[1];

        $r3 = virtualinvoke r7_1.<infoFlow.Vertex: infoFlow.Edge getOutgoingEdge()>();

        $r2[0] = $r3;

        staticinvoke <infoFlow.LogUtils: void infoln(java.lang.Object[])>($r2);

        $r4 = virtualinvoke r7_1.<infoFlow.Vertex: infoFlow.Edge getOutgoingEdge()>();

        virtualinvoke r0.<infoFlow.Z3ScriptHandler: boolean createZ3Script(infoFlow.Edge)>($r4);

        r7_2 = virtualinvoke r7_1.<infoFlow.Vertex: infoFlow.Vertex getNextVertex()>();

        $r5 = virtualinvoke r7_2.<infoFlow.Vertex: infoFlow.Edge getOutgoingEdge()>();

        $z1 = virtualinvoke $r5.<infoFlow.Edge: boolean isErrorEdge()>();

(1)     if $z1 == 0 goto label3;

(2)     z2_2 = 1;

     label3:
        z2_1 = Phi(z2 #0, z2_1 #1, z2_2 #2);

        r7_1 = Phi(r7 #0, r7_2 #1, r7_2 #2);

        if r7_1 != null goto label1;

     label4:
        $r6 = newarray (java.lang.Object)[1];

        $r6[0] = "<<<<<<<< Z3ScriptHandler.convertPathtoZ3Script";

        staticinvoke <infoFlow.LogUtils: void debugln(java.lang.Object[])>($r6);

        return;
    }

    public boolean createZ3Script(infoFlow.Edge)
    {
        infoFlow.Z3ScriptHandler r0;
        infoFlow.Edge r1;
        soot.Unit r2;
        boolean $z0, $z1, $z2, $z3, $z4, z5, z5_1, z5_2, z5_3, z5_4, z5_5, z5_6, z5_7, z5_8, z5_9, z5_10;
        java.lang.Object[] $r3, $r4, $r11, $r16, $r17;
        java.lang.StringBuilder $r5, $r7, $r8, $r9, $r12, $r14;
        infoFlow.Vertex $r6;
        java.lang.String $r10, $r15;
        com.microsoft.z3.BoolExpr $r13;

        r0 := @this: infoFlow.Z3ScriptHandler;

        r1 := @parameter0: infoFlow.Edge;

        z5 = 0;

        $z0 = virtualinvoke r1.<infoFlow.Edge: boolean isErrorEdge()>();

(0)     if $z0 == 0 goto label1;

(1)     z5_1 = specialinvoke r0.<infoFlow.Z3ScriptHandler: boolean convertErrorEdge(infoFlow.Edge)>(r1);

     label1:
        z5_2 = Phi(z5 #0, z5_1 #1);

        r2 = virtualinvoke r1.<infoFlow.Edge: soot.Unit getUnit()>();

        $z1 = r2 instanceof soot.jimple.IfStmt;

(2)     if $z1 == 0 goto label2;

(3)     z5_3 = specialinvoke r0.<infoFlow.Z3ScriptHandler: boolean convertIfStmt(infoFlow.Edge)>(r1);

     label2:
        z5_4 = Phi(z5_2 #2, z5_3 #3);

        $z2 = r2 instanceof soot.jimple.IdentityStmt;

(4)     if $z2 == 0 goto label3;

(5)     z5_5 = specialinvoke r0.<infoFlow.Z3ScriptHandler: boolean convertIdentityStmt(infoFlow.Edge)>(r1);

     label3:
        z5_6 = Phi(z5_4 #4, z5_5 #5);

        $z3 = r2 instanceof soot.jimple.AssignStmt;

(6)     if $z3 == 0 goto label4;

(7)     z5_7 = specialinvoke r0.<infoFlow.Z3ScriptHandler: boolean convertAssignStmtEdge(infoFlow.Edge)>(r1);

     label4:
        z5_8 = Phi(z5_6 #6, z5_7 #7);

        $z4 = virtualinvoke r1.<infoFlow.Edge: boolean isSinkEdge()>();

(8)     if $z4 == 0 goto label5;

(9)     z5_9 = specialinvoke r0.<infoFlow.Z3ScriptHandler: boolean convertSinkInvoke2Z3(infoFlow.Edge)>(r1);

     label5:
        z5_10 = Phi(z5_8 #8, z5_9 #9);

        $r3 = newarray (java.lang.Object)[1];

        $r3[0] = "---------------";

        staticinvoke <infoFlow.LogUtils: void debugln(java.lang.Object[])>($r3);

        $r4 = newarray (java.lang.Object)[1];

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>("Vertex=");

        $r6 = virtualinvoke r1.<infoFlow.Edge: infoFlow.Vertex getSource()>();

        $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6);

        $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("---- Unit=");

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>();

        $r4[0] = $r10;

        staticinvoke <infoFlow.LogUtils: void debugln(java.lang.Object[])>($r4);

        $r11 = newarray (java.lang.Object)[1];

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<java.lang.StringBuilder: void <init>(java.lang.String)>("Expr");

        $r13 = virtualinvoke r1.<infoFlow.Edge: com.microsoft.z3.BoolExpr getZ3Expr()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        $r11[0] = $r15;

        staticinvoke <infoFlow.LogUtils: void debugln(java.lang.Object[])>($r11);

        if z5_10 != 0 goto label6;

        $r16 = newarray (java.lang.Object)[1];

        $r16[0] = "Converstion failed";

        staticinvoke <infoFlow.LogUtils: void infoln(java.lang.Object[])>($r16);

        $r17 = newarray (java.lang.Object)[1];

        $r17[0] = "Z3ScriptHandler.createZ3Script";

        staticinvoke <infoFlow.LogUtils: void infoln(java.lang.Object[])>($r17);

        staticinvoke <java.lang.System: void exit(int)>(0);

     label6:
        return z5_10;
    }

    private boolean convertErrorEdge(infoFlow.Edge)
    {
        infoFlow.Z3ScriptHandler r0;
        infoFlow.Edge r1;
        soot.jimple.InvokeStmt r2;
        soot.Unit $r3;

        r0 := @this: infoFlow.Z3ScriptHandler;

        r1 := @parameter0: infoFlow.Edge;

        $r3 = virtualinvoke r1.<infoFlow.Edge: soot.Unit getUnit()>();

        r2 = (soot.jimple.InvokeStmt) $r3;

        return 1;
    }

    private boolean convertIfStmt(infoFlow.Edge)
    {
        infoFlow.Z3ScriptHandler r0;
        infoFlow.Edge r1, r5;
        soot.jimple.IfStmt r2;
        soot.Value r3;
        com.microsoft.z3.BoolExpr r4, $r26, $r32;
        soot.Unit r6, r7, $r9, $r29;
        soot.jimple.Stmt r8;
        infoFlow.Vertex $r10, $r12;
        int $i0;
        com.microsoft.z3.Expr $r11;
        java.lang.Object[] $r13, $r17, $r21, $r27;
        java.lang.StringBuilder $r14, $r15, $r18, $r19, $r22, $r23, $r28, $r30, $r31, $r33;
        java.lang.String $r16, $r20, $r24, $r34;
        boolean $z0;
        com.microsoft.z3.InterpolationContext $r25;

        r0 := @this: infoFlow.Z3ScriptHandler;

        r1 := @parameter0: infoFlow.Edge;

        $r9 = virtualinvoke r1.<infoFlow.Edge: soot.Unit getUnit()>();

        r2 = (soot.jimple.IfStmt) $r9;

        r3 = interfaceinvoke r2.<soot.jimple.IfStmt: soot.Value getCondition()>();

        $r10 = virtualinvoke r1.<infoFlow.Edge: infoFlow.Vertex getSource()>();

        $i0 = virtualinvoke $r10.<infoFlow.Vertex: int getDistance()>();

        $r11 = specialinvoke r0.<infoFlow.Z3ScriptHandler: com.microsoft.z3.Expr convertValue(soot.Value,boolean,infoFlow.Edge,int)>(r3, 0, r1, $i0);

        r4 = (com.microsoft.z3.BoolExpr) $r11;

        $r12 = virtualinvoke r1.<infoFlow.Edge: infoFlow.Vertex getTarget()>();

        r5 = virtualinvoke $r12.<infoFlow.Vertex: infoFlow.Edge getOutgoingEdge()>();

        r6 = virtualinvoke r1.<infoFlow.Edge: soot.Unit getUnit()>();

        $r13 = newarray (java.lang.Object)[1];

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>(java.lang.String)>("currentUnit=");

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r6);

        $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>();

        $r13[0] = $r16;

        staticinvoke <infoFlow.LogUtils: void debugln(java.lang.Object[])>($r13);

        r7 = virtualinvoke r5.<infoFlow.Edge: soot.Unit getUnit()>();

        $r17 = newarray (java.lang.Object)[1];

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<java.lang.StringBuilder: void <init>(java.lang.String)>("nextUnit=");

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r7);

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>();

        $r17[0] = $r20;

        staticinvoke <infoFlow.LogUtils: void debugln(java.lang.Object[])>($r17);

        r8 = interfaceinvoke r2.<soot.jimple.IfStmt: soot.jimple.Stmt getTarget()>();

        $r21 = newarray (java.lang.Object)[1];

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>(java.lang.String)>("targetUnit = ");

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r8);

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>();

        $r21[0] = $r24;

        staticinvoke <infoFlow.LogUtils: void debugln(java.lang.Object[])>($r21);

        $z0 = virtualinvoke r8.<java.lang.Object: boolean equals(java.lang.Object)>(r7);

        if $z0 == 0 goto label1;

        virtualinvoke r1.<infoFlow.Edge: void setZ3Expr(com.microsoft.z3.BoolExpr)>(r4);

        goto label2;

     label1:
        $r25 = r0.<infoFlow.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        $r26 = virtualinvoke $r25.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.BoolExpr mkNot(com.microsoft.z3.BoolExpr)>(r4);

        virtualinvoke r1.<infoFlow.Edge: void setZ3Expr(com.microsoft.z3.BoolExpr)>($r26);

     label2:
        $r27 = newarray (java.lang.Object)[1];

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>()>();

        $r29 = virtualinvoke r1.<infoFlow.Edge: soot.Unit getUnit()>();

        $r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r29);

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=");

        $r32 = virtualinvoke r1.<infoFlow.Edge: com.microsoft.z3.BoolExpr getZ3Expr()>();

        $r33 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r32);

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.String toString()>();

        $r27[0] = $r34;

        staticinvoke <infoFlow.LogUtils: void debugln(java.lang.Object[])>($r27);

        return 1;
    }

    private boolean convertIdentityStmt(infoFlow.Edge)
    {
        infoFlow.Z3ScriptHandler r0;
        infoFlow.Edge r1;
        soot.jimple.IdentityStmt r2;
        soot.Value r3;
        com.microsoft.z3.Expr r4, r8;
        soot.Type r5, r9;
        soot.RefType r6;
        soot.jimple.internal.JNewExpr r7, $r14;
        com.microsoft.z3.BoolExpr r10;
        soot.Unit $r11;
        infoFlow.Vertex $r12, $r15;
        int $i0, $i1;
        java.util.Stack $r13;
        boolean $z0, $z1;

        r0 := @this: infoFlow.Z3ScriptHandler;

        r1 := @parameter0: infoFlow.Edge;

        $r11 = virtualinvoke r1.<infoFlow.Edge: soot.Unit getUnit()>();

        r2 = (soot.jimple.IdentityStmt) $r11;

        r3 = interfaceinvoke r2.<soot.jimple.IdentityStmt: soot.Value getLeftOp()>();

        $r12 = virtualinvoke r1.<infoFlow.Edge: infoFlow.Vertex getSource()>();

        $i0 = virtualinvoke $r12.<infoFlow.Vertex: int getDistance()>();

        r4 = specialinvoke r0.<infoFlow.Z3ScriptHandler: com.microsoft.z3.Expr convertValue(soot.Value,boolean,infoFlow.Edge,int)>(r3, 1, r1, $i0);

        $r13 = r0.<infoFlow.Z3ScriptHandler: java.util.Stack parameters>;

        $z0 = virtualinvoke $r13.<java.util.Stack: boolean isEmpty()>();

        if $z0 == 0 goto label2;

        r5 = interfaceinvoke r3.<soot.Value: soot.Type getType()>();

        $z1 = r5 instanceof soot.RefType;

        if $z1 == 0 goto label3;

        r6 = (soot.RefType) r5;

        $r14 = new soot.jimple.internal.JNewExpr;

        specialinvoke $r14.<soot.jimple.internal.JNewExpr: void <init>(soot.RefType)>(r6);

        r7 = $r14;

        r8 = specialinvoke r0.<infoFlow.Z3ScriptHandler: com.microsoft.z3.Expr convertValue(soot.Value,boolean,infoFlow.Edge,int)>(r7, 0, r1, 0);

        r9 = interfaceinvoke r3.<soot.Value: soot.Type getType()>();

        $r15 = virtualinvoke r1.<infoFlow.Edge: infoFlow.Vertex getSource()>();

        $i1 = virtualinvoke $r15.<infoFlow.Vertex: int getDistance()>();

        r10 = specialinvoke r0.<infoFlow.Z3ScriptHandler: com.microsoft.z3.BoolExpr convertAssignStmt(com.microsoft.z3.Expr,com.microsoft.z3.Expr,soot.Type,soot.Value,int)>(r8, r4, r9, r3, $i1);

        virtualinvoke r1.<infoFlow.Edge: void setZ3Expr(com.microsoft.z3.BoolExpr)>(r10);

        if r10 != null goto label1;

        return 0;

     label1:
        return 1;

     label2:
        return 0;

     label3:
        return 0;
    }

    private boolean convertAssignStmtEdge(infoFlow.Edge)
    {
        infoFlow.Z3ScriptHandler r0;
        infoFlow.Edge r1;
        soot.jimple.AssignStmt r2;
        soot.Value r3, r4;
        soot.Type r5;
        com.microsoft.z3.Expr r6, r12;
        com.microsoft.z3.BoolExpr r7;
        soot.Unit $r8;
        infoFlow.Vertex $r9, $r10, $r11;
        int $i0, $i1, $i2;

        r0 := @this: infoFlow.Z3ScriptHandler;

        r1 := @parameter0: infoFlow.Edge;

        $r8 = virtualinvoke r1.<infoFlow.Edge: soot.Unit getUnit()>();

        r2 = (soot.jimple.AssignStmt) $r8;

        r3 = interfaceinvoke r2.<soot.jimple.AssignStmt: soot.Value getLeftOp()>();

        r4 = interfaceinvoke r2.<soot.jimple.AssignStmt: soot.Value getRightOp()>();

        r5 = interfaceinvoke r3.<soot.Value: soot.Type getType()>();

        $r9 = virtualinvoke r1.<infoFlow.Edge: infoFlow.Vertex getSource()>();

        $i0 = virtualinvoke $r9.<infoFlow.Vertex: int getDistance()>();

        r12 = specialinvoke r0.<infoFlow.Z3ScriptHandler: com.microsoft.z3.Expr convertValue(soot.Value,boolean,infoFlow.Edge,int)>(r4, 0, r1, $i0);

        $r10 = virtualinvoke r1.<infoFlow.Edge: infoFlow.Vertex getSource()>();

        $i1 = virtualinvoke $r10.<infoFlow.Vertex: int getDistance()>();

        r6 = specialinvoke r0.<infoFlow.Z3ScriptHandler: com.microsoft.z3.Expr convertValue(soot.Value,boolean,infoFlow.Edge,int)>(r3, 1, r1, $i1);

        $r11 = virtualinvoke r1.<infoFlow.Edge: infoFlow.Vertex getSource()>();

        $i2 = virtualinvoke $r11.<infoFlow.Vertex: int getDistance()>();

        r7 = specialinvoke r0.<infoFlow.Z3ScriptHandler: com.microsoft.z3.BoolExpr convertAssignStmt(com.microsoft.z3.Expr,com.microsoft.z3.Expr,soot.Type,soot.Value,int)>(r12, r6, r5, r3, $i2);

        virtualinvoke r1.<infoFlow.Edge: void setZ3Expr(com.microsoft.z3.BoolExpr)>(r7);

        if r7 != null goto label1;

        return 0;

     label1:
        return 1;
    }

    private boolean convertSinkInvoke2Z3(infoFlow.Edge)
    {
        infoFlow.Z3ScriptHandler r0;
        infoFlow.Edge r1;
        java.lang.String r2, r3, $r17, $r21;
        int i0, $i1, i2, i2_1, i2_2;
        java.lang.String[] r4, $r6;
        soot.Unit $r5, $r7, $r15;
        boolean $z0;
        soot.jimple.InvokeStmt $r8;
        soot.jimple.InvokeExpr $r9;
        java.util.Map $r10;
        java.lang.Object $r11;
        java.lang.Integer $r12;
        java.lang.Object[] $r13, $r18;
        java.lang.StringBuilder $r14, $r16, $r19, $r20;
        soot.Value r22, r22_1, r22_2, r22_3;

        r0 := @this: infoFlow.Z3ScriptHandler;

        r1 := @parameter0: infoFlow.Edge;

        $r5 = virtualinvoke r1.<infoFlow.Edge: soot.Unit getUnit()>();

        r2 = staticinvoke <infoFlow.UnitController: java.lang.String getMethodSignature(soot.Unit)>($r5);

        r22 = null;

        $r6 = <infoFlow.UnitController: java.lang.String[] sinkSignatureDB>;

        r4 = $r6;

        i0 = lengthof $r6;

        i2 = 0;

(0)     goto label3;

     label1:
        r3 = r4[i2_1];

        $z0 = virtualinvoke r2.<java.lang.String: boolean contains(java.lang.CharSequence)>(r3);

(1)     if $z0 == 0 goto label2;

        $r7 = virtualinvoke r1.<infoFlow.Edge: soot.Unit getUnit()>();

        $r8 = (soot.jimple.InvokeStmt) $r7;

        $r9 = interfaceinvoke $r8.<soot.jimple.InvokeStmt: soot.jimple.InvokeExpr getInvokeExpr()>();

        $r10 = <infoFlow.UnitController: java.util.Map sensitiveParameterMap>;

        $r11 = interfaceinvoke $r10.<java.util.Map: java.lang.Object get(java.lang.Object)>(r3);

        $r12 = (java.lang.Integer) $r11;

        $i1 = virtualinvoke $r12.<java.lang.Integer: int intValue()>();

(2)     r22_2 = interfaceinvoke $r9.<soot.jimple.InvokeExpr: soot.Value getArg(int)>($i1);

     label2:
        r22_3 = Phi(r22_1 #1, r22_2 #2);

(3)     i2_2 = i2_1 + 1;

     label3:
        r22_1 = Phi(r22 #0, r22_3 #3);

        i2_1 = Phi(i2 #0, i2_2 #3);

        if i2_1 < i0 goto label1;

        $r13 = newarray (java.lang.Object)[1];

        $r14 = new java.lang.StringBuilder;

        specialinvoke $r14.<java.lang.StringBuilder: void <init>(java.lang.String)>("Unit : ");

        $r15 = virtualinvoke r1.<infoFlow.Edge: soot.Unit getUnit()>();

        $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r15);

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>();

        $r13[0] = $r17;

        staticinvoke <infoFlow.LogUtils: void infoln(java.lang.Object[])>($r13);

        $r18 = newarray (java.lang.Object)[1];

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<java.lang.StringBuilder: void <init>(java.lang.String)>("leakCandidate : ");

        $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r22_1);

        $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        $r18[0] = $r21;

        staticinvoke <infoFlow.LogUtils: void infoln(java.lang.Object[])>($r18);

        return 0;
    }

    private com.microsoft.z3.Expr convertValue(soot.Value, boolean, infoFlow.Edge, int)
    {
        infoFlow.Z3ScriptHandler r0;
        soot.Value r1;
        boolean z0, $z1, $z2;
        infoFlow.Edge r2;
        int i0;
        soot.Type r3;
        com.microsoft.z3.Expr $r4, $r5;

        r0 := @this: infoFlow.Z3ScriptHandler;

        r1 := @parameter0: soot.Value;

        z0 := @parameter1: boolean;

        r2 := @parameter2: infoFlow.Edge;

        i0 := @parameter3: int;

        r3 = interfaceinvoke r1.<soot.Value: soot.Type getType()>();

        $z1 = r3 instanceof soot.PrimType;

        if $z1 == 0 goto label1;

        $r5 = specialinvoke r0.<infoFlow.Z3ScriptHandler: com.microsoft.z3.Expr convertPrimitiveValue(soot.Value,boolean,infoFlow.Edge,int)>(r1, z0, r2, i0);

        return $r5;

     label1:
        $z2 = r3 instanceof soot.RefLikeType;

        if $z2 == 0 goto label2;

        $r4 = specialinvoke r0.<infoFlow.Z3ScriptHandler: com.microsoft.z3.Expr convertRefLikeValue(soot.Value,boolean,infoFlow.Edge,int)>(r1, z0, r2, i0);

        return $r4;

     label2:
        return null;
    }

    private com.microsoft.z3.Expr convertPrimitiveValue(soot.Value, boolean, infoFlow.Edge, int)
    {
        infoFlow.Z3ScriptHandler r0;
        soot.Value r1, r4, r74, r74_1, r74_2, r74_3, r74_4, r74_5, r74_6;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9;
        infoFlow.Edge r2, $r25, r73, r73_1, r73_2, r73_3, r73_4, r73_5, r73_6;
        int i0, $i1, $i2, $i3, $i4, $i5, i6;
        java.util.Iterator r3;
        soot.Unit r5, r6;
        java.lang.Object[] $r7, $r8, $r16, $r20, $r27, $r33, $r41;
        java.lang.StringBuilder $r9, $r11, $r12, $r13, $r17, $r18, $r21, $r22, $r28, $r29, $r30, $r31, $r34, $r35, $r36, $r38, $r42, $r43, $r51, $r54;
        infoFlow.Vertex $r10, $r24, $r26, $r37, $r40, r76, r76_1, r76_2, r76_3;
        java.lang.String $r14, $r19, $r23, $r32, $r39, $r44, $r52, $r53, r63, r65;
        java.lang.Object $r15, $r49;
        com.microsoft.z3.InterpolationContext $r45, $r57, $r58;
        soot.jimple.BinopExpr $r46;
        com.microsoft.z3.Expr $r47, $r50, r77;
        java.util.Map $r48, $r55, $r59;
        com.microsoft.z3.IntSort $r60;
        soot.Local r62;
        soot.Type r64;
        com.microsoft.z3.IntExpr r66, r66_1, r66_2;
        soot.jimple.Constant r67;
        soot.jimple.IntConstant r68;
        com.microsoft.z3.IntNum r69;
        soot.shimple.PhiExpr r70;
        java.util.List r71;
        soot.toolkits.scalar.ValueUnitPair r75;

        r0 := @this: infoFlow.Z3ScriptHandler;

        r1 := @parameter0: soot.Value;

        z0 := @parameter1: boolean;

        r2 := @parameter2: infoFlow.Edge;

        i0 := @parameter3: int;

        $z2 = r1 instanceof soot.Local;

        if $z2 == 0 goto label03;

        r62 = (soot.Local) r1;

        r63 = interfaceinvoke r62.<soot.Local: java.lang.String getName()>();

        if z0 == 0 goto label02;

        r64 = interfaceinvoke r1.<soot.Value: soot.Type getType()>();

        $r51 = new java.lang.StringBuilder;

        $r52 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>(r63);

        specialinvoke $r51.<java.lang.StringBuilder: void <init>(java.lang.String)>($r52);

        $r53 = specialinvoke r0.<infoFlow.Z3ScriptHandler: java.lang.String getNameSuffix(infoFlow.Edge)>(r2);

        $r54 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r53);

        r65 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.String toString()>();

        r66 = null;

        $z9 = r64 instanceof soot.IntegerType;

(0)     if $z9 == 0 goto label01;

        $r57 = r0.<infoFlow.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        r66_1 = virtualinvoke $r57.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.IntExpr mkIntConst(java.lang.String)>(r65);

        $r59 = r0.<infoFlow.Z3ScriptHandler: java.util.Map substituteSort>;

        $r58 = r0.<infoFlow.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        $r60 = virtualinvoke $r58.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.IntSort mkIntSort()>();

(1)     interfaceinvoke $r59.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r65, $r60);

     label01:
        r66_2 = Phi(r66 #0, r66_1 #1);

        $r55 = r0.<infoFlow.Z3ScriptHandler: java.util.Map localMap>;

        interfaceinvoke $r55.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r63, r66_2);

        return r66_2;

     label02:
        $r48 = r0.<infoFlow.Z3ScriptHandler: java.util.Map localMap>;

        $r49 = interfaceinvoke $r48.<java.util.Map: java.lang.Object get(java.lang.Object)>(r63);

        $r50 = (com.microsoft.z3.Expr) $r49;

        return $r50;

     label03:
        $z3 = r1 instanceof soot.jimple.BinopExpr;

        if $z3 == 0 goto label04;

        $r46 = (soot.jimple.BinopExpr) r1;

        $r47 = specialinvoke r0.<infoFlow.Z3ScriptHandler: com.microsoft.z3.Expr convertBoolExpr(soot.jimple.BinopExpr,infoFlow.Edge,int)>($r46, r2, i0);

        return $r47;

     label04:
        $z4 = r1 instanceof soot.jimple.Constant;

        if $z4 == 0 goto label05;

        r67 = (soot.jimple.Constant) r1;

        $z8 = r67 instanceof soot.jimple.IntConstant;

        if $z8 == 0 goto label05;

        r68 = (soot.jimple.IntConstant) r67;

        i6 = r68.<soot.jimple.IntConstant: int value>;

        $r45 = r0.<infoFlow.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        r69 = virtualinvoke $r45.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.IntNum mkInt(int)>(i6);

        return r69;

     label05:
        $z5 = r1 instanceof soot.shimple.PhiExpr;

        if $z5 == 0 goto label13;

        r70 = (soot.shimple.PhiExpr) r1;

        r71 = interfaceinvoke r70.<soot.shimple.PhiExpr: java.util.List getArgs()>();

        virtualinvoke r2.<infoFlow.Edge: infoFlow.Vertex getSource()>();

        r73 = null;

        r74 = null;

        z1 = 0;

        r3 = interfaceinvoke r71.<java.util.List: java.util.Iterator iterator()>();

(2)     goto label12;

     label06:
        $r15 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r75 = (soot.toolkits.scalar.ValueUnitPair) $r15;

        r4 = virtualinvoke r75.<soot.toolkits.scalar.ValueUnitPair: soot.Value getValue()>();

        $r16 = newarray (java.lang.Object)[1];

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<java.lang.StringBuilder: void <init>(java.lang.String)>("valuePair=");

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>();

        $r16[0] = $r19;

        staticinvoke <infoFlow.LogUtils: void warningln(java.lang.Object[])>($r16);

        r5 = virtualinvoke r75.<soot.toolkits.scalar.ValueUnitPair: soot.Unit getUnit()>();

        $r20 = newarray (java.lang.Object)[1];

        $r21 = new java.lang.StringBuilder;

        specialinvoke $r21.<java.lang.StringBuilder: void <init>(java.lang.String)>("unitPair=");

        $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5);

        $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>();

        $r20[0] = $r23;

        staticinvoke <infoFlow.LogUtils: void warningln(java.lang.Object[])>($r20);

        r76_1 = r0.<infoFlow.Z3ScriptHandler: infoFlow.Vertex errorPathRoot>;

(3)     goto label11;

     label07:
        $r25 = virtualinvoke r76_2.<infoFlow.Vertex: infoFlow.Edge getOutgoingEdge()>();

        r6 = virtualinvoke $r25.<infoFlow.Edge: soot.Unit getUnit()>();

        $z7 = virtualinvoke r6.<java.lang.Object: boolean equals(java.lang.Object)>(r5);

(4)     if $z7 == 0 goto label10;

        if r73_2 != null goto label08;

        r73_3 = virtualinvoke r76_2.<infoFlow.Vertex: infoFlow.Edge getOutgoingEdge()>();

        r74_3 = r4;

(5)     goto label09;

     label08:
        $i1 = virtualinvoke r76_2.<infoFlow.Vertex: int getDistance()>();

        $r26 = virtualinvoke r73_2.<infoFlow.Edge: infoFlow.Vertex getSource()>();

        $i2 = virtualinvoke $r26.<infoFlow.Vertex: int getDistance()>();

(6)     if $i1 >= $i2 goto label09;

        r73_4 = virtualinvoke r76_2.<infoFlow.Vertex: infoFlow.Edge getOutgoingEdge()>();

(7)     r74_4 = r4;

     label09:
        r74_5 = Phi(r74_3 #5, r74_2 #6, r74_4 #7);

        r73_5 = Phi(r73_3 #5, r73_2 #6, r73_4 #7);

        $r27 = newarray (java.lang.Object)[1];

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>(java.lang.String)>("phiEqualityUnit=");

        $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r6);

        $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-- Dist-");

        $i3 = virtualinvoke r76_2.<infoFlow.Vertex: int getDistance()>();

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        $r27[0] = $r32;

        staticinvoke <infoFlow.LogUtils: void warningln(java.lang.Object[])>($r27);

        $r33 = newarray (java.lang.Object)[1];

        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>(java.lang.String)>("resultunit=");

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r73_5);

        $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" -- Dis=");

        $r37 = virtualinvoke r73_5.<infoFlow.Edge: infoFlow.Vertex getSource()>();

        $i4 = virtualinvoke $r37.<infoFlow.Vertex: int getDistance()>();

        $r38 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>();

        $r33[0] = $r39;

(8)     staticinvoke <infoFlow.LogUtils: void warningln(java.lang.Object[])>($r33);

     label10:
        r74_6 = Phi(r74_2 #4, r74_5 #8);

        r73_6 = Phi(r73_2 #4, r73_5 #8);

(9)     r76_3 = virtualinvoke r76_2.<infoFlow.Vertex: infoFlow.Vertex getNextVertex()>();

     label11:
        r74_2 = Phi(r74_1 #3, r74_6 #9);

        r73_2 = Phi(r73_1 #3, r73_6 #9);

        r76_2 = Phi(r76_1 #3, r76_3 #9);

        $r24 = virtualinvoke r2.<infoFlow.Edge: infoFlow.Vertex getSource()>();

(10)    if r76_2 != $r24 goto label07;

     label12:
        r74_1 = Phi(r74 #2, r74_2 #10);

        r73_1 = Phi(r73 #2, r73_2 #10);

        r76 = Phi(r76 #2, r76_2 #10);

        $z6 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z6 != 0 goto label06;

        $r40 = virtualinvoke r2.<infoFlow.Edge: infoFlow.Vertex getSource()>();

        $i5 = virtualinvoke $r40.<infoFlow.Vertex: int getDistance()>();

        r77 = specialinvoke r0.<infoFlow.Z3ScriptHandler: com.microsoft.z3.Expr convertValue(soot.Value,boolean,infoFlow.Edge,int)>(r74_1, 0, r2, $i5);

        $r41 = newarray (java.lang.Object)[1];

        $r42 = new java.lang.StringBuilder;

        specialinvoke $r42.<java.lang.StringBuilder: void <init>(java.lang.String)>("resultExpr=");

        $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r77);

        $r44 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.String toString()>();

        $r41[0] = $r44;

        staticinvoke <infoFlow.LogUtils: void warningln(java.lang.Object[])>($r41);

        return r77;

     label13:
        $r7 = newarray (java.lang.Object)[1];

        $r7[0] = "returning null";

        staticinvoke <infoFlow.LogUtils: void fatalln(java.lang.Object[])>($r7);

        $r8 = newarray (java.lang.Object)[1];

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>(java.lang.String)>("Vertex=");

        $r10 = virtualinvoke r2.<infoFlow.Edge: infoFlow.Vertex getSource()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("---Edge=");

        $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8[0] = $r14;

        staticinvoke <infoFlow.LogUtils: void fatalln(java.lang.Object[])>($r8);

        return null;
    }

    private com.microsoft.z3.Expr convertRefLikeValue(soot.Value, boolean, infoFlow.Edge, int)
    {
        infoFlow.Z3ScriptHandler r0;
        soot.Value r1;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11;
        infoFlow.Edge r2;
        int i0;
        soot.Type r3;
        soot.Local r4;
        java.lang.Object[] $r5, $r6, $r13, $r14, $r15, $r16, $r17, $r18, $r21, $r23;
        java.lang.StringBuilder $r7, $r9, $r10, $r11;
        soot.Unit $r8;
        java.lang.String $r12;
        soot.jimple.AnyNewExpr $r19;
        com.microsoft.z3.Expr $r20, $r22;

        r0 := @this: infoFlow.Z3ScriptHandler;

        r1 := @parameter0: soot.Value;

        z0 := @parameter1: boolean;

        r2 := @parameter2: infoFlow.Edge;

        i0 := @parameter3: int;

        $z1 = r1 instanceof soot.shimple.PhiExpr;

        if $z1 == 0 goto label01;

        $r23 = newarray (java.lang.Object)[1];

        $r23[0] = "FATAL: PhiExpr is not supported yet!";

        staticinvoke <infoFlow.LogUtils: void fatalln(java.lang.Object[])>($r23);

        staticinvoke <java.lang.System: void exit(int)>(0);

     label01:
        $z2 = r1 instanceof soot.Local;

        if $z2 == 0 goto label03;

        r3 = interfaceinvoke r1.<soot.Value: soot.Type getType()>();

        r4 = (soot.Local) r1;

        $z10 = r3 instanceof soot.RefType;

        if $z10 == 0 goto label02;

        $r22 = specialinvoke r0.<infoFlow.Z3ScriptHandler: com.microsoft.z3.Expr createZ3Object(soot.Local,boolean,infoFlow.Edge)>(r4, z0, r2);

        return $r22;

     label02:
        $z11 = r3 instanceof soot.ArrayType;

        if $z11 == 0 goto label03;

        $r21 = newarray (java.lang.Object)[1];

        $r21[0] = "FATAL: ArrayType is not supported yet!";

        staticinvoke <infoFlow.LogUtils: void fatalln(java.lang.Object[])>($r21);

        staticinvoke <java.lang.System: void exit(int)>(0);

     label03:
        $z3 = r1 instanceof soot.jimple.AnyNewExpr;

        if $z3 == 0 goto label04;

        $r19 = (soot.jimple.AnyNewExpr) r1;

        $r20 = specialinvoke r0.<infoFlow.Z3ScriptHandler: com.microsoft.z3.Expr convertAnyNewExpr(soot.jimple.AnyNewExpr,infoFlow.Edge)>($r19, r2);

        return $r20;

     label04:
        $z4 = r1 instanceof soot.jimple.StringConstant;

        if $z4 == 0 goto label05;

        $r18 = newarray (java.lang.Object)[1];

        $r18[0] = "FATAL: StringConstant. is not supported yet!";

        staticinvoke <infoFlow.LogUtils: void fatalln(java.lang.Object[])>($r18);

        staticinvoke <java.lang.System: void exit(int)>(0);

     label05:
        $z5 = r1 instanceof soot.jimple.ArrayRef;

        if $z5 == 0 goto label06;

        $r17 = newarray (java.lang.Object)[1];

        $r17[0] = "FATAL: ArrayRef is not supported yet!";

        staticinvoke <infoFlow.LogUtils: void fatalln(java.lang.Object[])>($r17);

        staticinvoke <java.lang.System: void exit(int)>(0);

     label06:
        $z6 = r1 instanceof soot.jimple.InstanceFieldRef;

        if $z6 == 0 goto label07;

        $r16 = newarray (java.lang.Object)[1];

        $r16[0] = "FATAL: InstanceFieldRef is not supported yet!";

        staticinvoke <infoFlow.LogUtils: void fatalln(java.lang.Object[])>($r16);

        staticinvoke <java.lang.System: void exit(int)>(0);

     label07:
        $z7 = r1 instanceof soot.jimple.CastExpr;

        if $z7 == 0 goto label08;

        $r15 = newarray (java.lang.Object)[1];

        $r15[0] = "FATAL: CastExpr is not supported yet!";

        staticinvoke <infoFlow.LogUtils: void fatalln(java.lang.Object[])>($r15);

        staticinvoke <java.lang.System: void exit(int)>(0);

     label08:
        $z8 = r1 instanceof soot.jimple.StaticFieldRef;

        if $z8 == 0 goto label09;

        $r14 = newarray (java.lang.Object)[1];

        $r14[0] = "FATAL: StaticFieldRef is not supported yet!";

        staticinvoke <infoFlow.LogUtils: void fatalln(java.lang.Object[])>($r14);

        staticinvoke <java.lang.System: void exit(int)>(0);

     label09:
        $z9 = r1 instanceof soot.jimple.NullConstant;

        if $z9 == 0 goto label10;

        $r13 = newarray (java.lang.Object)[1];

        $r13[0] = "FATAL: NullConstant is not supported yet!";

        staticinvoke <infoFlow.LogUtils: void fatalln(java.lang.Object[])>($r13);

        staticinvoke <java.lang.System: void exit(int)>(0);

     label10:
        $r5 = newarray (java.lang.Object)[1];

        $r5[0] = "FATAL: Conversion cannot be done";

        staticinvoke <infoFlow.LogUtils: void fatalln(java.lang.Object[])>($r5);

        $r6 = newarray (java.lang.Object)[1];

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<java.lang.StringBuilder: void <init>(java.lang.String)>("FATAL: Unit : ");

        $r8 = virtualinvoke r2.<infoFlow.Edge: soot.Unit getUnit()>();

        $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8);

        $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" - Value : ");

        $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>();

        $r6[0] = $r12;

        staticinvoke <infoFlow.LogUtils: void fatalln(java.lang.Object[])>($r6);

        return null;
    }

    private com.microsoft.z3.Expr createZ3Object(soot.Local, boolean, infoFlow.Edge)
    {
        infoFlow.Z3ScriptHandler r0;
        soot.Local r1;
        boolean z0, $z1, $z2, $z3;
        infoFlow.Edge r2;
        soot.Type r3;
        java.lang.String r4, $r16, $r17, $r19, $r26, $r27, $r28, r51, r54, r59;
        java.util.Map $r5, $r9, $r10, $r11, $r13, $r30, $r34, $r42, $r43, $r46, $r47;
        com.microsoft.z3.InterpolationContext $r6, $r7, $r21, $r31, $r36, $r37, $r39, $r41, $r45;
        com.microsoft.z3.StringSymbol $r8;
        java.lang.Object $r12, $r14, $r32, $r35, $r48, r49, r49_1, r49_2;
        infoFlow.ProgramTree $r18;
        java.lang.StringBuilder $r20, $r29, r62, r63;
        java.lang.Object[] $r22, $r23, $r24;
        com.microsoft.z3.Sort $r33, r64, r65;
        com.microsoft.z3.IntSort $r38, $r40;
        com.microsoft.z3.ArraySort r50;
        com.microsoft.z3.Expr r52, r55, r60;
        infoFlow.NewSort r53, r56, r58, r61;
        com.microsoft.z3.ArrayExpr r57;

        r0 := @this: infoFlow.Z3ScriptHandler;

        r1 := @parameter0: soot.Local;

        z0 := @parameter1: boolean;

        r2 := @parameter2: infoFlow.Edge;

        r3 = interfaceinvoke r1.<soot.Local: soot.Type getType()>();

        r4 = virtualinvoke r3.<soot.Type: java.lang.String toString()>();

        $r5 = r0.<infoFlow.Z3ScriptHandler: java.util.Map newSortMap>;

        $z1 = interfaceinvoke $r5.<java.util.Map: boolean containsKey(java.lang.Object)>(r4);

        if $z1 == 0 goto label1;

        $r47 = r0.<infoFlow.Z3ScriptHandler: java.util.Map newSortMap>;

        $r48 = interfaceinvoke $r47.<java.util.Map: java.lang.Object get(java.lang.Object)>(r4);

        r49 = (com.microsoft.z3.Sort) $r48;

(0)     goto label2;

     label1:
        $r7 = r0.<infoFlow.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        $r6 = r0.<infoFlow.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        $r8 = virtualinvoke $r6.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.StringSymbol mkSymbol(java.lang.String)>(r4);

        r49_1 = virtualinvoke $r7.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.UninterpretedSort mkUninterpretedSort(com.microsoft.z3.Symbol)>($r8);

        $r9 = r0.<infoFlow.Z3ScriptHandler: java.util.Map newSortMap>;

(1)     interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, r49_1);

     label2:
        r49_2 = Phi(r49 #0, r49_1 #1);

        $r10 = r0.<infoFlow.Z3ScriptHandler: java.util.Map global>;

        $z2 = interfaceinvoke $r10.<java.util.Map: boolean containsKey(java.lang.Object)>(r4);

        if $z2 != 0 goto label3;

        $r37 = r0.<infoFlow.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        $r36 = r0.<infoFlow.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        $r38 = virtualinvoke $r36.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.IntSort getIntSort()>();

        $r39 = r0.<infoFlow.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        $r40 = virtualinvoke $r39.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.IntSort getIntSort()>();

        r50 = virtualinvoke $r37.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.ArraySort mkArraySort(com.microsoft.z3.Sort,com.microsoft.z3.Sort)>($r38, $r40);

        r51 = specialinvoke r0.<infoFlow.Z3ScriptHandler: java.lang.String getGlobalName(java.lang.String)>(r4);

        $r41 = r0.<infoFlow.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        r52 = virtualinvoke $r41.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.Expr mkConst(java.lang.String,com.microsoft.z3.Sort)>(r51, r50);

        $r42 = r0.<infoFlow.Z3ScriptHandler: java.util.Map global>;

        interfaceinvoke $r42.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, r52);

        $r43 = r0.<infoFlow.Z3ScriptHandler: java.util.Map substitute>;

        interfaceinvoke $r43.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, r51);

        r61 = new infoFlow.NewSort;

        $r45 = r0.<infoFlow.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        r64 = (com.microsoft.z3.Sort) r49_2;

        specialinvoke r61.<infoFlow.NewSort: void <init>(com.microsoft.z3.Sort,com.microsoft.z3.InterpolationContext)>(r64, $r45);

        r53 = r61;

        $r46 = r0.<infoFlow.Z3ScriptHandler: java.util.Map sortId>;

        interfaceinvoke $r46.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, r53);

     label3:
        if z0 == 0 goto label5;

        r62 = new java.lang.StringBuilder;

        $r26 = interfaceinvoke r1.<soot.Local: java.lang.String getName()>();

        $r27 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r26);

        specialinvoke r62.<java.lang.StringBuilder: void <init>(java.lang.String)>($r27);

        $r28 = specialinvoke r0.<infoFlow.Z3ScriptHandler: java.lang.String getNameSuffix(infoFlow.Edge)>(r2);

        $r29 = virtualinvoke r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r28);

        r54 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>();

        $r31 = r0.<infoFlow.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        $r30 = r0.<infoFlow.Z3ScriptHandler: java.util.Map newSortMap>;

        $r32 = interfaceinvoke $r30.<java.util.Map: java.lang.Object get(java.lang.Object)>(r4);

        $r33 = (com.microsoft.z3.Sort) $r32;

        r55 = virtualinvoke $r31.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.Expr mkConst(java.lang.String,com.microsoft.z3.Sort)>(r54, $r33);

        $r34 = r0.<infoFlow.Z3ScriptHandler: java.util.Map sortId>;

        $r35 = interfaceinvoke $r34.<java.util.Map: java.lang.Object get(java.lang.Object)>(r4);

        r56 = (infoFlow.NewSort) $r35;

        $z3 = virtualinvoke r56.<infoFlow.NewSort: boolean ifHasExpr(com.microsoft.z3.Expr)>(r55);

        if $z3 == 0 goto label4;

        return r55;

     label4:
        virtualinvoke r56.<infoFlow.NewSort: void creatNewOject(com.microsoft.z3.Expr)>(r55);

        return r55;

     label5:
        $r11 = r0.<infoFlow.Z3ScriptHandler: java.util.Map global>;

        $r12 = interfaceinvoke $r11.<java.util.Map: java.lang.Object get(java.lang.Object)>(r4);

        r57 = (com.microsoft.z3.ArrayExpr) $r12;

        $r13 = r0.<infoFlow.Z3ScriptHandler: java.util.Map sortId>;

        $r14 = interfaceinvoke $r13.<java.util.Map: java.lang.Object get(java.lang.Object)>(r4);

        r58 = (infoFlow.NewSort) $r14;

        r63 = new java.lang.StringBuilder;

        $r16 = interfaceinvoke r1.<soot.Local: java.lang.String getName()>();

        $r17 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r16);

        specialinvoke r63.<java.lang.StringBuilder: void <init>(java.lang.String)>($r17);

        $r18 = virtualinvoke r2.<infoFlow.Edge: infoFlow.ProgramTree getProgramTree()>();

        $r19 = virtualinvoke $r18.<infoFlow.ProgramTree: java.lang.String getProgramDefinition()>();

        $r20 = virtualinvoke r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19);

        r59 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>();

        $r21 = r0.<infoFlow.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        r65 = (com.microsoft.z3.Sort) r49_2;

        r60 = virtualinvoke $r21.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.Expr mkConst(java.lang.String,com.microsoft.z3.Sort)>(r59, r65);

        $r22 = newarray (java.lang.Object)[1];

        $r22[0] = r59;

        staticinvoke <infoFlow.LogUtils: void infoln(java.lang.Object[])>($r22);

        $r23 = newarray (java.lang.Object)[1];

        $r23[0] = r49_2;

        staticinvoke <infoFlow.LogUtils: void infoln(java.lang.Object[])>($r23);

        $r24 = newarray (java.lang.Object)[1];

        $r24[0] = r60;

        staticinvoke <infoFlow.LogUtils: void infoln(java.lang.Object[])>($r24);

        staticinvoke <java.lang.System: void exit(int)>(0);

        return null;
    }

    private java.lang.String getGlobalName(java.lang.String)
    {
        infoFlow.Z3ScriptHandler r0;
        java.lang.String r1, r12;
        java.util.Map $r2, $r7, $r9;
        boolean $z0;
        java.lang.StringBuilder $r3, $r4, $r5, $r6;
        java.lang.Integer $r8, $r11;
        java.lang.Object $r10;
        int i0, i1, i0_1, i0_2;

        r0 := @this: infoFlow.Z3ScriptHandler;

        r1 := @parameter0: java.lang.String;

        i0 = 1;

        $r2 = r0.<infoFlow.Z3ScriptHandler: java.util.Map arrayNameMap>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

(0)     if $z0 == 0 goto label1;

        $r9 = r0.<infoFlow.Z3ScriptHandler: java.util.Map arrayNameMap>;

        $r10 = interfaceinvoke $r9.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r11 = (java.lang.Integer) $r10;

        i1 = virtualinvoke $r11.<java.lang.Integer: int intValue()>();

(1)     i0_1 = i1 + 1;

     label1:
        i0_2 = Phi(i0 #0, i0_1 #1);

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<java.lang.StringBuilder: void <init>(java.lang.String)>("Global_");

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1);

        $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_");

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0_2);

        r12 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>();

        $r7 = r0.<infoFlow.Z3ScriptHandler: java.util.Map arrayNameMap>;

        $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0_2);

        interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r8);

        return r12;
    }

    private com.microsoft.z3.BoolExpr convertAssignStmt(com.microsoft.z3.Expr, com.microsoft.z3.Expr, soot.Type, soot.Value, int)
    {
        infoFlow.Z3ScriptHandler r0;
        com.microsoft.z3.Expr r1, r2, r6, r7;
        soot.Type r3;
        soot.Value r4;
        int i0;
        java.lang.String r5, r28;
        infoFlow.NewSort r8;
        com.microsoft.z3.BoolExpr r9, r27;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6;
        java.util.Map $r10, $r14, $r15, $r16;
        java.lang.Object $r11, $r17;
        com.microsoft.z3.InterpolationContext $r12, $r18, $r21, $r23, $r26;
        com.microsoft.z3.Sort $r13;
        com.microsoft.z3.ArrayExpr $r19, $r22, r29, r29_1, r29_2;
        com.microsoft.z3.IntExpr $r20;
        java.lang.RuntimeException $r24, $r25;

        r0 := @this: infoFlow.Z3ScriptHandler;

        r1 := @parameter0: com.microsoft.z3.Expr;

        r2 := @parameter1: com.microsoft.z3.Expr;

        r3 := @parameter2: soot.Type;

        r4 := @parameter3: soot.Value;

        i0 := @parameter4: int;

        $z0 = r3 instanceof soot.PrimType;

        if $z0 == 0 goto label1;

        $z6 = r4 instanceof soot.Local;

        if $z6 == 0 goto label1;

        $r26 = r0.<infoFlow.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        r27 = virtualinvoke $r26.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.BoolExpr mkEq(com.microsoft.z3.Expr,com.microsoft.z3.Expr)>(r2, r1);

        return r27;

     label1:
        $z1 = r3 instanceof soot.ArrayType;

        if $z1 == 0 goto label2;

        $z5 = r4 instanceof soot.Local;

        if $z5 == 0 goto label2;

        $r25 = new java.lang.RuntimeException;

        specialinvoke $r25.<java.lang.RuntimeException: void <init>()>();

        throw $r25;

     label2:
        $z2 = r4 instanceof soot.jimple.ArrayRef;

        if $z2 == 0 goto label3;

        $r24 = new java.lang.RuntimeException;

        specialinvoke $r24.<java.lang.RuntimeException: void <init>()>();

        throw $r24;

     label3:
        r28 = specialinvoke r0.<infoFlow.Z3ScriptHandler: java.lang.String getArrayName(soot.Value)>(r4);

        r5 = specialinvoke r0.<infoFlow.Z3ScriptHandler: java.lang.String getGlobalName(java.lang.String)>(r28);

        $r10 = r0.<infoFlow.Z3ScriptHandler: java.util.Map global>;

        $r11 = interfaceinvoke $r10.<java.util.Map: java.lang.Object get(java.lang.Object)>(r28);

        r6 = (com.microsoft.z3.Expr) $r11;

        $r12 = r0.<infoFlow.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        $r13 = virtualinvoke r6.<com.microsoft.z3.Expr: com.microsoft.z3.Sort getSort()>();

        r7 = virtualinvoke $r12.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.Expr mkConst(java.lang.String,com.microsoft.z3.Sort)>(r5, $r13);

        $r14 = r0.<infoFlow.Z3ScriptHandler: java.util.Map substitute>;

        interfaceinvoke $r14.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r5, r28);

        $r15 = r0.<infoFlow.Z3ScriptHandler: java.util.Map global>;

        interfaceinvoke $r15.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r28, r7);

        $r16 = r0.<infoFlow.Z3ScriptHandler: java.util.Map sortId>;

        $r17 = interfaceinvoke $r16.<java.util.Map: java.lang.Object get(java.lang.Object)>(r28);

        r8 = (infoFlow.NewSort) $r17;

        $z3 = r4 instanceof soot.jimple.FieldRef;

        if $z3 == 0 goto label4;

        $z4 = r4 instanceof soot.jimple.StaticFieldRef;

        if $z4 != 0 goto label4;

        $r23 = r0.<infoFlow.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        $r22 = (com.microsoft.z3.ArrayExpr) r6;

        r29 = virtualinvoke $r23.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.ArrayExpr mkStore(com.microsoft.z3.ArrayExpr,com.microsoft.z3.Expr,com.microsoft.z3.Expr)>($r22, r2, r1);

(0)     goto label5;

     label4:
        $r18 = r0.<infoFlow.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        $r19 = (com.microsoft.z3.ArrayExpr) r6;

        $r20 = virtualinvoke r8.<infoFlow.NewSort: com.microsoft.z3.IntExpr getId(com.microsoft.z3.Expr)>(r2);

(1)     r29_1 = virtualinvoke $r18.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.ArrayExpr mkStore(com.microsoft.z3.ArrayExpr,com.microsoft.z3.Expr,com.microsoft.z3.Expr)>($r19, $r20, r1);

     label5:
        r29_2 = Phi(r29 #0, r29_1 #1);

        $r21 = r0.<infoFlow.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        r9 = virtualinvoke $r21.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.BoolExpr mkEq(com.microsoft.z3.Expr,com.microsoft.z3.Expr)>(r7, r29_2);

        return r9;
    }

    private com.microsoft.z3.Expr convertAnyNewExpr(soot.jimple.AnyNewExpr, infoFlow.Edge)
    {
        infoFlow.Z3ScriptHandler r0;
        soot.jimple.AnyNewExpr r1;
        infoFlow.Edge r2;
        boolean $z0, $z1, $z2;
        soot.jimple.NewMultiArrayExpr $r3;
        com.microsoft.z3.Expr $r4, $r6, $r8;
        soot.jimple.NewArrayExpr $r5;
        soot.jimple.NewExpr $r7;

        r0 := @this: infoFlow.Z3ScriptHandler;

        r1 := @parameter0: soot.jimple.AnyNewExpr;

        r2 := @parameter1: infoFlow.Edge;

        $z0 = r1 instanceof soot.jimple.NewExpr;

        if $z0 == 0 goto label1;

        $r7 = (soot.jimple.NewExpr) r1;

        $r8 = specialinvoke r0.<infoFlow.Z3ScriptHandler: com.microsoft.z3.Expr convertNewExpr(soot.jimple.NewExpr,infoFlow.Edge)>($r7, r2);

        return $r8;

     label1:
        $z1 = r1 instanceof soot.jimple.NewArrayExpr;

        if $z1 == 0 goto label2;

        $r5 = (soot.jimple.NewArrayExpr) r1;

        $r6 = specialinvoke r0.<infoFlow.Z3ScriptHandler: com.microsoft.z3.Expr convertNewArrayExpr(soot.jimple.NewArrayExpr,infoFlow.Edge)>($r5, r2);

        return $r6;

     label2:
        $z2 = r1 instanceof soot.jimple.NewMultiArrayExpr;

        if $z2 == 0 goto label3;

        $r3 = (soot.jimple.NewMultiArrayExpr) r1;

        $r4 = specialinvoke r0.<infoFlow.Z3ScriptHandler: com.microsoft.z3.Expr convertNewMultiArrayExpr(soot.jimple.NewMultiArrayExpr,infoFlow.Edge)>($r3, r2);

        return $r4;

     label3:
        return null;
    }

    private com.microsoft.z3.Expr convertNewExpr(soot.jimple.NewExpr, infoFlow.Edge)
    {
        infoFlow.Z3ScriptHandler r0;
        soot.jimple.NewExpr r1;
        infoFlow.Edge r2;
        soot.Type r3;
        java.lang.String r4;
        infoFlow.NewSort r5;
        java.util.Map $r6, $r8;
        boolean $z0;
        java.lang.RuntimeException $r7;
        java.lang.Object $r9;
        com.microsoft.z3.Expr $r10;

        r0 := @this: infoFlow.Z3ScriptHandler;

        r1 := @parameter0: soot.jimple.NewExpr;

        r2 := @parameter1: infoFlow.Edge;

        r3 = interfaceinvoke r1.<soot.jimple.NewExpr: soot.Type getType()>();

        r4 = virtualinvoke r3.<soot.Type: java.lang.String toString()>();

        $r6 = r0.<infoFlow.Z3ScriptHandler: java.util.Map sortId>;

        $z0 = interfaceinvoke $r6.<java.util.Map: boolean containsKey(java.lang.Object)>(r4);

        if $z0 == 0 goto label1;

        $r8 = r0.<infoFlow.Z3ScriptHandler: java.util.Map sortId>;

        $r9 = interfaceinvoke $r8.<java.util.Map: java.lang.Object get(java.lang.Object)>(r4);

        r5 = (infoFlow.NewSort) $r9;

        $r10 = virtualinvoke r5.<infoFlow.NewSort: com.microsoft.z3.Expr getNewObject()>();

        return $r10;

     label1:
        $r7 = new java.lang.RuntimeException;

        specialinvoke $r7.<java.lang.RuntimeException: void <init>()>();

        throw $r7;
    }

    private com.microsoft.z3.Expr convertNewArrayExpr(soot.jimple.NewArrayExpr, infoFlow.Edge)
    {
        infoFlow.Z3ScriptHandler r0;
        soot.jimple.NewArrayExpr r1;
        infoFlow.Edge r2;
        java.lang.RuntimeException $r3;

        r0 := @this: infoFlow.Z3ScriptHandler;

        r1 := @parameter0: soot.jimple.NewArrayExpr;

        r2 := @parameter1: infoFlow.Edge;

        $r3 = new java.lang.RuntimeException;

        specialinvoke $r3.<java.lang.RuntimeException: void <init>()>();

        throw $r3;
    }

    private com.microsoft.z3.Expr convertNewMultiArrayExpr(soot.jimple.NewMultiArrayExpr, infoFlow.Edge)
    {
        infoFlow.Z3ScriptHandler r0;
        soot.jimple.NewMultiArrayExpr r1;
        infoFlow.Edge r2;
        java.lang.RuntimeException $r3;

        r0 := @this: infoFlow.Z3ScriptHandler;

        r1 := @parameter0: soot.jimple.NewMultiArrayExpr;

        r2 := @parameter1: infoFlow.Edge;

        $r3 = new java.lang.RuntimeException;

        specialinvoke $r3.<java.lang.RuntimeException: void <init>()>();

        throw $r3;
    }

    private java.lang.String getArrayName(soot.Value)
    {
        infoFlow.Z3ScriptHandler r0;
        soot.Value r1;
        soot.Type r2;
        boolean $z0;
        java.lang.RuntimeException $r3;
        java.lang.String $r4;

        r0 := @this: infoFlow.Z3ScriptHandler;

        r1 := @parameter0: soot.Value;

        r2 = interfaceinvoke r1.<soot.Value: soot.Type getType()>();

        $z0 = r1 instanceof soot.Local;

        if $z0 == 0 goto label1;

        $r4 = virtualinvoke r2.<soot.Type: java.lang.String toString()>();

        return $r4;

     label1:
        $r3 = new java.lang.RuntimeException;

        specialinvoke $r3.<java.lang.RuntimeException: void <init>()>();

        throw $r3;
    }

    private java.lang.String getNameSuffix(infoFlow.Edge)
    {
        infoFlow.Z3ScriptHandler r0;
        infoFlow.Edge r1;
        java.lang.StringBuilder $r2, $r5;
        infoFlow.ProgramTree $r3;
        java.lang.String $r4, $r6;

        r0 := @this: infoFlow.Z3ScriptHandler;

        r1 := @parameter0: infoFlow.Edge;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>("_");

        $r3 = virtualinvoke r1.<infoFlow.Edge: infoFlow.ProgramTree getProgramTree()>();

        $r4 = virtualinvoke $r3.<infoFlow.ProgramTree: java.lang.String getProgramDefinition()>();

        $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4);

        $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r6;
    }

    private com.microsoft.z3.Expr convertBoolExpr(soot.jimple.BinopExpr, infoFlow.Edge, int)
    {
        infoFlow.Z3ScriptHandler r0;
        soot.jimple.BinopExpr r1;
        infoFlow.Edge r2;
        int i0, $i1, $i2, $i3, $i4;
        com.microsoft.z3.BoolExpr r3, $r8, $r12;
        boolean $z0, $z1;
        infoFlow.Vertex $r4, $r5, $r9, $r10;
        com.microsoft.z3.InterpolationContext $r6, $r7, $r11;
        soot.jimple.EqExpr r13;
        soot.Value r14, r15, r19, r20;
        com.microsoft.z3.Expr r16, r17, r21, r22;
        soot.jimple.NeExpr r18;

        r0 := @this: infoFlow.Z3ScriptHandler;

        r1 := @parameter0: soot.jimple.BinopExpr;

        r2 := @parameter1: infoFlow.Edge;

        i0 := @parameter2: int;

        $z0 = r1 instanceof soot.jimple.EqExpr;

        if $z0 == 0 goto label1;

        r13 = (soot.jimple.EqExpr) r1;

        r14 = interfaceinvoke r13.<soot.jimple.EqExpr: soot.Value getOp1()>();

        r15 = interfaceinvoke r13.<soot.jimple.EqExpr: soot.Value getOp2()>();

        $r9 = virtualinvoke r2.<infoFlow.Edge: infoFlow.Vertex getSource()>();

        $i3 = virtualinvoke $r9.<infoFlow.Vertex: int getDistance()>();

        r16 = specialinvoke r0.<infoFlow.Z3ScriptHandler: com.microsoft.z3.Expr convertValue(soot.Value,boolean,infoFlow.Edge,int)>(r14, 0, r2, $i3);

        $r10 = virtualinvoke r2.<infoFlow.Edge: infoFlow.Vertex getSource()>();

        $i4 = virtualinvoke $r10.<infoFlow.Vertex: int getDistance()>();

        r17 = specialinvoke r0.<infoFlow.Z3ScriptHandler: com.microsoft.z3.Expr convertValue(soot.Value,boolean,infoFlow.Edge,int)>(r15, 0, r2, $i4);

        $r11 = r0.<infoFlow.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        $r12 = virtualinvoke $r11.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.BoolExpr mkEq(com.microsoft.z3.Expr,com.microsoft.z3.Expr)>(r16, r17);

        return $r12;

     label1:
        $z1 = r1 instanceof soot.jimple.NeExpr;

        if $z1 == 0 goto label2;

        r18 = (soot.jimple.NeExpr) r1;

        r19 = interfaceinvoke r18.<soot.jimple.NeExpr: soot.Value getOp1()>();

        r20 = interfaceinvoke r18.<soot.jimple.NeExpr: soot.Value getOp2()>();

        $r4 = virtualinvoke r2.<infoFlow.Edge: infoFlow.Vertex getSource()>();

        $i1 = virtualinvoke $r4.<infoFlow.Vertex: int getDistance()>();

        r21 = specialinvoke r0.<infoFlow.Z3ScriptHandler: com.microsoft.z3.Expr convertValue(soot.Value,boolean,infoFlow.Edge,int)>(r19, 0, r2, $i1);

        $r5 = virtualinvoke r2.<infoFlow.Edge: infoFlow.Vertex getSource()>();

        $i2 = virtualinvoke $r5.<infoFlow.Vertex: int getDistance()>();

        r22 = specialinvoke r0.<infoFlow.Z3ScriptHandler: com.microsoft.z3.Expr convertValue(soot.Value,boolean,infoFlow.Edge,int)>(r20, 0, r2, $i2);

        $r6 = r0.<infoFlow.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        r3 = virtualinvoke $r6.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.BoolExpr mkEq(com.microsoft.z3.Expr,com.microsoft.z3.Expr)>(r21, r22);

        $r7 = r0.<infoFlow.Z3ScriptHandler: com.microsoft.z3.InterpolationContext ictx>;

        $r8 = virtualinvoke $r7.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.BoolExpr mkNot(com.microsoft.z3.BoolExpr)>(r3);

        return $r8;

     label2:
        return null;
    }
}
