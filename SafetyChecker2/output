[H[JStarting...>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
>>> clean .dot and .ps files
>>> Compiling
>>> Executing
Soot started on Thu Jun 30 02:45:33 EDT 2016
Warning: soot.toolkits.graph.ExceptionalUnitGraph is a phantom class!
Warning: com.microsoft.z3.BoolExpr is a phantom class!
Warning: soot.Unit is a phantom class!
Warning: com.microsoft.z3.Expr is a phantom class!
Warning: com.microsoft.z3.InterpolationContext is a phantom class!
Warning: com.microsoft.z3.Solver is a phantom class!
Warning: com.microsoft.z3.Status is a phantom class!
Warning: com.microsoft.z3.IntSort is a phantom class!
Warning: com.microsoft.z3.enumerations.Z3_lbool is a phantom class!
Warning: com.microsoft.z3.Sort is a phantom class!
Warning: com.microsoft.z3.Params is a phantom class!
Warning: com.microsoft.z3.InterpolationContext$ComputeInterpolantResult is a phantom class!
Warning: soot.Value is a phantom class!
Warning: soot.Local is a phantom class!
Warning: soot.Type is a phantom class!
Warning: soot.jimple.AnyNewExpr is a phantom class!
Warning: soot.jimple.NewExpr is a phantom class!
Warning: soot.jimple.NewArrayExpr is a phantom class!
Warning: soot.jimple.NewMultiArrayExpr is a phantom class!
Warning: soot.jimple.BinopExpr is a phantom class!
Warning: soot.jimple.InstanceFieldRef is a phantom class!
Warning: com.microsoft.z3.IntExpr is a phantom class!
Warning: com.microsoft.z3.IntNum is a phantom class!
Warning: soot.Body is a phantom class!
Warning: soot.SootMethod is a phantom class!
Warning: soot.jimple.internal.JAssignStmt is a phantom class!
Warning: soot.jimple.InvokeStmt is a phantom class!
Warning: soot.jimple.IfStmt is a phantom class!
Warning: soot.jimple.AssignStmt is a phantom class!
Warning: soot.jimple.InvokeExpr is a phantom class!
Warning: soot.jimple.ArrayRef is a phantom class!
Warning: com.microsoft.z3.ArrayExpr is a phantom class!
Warning: com.microsoft.z3.Symbol is a phantom class!
Warning: com.microsoft.z3.Quantifier is a phantom class!
Warning: com.microsoft.z3.ArithExpr is a phantom class!
Warning: soot.jimple.IntConstant is a phantom class!
Warning: com.microsoft.z3.ArraySort is a phantom class!
Warning: com.microsoft.z3.StringSymbol is a phantom class!
Warning: com.microsoft.z3.UninterpretedSort is a phantom class!
Warning: soot.jimple.NeExpr is a phantom class!
Warning: soot.RefType is a phantom class!
Warning: soot.jimple.NullConstant is a phantom class!
Warning: soot.jimple.FieldRef is a phantom class!
Warning: soot.jimple.CmpExpr is a phantom class!
Warning: soot.jimple.Constant is a phantom class!
Warning: soot.jimple.LongConstant is a phantom class!
Warning: soot.jimple.GeExpr is a phantom class!
Warning: soot.jimple.MulExpr is a phantom class!
Warning: soot.jimple.internal.JNewExpr is a phantom class!
Warning: soot.jimple.LtExpr is a phantom class!
Warning: soot.jimple.DivExpr is a phantom class!
Warning: soot.jimple.GotoStmt is a phantom class!
Warning: soot.jimple.EqExpr is a phantom class!
Warning: soot.jimple.SubExpr is a phantom class!
Warning: soot.jimple.VirtualInvokeExpr is a phantom class!
Warning: soot.shimple.PhiExpr is a phantom class!
Warning: soot.jimple.LeExpr is a phantom class!
Warning: soot.jimple.CastExpr is a phantom class!
Warning: soot.toolkits.scalar.ValueUnitPair is a phantom class!
Warning: soot.SootField is a phantom class!
Warning: soot.jimple.internal.JimpleLocal is a phantom class!
Warning: soot.LongType is a phantom class!
Warning: soot.jimple.IdentityStmt is a phantom class!
Warning: soot.RefLikeType is a phantom class!
Warning: soot.ArrayType is a phantom class!
Warning: soot.IntegerType is a phantom class!
Warning: soot.jimple.StaticFieldRef is a phantom class!
Warning: soot.jimple.Stmt is a phantom class!
Warning: soot.VoidType is a phantom class!
Warning: soot.PrimType is a phantom class!
Warning: soot.jimple.StringConstant is a phantom class!
Warning: soot.jimple.AddExpr is a phantom class!
Warning: soot.jimple.GtExpr is a phantom class!
Warning: soot.BodyTransformer is a phantom class!
Warning: soot.Transform is a phantom class!
Warning: soot.PackManager is a phantom class!
Warning: soot.Pack is a phantom class!
Warning: soot.options.Options is a phantom class!
Warning: soot.Main is a phantom class!
Warning: soot.Transformer is a phantom class!
Transforming dotty.CfgConverter... 
<dotty.CfgConverter: void <init>()>
<dotty.CfgConverter: java.io.BufferedWriter getBufferedWriter(java.lang.String)>
<dotty.CfgConverter: void printErrorPaths(java.util.Queue,java.lang.String,safetyChecker.CoverRelation)>
<dotty.CfgConverter: void printAllPaths(java.util.Queue,java.lang.String)>
<dotty.CfgConverter: void printAllPaths2(soot.toolkits.graph.ExceptionalUnitGraph)>
<dotty.CfgConverter: void printSinglePath(safetyChecker.Vertex,java.io.BufferedWriter)>
<dotty.CfgConverter: void printCfg(soot.toolkits.graph.ExceptionalUnitGraph)>
Transforming RecordPeekMemoryAndTime.testDriver... 
<RecordPeekMemoryAndTime.testDriver: void <init>()>
<RecordPeekMemoryAndTime.testDriver: void main(java.lang.String[])>
Transforming safetyChecker.CoverRelation... 
<safetyChecker.CoverRelation: void <init>(com.microsoft.z3.InterpolationContext,safetyChecker.ProgramTree)>
<safetyChecker.CoverRelation: void updateUnitVertexMap(safetyChecker.Vertex)>
<safetyChecker.CoverRelation: void updateCover()>
<safetyChecker.CoverRelation: void cover()>
<safetyChecker.CoverRelation: safetyChecker.Vertex findPrevControlLocation(safetyChecker.Vertex)>
<safetyChecker.CoverRelation: boolean checkCoveredBy(safetyChecker.Vertex,safetyChecker.Vertex)>
<safetyChecker.CoverRelation: boolean isWeakerThan(com.microsoft.z3.BoolExpr,com.microsoft.z3.BoolExpr)>
<safetyChecker.CoverRelation: boolean isStrongerThan(com.microsoft.z3.BoolExpr,com.microsoft.z3.BoolExpr)>
<safetyChecker.CoverRelation: boolean isCovered(safetyChecker.Vertex)>
<safetyChecker.CoverRelation: boolean isDirectlyCovered(safetyChecker.Vertex)>
<safetyChecker.CoverRelation: boolean isAncestorCovered(safetyChecker.Vertex)>
<safetyChecker.CoverRelation: void addCoverRelation(safetyChecker.Vertex,safetyChecker.Vertex)>
<safetyChecker.CoverRelation: void checkHoldsAndClearCoverRelation(safetyChecker.Vertex)>
<safetyChecker.CoverRelation: void clearCoverRelation(safetyChecker.Vertex)>
<safetyChecker.CoverRelation: void uncoverDescendants(safetyChecker.Vertex)>
<safetyChecker.CoverRelation: void add2UncoveredMap(safetyChecker.Vertex)>
<safetyChecker.CoverRelation: void coverDescendants(safetyChecker.Vertex)>
<safetyChecker.CoverRelation: java.util.Map getCoveringMap()>
<safetyChecker.CoverRelation: java.util.Map getCoveredByMap()>
<safetyChecker.CoverRelation: java.util.Map getUnitVertexMap()>
Transforming safetyChecker.Edge... 
<safetyChecker.Edge: void <init>(soot.Unit)>
<safetyChecker.Edge: soot.Unit getUnit()>
<safetyChecker.Edge: void setUnit(soot.Unit)>
<safetyChecker.Edge: safetyChecker.Vertex getSource()>
<safetyChecker.Edge: void setSource(safetyChecker.Vertex)>
<safetyChecker.Edge: safetyChecker.Vertex getTarget()>
<safetyChecker.Edge: void setTarget(safetyChecker.Vertex)>
<safetyChecker.Edge: boolean isReturnEdge()>
<safetyChecker.Edge: void setReturnEdge(boolean)>
<safetyChecker.Edge: boolean isErrorEdge()>
<safetyChecker.Edge: void setErrorEdge(boolean)>
<safetyChecker.Edge: boolean isSubFunction()>
<safetyChecker.Edge: void setSubFunction(boolean)>
<safetyChecker.Edge: boolean isSinkEdge()>
<safetyChecker.Edge: void setSinkEdge(boolean)>
<safetyChecker.Edge: boolean isSourceEdge()>
<safetyChecker.Edge: void setSourceEdge(boolean)>
<safetyChecker.Edge: boolean isNewEdge()>
<safetyChecker.Edge: void setNewEdge(boolean)>
<safetyChecker.Edge: boolean isObjectEdge()>
<safetyChecker.Edge: void setObjectEdge(boolean)>
<safetyChecker.Edge: boolean isArrayCopyEdge()>
<safetyChecker.Edge: void setArrayCopyEdge(boolean)>
<safetyChecker.Edge: boolean isControlLocation()>
<safetyChecker.Edge: void setControlLocation(boolean)>
<safetyChecker.Edge: safetyChecker.ProgramTree getProgramTree()>
<safetyChecker.Edge: void setProgramTree(safetyChecker.ProgramTree)>
<safetyChecker.Edge: boolean isInErrorPath()>
<safetyChecker.Edge: void setInErrorPath(boolean)>
<safetyChecker.Edge: boolean isEntryLocation()>
<safetyChecker.Edge: void setEntryLocation(boolean)>
<safetyChecker.Edge: boolean isInitInvoke()>
<safetyChecker.Edge: void setInitInvoke(boolean)>
<safetyChecker.Edge: com.microsoft.z3.BoolExpr getZ3Expr()>
<safetyChecker.Edge: void setZ3Expr(com.microsoft.z3.BoolExpr)>
<safetyChecker.Edge: java.util.List getParameterList()>
<safetyChecker.Edge: void addParameter(com.microsoft.z3.Expr)>
<safetyChecker.Edge: void cleanParameterList()>
<safetyChecker.Edge: java.lang.String toString()>
Transforming safetyChecker.ErrorLable... 
<safetyChecker.ErrorLable: void <init>()>
<safetyChecker.ErrorLable: void Error()>
Transforming safetyChecker.exception.CreateZ3ScriptFailedException... 
<safetyChecker.exception.CreateZ3ScriptFailedException: void <init>(java.lang.String)>
<safetyChecker.exception.CreateZ3ScriptFailedException: java.lang.String getMessage()>
Transforming safetyChecker.exception.ErrorLocationNotFoundException... 
<safetyChecker.exception.ErrorLocationNotFoundException: void <init>(java.lang.String)>
<safetyChecker.exception.ErrorLocationNotFoundException: java.lang.String getMessage()>
Transforming safetyChecker.exception.MainFunctionNotFoundException... 
<safetyChecker.exception.MainFunctionNotFoundException: void <init>(java.lang.String)>
<safetyChecker.exception.MainFunctionNotFoundException: java.lang.String getMessage()>
Transforming safetyChecker.InterpolationHandler... 
<safetyChecker.InterpolationHandler: void <init>(com.microsoft.z3.InterpolationContext,safetyChecker.Z3ScriptHandler,safetyChecker.CoverRelation)>
<safetyChecker.InterpolationHandler: boolean createInterpolant(safetyChecker.Vertex)>
<safetyChecker.InterpolationHandler: void updateInvariant(safetyChecker.Vertex,com.microsoft.z3.BoolExpr[],boolean)>
<safetyChecker.InterpolationHandler: void generateNameMapping()>
<safetyChecker.InterpolationHandler: com.microsoft.z3.BoolExpr getTrueInvariant()>
<safetyChecker.InterpolationHandler: com.microsoft.z3.BoolExpr getFalseInvariant()>
Transforming safetyChecker.LogUtils... 
<safetyChecker.LogUtils: void <clinit>()>
<safetyChecker.LogUtils: void <init>()>
<safetyChecker.LogUtils: java.lang.String getOutputColor(int)>
<safetyChecker.LogUtils: void print(int,java.lang.Object[])>
<safetyChecker.LogUtils: void println(int,java.lang.Object[])>
<safetyChecker.LogUtils: void debug(java.lang.Object[])>
<safetyChecker.LogUtils: void debugln(java.lang.Object[])>
<safetyChecker.LogUtils: void info(java.lang.Object[])>
<safetyChecker.LogUtils: void infoln(java.lang.Object[])>
<safetyChecker.LogUtils: void fatal(java.lang.Object[])>
<safetyChecker.LogUtils: void fatalln(java.lang.Object[])>
<safetyChecker.LogUtils: void detail(java.lang.Object[])>
<safetyChecker.LogUtils: void detailln(java.lang.Object[])>
<safetyChecker.LogUtils: void warning(java.lang.Object[])>
<safetyChecker.LogUtils: void warningln(java.lang.Object[])>
<safetyChecker.LogUtils: void nextLine(int)>
<safetyChecker.LogUtils: void printResult(java.lang.String,boolean)>
Transforming safetyChecker.NewSort... 
<safetyChecker.NewSort: void <init>(com.microsoft.z3.Sort,com.microsoft.z3.InterpolationContext)>
<safetyChecker.NewSort: void creatNewOject(com.microsoft.z3.Expr)>
<safetyChecker.NewSort: com.microsoft.z3.IntExpr getId(com.microsoft.z3.Expr)>
<safetyChecker.NewSort: boolean ifHasExpr(com.microsoft.z3.Expr)>
<safetyChecker.NewSort: com.microsoft.z3.Expr getNewObject()>
Transforming safetyChecker.ProgramTree... 
<safetyChecker.ProgramTree: void <clinit>()>
<safetyChecker.ProgramTree: void <init>(java.util.Map,java.lang.String,boolean)>
<safetyChecker.ProgramTree: void startTest()>
<safetyChecker.ProgramTree: boolean findErrorLocation(safetyChecker.Vertex)>
<safetyChecker.ProgramTree: boolean findMainFunction()>
<safetyChecker.ProgramTree: boolean getNewReturnPath()>
<safetyChecker.ProgramTree: safetyChecker.Vertex getNewReturnRoot()>
<safetyChecker.ProgramTree: boolean isTreeDone()>
<safetyChecker.ProgramTree: void unwind()>
<safetyChecker.ProgramTree: boolean expandBFS(safetyChecker.Vertex)>
<safetyChecker.ProgramTree: boolean isConnectionCovered(safetyChecker.Vertex)>
<safetyChecker.ProgramTree: void addErrorEntryLocation(safetyChecker.Vertex)>
<safetyChecker.ProgramTree: safetyChecker.Vertex addVertex(safetyChecker.Vertex,safetyChecker.Edge,boolean)>
<safetyChecker.ProgramTree: void refine(safetyChecker.Vertex)>
<safetyChecker.ProgramTree: java.lang.String getProgramDefinition()>
<safetyChecker.ProgramTree: java.lang.String getFunctionName()>
<safetyChecker.ProgramTree: void printResult(java.lang.String)>
<safetyChecker.ProgramTree: java.util.Queue getUncovered()>
<safetyChecker.ProgramTree: soot.toolkits.graph.ExceptionalUnitGraph getCfg()>
Transforming safetyChecker.SafetyInitializerW... 
<safetyChecker.SafetyInitializerW: void <init>()>
<safetyChecker.SafetyInitializerW: void main(java.lang.String[])>
Transforming safetyChecker.UnitController... 
<safetyChecker.UnitController: void <clinit>()>
<safetyChecker.UnitController: void <init>()>
<safetyChecker.UnitController: void analyzeEdge(safetyChecker.Edge,java.util.Map,soot.toolkits.graph.ExceptionalUnitGraph)>
<safetyChecker.UnitController: boolean isArrayCopyInvoke(soot.Unit)>
<safetyChecker.UnitController: boolean isSourceInvoke(soot.Unit)>
<safetyChecker.UnitController: boolean isSinkInvoke(soot.Unit)>
<safetyChecker.UnitController: boolean isSubFunctionUnit(soot.Unit,java.util.Map,safetyChecker.Edge)>
<safetyChecker.UnitController: boolean isErrorUnit(soot.Unit)>
<safetyChecker.UnitController: boolean isObjectInvoke(soot.Unit)>
<safetyChecker.UnitController: boolean isNewInvoke(soot.Unit)>
<safetyChecker.UnitController: boolean isNonSenseCompare(soot.Unit)>
<safetyChecker.UnitController: boolean isCalleeFunction(soot.Unit)>
<safetyChecker.UnitController: boolean isInitInvoke(soot.Unit)>
<safetyChecker.UnitController: boolean isInvoke(soot.Unit)>
<safetyChecker.UnitController: java.lang.String getMethodSignature(soot.Unit)>
<safetyChecker.UnitController: boolean isArraysEqualsInvoke(soot.Value)>
<safetyChecker.UnitController: boolean isControlLocation(soot.Unit)>
<safetyChecker.UnitController: boolean isEntryLocation(soot.Unit,soot.toolkits.graph.ExceptionalUnitGraph)>
Transforming safetyChecker.Vertex... 
<safetyChecker.Vertex: void <init>()>
<safetyChecker.Vertex: boolean isReturnLocation()>
<safetyChecker.Vertex: void setReturnLocation(boolean)>
<safetyChecker.Vertex: boolean isEntryLocation()>
<safetyChecker.Vertex: void setEntryLocation(boolean)>
<safetyChecker.Vertex: boolean isErrorLocation()>
<safetyChecker.Vertex: void setErrorLocation(boolean)>
<safetyChecker.Vertex: boolean isSubFunction()>
<safetyChecker.Vertex: void setSubFunction(boolean)>
<safetyChecker.Vertex: boolean isSinkLocation()>
<safetyChecker.Vertex: void setSinkLocation(boolean)>
<safetyChecker.Vertex: boolean isSourceLocation()>
<safetyChecker.Vertex: void setSourceLocation(boolean)>
<safetyChecker.Vertex: boolean isInErrorPath()>
<safetyChecker.Vertex: void setInErrorPath(boolean)>
<safetyChecker.Vertex: boolean isVertexDone()>
<safetyChecker.Vertex: void setVertexDone(boolean)>
<safetyChecker.Vertex: safetyChecker.Edge getOutgoingEdge()>
<safetyChecker.Vertex: void setOutgoingEdge(safetyChecker.Edge)>
<safetyChecker.Vertex: java.util.Set getIncomingEdges()>
<safetyChecker.Vertex: void addIncomingEdge(safetyChecker.Edge)>
<safetyChecker.Vertex: safetyChecker.Vertex getNextVertex()>
<safetyChecker.Vertex: void setNextVertex(safetyChecker.Vertex)>
<safetyChecker.Vertex: java.util.Set getPreviousVertexSet()>
<safetyChecker.Vertex: void addPreviousVertex(safetyChecker.Vertex)>
<safetyChecker.Vertex: boolean isSigh()>
<safetyChecker.Vertex: void setSight(boolean)>
<safetyChecker.Vertex: int getDistance()>
<safetyChecker.Vertex: void setDistance(int)>
<safetyChecker.Vertex: int getLocationNumber()>
<safetyChecker.Vertex: void setLocationNumber(int)>
<safetyChecker.Vertex: com.microsoft.z3.BoolExpr getInvariant()>
<safetyChecker.Vertex: void setInvariant(com.microsoft.z3.BoolExpr)>
<safetyChecker.Vertex: java.lang.String toString()>
Transforming safetyChecker.Z3ArrayHandler... 
<safetyChecker.Z3ArrayHandler: void <init>()>
<safetyChecker.Z3ArrayHandler: com.microsoft.z3.Expr z3Local(soot.Local,boolean,int,safetyChecker.Z3ScriptHandler)>
<safetyChecker.Z3ArrayHandler: com.microsoft.z3.BoolExpr newArrayExpr(com.microsoft.z3.Expr,soot.Type,safetyChecker.Z3ScriptHandler)>
<safetyChecker.Z3ArrayHandler: com.microsoft.z3.Expr z3ArrayRef(soot.jimple.ArrayRef,safetyChecker.Z3ScriptHandler,safetyChecker.Edge)>
<safetyChecker.Z3ArrayHandler: com.microsoft.z3.BoolExpr updateDefaultValue(soot.Value,int,safetyChecker.Z3ScriptHandler,safetyChecker.Edge)>
<safetyChecker.Z3ArrayHandler: com.microsoft.z3.Expr z3ArrayRef(soot.Value,safetyChecker.Z3ScriptHandler,safetyChecker.Edge,int)>
<safetyChecker.Z3ArrayHandler: com.microsoft.z3.BoolExpr updateArrayRef(soot.Value,safetyChecker.Z3ScriptHandler,com.microsoft.z3.Expr,safetyChecker.Edge,int)>
<safetyChecker.Z3ArrayHandler: com.microsoft.z3.BoolExpr updateArrayRef(soot.jimple.ArrayRef,safetyChecker.Z3ScriptHandler,com.microsoft.z3.Expr,safetyChecker.Edge)>
<safetyChecker.Z3ArrayHandler: com.microsoft.z3.BoolExpr z3ArrayCopy(safetyChecker.Edge,safetyChecker.Z3ScriptHandler)>
<safetyChecker.Z3ArrayHandler: com.microsoft.z3.Expr z3ArraysEqual(soot.Value,safetyChecker.Z3ScriptHandler,safetyChecker.Edge)>
<safetyChecker.Z3ArrayHandler: com.microsoft.z3.ArrayExpr getRealArray(soot.Local,safetyChecker.Edge,safetyChecker.Z3ScriptHandler)>
<safetyChecker.Z3ArrayHandler: java.lang.String getArrayPrefix()>
<safetyChecker.Z3ArrayHandler: void forAllTest(com.microsoft.z3.InterpolationContext,com.microsoft.z3.ArrayExpr,com.microsoft.z3.ArrayExpr)>
Transforming safetyChecker.Z3ObjectFieldHandler... 
<safetyChecker.Z3ObjectFieldHandler: void <init>()>
<safetyChecker.Z3ObjectFieldHandler: com.microsoft.z3.Expr handleStaticFieldRef(soot.Local,boolean,safetyChecker.Z3ScriptHandler)>
Transforming safetyChecker.Z3ScriptHandler... 
<safetyChecker.Z3ScriptHandler: void <init>(com.microsoft.z3.InterpolationContext)>
<safetyChecker.Z3ScriptHandler: void convertPathtoZ3Script(safetyChecker.Vertex)>
<safetyChecker.Z3ScriptHandler: boolean createZ3Script(safetyChecker.Edge)>
<safetyChecker.Z3ScriptHandler: boolean convertNotSubFuntionInvoke(safetyChecker.Edge)>
<safetyChecker.Z3ScriptHandler: boolean convertArrayCopy(safetyChecker.Edge)>
<safetyChecker.Z3ScriptHandler: boolean convertErrorEdge(safetyChecker.Edge)>
<safetyChecker.Z3ScriptHandler: boolean convertIfStmt(safetyChecker.Edge)>
<safetyChecker.Z3ScriptHandler: boolean convertIdentityStmt(safetyChecker.Edge)>
<safetyChecker.Z3ScriptHandler: boolean convertAssignStmtEdge(safetyChecker.Edge)>
<safetyChecker.Z3ScriptHandler: boolean convertGotoStmt(safetyChecker.Edge)>
<safetyChecker.Z3ScriptHandler: boolean convertSinkInvoke2Z3(safetyChecker.Edge)>
<safetyChecker.Z3ScriptHandler: com.microsoft.z3.Expr convertValue(soot.Value,boolean,safetyChecker.Edge,int)>
<safetyChecker.Z3ScriptHandler: com.microsoft.z3.Expr convertPrimitiveValue(soot.Value,boolean,safetyChecker.Edge,int)>
<safetyChecker.Z3ScriptHandler: com.microsoft.z3.Expr convertRefLikeValue(soot.Value,boolean,safetyChecker.Edge,int)>
<safetyChecker.Z3ScriptHandler: com.microsoft.z3.Expr createZ3Object(soot.Local,boolean,safetyChecker.Edge)>
<safetyChecker.Z3ScriptHandler: java.lang.String getGlobalName(java.lang.String)>
<safetyChecker.Z3ScriptHandler: com.microsoft.z3.BoolExpr convertAssignStmt(com.microsoft.z3.Expr,com.microsoft.z3.Expr,soot.Type,soot.Value,int)>
<safetyChecker.Z3ScriptHandler: com.microsoft.z3.Expr convertAnyNewExpr(soot.jimple.AnyNewExpr,safetyChecker.Edge)>
<safetyChecker.Z3ScriptHandler: com.microsoft.z3.Expr convertNewExpr(soot.jimple.NewExpr,safetyChecker.Edge)>
<safetyChecker.Z3ScriptHandler: com.microsoft.z3.Expr convertNewArrayExpr(soot.jimple.NewArrayExpr,safetyChecker.Edge)>
<safetyChecker.Z3ScriptHandler: com.microsoft.z3.Expr convertNewMultiArrayExpr(soot.jimple.NewMultiArrayExpr,safetyChecker.Edge)>
<safetyChecker.Z3ScriptHandler: java.lang.String getArrayName(soot.Value)>
<safetyChecker.Z3ScriptHandler: java.lang.String getNameSuffix(safetyChecker.Edge)>
<safetyChecker.Z3ScriptHandler: java.lang.String getNameSuffix()>
<safetyChecker.Z3ScriptHandler: java.lang.String getArrayNameSuffix()>
<safetyChecker.Z3ScriptHandler: java.lang.String getArraySortSuffix()>
<safetyChecker.Z3ScriptHandler: int getRealArraySize(java.lang.String)>
<safetyChecker.Z3ScriptHandler: com.microsoft.z3.Expr convertBoolExpr(soot.jimple.BinopExpr,safetyChecker.Edge,int)>
<safetyChecker.Z3ScriptHandler: com.microsoft.z3.Expr z3ObjectField(soot.jimple.InstanceFieldRef,boolean,safetyChecker.Edge)>
<safetyChecker.Z3ScriptHandler: com.microsoft.z3.InterpolationContext getIctx()>
<safetyChecker.Z3ScriptHandler: java.util.Map getGlobal()>
<safetyChecker.Z3ScriptHandler: java.util.Map getSubstitute()>
<safetyChecker.Z3ScriptHandler: java.util.Map getSubstituteSort()>
<safetyChecker.Z3ScriptHandler: java.util.Map getArrayNameMap()>
<safetyChecker.Z3ScriptHandler: java.util.Map getLocalMap()>
<safetyChecker.Z3ScriptHandler: java.util.Map getSortId()>
<safetyChecker.Z3ScriptHandler: java.util.Map getNewSortMap()>
<safetyChecker.Z3ScriptHandler: java.util.Map getMaxArraySize()>
Transforming safetyTestCode.arraytest.Test1... 
<safetyTestCode.arraytest.Test1: void <init>()>
<safetyTestCode.arraytest.Test1: void test4(int)>
<safetyTestCode.arraytest.Test1: void test(int)>
<safetyTestCode.arraytest.Test1: void test3(int)>
Transforming safetyTestCode.iftest.Test1... 
<safetyTestCode.iftest.Test1: void <init>()>
<safetyTestCode.iftest.Test1: void test()>
<safetyTestCode.iftest.Test1: int callee()>
Transforming safetyTestCode.iftest.Test2... 
<safetyTestCode.iftest.Test2: void <init>()>
<safetyTestCode.iftest.Test2: void test()>
Transforming safetyTestCode.iftest.Test3... 
<safetyTestCode.iftest.Test3: void <init>()>
<safetyTestCode.iftest.Test3: void test()>
Transforming safetyTestCode.iftest.Test4... 
<safetyTestCode.iftest.Test4: void <init>()>
<safetyTestCode.iftest.Test4: void test()>
Transforming safetyTestCode.leetCode.climbingStairs.Test1... 
<safetyTestCode.leetCode.climbingStairs.Test1: void <init>()>
<safetyTestCode.leetCode.climbingStairs.Test1: void main(java.lang.String[])>
<safetyTestCode.leetCode.climbingStairs.Test1: int climbStairs(int)>
Transforming safetyTestCode.leetCode.climbingStairs.Test2... 
<safetyTestCode.leetCode.climbingStairs.Test2: void <init>()>
<safetyTestCode.leetCode.climbingStairs.Test2: void main(java.lang.String[])>
<safetyTestCode.leetCode.climbingStairs.Test2: int climbStairs(int)>
Transforming safetyTestCode.object.Obj... 
<safetyTestCode.object.Obj: void <init>()>
Transforming safetyTestCode.object.Test1... 
<safetyTestCode.object.Test1: void <init>()>
<safetyTestCode.object.Test1: void test()>
<safetyTestCode.object.Test1: void main(java.lang.String[])>
Transforming safetyTestCode.whiletest.Test1... 
<safetyTestCode.whiletest.Test1: void <init>()>
<safetyTestCode.whiletest.Test1: void test()>
Transforming safetyTestCode.whiletest.Test2... 
<safetyTestCode.whiletest.Test2: void <init>()>
<safetyTestCode.whiletest.Test2: void test2()>
<safetyTestCode.whiletest.Test2: void test(int)>
Transforming safetyTester.arraytest.Tester1$1... 
<safetyTester.arraytest.Tester1$1: void <init>()>
<safetyTester.arraytest.Tester1$1: void internalTransform(soot.Body,java.lang.String,java.util.Map)>
Transforming safetyTester.arraytest.Tester1... 
<safetyTester.arraytest.Tester1: void <init>()>
<safetyTester.arraytest.Tester1: void main(java.lang.String[])>
<safetyTester.arraytest.Tester1: void <clinit>()>
Transforming safetyTester.iftest.Tester1$1... 
<safetyTester.iftest.Tester1$1: void <init>()>
<safetyTester.iftest.Tester1$1: void internalTransform(soot.Body,java.lang.String,java.util.Map)>
Transforming safetyTester.iftest.Tester1... 
<safetyTester.iftest.Tester1: void <clinit>()>
<safetyTester.iftest.Tester1: void <init>()>
<safetyTester.iftest.Tester1: void main(java.lang.String[])>
Transforming safetyTester.iftest.Tester2$1... 
<safetyTester.iftest.Tester2$1: void <init>()>
<safetyTester.iftest.Tester2$1: void internalTransform(soot.Body,java.lang.String,java.util.Map)>
Transforming safetyTester.iftest.Tester2... 
<safetyTester.iftest.Tester2: void <clinit>()>
<safetyTester.iftest.Tester2: void <init>()>
<safetyTester.iftest.Tester2: void main(java.lang.String[])>
Transforming safetyTester.iftest.Tester3$1... 
<safetyTester.iftest.Tester3$1: void <init>()>
<safetyTester.iftest.Tester3$1: void internalTransform(soot.Body,java.lang.String,java.util.Map)>
Transforming safetyTester.iftest.Tester3... 
<safetyTester.iftest.Tester3: void <clinit>()>
<safetyTester.iftest.Tester3: void <init>()>
<safetyTester.iftest.Tester3: void main(java.lang.String[])>
Transforming safetyTester.iftest.Tester4$1... 
<safetyTester.iftest.Tester4$1: void <init>()>
<safetyTester.iftest.Tester4$1: void internalTransform(soot.Body,java.lang.String,java.util.Map)>
Transforming safetyTester.iftest.Tester4... 
<safetyTester.iftest.Tester4: void <clinit>()>
<safetyTester.iftest.Tester4: void <init>()>
<safetyTester.iftest.Tester4: void main(java.lang.String[])>
Transforming safetyTester.leetCode.climbingStairs.Tester1$1... 
<safetyTester.leetCode.climbingStairs.Tester1$1: void <init>()>
<safetyTester.leetCode.climbingStairs.Tester1$1: void internalTransform(soot.Body,java.lang.String,java.util.Map)>
Transforming safetyTester.leetCode.climbingStairs.Tester1... 
<safetyTester.leetCode.climbingStairs.Tester1: void <init>()>
<safetyTester.leetCode.climbingStairs.Tester1: void main(java.lang.String[])>
<safetyTester.leetCode.climbingStairs.Tester1: void <clinit>()>
Transforming safetyTester.leetCode.climbingStairs.Tester2$1... 
<safetyTester.leetCode.climbingStairs.Tester2$1: void <init>()>
<safetyTester.leetCode.climbingStairs.Tester2$1: void internalTransform(soot.Body,java.lang.String,java.util.Map)>
Transforming safetyTester.leetCode.climbingStairs.Tester2... 
<safetyTester.leetCode.climbingStairs.Tester2: void <init>()>
<safetyTester.leetCode.climbingStairs.Tester2: void main(java.lang.String[])>
<safetyTester.leetCode.climbingStairs.Tester2: void <clinit>()>
Transforming safetyTester.object.Tester1$1... 
<safetyTester.object.Tester1$1: void <init>()>
<safetyTester.object.Tester1$1: void internalTransform(soot.Body,java.lang.String,java.util.Map)>
Transforming safetyTester.object.Tester1... 
<safetyTester.object.Tester1: void <init>()>
<safetyTester.object.Tester1: void main(java.lang.String[])>
<safetyTester.object.Tester1: void <clinit>()>
Transforming safetyTester.whiletest.Tester1$1... 
<safetyTester.whiletest.Tester1$1: void <init>()>
<safetyTester.whiletest.Tester1$1: void internalTransform(soot.Body,java.lang.String,java.util.Map)>
Transforming safetyTester.whiletest.Tester1... 
<safetyTester.whiletest.Tester1: void <clinit>()>
<safetyTester.whiletest.Tester1: void <init>()>
<safetyTester.whiletest.Tester1: void main(java.lang.String[])>
Transforming safetyTester.whiletest.Tester2$1... 
<safetyTester.whiletest.Tester2$1: void <init>()>
<safetyTester.whiletest.Tester2$1: void internalTransform(soot.Body,java.lang.String,java.util.Map)>
Transforming safetyTester.whiletest.Tester2... 
<safetyTester.whiletest.Tester2: void <clinit>()>
<safetyTester.whiletest.Tester2: void <init>()>
<safetyTester.whiletest.Tester2: void main(java.lang.String[])>
Writing to src/output/safetyTest/dotty.CfgConverter.shimple
Writing to src/output/safetyTest/RecordPeekMemoryAndTime.testDriver.shimple
Writing to src/output/safetyTest/safetyChecker.CoverRelation.shimple
Writing to src/output/safetyTest/safetyChecker.Edge.shimple
Writing to src/output/safetyTest/safetyChecker.ErrorLable.shimple
Writing to src/output/safetyTest/safetyChecker.exception.CreateZ3ScriptFailedException.shimple
Writing to src/output/safetyTest/safetyChecker.exception.ErrorLocationNotFoundException.shimple
Writing to src/output/safetyTest/safetyChecker.exception.MainFunctionNotFoundException.shimple
Writing to src/output/safetyTest/safetyChecker.InterpolationHandler.shimple
Writing to src/output/safetyTest/safetyChecker.LogUtils.shimple
Writing to src/output/safetyTest/safetyChecker.NewSort.shimple
Writing to src/output/safetyTest/safetyChecker.ProgramTree.shimple
Writing to src/output/safetyTest/safetyChecker.SafetyInitializerW.shimple
Writing to src/output/safetyTest/safetyChecker.UnitController.shimple
Writing to src/output/safetyTest/safetyChecker.Vertex.shimple
Writing to src/output/safetyTest/safetyChecker.Z3ArrayHandler.shimple
Writing to src/output/safetyTest/safetyChecker.Z3ObjectFieldHandler.shimple
Writing to src/output/safetyTest/safetyChecker.Z3ScriptHandler.shimple
Writing to src/output/safetyTest/safetyTestCode.arraytest.Test1.shimple
Writing to src/output/safetyTest/safetyTestCode.iftest.Test1.shimple
Writing to src/output/safetyTest/safetyTestCode.iftest.Test2.shimple
Writing to src/output/safetyTest/safetyTestCode.iftest.Test3.shimple
Writing to src/output/safetyTest/safetyTestCode.iftest.Test4.shimple
Writing to src/output/safetyTest/safetyTestCode.leetCode.climbingStairs.Test1.shimple
Writing to src/output/safetyTest/safetyTestCode.leetCode.climbingStairs.Test2.shimple
Writing to src/output/safetyTest/safetyTestCode.object.Obj.shimple
Writing to src/output/safetyTest/safetyTestCode.object.Test1.shimple
Writing to src/output/safetyTest/safetyTestCode.whiletest.Test1.shimple
Writing to src/output/safetyTest/safetyTestCode.whiletest.Test2.shimple
Writing to src/output/safetyTest/safetyTester.arraytest.Tester1$1.shimple
Writing to src/output/safetyTest/safetyTester.arraytest.Tester1.shimple
Writing to src/output/safetyTest/safetyTester.iftest.Tester1$1.shimple
Writing to src/output/safetyTest/safetyTester.iftest.Tester1.shimple
Writing to src/output/safetyTest/safetyTester.iftest.Tester2$1.shimple
Writing to src/output/safetyTest/safetyTester.iftest.Tester2.shimple
Writing to src/output/safetyTest/safetyTester.iftest.Tester3$1.shimple
Writing to src/output/safetyTest/safetyTester.iftest.Tester3.shimple
Writing to src/output/safetyTest/safetyTester.iftest.Tester4$1.shimple
Writing to src/output/safetyTest/safetyTester.iftest.Tester4.shimple
Writing to src/output/safetyTest/safetyTester.leetCode.climbingStairs.Tester1$1.shimple
Writing to src/output/safetyTest/safetyTester.leetCode.climbingStairs.Tester1.shimple
Writing to src/output/safetyTest/safetyTester.leetCode.climbingStairs.Tester2$1.shimple
Writing to src/output/safetyTest/safetyTester.leetCode.climbingStairs.Tester2.shimple
Writing to src/output/safetyTest/safetyTester.object.Tester1$1.shimple
Writing to src/output/safetyTest/safetyTester.object.Tester1.shimple
Writing to src/output/safetyTest/safetyTester.whiletest.Tester1$1.shimple
Writing to src/output/safetyTest/safetyTester.whiletest.Tester1.shimple
Writing to src/output/safetyTest/safetyTester.whiletest.Tester2$1.shimple
Writing to src/output/safetyTest/safetyTester.whiletest.Tester2.shimple
Soot finished on Thu Jun 30 02:45:34 EDT 2016
Soot has run for 0 min. 1 sec.
[36msafetyTester.object.Tester1... Test started...[0m
[36m----->Unwind[0m
[36merror root #1=L82-D29[0m
[33m>>>>>>[0m[36mL82-D29***r0 := @parameter0: java.lang.String[][0m
[36mz3Expr=true[0m
[33m>>>>>>[0m[36mL77-D28***$r6 = new java.io.BufferedReader[0m
[33mright=new java.io.BufferedReader[0m
[36mz3Expr=(= Global_java.io.BufferedReader_2 (store Global_java.io.BufferedReader_1 1 1))[0m
[33m>>>>>>[0m[36mL72-D27***$r7 = new java.io.InputStreamReader[0m
[33mright=new java.io.InputStreamReader[0m
[36mz3Expr=(= Global_java.io.InputStreamReader_2
   (store Global_java.io.InputStreamReader_1 1 1))[0m
[33m>>>>>>[0m[36mL67-D26***$r8 = <java.lang.System: java.io.InputStream in>[0m
[33mright=<java.lang.System: java.io.InputStream in>[0m
[36mz3Expr=(= Global_java.io.InputStream_2
   (store Global_java.io.InputStream_1
          2
          (select Global_java.io.InputStream_1 1)))[0m
[33m>>>>>>[0m[36mL62-D25***specialinvoke $r7.<java.io.InputStreamReader: void <init>(java.io.InputStream)>($r8)[0m
[36mz3Expr=true[0m
[33m>>>>>>[0m[36mL57-D24***specialinvoke $r6.<java.io.BufferedReader: void <init>(java.io.Reader)>($r7)[0m
[36mz3Expr=true[0m
[33m>>>>>>[0m[36mL53-D23***r1 = $r6[0m
[33mright=$r6[0m
[36mz3Expr=(= Global_java.io.BufferedReader_3
   (store Global_java.io.BufferedReader_2
          2
          (select Global_java.io.BufferedReader_2 1)))[0m
[33m>>>>>>[0m[36mL49-D22***$r9 = new java.io.PrintWriter[0m
[33mright=new java.io.PrintWriter[0m
[36mz3Expr=(= Global_java.io.PrintWriter_2 (store Global_java.io.PrintWriter_1 1 1))[0m
[33m>>>>>>[0m[36mL45-D21***$r10 = <java.lang.System: java.io.PrintStream out>[0m
[33mright=<java.lang.System: java.io.PrintStream out>[0m
[36mz3Expr=(= Global_java.io.PrintStream_2
   (store Global_java.io.PrintStream_1
          2
          (select Global_java.io.PrintStream_1 1)))[0m
[33m>>>>>>[0m[36mL41-D20***specialinvoke $r9.<java.io.PrintWriter: void <init>(java.io.OutputStream)>($r10)[0m
[36mz3Expr=true[0m
[33m>>>>>>[0m[36mL37-D19***r2 = $r9[0m
[33mright=$r9[0m
[36mz3Expr=(= Global_java.io.PrintWriter_3
   (store Global_java.io.PrintWriter_2
          2
          (select Global_java.io.PrintWriter_2 1)))[0m
[33m>>>>>>[0m[36mL33-D18***$r11 = virtualinvoke r1.<java.io.BufferedReader: java.lang.String readLine()>()[0m
[33mright=new java.lang.String[0m
[36mz3Expr=(= Global_java.lang.String_2 (store Global_java.lang.String_1 1 1))[0m
[33m>>>>>>[0m[36mL30-D17***$r12 = virtualinvoke $r11.<java.lang.String: java.lang.String trim()>()[0m
[33mright=new java.lang.String[0m
[36mz3Expr=(= Global_java.lang.String_3 (store Global_java.lang.String_2 2 1))[0m
[33m>>>>>>[0m[36mL27-D16***i3 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r12)[0m
[33mright=staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r12)[0m
[36mz3Expr=(= i3__main_0_16 nonSubFunction_1)[0m
[33m>>>>>>[0m[36mL24-D15***i4 = 2[0m
[33mright=2[0m
[36mz3Expr=(= i4__main_0_15 2)[0m
[33m>>>>>>[0m[36mL21-D14***z0 = 0[0m
[33mright=0[0m
[36mz3Expr=(= z0__main_0_14 0)[0m
[33m>>>>>>[0m[36mL18-D13***$r13 = virtualinvoke r1.<java.io.BufferedReader: java.lang.String readLine()>()[0m
[33mright=new java.lang.String[0m
[36mz3Expr=(= Global_java.lang.String_4 (store Global_java.lang.String_3 3 2))[0m
[33m>>>>>>[0m[36mL15-D12***$r14 = virtualinvoke $r13.<java.lang.String: java.lang.String trim()>()[0m
[33mright=new java.lang.String[0m
[36mz3Expr=(= Global_java.lang.String_5 (store Global_java.lang.String_4 4 3))[0m
[33m>>>>>>[0m[36mL13-D11***virtualinvoke $r14.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\s+")[0m
[36mz3Expr=true[0m
[33m>>>>>>[0m[36mL11-D10***goto [?= i3_1 = Phi(i3, i3_2)][0m
[36mz3Expr=true[0m
[33m>>>>>>[0m[36mL10-D9***i3_1 = Phi(i3, i3_2)[0m
[33mright=Phi(i3, i3_2)[0m
[36mz3Expr=(= i3_1__main_0_9 i3__main_0_16)[0m
[33m>>>>>>[0m[36mL9-D8***i4_1 = Phi(i4, i4_2)[0m
[33mright=Phi(i4, i4_2)[0m
[36mz3Expr=(= i4_1__main_0_8 i4__main_0_15)[0m
[33m>>>>>>[0m[36mL8-D7***i6 = Phi(i6, i6_2)[0m
[33mright=Phi(i6, i6_2)[0m
[36mz3Expr=(= i6__main_0_7 0)[0m
[33m>>>>>>[0m[36mL7-D6***$i1 = i3_1[0m
[33mright=i3_1[0m
[36mz3Expr=(= $i1__main_0_6 i3_1__main_0_9)[0m
[33m>>>>>>[0m[36mL6-D5***i3_2 = i3_1 + -1[0m
[33mright=i3_1 + -1[0m
[36mz3Expr=(= i3_2__main_0_5 (+ i3_1__main_0_9 (- 1)))[0m
[33m>>>>>>[0m[36mL5-D4***if $i1 > 0 goto i4_2 = i4_1 + i3_2[0m
[36mz3Expr=(not (> $i1__main_0_6 0))[0m
[33m>>>>>>[0m[36mL4-D3***if i4_1 != 12 goto return[0m
[36mz3Expr=(not (not (= i4_1__main_0_8 12)))[0m
[32m********************
 L82-D29[0m
[32mError path is not feasible.[0m
[32m********************[0m
[36merror root #2=L289-D48[0m
[33m>>>>>>[0m[36mL289-D48***r0 := @parameter0: java.lang.String[][0m
[36mz3Expr=true[0m
[33m>>>>>>[0m[36mL272-D47***$r6 = new java.io.BufferedReader[0m
[33mright=new java.io.BufferedReader[0m
[36mz3Expr=(= Global_java.io.BufferedReader_4 (store Global_java.io.BufferedReader_3 1 1))[0m
[33m>>>>>>[0m[36mL256-D46***$r7 = new java.io.InputStreamReader[0m
[33mright=new java.io.InputStreamReader[0m
[36mz3Expr=(= Global_java.io.InputStreamReader_3
   (store Global_java.io.InputStreamReader_2 1 1))[0m
[33m>>>>>>[0m[36mL240-D45***$r8 = <java.lang.System: java.io.InputStream in>[0m
[33mright=<java.lang.System: java.io.InputStream in>[0m
[36mz3Expr=(= Global_java.io.InputStream_3
   (store Global_java.io.InputStream_2
          2
          (select Global_java.io.InputStream_2 1)))[0m
[33m>>>>>>[0m[36mL224-D44***specialinvoke $r7.<java.io.InputStreamReader: void <init>(java.io.InputStream)>($r8)[0m
[36mz3Expr=true[0m
[33m>>>>>>[0m[36mL208-D43***specialinvoke $r6.<java.io.BufferedReader: void <init>(java.io.Reader)>($r7)[0m
[36mz3Expr=true[0m
[33m>>>>>>[0m[36mL195-D42***r1 = $r6[0m
[33mright=$r6[0m
[36mz3Expr=(= Global_java.io.BufferedReader_5
   (store Global_java.io.BufferedReader_4
          2
          (select Global_java.io.BufferedReader_4 1)))[0m
[33m>>>>>>[0m[36mL183-D41***$r9 = new java.io.PrintWriter[0m
[33mright=new java.io.PrintWriter[0m
[36mz3Expr=(= Global_java.io.PrintWriter_4 (store Global_java.io.PrintWriter_3 1 1))[0m
[33m>>>>>>[0m[36mL172-D40***$r10 = <java.lang.System: java.io.PrintStream out>[0m
[33mright=<java.lang.System: java.io.PrintStream out>[0m
[36mz3Expr=(= Global_java.io.PrintStream_3
   (store Global_java.io.PrintStream_2
          2
          (select Global_java.io.PrintStream_2 1)))[0m
[33m>>>>>>[0m[36mL161-D39***specialinvoke $r9.<java.io.PrintWriter: void <init>(java.io.OutputStream)>($r10)[0m
[36mz3Expr=true[0m
[33m>>>>>>[0m[36mL150-D38***r2 = $r9[0m
[33mright=$r9[0m
[36mz3Expr=(= Global_java.io.PrintWriter_5
   (store Global_java.io.PrintWriter_4
          2
          (select Global_java.io.PrintWriter_4 1)))[0m
[33m>>>>>>[0m[36mL139-D37***$r11 = virtualinvoke r1.<java.io.BufferedReader: java.lang.String readLine()>()[0m
[33mright=new java.lang.String[0m
[36mz3Expr=(= Global_java.lang.String_6 (store Global_java.lang.String_5 1 4))[0m
[33m>>>>>>[0m[36mL130-D36***$r12 = virtualinvoke $r11.<java.lang.String: java.lang.String trim()>()[0m
[33mright=new java.lang.String[0m
[36mz3Expr=(= Global_java.lang.String_7 (store Global_java.lang.String_6 2 5))[0m
[33m>>>>>>[0m[36mL122-D35***i3 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r12)[0m
[33mright=staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r12)[0m
[36mz3Expr=(= i3__main_0_35 nonSubFunction_2)[0m
[33m>>>>>>[0m[36mL115-D34***i4 = 2[0m
[33mright=2[0m
[36mz3Expr=(= i4__main_0_34 2)[0m
[33m>>>>>>[0m[36mL108-D33***z0 = 0[0m
[33mright=0[0m
[36mz3Expr=(= z0__main_0_33 0)[0m
[33m>>>>>>[0m[36mL101-D32***$r13 = virtualinvoke r1.<java.io.BufferedReader: java.lang.String readLine()>()[0m
[33mright=new java.lang.String[0m
[36mz3Expr=(= Global_java.lang.String_8 (store Global_java.lang.String_7 3 6))[0m
[33m>>>>>>[0m[36mL94-D31***$r14 = virtualinvoke $r13.<java.lang.String: java.lang.String trim()>()[0m
[33mright=new java.lang.String[0m
[36mz3Expr=(= Global_java.lang.String_9 (store Global_java.lang.String_8 4 7))[0m
[33m>>>>>>[0m[36mL88-D30***virtualinvoke $r14.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\s+")[0m
[36mz3Expr=true[0m
[33m>>>>>>[0m[36mL83-D29***goto [?= i3_1 = Phi(i3, i3_2)][0m
[36mz3Expr=true[0m
[33m>>>>>>[0m[36mL78-D28***i3_1 = Phi(i3, i3_2)[0m
[33mright=Phi(i3, i3_2)[0m
[36mz3Expr=(= i3_1__main_0_28 i3__main_0_35)[0m
[33m>>>>>>[0m[36mL73-D27***i4_1 = Phi(i4, i4_2)[0m
[33mright=Phi(i4, i4_2)[0m
[36mz3Expr=(= i4_1__main_0_27 i4__main_0_34)[0m
[33m>>>>>>[0m[36mL68-D26***i6 = Phi(i6, i6_2)[0m
[33mright=Phi(i6, i6_2)[0m
[36mz3Expr=(= i6__main_0_26 i6__main_0_7)[0m
[33m>>>>>>[0m[36mL63-D25***$i1 = i3_1[0m
[33mright=i3_1[0m
[36mz3Expr=(= $i1__main_0_25 i3_1__main_0_28)[0m
[33m>>>>>>[0m[36mL58-D24***i3_2 = i3_1 + -1[0m
[33mright=i3_1 + -1[0m
[36mz3Expr=(= i3_2__main_0_24 (+ i3_1__main_0_28 (- 1)))[0m
[33m>>>>>>[0m[36mL54-D23***if $i1 > 0 goto i4_2 = i4_1 + i3_2[0m
[36mz3Expr=(> $i1__main_0_25 0)[0m
[33m>>>>>>[0m[36mL50-D22***i4_2 = i4_1 + i3_2[0m
[33mright=i4_1 + i3_2[0m
[36mz3Expr=(= i4_2__main_0_22 (+ i4_1__main_0_27 i3_2__main_0_24))[0m
[33m>>>>>>[0m[36mL46-D21***$r15 = virtualinvoke r1.<java.io.BufferedReader: java.lang.String readLine()>()[0m
[33mright=new java.lang.String[0m
[36mz3Expr=(= Global_java.lang.String_10 (store Global_java.lang.String_9 5 8))[0m
[33m>>>>>>[0m[36mL42-D20***$r16 = virtualinvoke $r15.<java.lang.String: java.lang.String trim()>()[0m
[33mright=new java.lang.String[0m
[36mz3Expr=(= Global_java.lang.String_11 (store Global_java.lang.String_10 6 9))[0m
[33m>>>>>>[0m[36mL38-D19***i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r16)[0m
[33mright=staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r16)[0m
[36mz3Expr=(= i0__main_0_19 nonSubFunction_3)[0m
[33m>>>>>>[0m[36mL34-D18***i5 = i0[0m
[33mright=i0[0m
[36mz3Expr=(= i5__main_0_18 i0__main_0_19)[0m
[33m>>>>>>[0m[36mL31-D17***$r17 = virtualinvoke r1.<java.io.BufferedReader: java.lang.String readLine()>()[0m
[33mright=new java.lang.String[0m
[36mz3Expr=(= Global_java.lang.String_12 (store Global_java.lang.String_11 7 10))[0m
[33m>>>>>>[0m[36mL28-D16***$r18 = virtualinvoke $r17.<java.lang.String: java.lang.String trim()>()[0m
[33mright=new java.lang.String[0m
[36mz3Expr=(= Global_java.lang.String_13 (store Global_java.lang.String_12 8 11))[0m
[33m>>>>>>[0m[36mL25-D15***r4 = virtualinvoke $r18.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\s+")[0m
[33mright=virtualinvoke $r18.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\s+")[0m
[36mz3Expr=(= |java.lang.String[]__main_0_15|
   (store |java.lang.String[]| 2 nonSubFunction_4))[0m
[33m>>>>>>[0m[36mL22-D14***r5 = newarray (int)[i0][0m
[33mright=newarray (int)[i0][0m
[33marrayCellConst=|Global_realArray_int[]_1|[0m
[36mz3Expr=(and (= |int[]__main_0_14| (store |int[]| 1 1))
     (= |Global_realArray_int[]_2|
        (store |Global_realArray_int[]_1| 1 ((as const (Array Int Int)) 0))))[0m
[33m>>>>>>[0m[36mL19-D13***i6_1 = 0[0m
[33mright=0[0m
[36mz3Expr=(= i6_1__main_0_13 0)[0m
[33m>>>>>>[0m[36mL16-D12***goto [?= i6_2 = Phi(i6_1, i6_3)][0m
[36mz3Expr=true[0m
[33m>>>>>>[0m[36mL14-D11***i6_2 = Phi(i6_1, i6_3)[0m
[33mright=Phi(i6_1, i6_3)[0m
[36mz3Expr=(= i6_2__main_0_11 i6_1__main_0_13)[0m
[33m>>>>>>[0m[36mL12-D10***if i6_2 < i0 goto $r19 = r4[i6_2][0m
[36mz3Expr=(not (< i6_2__main_0_11 i0__main_0_19))[0m
[33m>>>>>>[0m[36mL10-D9***i3_1 = Phi(i3, i3_2)[0m
[33mright=Phi(i3, i3_2)[0m
[36mz3Expr=(= i3_1__main_0_9 i3_2__main_0_24)[0m
[33m>>>>>>[0m[36mL9-D8***i4_1 = Phi(i4, i4_2)[0m
[33mright=Phi(i4, i4_2)[0m
[36mz3Expr=(= i4_1__main_0_8 i4_2__main_0_22)[0m
[33m>>>>>>[0m[36mL8-D7***i6 = Phi(i6, i6_2)[0m
[33mright=Phi(i6, i6_2)[0m
[36mz3Expr=(= i6__main_0_7 i6_2__main_0_11)[0m
[33m>>>>>>[0m[36mL7-D6***$i1 = i3_1[0m
[33mright=i3_1[0m
[36mz3Expr=(= $i1__main_0_6 i3_1__main_0_9)[0m
[33m>>>>>>[0m[36mL6-D5***i3_2 = i3_1 + -1[0m
[33mright=i3_1 + -1[0m
[36mz3Expr=(= i3_2__main_0_5 (+ i3_1__main_0_9 (- 1)))[0m
[33m>>>>>>[0m[36mL5-D4***if $i1 > 0 goto i4_2 = i4_1 + i3_2[0m
[36mz3Expr=(not (> $i1__main_0_6 0))[0m
[33m>>>>>>[0m[36mL4-D3***if i4_1 != 12 goto return[0m
[36mz3Expr=(not (not (= i4_1__main_0_8 12)))[0m
[32m********************
 L289-D48[0m
[32mError path is not feasible.[0m
[32m********************[0m
[36merror root #3=L431-D54[0m
[33m>>>>>>[0m[36mL431-D54***r0 := @parameter0: java.lang.String[][0m
[36mz3Expr=true[0m
[33m>>>>>>[0m[36mL406-D53***$r6 = new java.io.BufferedReader[0m
[33mright=new java.io.BufferedReader[0m
[36mz3Expr=(= Global_java.io.BufferedReader_6 (store Global_java.io.BufferedReader_5 1 2))[0m
[33m>>>>>>[0m[36mL383-D52***$r7 = new java.io.InputStreamReader[0m
[33mright=new java.io.InputStreamReader[0m
[36mz3Expr=(= Global_java.io.InputStreamReader_4
   (store Global_java.io.InputStreamReader_3 1 2))[0m
[33m>>>>>>[0m[36mL360-D51***$r8 = <java.lang.System: java.io.InputStream in>[0m
[33mright=<java.lang.System: java.io.InputStream in>[0m
[36mz3Expr=(= Global_java.io.InputStream_4
   (store Global_java.io.InputStream_3
          2
          (select Global_java.io.InputStream_3 1)))[0m
[33m>>>>>>[0m[36mL337-D50***specialinvoke $r7.<java.io.InputStreamReader: void <init>(java.io.InputStream)>($r8)[0m
[36mz3Expr=true[0m
[33m>>>>>>[0m[36mL314-D49***specialinvoke $r6.<java.io.BufferedReader: void <init>(java.io.Reader)>($r7)[0m
[36mz3Expr=true[0m
[33m>>>>>>[0m[36mL295-D48***r1 = $r6[0m
[33mright=$r6[0m
[36mz3Expr=(= Global_java.io.BufferedReader_7
   (store Global_java.io.BufferedReader_6
          2
          (select Global_java.io.BufferedReader_6 1)))[0m
[33m>>>>>>[0m[36mL277-D47***$r9 = new java.io.PrintWriter[0m
[33mright=new java.io.PrintWriter[0m
[36mz3Expr=(= Global_java.io.PrintWriter_6 (store Global_java.io.PrintWriter_5 1 2))[0m
[33m>>>>>>[0m[36mL261-D46***$r10 = <java.lang.System: java.io.PrintStream out>[0m
[33mright=<java.lang.System: java.io.PrintStream out>[0m
[36mz3Expr=(= Global_java.io.PrintStream_4
   (store Global_java.io.PrintStream_3
          2
          (select Global_java.io.PrintStream_3 1)))[0m
[33m>>>>>>[0m[36mL245-D45***specialinvoke $r9.<java.io.PrintWriter: void <init>(java.io.OutputStream)>($r10)[0m
[36mz3Expr=true[0m
[33m>>>>>>[0m[36mL229-D44***r2 = $r9[0m
[33mright=$r9[0m
[36mz3Expr=(= Global_java.io.PrintWriter_7
   (store Global_java.io.PrintWriter_6
          2
          (select Global_java.io.PrintWriter_6 1)))[0m
[33m>>>>>>[0m[36mL213-D43***$r11 = virtualinvoke r1.<java.io.BufferedReader: java.lang.String readLine()>()[0m
[33mright=new java.lang.String[0m
[36mz3Expr=(= Global_java.lang.String_14 (store Global_java.lang.String_13 1 12))[0m
[33m>>>>>>[0m[36mL199-D42***$r12 = virtualinvoke $r11.<java.lang.String: java.lang.String trim()>()[0m
[33mright=new java.lang.String[0m
[36mz3Expr=(= Global_java.lang.String_15 (store Global_java.lang.String_14 2 13))[0m
[33m>>>>>>[0m[36mL187-D41***i3 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r12)[0m
[33mright=staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r12)[0m
[36mz3Expr=(= i3__main_0_41 nonSubFunction_5)[0m
[33m>>>>>>[0m[36mL176-D40***i4 = 2[0m
[33mright=2[0m
[36mz3Expr=(= i4__main_0_40 2)[0m
[33m>>>>>>[0m[36mL165-D39***z0 = 0[0m
[33mright=0[0m
[36mz3Expr=(= z0__main_0_39 0)[0m
[33m>>>>>>[0m[36mL154-D38***$r13 = virtualinvoke r1.<java.io.BufferedReader: java.lang.String readLine()>()[0m
[33mright=new java.lang.String[0m
[36mz3Expr=(= Global_java.lang.String_16 (store Global_java.lang.String_15 3 14))[0m
[33m>>>>>>[0m[36mL143-D37***$r14 = virtualinvoke $r13.<java.lang.String: java.lang.String trim()>()[0m
[33mright=new java.lang.String[0m
[36mz3Expr=(= Global_java.lang.String_17 (store Global_java.lang.String_16 4 15))[0m
[33m>>>>>>[0m[36mL133-D36***virtualinvoke $r14.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\s+")[0m
[36mz3Expr=true[0m
[33m>>>>>>[0m[36mL125-D35***goto [?= i3_1 = Phi(i3, i3_2)][0m
[36mz3Expr=true[0m
[33m>>>>>>[0m[36mL118-D34***i3_1 = Phi(i3, i3_2)[0m
[33mright=Phi(i3, i3_2)[0m
[36mz3Expr=(= i3_1__main_0_34 i3__main_0_41)[0m
[33m>>>>>>[0m[36mL111-D33***i4_1 = Phi(i4, i4_2)[0m
[33mright=Phi(i4, i4_2)[0m
[36mz3Expr=(= i4_1__main_0_33 i4__main_0_40)[0m
[33m>>>>>>[0m[36mL104-D32***i6 = Phi(i6, i6_2)[0m
[33mright=Phi(i6, i6_2)[0m
[36mz3Expr=(= i6__main_0_32 i6__main_0_7)[0m
[33m>>>>>>[0m[36mL97-D31***$i1 = i3_1[0m
[33mright=i3_1[0m
[36mz3Expr=(= $i1__main_0_31 i3_1__main_0_34)[0m
[33m>>>>>>[0m[36mL90-D30***i3_2 = i3_1 + -1[0m
[33mright=i3_1 + -1[0m
[36mz3Expr=(= i3_2__main_0_30 (+ i3_1__main_0_34 (- 1)))[0m
[33m>>>>>>[0m[36mL85-D29***if $i1 > 0 goto i4_2 = i4_1 + i3_2[0m
[36mz3Expr=(> $i1__main_0_31 0)[0m
[33m>>>>>>[0m[36mL79-D28***i4_2 = i4_1 + i3_2[0m
[33mright=i4_1 + i3_2[0m
[36mz3Expr=(= i4_2__main_0_28 (+ i4_1__main_0_33 i3_2__main_0_30))[0m
[33m>>>>>>[0m[36mL74-D27***$r15 = virtualinvoke r1.<java.io.BufferedReader: java.lang.String readLine()>()[0m
[33mright=new java.lang.String[0m
[36mz3Expr=(= Global_java.lang.String_18 (store Global_java.lang.String_17 5 16))[0m
[33m>>>>>>[0m[36mL69-D26***$r16 = virtualinvoke $r15.<java.lang.String: java.lang.String trim()>()[0m
[33mright=new java.lang.String[0m
[36mz3Expr=(= Global_java.lang.String_19 (store Global_java.lang.String_18 6 17))[0m
[33m>>>>>>[0m[36mL64-D25***i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r16)[0m
[33mright=staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r16)[0m
[36mz3Expr=(= i0__main_0_25 nonSubFunction_6)[0m
[33m>>>>>>[0m[36mL59-D24***i5 = i0[0m
[33mright=i0[0m
[36mz3Expr=(= i5__main_0_24 i0__main_0_25)[0m
[33m>>>>>>[0m[36mL55-D23***$r17 = virtualinvoke r1.<java.io.BufferedReader: java.lang.String readLine()>()[0m
[33mright=new java.lang.String[0m
[36mz3Expr=(= Global_java.lang.String_20 (store Global_java.lang.String_19 7 18))[0m
[33m>>>>>>[0m[36mL51-D22***$r18 = virtualinvoke $r17.<java.lang.String: java.lang.String trim()>()[0m
[33mright=new java.lang.String[0m
[36mz3Expr=(= Global_java.lang.String_21 (store Global_java.lang.String_20 8 19))[0m
[33m>>>>>>[0m[36mL47-D21***r4 = virtualinvoke $r18.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\s+")[0m
[33mright=virtualinvoke $r18.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\s+")[0m
[36mz3Expr=(= |java.lang.String[]__main_0_21|
   (store |java.lang.String[]__main_0_15| 2 nonSubFunction_7))[0m
[33m>>>>>>[0m[36mL43-D20***r5 = newarray (int)[i0][0m
[33mright=newarray (int)[i0][0m
[36mz3Expr=(and (= |int[]__main_0_20| (store |int[]__main_0_14| 1 2))
     (= |Global_realArray_int[]_3|
        (store |Global_realArray_int[]_2| 2 ((as const (Array Int Int)) 0))))[0m
[33m>>>>>>[0m[36mL39-D19***i6_1 = 0[0m
[33mright=0[0m
[36mz3Expr=(= i6_1__main_0_19 0)[0m
[33m>>>>>>[0m[36mL35-D18***goto [?= i6_2 = Phi(i6_1, i6_3)][0m
[36mz3Expr=true[0m
[33m>>>>>>[0m[36mL32-D17***i6_2 = Phi(i6_1, i6_3)[0m
[33mright=Phi(i6_1, i6_3)[0m
[36mz3Expr=(= i6_2__main_0_17 i6_1__main_0_19)[0m
[33m>>>>>>[0m[36mL29-D16***if i6_2 < i0 goto $r19 = r4[i6_2][0m
[36mz3Expr=(< i6_2__main_0_17 i0__main_0_25)[0m
[33m>>>>>>[0m[36mL26-D15***$r19 = r4[i6_2][0m
[33mright=r4[i6_2][0m
[33mRefLikeType ArrayRef[0m
[33mRefLikeType ArrayRef[0m
[31m*******************************************[0m
[31m*********** EXCEPTION OCCURRED ************[0m
[31m*******************************************[0m
[31mjava.lang.NullPointerException[0m
[31m******************[0m
[31m******************[0m
[36msafetyTester.object.Tester1... Test finished...[0m
>>> creating .ps files
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> Ended ...
