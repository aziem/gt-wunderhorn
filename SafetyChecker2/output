[H[JStarting...>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
>>> clean .dot and .ps files
>>> Compiling
>>> Executing
Soot started on Wed Jun 29 17:48:21 EDT 2016
Warning: soot.toolkits.graph.ExceptionalUnitGraph is a phantom class!
Warning: com.microsoft.z3.BoolExpr is a phantom class!
Warning: soot.Unit is a phantom class!
Warning: com.microsoft.z3.Expr is a phantom class!
Warning: com.microsoft.z3.InterpolationContext is a phantom class!
Warning: com.microsoft.z3.Solver is a phantom class!
Warning: com.microsoft.z3.Status is a phantom class!
Warning: com.microsoft.z3.IntSort is a phantom class!
Warning: com.microsoft.z3.enumerations.Z3_lbool is a phantom class!
Warning: com.microsoft.z3.Sort is a phantom class!
Warning: com.microsoft.z3.Params is a phantom class!
Warning: com.microsoft.z3.InterpolationContext$ComputeInterpolantResult is a phantom class!
Warning: soot.Value is a phantom class!
Warning: soot.Local is a phantom class!
Warning: soot.Type is a phantom class!
Warning: soot.jimple.AnyNewExpr is a phantom class!
Warning: soot.jimple.NewExpr is a phantom class!
Warning: soot.jimple.NewArrayExpr is a phantom class!
Warning: soot.jimple.NewMultiArrayExpr is a phantom class!
Warning: soot.jimple.BinopExpr is a phantom class!
Warning: soot.jimple.InstanceFieldRef is a phantom class!
Warning: com.microsoft.z3.IntExpr is a phantom class!
Warning: com.microsoft.z3.IntNum is a phantom class!
Warning: soot.Body is a phantom class!
Warning: soot.SootMethod is a phantom class!
Warning: soot.jimple.internal.JAssignStmt is a phantom class!
Warning: soot.jimple.InvokeStmt is a phantom class!
Warning: soot.jimple.IfStmt is a phantom class!
Warning: soot.jimple.AssignStmt is a phantom class!
Warning: soot.jimple.InvokeExpr is a phantom class!
Warning: soot.jimple.ArrayRef is a phantom class!
Warning: com.microsoft.z3.ArrayExpr is a phantom class!
Warning: com.microsoft.z3.Symbol is a phantom class!
Warning: com.microsoft.z3.Quantifier is a phantom class!
Warning: com.microsoft.z3.ArithExpr is a phantom class!
Warning: soot.jimple.IntConstant is a phantom class!
Warning: com.microsoft.z3.ArraySort is a phantom class!
Warning: com.microsoft.z3.StringSymbol is a phantom class!
Warning: soot.jimple.NeExpr is a phantom class!
Warning: soot.RefType is a phantom class!
Warning: soot.jimple.NullConstant is a phantom class!
Warning: soot.jimple.FieldRef is a phantom class!
Warning: soot.jimple.CmpExpr is a phantom class!
Warning: soot.jimple.Constant is a phantom class!
Warning: soot.jimple.LongConstant is a phantom class!
Warning: soot.jimple.GeExpr is a phantom class!
Warning: soot.jimple.MulExpr is a phantom class!
Warning: soot.jimple.internal.JNewExpr is a phantom class!
Warning: soot.jimple.LtExpr is a phantom class!
Warning: soot.jimple.DivExpr is a phantom class!
Warning: soot.jimple.GotoStmt is a phantom class!
Warning: soot.jimple.EqExpr is a phantom class!
Warning: soot.jimple.SubExpr is a phantom class!
Warning: com.microsoft.z3.UninterpretedSort is a phantom class!
Warning: soot.jimple.VirtualInvokeExpr is a phantom class!
Warning: soot.shimple.PhiExpr is a phantom class!
Warning: soot.jimple.LeExpr is a phantom class!
Warning: soot.jimple.CastExpr is a phantom class!
Warning: soot.toolkits.scalar.ValueUnitPair is a phantom class!
Warning: soot.SootField is a phantom class!
Warning: soot.LongType is a phantom class!
Warning: soot.jimple.IdentityStmt is a phantom class!
Warning: soot.RefLikeType is a phantom class!
Warning: soot.ArrayType is a phantom class!
Warning: soot.IntegerType is a phantom class!
Warning: soot.jimple.StaticFieldRef is a phantom class!
Warning: soot.jimple.Stmt is a phantom class!
Warning: soot.VoidType is a phantom class!
Warning: soot.PrimType is a phantom class!
Warning: soot.jimple.StringConstant is a phantom class!
Warning: soot.jimple.AddExpr is a phantom class!
Warning: soot.jimple.GtExpr is a phantom class!
Warning: soot.BodyTransformer is a phantom class!
Warning: soot.Transform is a phantom class!
Warning: soot.PackManager is a phantom class!
Warning: soot.Pack is a phantom class!
Warning: soot.options.Options is a phantom class!
Warning: soot.Main is a phantom class!
Warning: soot.Transformer is a phantom class!
Transforming dotty.CfgConverter... 
<dotty.CfgConverter: void <init>()>
<dotty.CfgConverter: java.io.BufferedWriter getBufferedWriter(java.lang.String)>
<dotty.CfgConverter: void printErrorPaths(java.util.Queue,java.lang.String,safetyChecker.CoverRelation)>
<dotty.CfgConverter: void printAllPaths(java.util.Queue,java.lang.String)>
<dotty.CfgConverter: void printAllPaths2(soot.toolkits.graph.ExceptionalUnitGraph)>
<dotty.CfgConverter: void printSinglePath(safetyChecker.Vertex,java.io.BufferedWriter)>
<dotty.CfgConverter: void printCfg(soot.toolkits.graph.ExceptionalUnitGraph)>
Transforming RecordPeekMemoryAndTime.testDriver... 
<RecordPeekMemoryAndTime.testDriver: void <init>()>
<RecordPeekMemoryAndTime.testDriver: void main(java.lang.String[])>
Transforming safetyChecker.CoverRelation... 
<safetyChecker.CoverRelation: void <init>(com.microsoft.z3.InterpolationContext,safetyChecker.ProgramTree)>
<safetyChecker.CoverRelation: void updateUnitVertexMap(safetyChecker.Vertex)>
<safetyChecker.CoverRelation: void updateCover()>
<safetyChecker.CoverRelation: void cover()>
<safetyChecker.CoverRelation: safetyChecker.Vertex findPrevControlLocation(safetyChecker.Vertex)>
<safetyChecker.CoverRelation: boolean checkCoveredBy(safetyChecker.Vertex,safetyChecker.Vertex)>
<safetyChecker.CoverRelation: boolean isWeakerThan(com.microsoft.z3.BoolExpr,com.microsoft.z3.BoolExpr)>
<safetyChecker.CoverRelation: boolean isStrongerThan(com.microsoft.z3.BoolExpr,com.microsoft.z3.BoolExpr)>
<safetyChecker.CoverRelation: boolean isCovered(safetyChecker.Vertex)>
<safetyChecker.CoverRelation: boolean isDirectlyCovered(safetyChecker.Vertex)>
<safetyChecker.CoverRelation: boolean isAncestorCovered(safetyChecker.Vertex)>
<safetyChecker.CoverRelation: void addCoverRelation(safetyChecker.Vertex,safetyChecker.Vertex)>
<safetyChecker.CoverRelation: void checkHoldsAndClearCoverRelation(safetyChecker.Vertex)>
<safetyChecker.CoverRelation: void clearCoverRelation(safetyChecker.Vertex)>
<safetyChecker.CoverRelation: void uncoverDescendants(safetyChecker.Vertex)>
<safetyChecker.CoverRelation: void add2UncoveredMap(safetyChecker.Vertex)>
<safetyChecker.CoverRelation: void coverDescendants(safetyChecker.Vertex)>
<safetyChecker.CoverRelation: java.util.Map getCoveringMap()>
<safetyChecker.CoverRelation: java.util.Map getCoveredByMap()>
<safetyChecker.CoverRelation: java.util.Map getUnitVertexMap()>
Transforming safetyChecker.Edge... 
<safetyChecker.Edge: void <init>(soot.Unit)>
<safetyChecker.Edge: soot.Unit getUnit()>
<safetyChecker.Edge: void setUnit(soot.Unit)>
<safetyChecker.Edge: safetyChecker.Vertex getSource()>
<safetyChecker.Edge: void setSource(safetyChecker.Vertex)>
<safetyChecker.Edge: safetyChecker.Vertex getTarget()>
<safetyChecker.Edge: void setTarget(safetyChecker.Vertex)>
<safetyChecker.Edge: boolean isReturnEdge()>
<safetyChecker.Edge: void setReturnEdge(boolean)>
<safetyChecker.Edge: boolean isErrorEdge()>
<safetyChecker.Edge: void setErrorEdge(boolean)>
<safetyChecker.Edge: boolean isSubFunction()>
<safetyChecker.Edge: void setSubFunction(boolean)>
<safetyChecker.Edge: boolean isSinkEdge()>
<safetyChecker.Edge: void setSinkEdge(boolean)>
<safetyChecker.Edge: boolean isSourceEdge()>
<safetyChecker.Edge: void setSourceEdge(boolean)>
<safetyChecker.Edge: boolean isNewEdge()>
<safetyChecker.Edge: void setNewEdge(boolean)>
<safetyChecker.Edge: boolean isObjectEdge()>
<safetyChecker.Edge: void setObjectEdge(boolean)>
<safetyChecker.Edge: boolean isArrayCopyEdge()>
<safetyChecker.Edge: void setArrayCopyEdge(boolean)>
<safetyChecker.Edge: boolean isControlLocation()>
<safetyChecker.Edge: void setControlLocation(boolean)>
<safetyChecker.Edge: safetyChecker.ProgramTree getProgramTree()>
<safetyChecker.Edge: void setProgramTree(safetyChecker.ProgramTree)>
<safetyChecker.Edge: boolean isInErrorPath()>
<safetyChecker.Edge: void setInErrorPath(boolean)>
<safetyChecker.Edge: boolean isEntryLocation()>
<safetyChecker.Edge: void setEntryLocation(boolean)>
<safetyChecker.Edge: boolean isInitInvoke()>
<safetyChecker.Edge: void setInitInvoke(boolean)>
<safetyChecker.Edge: com.microsoft.z3.BoolExpr getZ3Expr()>
<safetyChecker.Edge: void setZ3Expr(com.microsoft.z3.BoolExpr)>
<safetyChecker.Edge: java.util.List getParameterList()>
<safetyChecker.Edge: void addParameter(com.microsoft.z3.Expr)>
<safetyChecker.Edge: void cleanParameterList()>
<safetyChecker.Edge: java.lang.String toString()>
Transforming safetyChecker.ErrorLable... 
<safetyChecker.ErrorLable: void <init>()>
<safetyChecker.ErrorLable: void Error()>
Transforming safetyChecker.exception.CreateZ3ScriptFailedException... 
<safetyChecker.exception.CreateZ3ScriptFailedException: void <init>(java.lang.String)>
<safetyChecker.exception.CreateZ3ScriptFailedException: java.lang.String getMessage()>
Transforming safetyChecker.exception.ErrorLocationNotFoundException... 
<safetyChecker.exception.ErrorLocationNotFoundException: void <init>(java.lang.String)>
<safetyChecker.exception.ErrorLocationNotFoundException: java.lang.String getMessage()>
Transforming safetyChecker.exception.MainFunctionNotFoundException... 
<safetyChecker.exception.MainFunctionNotFoundException: void <init>(java.lang.String)>
<safetyChecker.exception.MainFunctionNotFoundException: java.lang.String getMessage()>
Transforming safetyChecker.InterpolationHandler... 
<safetyChecker.InterpolationHandler: void <init>(com.microsoft.z3.InterpolationContext,safetyChecker.Z3ScriptHandler,safetyChecker.CoverRelation)>
<safetyChecker.InterpolationHandler: boolean createInterpolant(safetyChecker.Vertex)>
<safetyChecker.InterpolationHandler: void updateInvariant(safetyChecker.Vertex,com.microsoft.z3.BoolExpr[],boolean)>
<safetyChecker.InterpolationHandler: void generateNameMapping()>
<safetyChecker.InterpolationHandler: com.microsoft.z3.BoolExpr getTrueInvariant()>
<safetyChecker.InterpolationHandler: com.microsoft.z3.BoolExpr getFalseInvariant()>
Transforming safetyChecker.LogUtils... 
<safetyChecker.LogUtils: void <clinit>()>
<safetyChecker.LogUtils: void <init>()>
<safetyChecker.LogUtils: java.lang.String getOutputColor(int)>
<safetyChecker.LogUtils: void print(int,java.lang.Object[])>
<safetyChecker.LogUtils: void println(int,java.lang.Object[])>
<safetyChecker.LogUtils: void debug(java.lang.Object[])>
<safetyChecker.LogUtils: void debugln(java.lang.Object[])>
<safetyChecker.LogUtils: void info(java.lang.Object[])>
<safetyChecker.LogUtils: void infoln(java.lang.Object[])>
<safetyChecker.LogUtils: void fatal(java.lang.Object[])>
<safetyChecker.LogUtils: void fatalln(java.lang.Object[])>
<safetyChecker.LogUtils: void detail(java.lang.Object[])>
<safetyChecker.LogUtils: void detailln(java.lang.Object[])>
<safetyChecker.LogUtils: void warning(java.lang.Object[])>
<safetyChecker.LogUtils: void warningln(java.lang.Object[])>
<safetyChecker.LogUtils: void nextLine(int)>
<safetyChecker.LogUtils: void printResult(java.lang.String,boolean)>
Transforming safetyChecker.NewSort... 
<safetyChecker.NewSort: void <init>(com.microsoft.z3.Sort,com.microsoft.z3.InterpolationContext)>
<safetyChecker.NewSort: void creatNewOject(com.microsoft.z3.Expr)>
<safetyChecker.NewSort: com.microsoft.z3.IntExpr getId(com.microsoft.z3.Expr)>
<safetyChecker.NewSort: boolean ifHasExpr(com.microsoft.z3.Expr)>
<safetyChecker.NewSort: com.microsoft.z3.Expr getNewObject()>
Transforming safetyChecker.ProgramTree... 
<safetyChecker.ProgramTree: void <clinit>()>
<safetyChecker.ProgramTree: void <init>(java.util.Map,java.lang.String,boolean)>
<safetyChecker.ProgramTree: void startTest()>
<safetyChecker.ProgramTree: boolean findErrorLocation(safetyChecker.Vertex)>
<safetyChecker.ProgramTree: boolean findMainFunction()>
<safetyChecker.ProgramTree: boolean getNewReturnPath()>
<safetyChecker.ProgramTree: safetyChecker.Vertex getNewReturnRoot()>
<safetyChecker.ProgramTree: boolean isTreeDone()>
<safetyChecker.ProgramTree: void unwind()>
<safetyChecker.ProgramTree: boolean expandBFS(safetyChecker.Vertex)>
<safetyChecker.ProgramTree: boolean isConnectionCovered(safetyChecker.Vertex)>
<safetyChecker.ProgramTree: void addErrorEntryLocation(safetyChecker.Vertex)>
<safetyChecker.ProgramTree: safetyChecker.Vertex addVertex(safetyChecker.Vertex,safetyChecker.Edge,boolean)>
<safetyChecker.ProgramTree: void refine(safetyChecker.Vertex)>
<safetyChecker.ProgramTree: java.lang.String getProgramDefinition()>
<safetyChecker.ProgramTree: java.lang.String getFunctionName()>
<safetyChecker.ProgramTree: void printResult(java.lang.String)>
<safetyChecker.ProgramTree: java.util.Queue getUncovered()>
<safetyChecker.ProgramTree: soot.toolkits.graph.ExceptionalUnitGraph getCfg()>
Transforming safetyChecker.SafetyInitializerW... 
<safetyChecker.SafetyInitializerW: void <init>()>
<safetyChecker.SafetyInitializerW: void main(java.lang.String[])>
Transforming safetyChecker.UnitController... 
<safetyChecker.UnitController: void <clinit>()>
<safetyChecker.UnitController: void <init>()>
<safetyChecker.UnitController: void analyzeEdge(safetyChecker.Edge,java.util.Map,soot.toolkits.graph.ExceptionalUnitGraph)>
<safetyChecker.UnitController: boolean isArrayCopyInvoke(soot.Unit)>
<safetyChecker.UnitController: boolean isSourceInvoke(soot.Unit)>
<safetyChecker.UnitController: boolean isSinkInvoke(soot.Unit)>
<safetyChecker.UnitController: boolean isSubFunctionUnit(soot.Unit,java.util.Map,safetyChecker.Edge)>
<safetyChecker.UnitController: boolean isErrorUnit(soot.Unit)>
<safetyChecker.UnitController: boolean isObjectInvoke(soot.Unit)>
<safetyChecker.UnitController: boolean isNewInvoke(soot.Unit)>
<safetyChecker.UnitController: boolean isNonSenseCompare(soot.Unit)>
<safetyChecker.UnitController: boolean isCalleeFunction(soot.Unit)>
<safetyChecker.UnitController: boolean isInitInvoke(soot.Unit)>
<safetyChecker.UnitController: boolean isInvoke(soot.Unit)>
<safetyChecker.UnitController: java.lang.String getMethodSignature(soot.Unit)>
<safetyChecker.UnitController: boolean isArraysEqualsInvoke(soot.Value)>
<safetyChecker.UnitController: boolean isControlLocation(soot.Unit)>
<safetyChecker.UnitController: boolean isEntryLocation(soot.Unit,soot.toolkits.graph.ExceptionalUnitGraph)>
Transforming safetyChecker.Vertex... 
<safetyChecker.Vertex: void <init>()>
<safetyChecker.Vertex: boolean isReturnLocation()>
<safetyChecker.Vertex: void setReturnLocation(boolean)>
<safetyChecker.Vertex: boolean isEntryLocation()>
<safetyChecker.Vertex: void setEntryLocation(boolean)>
<safetyChecker.Vertex: boolean isErrorLocation()>
<safetyChecker.Vertex: void setErrorLocation(boolean)>
<safetyChecker.Vertex: boolean isSubFunction()>
<safetyChecker.Vertex: void setSubFunction(boolean)>
<safetyChecker.Vertex: boolean isSinkLocation()>
<safetyChecker.Vertex: void setSinkLocation(boolean)>
<safetyChecker.Vertex: boolean isSourceLocation()>
<safetyChecker.Vertex: void setSourceLocation(boolean)>
<safetyChecker.Vertex: boolean isInErrorPath()>
<safetyChecker.Vertex: void setInErrorPath(boolean)>
<safetyChecker.Vertex: boolean isVertexDone()>
<safetyChecker.Vertex: void setVertexDone(boolean)>
<safetyChecker.Vertex: safetyChecker.Edge getOutgoingEdge()>
<safetyChecker.Vertex: void setOutgoingEdge(safetyChecker.Edge)>
<safetyChecker.Vertex: java.util.Set getIncomingEdges()>
<safetyChecker.Vertex: void addIncomingEdge(safetyChecker.Edge)>
<safetyChecker.Vertex: safetyChecker.Vertex getNextVertex()>
<safetyChecker.Vertex: void setNextVertex(safetyChecker.Vertex)>
<safetyChecker.Vertex: java.util.Set getPreviousVertexSet()>
<safetyChecker.Vertex: void addPreviousVertex(safetyChecker.Vertex)>
<safetyChecker.Vertex: boolean isSigh()>
<safetyChecker.Vertex: void setSight(boolean)>
<safetyChecker.Vertex: int getDistance()>
<safetyChecker.Vertex: void setDistance(int)>
<safetyChecker.Vertex: int getLocationNumber()>
<safetyChecker.Vertex: void setLocationNumber(int)>
<safetyChecker.Vertex: com.microsoft.z3.BoolExpr getInvariant()>
<safetyChecker.Vertex: void setInvariant(com.microsoft.z3.BoolExpr)>
<safetyChecker.Vertex: java.lang.String toString()>
Transforming safetyChecker.Z3ArrayHandler... 
<safetyChecker.Z3ArrayHandler: void <init>()>
<safetyChecker.Z3ArrayHandler: com.microsoft.z3.Expr z3Local(soot.Local,boolean,int,safetyChecker.Z3ScriptHandler)>
<safetyChecker.Z3ArrayHandler: com.microsoft.z3.BoolExpr newArrayExpr(com.microsoft.z3.Expr,soot.Type,safetyChecker.Z3ScriptHandler)>
<safetyChecker.Z3ArrayHandler: com.microsoft.z3.Expr z3ArrayRef(soot.jimple.ArrayRef,safetyChecker.Z3ScriptHandler,safetyChecker.Edge)>
<safetyChecker.Z3ArrayHandler: com.microsoft.z3.BoolExpr updateDefaultValue(soot.Value,int,safetyChecker.Z3ScriptHandler,safetyChecker.Edge)>
<safetyChecker.Z3ArrayHandler: com.microsoft.z3.Expr z3ArrayRef(soot.Value,safetyChecker.Z3ScriptHandler,safetyChecker.Edge,int)>
<safetyChecker.Z3ArrayHandler: com.microsoft.z3.BoolExpr updateArrayRef(soot.Value,safetyChecker.Z3ScriptHandler,com.microsoft.z3.Expr,safetyChecker.Edge,int)>
<safetyChecker.Z3ArrayHandler: com.microsoft.z3.BoolExpr updateArrayRef(soot.jimple.ArrayRef,safetyChecker.Z3ScriptHandler,com.microsoft.z3.Expr,safetyChecker.Edge)>
<safetyChecker.Z3ArrayHandler: com.microsoft.z3.BoolExpr z3ArrayCopy(safetyChecker.Edge,safetyChecker.Z3ScriptHandler)>
<safetyChecker.Z3ArrayHandler: com.microsoft.z3.Expr z3ArraysEqual(soot.Value,safetyChecker.Z3ScriptHandler,safetyChecker.Edge)>
<safetyChecker.Z3ArrayHandler: com.microsoft.z3.ArrayExpr getRealArray(soot.Local,safetyChecker.Edge,safetyChecker.Z3ScriptHandler)>
<safetyChecker.Z3ArrayHandler: java.lang.String getArrayPrefix()>
<safetyChecker.Z3ArrayHandler: void forAllTest(com.microsoft.z3.InterpolationContext,com.microsoft.z3.ArrayExpr,com.microsoft.z3.ArrayExpr)>
Transforming safetyChecker.Z3ScriptHandler... 
<safetyChecker.Z3ScriptHandler: void <init>(com.microsoft.z3.InterpolationContext)>
<safetyChecker.Z3ScriptHandler: void convertPathtoZ3Script(safetyChecker.Vertex)>
<safetyChecker.Z3ScriptHandler: boolean createZ3Script(safetyChecker.Edge)>
<safetyChecker.Z3ScriptHandler: boolean convertInitInvoke(safetyChecker.Edge)>
<safetyChecker.Z3ScriptHandler: boolean convertArrayCopy(safetyChecker.Edge)>
<safetyChecker.Z3ScriptHandler: boolean convertErrorEdge(safetyChecker.Edge)>
<safetyChecker.Z3ScriptHandler: boolean convertIfStmt(safetyChecker.Edge)>
<safetyChecker.Z3ScriptHandler: boolean convertIdentityStmt(safetyChecker.Edge)>
<safetyChecker.Z3ScriptHandler: boolean convertAssignStmtEdge(safetyChecker.Edge)>
<safetyChecker.Z3ScriptHandler: boolean convertGotoStmt(safetyChecker.Edge)>
<safetyChecker.Z3ScriptHandler: boolean convertSinkInvoke2Z3(safetyChecker.Edge)>
<safetyChecker.Z3ScriptHandler: com.microsoft.z3.Expr convertValue(soot.Value,boolean,safetyChecker.Edge,int)>
<safetyChecker.Z3ScriptHandler: com.microsoft.z3.Expr convertPrimitiveValue(soot.Value,boolean,safetyChecker.Edge,int)>
<safetyChecker.Z3ScriptHandler: com.microsoft.z3.Expr convertRefLikeValue(soot.Value,boolean,safetyChecker.Edge,int)>
<safetyChecker.Z3ScriptHandler: com.microsoft.z3.Expr createZ3Object(soot.Local,boolean,safetyChecker.Edge)>
<safetyChecker.Z3ScriptHandler: java.lang.String getGlobalName(java.lang.String)>
<safetyChecker.Z3ScriptHandler: com.microsoft.z3.BoolExpr convertAssignStmt(com.microsoft.z3.Expr,com.microsoft.z3.Expr,soot.Type,soot.Value,int)>
<safetyChecker.Z3ScriptHandler: com.microsoft.z3.Expr convertAnyNewExpr(soot.jimple.AnyNewExpr,safetyChecker.Edge)>
<safetyChecker.Z3ScriptHandler: com.microsoft.z3.Expr convertNewExpr(soot.jimple.NewExpr,safetyChecker.Edge)>
<safetyChecker.Z3ScriptHandler: com.microsoft.z3.Expr convertNewArrayExpr(soot.jimple.NewArrayExpr,safetyChecker.Edge)>
<safetyChecker.Z3ScriptHandler: com.microsoft.z3.Expr convertNewMultiArrayExpr(soot.jimple.NewMultiArrayExpr,safetyChecker.Edge)>
<safetyChecker.Z3ScriptHandler: java.lang.String getArrayName(soot.Value)>
<safetyChecker.Z3ScriptHandler: java.lang.String getNameSuffix(safetyChecker.Edge)>
<safetyChecker.Z3ScriptHandler: java.lang.String getNameSuffix()>
<safetyChecker.Z3ScriptHandler: java.lang.String getArrayNameSuffix()>
<safetyChecker.Z3ScriptHandler: java.lang.String getArraySortSuffix()>
<safetyChecker.Z3ScriptHandler: int getRealArraySize(java.lang.String)>
<safetyChecker.Z3ScriptHandler: com.microsoft.z3.Expr convertBoolExpr(soot.jimple.BinopExpr,safetyChecker.Edge,int)>
<safetyChecker.Z3ScriptHandler: com.microsoft.z3.Expr z3ObjectField(soot.jimple.InstanceFieldRef,boolean,safetyChecker.Edge)>
<safetyChecker.Z3ScriptHandler: com.microsoft.z3.InterpolationContext getIctx()>
<safetyChecker.Z3ScriptHandler: java.util.Map getGlobal()>
<safetyChecker.Z3ScriptHandler: java.util.Map getSubstitute()>
<safetyChecker.Z3ScriptHandler: java.util.Map getSubstituteSort()>
<safetyChecker.Z3ScriptHandler: java.util.Map getArrayNameMap()>
<safetyChecker.Z3ScriptHandler: java.util.Map getLocalMap()>
<safetyChecker.Z3ScriptHandler: java.util.Map getSortId()>
<safetyChecker.Z3ScriptHandler: java.util.Map getNewSortMap()>
<safetyChecker.Z3ScriptHandler: java.util.Map getMaxArraySize()>
Transforming safetyTestCode.arraytest.Test1... 
<safetyTestCode.arraytest.Test1: void <init>()>
<safetyTestCode.arraytest.Test1: void test4(int)>
<safetyTestCode.arraytest.Test1: void test(int)>
<safetyTestCode.arraytest.Test1: void test3(int)>
Transforming safetyTestCode.iftest.Test1... 
<safetyTestCode.iftest.Test1: void <init>()>
<safetyTestCode.iftest.Test1: void test()>
<safetyTestCode.iftest.Test1: int callee()>
Transforming safetyTestCode.iftest.Test2... 
<safetyTestCode.iftest.Test2: void <init>()>
<safetyTestCode.iftest.Test2: void test()>
Transforming safetyTestCode.iftest.Test3... 
<safetyTestCode.iftest.Test3: void <init>()>
<safetyTestCode.iftest.Test3: void test()>
Transforming safetyTestCode.iftest.Test4... 
<safetyTestCode.iftest.Test4: void <init>()>
<safetyTestCode.iftest.Test4: void test()>
Transforming safetyTestCode.leetCode.climbingStairs.Test1... 
<safetyTestCode.leetCode.climbingStairs.Test1: void <init>()>
<safetyTestCode.leetCode.climbingStairs.Test1: void main(java.lang.String[])>
<safetyTestCode.leetCode.climbingStairs.Test1: int climbStairs(int)>
Transforming safetyTestCode.leetCode.climbingStairs.Test2... 
<safetyTestCode.leetCode.climbingStairs.Test2: void <init>()>
<safetyTestCode.leetCode.climbingStairs.Test2: void main(java.lang.String[])>
<safetyTestCode.leetCode.climbingStairs.Test2: int climbStairs(int)>
Transforming safetyTestCode.object.Obj... 
<safetyTestCode.object.Obj: void <init>()>
Transforming safetyTestCode.object.Test1... 
<safetyTestCode.object.Test1: void <init>()>
<safetyTestCode.object.Test1: void test()>
<safetyTestCode.object.Test1: void main(java.lang.String[])>
Transforming safetyTestCode.whiletest.Test1... 
<safetyTestCode.whiletest.Test1: void <init>()>
<safetyTestCode.whiletest.Test1: void test()>
Transforming safetyTestCode.whiletest.Test2... 
<safetyTestCode.whiletest.Test2: void <init>()>
<safetyTestCode.whiletest.Test2: void test2()>
<safetyTestCode.whiletest.Test2: void test(int)>
Transforming safetyTester.arraytest.Tester1$1... 
<safetyTester.arraytest.Tester1$1: void <init>()>
<safetyTester.arraytest.Tester1$1: void internalTransform(soot.Body,java.lang.String,java.util.Map)>
Transforming safetyTester.arraytest.Tester1... 
<safetyTester.arraytest.Tester1: void <clinit>()>
<safetyTester.arraytest.Tester1: void <init>()>
<safetyTester.arraytest.Tester1: void main(java.lang.String[])>
Transforming safetyTester.iftest.Tester1$1... 
<safetyTester.iftest.Tester1$1: void <init>()>
<safetyTester.iftest.Tester1$1: void internalTransform(soot.Body,java.lang.String,java.util.Map)>
Transforming safetyTester.iftest.Tester1... 
<safetyTester.iftest.Tester1: void <init>()>
<safetyTester.iftest.Tester1: void main(java.lang.String[])>
<safetyTester.iftest.Tester1: void <clinit>()>
Transforming safetyTester.iftest.Tester2$1... 
<safetyTester.iftest.Tester2$1: void <init>()>
<safetyTester.iftest.Tester2$1: void internalTransform(soot.Body,java.lang.String,java.util.Map)>
Transforming safetyTester.iftest.Tester2... 
<safetyTester.iftest.Tester2: void <clinit>()>
<safetyTester.iftest.Tester2: void <init>()>
<safetyTester.iftest.Tester2: void main(java.lang.String[])>
Transforming safetyTester.iftest.Tester3$1... 
<safetyTester.iftest.Tester3$1: void <init>()>
<safetyTester.iftest.Tester3$1: void internalTransform(soot.Body,java.lang.String,java.util.Map)>
Transforming safetyTester.iftest.Tester3... 
<safetyTester.iftest.Tester3: void <clinit>()>
<safetyTester.iftest.Tester3: void <init>()>
<safetyTester.iftest.Tester3: void main(java.lang.String[])>
Transforming safetyTester.iftest.Tester4$1... 
<safetyTester.iftest.Tester4$1: void <init>()>
<safetyTester.iftest.Tester4$1: void internalTransform(soot.Body,java.lang.String,java.util.Map)>
Transforming safetyTester.iftest.Tester4... 
<safetyTester.iftest.Tester4: void <clinit>()>
<safetyTester.iftest.Tester4: void <init>()>
<safetyTester.iftest.Tester4: void main(java.lang.String[])>
Transforming safetyTester.leetCode.climbingStairs.Tester1$1... 
<safetyTester.leetCode.climbingStairs.Tester1$1: void <init>()>
<safetyTester.leetCode.climbingStairs.Tester1$1: void internalTransform(soot.Body,java.lang.String,java.util.Map)>
Transforming safetyTester.leetCode.climbingStairs.Tester1... 
<safetyTester.leetCode.climbingStairs.Tester1: void <clinit>()>
<safetyTester.leetCode.climbingStairs.Tester1: void <init>()>
<safetyTester.leetCode.climbingStairs.Tester1: void main(java.lang.String[])>
Transforming safetyTester.leetCode.climbingStairs.Tester2$1... 
<safetyTester.leetCode.climbingStairs.Tester2$1: void <init>()>
<safetyTester.leetCode.climbingStairs.Tester2$1: void internalTransform(soot.Body,java.lang.String,java.util.Map)>
Transforming safetyTester.leetCode.climbingStairs.Tester2... 
<safetyTester.leetCode.climbingStairs.Tester2: void <clinit>()>
<safetyTester.leetCode.climbingStairs.Tester2: void <init>()>
<safetyTester.leetCode.climbingStairs.Tester2: void main(java.lang.String[])>
Transforming safetyTester.object.Tester1$1... 
<safetyTester.object.Tester1$1: void <init>()>
<safetyTester.object.Tester1$1: void internalTransform(soot.Body,java.lang.String,java.util.Map)>
Transforming safetyTester.object.Tester1... 
<safetyTester.object.Tester1: void <init>()>
<safetyTester.object.Tester1: void main(java.lang.String[])>
<safetyTester.object.Tester1: void <clinit>()>
Transforming safetyTester.whiletest.Tester1$1... 
<safetyTester.whiletest.Tester1$1: void <init>()>
<safetyTester.whiletest.Tester1$1: void internalTransform(soot.Body,java.lang.String,java.util.Map)>
Transforming safetyTester.whiletest.Tester1... 
<safetyTester.whiletest.Tester1: void <clinit>()>
<safetyTester.whiletest.Tester1: void <init>()>
<safetyTester.whiletest.Tester1: void main(java.lang.String[])>
Transforming safetyTester.whiletest.Tester2$1... 
<safetyTester.whiletest.Tester2$1: void <init>()>
<safetyTester.whiletest.Tester2$1: void internalTransform(soot.Body,java.lang.String,java.util.Map)>
Transforming safetyTester.whiletest.Tester2... 
<safetyTester.whiletest.Tester2: void <clinit>()>
<safetyTester.whiletest.Tester2: void <init>()>
<safetyTester.whiletest.Tester2: void main(java.lang.String[])>
Writing to src/output/safetyTest/dotty.CfgConverter.shimple
Writing to src/output/safetyTest/RecordPeekMemoryAndTime.testDriver.shimple
Writing to src/output/safetyTest/safetyChecker.CoverRelation.shimple
Writing to src/output/safetyTest/safetyChecker.Edge.shimple
Writing to src/output/safetyTest/safetyChecker.ErrorLable.shimple
Writing to src/output/safetyTest/safetyChecker.exception.CreateZ3ScriptFailedException.shimple
Writing to src/output/safetyTest/safetyChecker.exception.ErrorLocationNotFoundException.shimple
Writing to src/output/safetyTest/safetyChecker.exception.MainFunctionNotFoundException.shimple
Writing to src/output/safetyTest/safetyChecker.InterpolationHandler.shimple
Writing to src/output/safetyTest/safetyChecker.LogUtils.shimple
Writing to src/output/safetyTest/safetyChecker.NewSort.shimple
Writing to src/output/safetyTest/safetyChecker.ProgramTree.shimple
Writing to src/output/safetyTest/safetyChecker.SafetyInitializerW.shimple
Writing to src/output/safetyTest/safetyChecker.UnitController.shimple
Writing to src/output/safetyTest/safetyChecker.Vertex.shimple
Writing to src/output/safetyTest/safetyChecker.Z3ArrayHandler.shimple
Writing to src/output/safetyTest/safetyChecker.Z3ScriptHandler.shimple
Writing to src/output/safetyTest/safetyTestCode.arraytest.Test1.shimple
Writing to src/output/safetyTest/safetyTestCode.iftest.Test1.shimple
Writing to src/output/safetyTest/safetyTestCode.iftest.Test2.shimple
Writing to src/output/safetyTest/safetyTestCode.iftest.Test3.shimple
Writing to src/output/safetyTest/safetyTestCode.iftest.Test4.shimple
Writing to src/output/safetyTest/safetyTestCode.leetCode.climbingStairs.Test1.shimple
Writing to src/output/safetyTest/safetyTestCode.leetCode.climbingStairs.Test2.shimple
Writing to src/output/safetyTest/safetyTestCode.object.Obj.shimple
Writing to src/output/safetyTest/safetyTestCode.object.Test1.shimple
Writing to src/output/safetyTest/safetyTestCode.whiletest.Test1.shimple
Writing to src/output/safetyTest/safetyTestCode.whiletest.Test2.shimple
Writing to src/output/safetyTest/safetyTester.arraytest.Tester1$1.shimple
Writing to src/output/safetyTest/safetyTester.arraytest.Tester1.shimple
Writing to src/output/safetyTest/safetyTester.iftest.Tester1$1.shimple
Writing to src/output/safetyTest/safetyTester.iftest.Tester1.shimple
Writing to src/output/safetyTest/safetyTester.iftest.Tester2$1.shimple
Writing to src/output/safetyTest/safetyTester.iftest.Tester2.shimple
Writing to src/output/safetyTest/safetyTester.iftest.Tester3$1.shimple
Writing to src/output/safetyTest/safetyTester.iftest.Tester3.shimple
Writing to src/output/safetyTest/safetyTester.iftest.Tester4$1.shimple
Writing to src/output/safetyTest/safetyTester.iftest.Tester4.shimple
Writing to src/output/safetyTest/safetyTester.leetCode.climbingStairs.Tester1$1.shimple
Writing to src/output/safetyTest/safetyTester.leetCode.climbingStairs.Tester1.shimple
Writing to src/output/safetyTest/safetyTester.leetCode.climbingStairs.Tester2$1.shimple
Writing to src/output/safetyTest/safetyTester.leetCode.climbingStairs.Tester2.shimple
Writing to src/output/safetyTest/safetyTester.object.Tester1$1.shimple
Writing to src/output/safetyTest/safetyTester.object.Tester1.shimple
Writing to src/output/safetyTest/safetyTester.whiletest.Tester1$1.shimple
Writing to src/output/safetyTest/safetyTester.whiletest.Tester1.shimple
Writing to src/output/safetyTest/safetyTester.whiletest.Tester2$1.shimple
Writing to src/output/safetyTest/safetyTester.whiletest.Tester2.shimple
Soot finished on Wed Jun 29 17:48:22 EDT 2016
Soot has run for 0 min. 1 sec.
[36msafetyTester.object.Tester1... Test started...[0m
[36m----->Unwind[0m
[36merror root #1=L17-D16[0m
[33m>>>>>>[0m[36mL17-D16***r0 := @this: safetyTestCode.object.Test1[0m
[33m>>>>>>[0m[36mL16-D15***$r2 = new safetyTestCode.object.Obj[0m
[33m>>>>>>[0m[36mL15-D14***specialinvoke $r2.<safetyTestCode.object.Obj: void <init>()>()[0m
[33m>>>>>>[0m[36mL14-D13***r1 = $r2[0m
[33m>>>>>>[0m[36mL13-D12***b7 = 3[0m
[33mIntegerType[0m
[33m>>>>>>[0m[36mL12-D11***b0 = 2[0m
[33mIntegerType[0m
[33m>>>>>>[0m[36mL11-D10***b1 = b7[0m
[33mIntegerType[0m
[33m>>>>>>[0m[36mL10-D9***l2 = 23L[0m
[36mLongConstant[0m
[33mLongType[0m
[33m>>>>>>[0m[36mL9-D8***l3 = (long) b1[0m
[33mLongType[0m
[33m>>>>>>[0m[36mL8-D7***$i4 = (int) l2[0m
[33mIntegerType[0m
[33m>>>>>>[0m[36mL7-D6***b8 = (byte) $i4[0m
[33mIntegerType[0m
[33m>>>>>>[0m[36mL6-D5***$l5 = l2 - 20L[0m
[36mLongConstant[0m
[33mLongType[0m
[33m>>>>>>[0m[36mL5-D4***$b6 = l3 cmp $l5[0m
[33mIntegerType[0m
[33m>>>>>>[0m[36mL4-D3***if $b6 != 0 goto return[0m
[35m********************
 L17-D16[0m
[35mError path is feasible.[0m
[35m********************[0m
[33merrorSet size = 1[0m
[36m<------unwind[0m
[35m********************
 <safetyTestCode.object.Test1: void test()>[0m
[35mError path is feasible.[0m
[35m********************[0m
[36msafetyTester.object.Tester1... Test finished...[0m
>>> creating .ps files
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> Ended ...
