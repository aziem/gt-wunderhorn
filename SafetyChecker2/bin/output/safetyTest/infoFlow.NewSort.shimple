public class infoFlow.NewSort extends java.lang.Object
{
    private com.microsoft.z3.Sort Type;
    private int currentId;
    private int ObejctId;
    private java.util.Map index;
    private java.util.Set realObject;
    private com.microsoft.z3.InterpolationContext iCtx;
    private int Path;

    public void <init>(com.microsoft.z3.Sort, com.microsoft.z3.InterpolationContext)
    {
        infoFlow.NewSort r0;
        com.microsoft.z3.Sort r1;
        com.microsoft.z3.InterpolationContext r2;
        java.util.HashMap $r3;
        java.util.HashSet $r4;

        r0 := @this: infoFlow.NewSort;

        r1 := @parameter0: com.microsoft.z3.Sort;

        r2 := @parameter1: com.microsoft.z3.InterpolationContext;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<infoFlow.NewSort: com.microsoft.z3.Sort Type> = r1;

        r0.<infoFlow.NewSort: int currentId> = 1;

        r0.<infoFlow.NewSort: int ObejctId> = 1;

        $r3 = new java.util.HashMap;

        specialinvoke $r3.<java.util.HashMap: void <init>()>();

        r0.<infoFlow.NewSort: java.util.Map index> = $r3;

        $r4 = new java.util.HashSet;

        specialinvoke $r4.<java.util.HashSet: void <init>()>();

        r0.<infoFlow.NewSort: java.util.Set realObject> = $r4;

        r0.<infoFlow.NewSort: com.microsoft.z3.InterpolationContext iCtx> = r2;

        return;
    }

    public void creatNewOject(com.microsoft.z3.Expr)
    {
        infoFlow.NewSort r0;
        com.microsoft.z3.Expr r1;
        java.lang.Integer r2;
        com.microsoft.z3.IntNum r3;
        int $i0, $i1, $i2, $i3;
        com.microsoft.z3.InterpolationContext $r4;
        java.util.Map $r5;

        r0 := @this: infoFlow.NewSort;

        r1 := @parameter0: com.microsoft.z3.Expr;

        $i0 = r0.<infoFlow.NewSort: int currentId>;

        r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0);

        $r4 = r0.<infoFlow.NewSort: com.microsoft.z3.InterpolationContext iCtx>;

        $i1 = virtualinvoke r2.<java.lang.Integer: int intValue()>();

        r3 = virtualinvoke $r4.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.IntNum mkInt(int)>($i1);

        $r5 = r0.<infoFlow.NewSort: java.util.Map index>;

        interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r3);

        $i2 = r0.<infoFlow.NewSort: int currentId>;

        $i3 = $i2 + 1;

        r0.<infoFlow.NewSort: int currentId> = $i3;

        return;
    }

    public com.microsoft.z3.IntExpr getId(com.microsoft.z3.Expr)
    {
        infoFlow.NewSort r0;
        com.microsoft.z3.Expr r1;
        com.microsoft.z3.IntExpr r2;
        java.util.Map $r3;
        java.lang.Object $r4;

        r0 := @this: infoFlow.NewSort;

        r1 := @parameter0: com.microsoft.z3.Expr;

        $r3 = r0.<infoFlow.NewSort: java.util.Map index>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        r2 = (com.microsoft.z3.IntExpr) $r4;

        return r2;
    }

    public boolean ifHasExpr(com.microsoft.z3.Expr)
    {
        infoFlow.NewSort r0;
        com.microsoft.z3.Expr r1;
        java.util.Map $r2;
        boolean $z0;

        r0 := @this: infoFlow.NewSort;

        r1 := @parameter0: com.microsoft.z3.Expr;

        $r2 = r0.<infoFlow.NewSort: java.util.Map index>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        return $z0;
    }

    public com.microsoft.z3.Expr getNewObject()
    {
        infoFlow.NewSort r0;
        int i0, $i1, $i2;
        com.microsoft.z3.IntNum r1;
        com.microsoft.z3.InterpolationContext $r2;

        r0 := @this: infoFlow.NewSort;

        i0 = r0.<infoFlow.NewSort: int ObejctId>;

        $r2 = r0.<infoFlow.NewSort: com.microsoft.z3.InterpolationContext iCtx>;

        r1 = virtualinvoke $r2.<com.microsoft.z3.InterpolationContext: com.microsoft.z3.IntNum mkInt(int)>(i0);

        $i1 = r0.<infoFlow.NewSort: int ObejctId>;

        $i2 = $i1 + 1;

        r0.<infoFlow.NewSort: int ObejctId> = $i2;

        return r1;
    }
}
