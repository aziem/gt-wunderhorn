public class infoFlow.NodeComparator extends java.lang.Object implements java.util.Comparator
{

    public void <init>()
    {
        infoFlow.NodeComparator r0;

        r0 := @this: infoFlow.NodeComparator;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public int compare(infoFlow.Vertex, infoFlow.Vertex)
    {
        infoFlow.NodeComparator r0;
        infoFlow.Vertex r1, r2;

        r0 := @this: infoFlow.NodeComparator;

        r1 := @parameter0: infoFlow.Vertex;

        r2 := @parameter1: infoFlow.Vertex;

        return 0;
    }

    public volatile int compare(java.lang.Object, java.lang.Object)
    {
        infoFlow.NodeComparator r0;
        java.lang.Object r1, r2;
        infoFlow.Vertex $r3, $r4;
        int $i0;

        r0 := @this: infoFlow.NodeComparator;

        r1 := @parameter0: java.lang.Object;

        r2 := @parameter1: java.lang.Object;

        $r4 = (infoFlow.Vertex) r1;

        $r3 = (infoFlow.Vertex) r2;

        $i0 = virtualinvoke r0.<infoFlow.NodeComparator: int compare(infoFlow.Vertex,infoFlow.Vertex)>($r4, $r3);

        return $i0;
    }
}
