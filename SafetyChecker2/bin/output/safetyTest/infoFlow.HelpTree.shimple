public class infoFlow.HelpTree extends java.lang.Object
{
    private soot.toolkits.graph.ExceptionalUnitGraph cfg;
    private java.util.Map shortestPath;
    private java.util.Map lowestUnwind;
    private java.util.ArrayList rootUnit;
    private soot.Unit rtrn;
    private java.util.Map stores;
    private boolean ifModified;

    public void <init>(soot.toolkits.graph.ExceptionalUnitGraph)
    {
        infoFlow.HelpTree r0;
        soot.toolkits.graph.ExceptionalUnitGraph r1, $r7;
        java.util.HashSet r2, $r11;
        java.util.LinkedList r3, $r13;
        java.util.HashMap $r4, $r5;
        java.util.ArrayList $r6;
        java.util.List $r8;
        java.lang.Object $r9;
        soot.Unit $r10, $r12, $r14;

        r0 := @this: infoFlow.HelpTree;

        r1 := @parameter0: soot.toolkits.graph.ExceptionalUnitGraph;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        r0.<infoFlow.HelpTree: soot.toolkits.graph.ExceptionalUnitGraph cfg> = r1;

        $r4 = new java.util.HashMap;

        specialinvoke $r4.<java.util.HashMap: void <init>()>();

        r0.<infoFlow.HelpTree: java.util.Map shortestPath> = $r4;

        $r5 = new java.util.HashMap;

        specialinvoke $r5.<java.util.HashMap: void <init>()>();

        r0.<infoFlow.HelpTree: java.util.Map lowestUnwind> = $r5;

        r0.<infoFlow.HelpTree: boolean ifModified> = 0;

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<java.util.ArrayList: void <init>()>();

        r0.<infoFlow.HelpTree: java.util.ArrayList rootUnit> = $r6;

        $r7 = r0.<infoFlow.HelpTree: soot.toolkits.graph.ExceptionalUnitGraph cfg>;

        $r8 = virtualinvoke $r7.<soot.toolkits.graph.ExceptionalUnitGraph: java.util.List getTails()>();

        $r9 = interfaceinvoke $r8.<java.util.List: java.lang.Object get(int)>(0);

        $r10 = (soot.Unit) $r9;

        r0.<infoFlow.HelpTree: soot.Unit rtrn> = $r10;

        $r11 = new java.util.HashSet;

        specialinvoke $r11.<java.util.HashSet: void <init>()>();

        r2 = $r11;

        $r12 = r0.<infoFlow.HelpTree: soot.Unit rtrn>;

        interfaceinvoke r2.<java.util.Set: boolean add(java.lang.Object)>($r12);

        $r13 = new java.util.LinkedList;

        specialinvoke $r13.<java.util.LinkedList: void <init>()>();

        r3 = $r13;

        $r14 = r0.<infoFlow.HelpTree: soot.Unit rtrn>;

        interfaceinvoke r3.<java.util.Queue: boolean add(java.lang.Object)>($r14);

        specialinvoke r0.<infoFlow.HelpTree: void findRootUnit(java.util.Set,java.util.Queue)>(r2, r3);

        specialinvoke r0.<infoFlow.HelpTree: void ShortestReturnPath()>();

        specialinvoke r0.<infoFlow.HelpTree: void UpdateAllZeros()>();

        return;
    }

    public void setStores(java.util.Map)
    {
        infoFlow.HelpTree r0;
        java.util.Map r1;

        r0 := @this: infoFlow.HelpTree;

        r1 := @parameter0: java.util.Map;

        r0.<infoFlow.HelpTree: java.util.Map stores> = r1;

        return;
    }

    public void getDepth()
    {
        infoFlow.HelpTree r0;
        java.util.ArrayList r1, $r2;

        r0 := @this: infoFlow.HelpTree;

        r0.<infoFlow.HelpTree: boolean ifModified> = 0;

        $r2 = new java.util.ArrayList;

        specialinvoke $r2.<java.util.ArrayList: void <init>()>();

        r1 = $r2;

        return;
    }

    private void getDepth1(java.util.ArrayList, int)
    {
        infoFlow.HelpTree r0, r5;
        java.util.ArrayList r1, r6, $r12, $r13, r14;
        int i0, $i1, $i2, $i3, $i4, $i5, i6, i7, i8, i6_1, i6_2;
        soot.Unit r2, r4;
        java.util.List r3;
        java.lang.Object $r7, $r9, $r11;
        soot.toolkits.graph.ExceptionalUnitGraph $r8;
        boolean $z0, $z1, $z2;
        java.util.Map $r10;
        java.lang.String r15;

        r0 := @this: infoFlow.HelpTree;

        r1 := @parameter0: java.util.ArrayList;

        i0 := @parameter1: int;

        $i1 = virtualinvoke r1.<java.util.ArrayList: int size()>();

        $i2 = $i1 - 1;

        $r7 = virtualinvoke r1.<java.util.ArrayList: java.lang.Object get(int)>($i2);

        r2 = (soot.Unit) $r7;

        $r8 = r0.<infoFlow.HelpTree: soot.toolkits.graph.ExceptionalUnitGraph cfg>;

        r3 = virtualinvoke $r8.<soot.toolkits.graph.ExceptionalUnitGraph: java.util.List getUnexceptionalPredsOf(soot.Unit)>(r2);

        i6 = 0;

(0)     goto label4;

     label1:
        i7 = i0;

        $r9 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(i6_1);

        r4 = (soot.Unit) $r9;

        $z0 = virtualinvoke r1.<java.util.ArrayList: boolean contains(java.lang.Object)>(r4);

        if $z0 != 0 goto label3;

        $z1 = virtualinvoke r0.<infoFlow.HelpTree: boolean IfNonAnalysis(soot.Unit)>(r4);

        if $z1 == 0 goto label2;

        specialinvoke r0.<infoFlow.HelpTree: void updateLowest(soot.Unit,int)>(r4, i7);

        $r13 = new java.util.ArrayList;

        specialinvoke $r13.<java.util.ArrayList: void <init>()>();

        r14 = $r13;

        virtualinvoke r14.<java.util.ArrayList: boolean addAll(java.util.Collection)>(r1);

        virtualinvoke r14.<java.util.ArrayList: boolean add(java.lang.Object)>(r4);

        specialinvoke r0.<infoFlow.HelpTree: void getDepth1(java.util.ArrayList,int)>(r14, i7);

        goto label3;

     label2:
        r15 = staticinvoke <infoFlow.HelpTree: java.lang.String getMethodSignature(soot.Unit)>(r4);

        $r10 = r0.<infoFlow.HelpTree: java.util.Map stores>;

        $r11 = interfaceinvoke $r10.<java.util.Map: java.lang.Object get(java.lang.Object)>(r15);

        r5 = (infoFlow.HelpTree) $r11;

        $z2 = virtualinvoke r5.<infoFlow.HelpTree: boolean IfRootHasDepth()>();

        if $z2 == 0 goto label3;

        $i4 = virtualinvoke r5.<infoFlow.HelpTree: int getRootDepth()>();

        $i5 = i0 + $i4;

        i8 = $i5 + 1;

        specialinvoke r0.<infoFlow.HelpTree: void updateLowest(soot.Unit,int)>(r4, i8);

        $r12 = new java.util.ArrayList;

        specialinvoke $r12.<java.util.ArrayList: void <init>()>();

        r6 = $r12;

        virtualinvoke r6.<java.util.ArrayList: boolean addAll(java.util.Collection)>(r1);

        virtualinvoke r6.<java.util.ArrayList: boolean add(java.lang.Object)>(r4);

        specialinvoke r0.<infoFlow.HelpTree: void getDepth1(java.util.ArrayList,int)>(r6, i8);

     label3:
(1)     i6_2 = i6_1 + 1;

     label4:
        i6_1 = Phi(i6 #0, i6_2 #1);

        $i3 = interfaceinvoke r3.<java.util.List: int size()>();

        if i6_1 < $i3 goto label1;

        return;
    }

    private void ShortestReturnPath()
    {
        infoFlow.HelpTree r0;

        r0 := @this: infoFlow.HelpTree;

        return;
    }

    private java.util.Set getAllUnites(soot.Unit)
    {
        infoFlow.HelpTree r0;
        soot.Unit r1, r4, r6;
        java.util.HashSet r2, $r7;
        java.util.LinkedList r3, $r8;
        java.util.List r5;
        boolean $z2, $z3;
        java.lang.Object $r9, $r11;
        soot.toolkits.graph.ExceptionalUnitGraph $r10;
        int $i0, i1, i1_1, i1_2, i1_3;

        r0 := @this: infoFlow.HelpTree;

        r1 := @parameter0: soot.Unit;

        $r7 = new java.util.HashSet;

        specialinvoke $r7.<java.util.HashSet: void <init>()>();

        r2 = $r7;

        interfaceinvoke r2.<java.util.Set: boolean add(java.lang.Object)>(r1);

        $r8 = new java.util.LinkedList;

        specialinvoke $r8.<java.util.LinkedList: void <init>()>();

        r3 = $r8;

        interfaceinvoke r3.<java.util.Queue: boolean add(java.lang.Object)>(r1);

(0)     goto label5;

     label1:
        $r9 = interfaceinvoke r3.<java.util.Queue: java.lang.Object remove()>();

        r4 = (soot.Unit) $r9;

        $r10 = r0.<infoFlow.HelpTree: soot.toolkits.graph.ExceptionalUnitGraph cfg>;

        r5 = virtualinvoke $r10.<soot.toolkits.graph.ExceptionalUnitGraph: java.util.List getUnexceptionalPredsOf(soot.Unit)>(r4);

        i1_1 = 0;

(1)     goto label4;

     label2:
        $r11 = interfaceinvoke r5.<java.util.List: java.lang.Object get(int)>(i1_2);

        r6 = (soot.Unit) $r11;

        $z3 = interfaceinvoke r2.<java.util.Set: boolean contains(java.lang.Object)>(r6);

        if $z3 != 0 goto label3;

        interfaceinvoke r2.<java.util.Set: boolean add(java.lang.Object)>(r6);

        interfaceinvoke r3.<java.util.Queue: boolean add(java.lang.Object)>(r6);

     label3:
(2)     i1_3 = i1_2 + 1;

     label4:
        i1_2 = Phi(i1_1 #1, i1_3 #2);

        $i0 = interfaceinvoke r5.<java.util.List: int size()>();

(3)     if i1_2 < $i0 goto label2;

     label5:
        i1 = Phi(i1 #0, i1_2 #3);

        $z2 = interfaceinvoke r3.<java.util.Queue: boolean isEmpty()>();

        if $z2 == 0 goto label1;

        return r2;
    }

    private java.util.Set getAllDepthZeroUnites()
    {
        infoFlow.HelpTree r0;
        java.util.HashSet r1, $r2;

        r0 := @this: infoFlow.HelpTree;

        $r2 = new java.util.HashSet;

        specialinvoke $r2.<java.util.HashSet: void <init>()>();

        r1 = $r2;

        return r1;
    }

    private void UpdateAllZeros()
    {
        infoFlow.HelpTree r0;
        java.util.Set r1;
        soot.Unit r2;
        java.util.Iterator r3;
        boolean $z0;
        java.lang.Object $r4;

        r0 := @this: infoFlow.HelpTree;

        r1 = specialinvoke r0.<infoFlow.HelpTree: java.util.Set getAllDepthZeroUnites()>();

        r3 = interfaceinvoke r1.<java.util.Set: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r2 = (soot.Unit) $r4;

        specialinvoke r0.<infoFlow.HelpTree: void updateLowest(soot.Unit,int)>(r2, 0);

     label2:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return;
    }

    private void updateLowest(soot.Unit, int)
    {
        infoFlow.HelpTree r0;
        soot.Unit r1;
        int i0, i1;
        java.util.Map $r2, $r3, $r6, $r9, $r12;
        boolean $z0;
        java.lang.Integer $r4, $r8, $r10, $r13;
        java.lang.Object $r7;

        r0 := @this: infoFlow.HelpTree;

        r1 := @parameter0: soot.Unit;

        i0 := @parameter1: int;

        $r2 = r0.<infoFlow.HelpTree: java.util.Map lowestUnwind>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 == 0 goto label2;

        $r6 = r0.<infoFlow.HelpTree: java.util.Map lowestUnwind>;

        $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        $r8 = (java.lang.Integer) $r7;

        i1 = virtualinvoke $r8.<java.lang.Integer: int intValue()>();

        if i0 >= i1 goto label1;

        $r12 = r0.<infoFlow.HelpTree: java.util.Map lowestUnwind>;

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        interfaceinvoke $r12.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r13);

        r0.<infoFlow.HelpTree: boolean ifModified> = 1;

        goto label3;

     label1:
        $r9 = r0.<infoFlow.HelpTree: java.util.Map lowestUnwind>;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r10);

        goto label3;

     label2:
        $r3 = r0.<infoFlow.HelpTree: java.util.Map lowestUnwind>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r4);

        r0.<infoFlow.HelpTree: boolean ifModified> = 1;

     label3:
        return;
    }

    private void updateShortest(soot.Unit, int)
    {
        infoFlow.HelpTree r0;
        soot.Unit r1;
        int i0, i1;
        java.util.Map $r2, $r3, $r6, $r9, $r12;
        boolean $z0;
        java.lang.Integer $r4, $r8, $r10, $r13;
        java.lang.Object $r7;

        r0 := @this: infoFlow.HelpTree;

        r1 := @parameter0: soot.Unit;

        i0 := @parameter1: int;

        $r2 = r0.<infoFlow.HelpTree: java.util.Map shortestPath>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 == 0 goto label2;

        $r6 = r0.<infoFlow.HelpTree: java.util.Map shortestPath>;

        $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1);

        $r8 = (java.lang.Integer) $r7;

        i1 = virtualinvoke $r8.<java.lang.Integer: int intValue()>();

        if i0 >= i1 goto label1;

        $r12 = r0.<infoFlow.HelpTree: java.util.Map shortestPath>;

        $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        interfaceinvoke $r12.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r13);

        goto label3;

     label1:
        $r9 = r0.<infoFlow.HelpTree: java.util.Map shortestPath>;

        $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1);

        interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r10);

        goto label3;

     label2:
        $r3 = r0.<infoFlow.HelpTree: java.util.Map shortestPath>;

        $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0);

        interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r4);

     label3:
        return;
    }

    private void findRootUnit(java.util.Set, java.util.Queue)
    {
        infoFlow.HelpTree r0;
        java.util.Set r1;
        java.util.Queue r2;
        soot.Unit r3;
        boolean $z0;
        java.lang.Object $r5;
        soot.toolkits.graph.ExceptionalUnitGraph $r6, $r8;
        java.util.List $r7;
        int $i0;
        java.util.ArrayList $r9;

        r0 := @this: infoFlow.HelpTree;

        r1 := @parameter0: java.util.Set;

        r2 := @parameter1: java.util.Queue;

        $z0 = interfaceinvoke r2.<java.util.Queue: boolean isEmpty()>();

        if $z0 == 0 goto label1;

        return;

     label1:
        $r5 = interfaceinvoke r2.<java.util.Queue: java.lang.Object remove()>();

        r3 = (soot.Unit) $r5;

        $r6 = r0.<infoFlow.HelpTree: soot.toolkits.graph.ExceptionalUnitGraph cfg>;

        $r7 = virtualinvoke $r6.<soot.toolkits.graph.ExceptionalUnitGraph: java.util.List getUnexceptionalPredsOf(soot.Unit)>(r3);

        $i0 = interfaceinvoke $r7.<java.util.List: int size()>();

        if $i0 != 0 goto label2;

        $r9 = r0.<infoFlow.HelpTree: java.util.ArrayList rootUnit>;

        virtualinvoke $r9.<java.util.ArrayList: boolean add(java.lang.Object)>(r3);

        goto label3;

     label2:
        $r8 = r0.<infoFlow.HelpTree: soot.toolkits.graph.ExceptionalUnitGraph cfg>;

        virtualinvoke $r8.<soot.toolkits.graph.ExceptionalUnitGraph: java.util.List getUnexceptionalPredsOf(soot.Unit)>(r3);

     label3:
        specialinvoke r0.<infoFlow.HelpTree: void findRootUnit(java.util.Set,java.util.Queue)>(r1, r2);

        return;
    }

    public boolean IfRootHasDepth()
    {
        infoFlow.HelpTree r0;

        r0 := @this: infoFlow.HelpTree;

        return 1;
    }

    public int getRootDepth()
    {
        infoFlow.HelpTree r0;

        r0 := @this: infoFlow.HelpTree;

        return -111;
    }

    public static boolean isInvoke(soot.Unit)
    {
        soot.Unit r0;
        java.lang.String r1, r3;
        boolean $z0, $z1, $z2, $z3, $z4;
        soot.jimple.AssignStmt $r2;
        soot.Value r4;

        r0 := @parameter0: soot.Unit;

        $z0 = r0 instanceof soot.jimple.InvokeStmt;

        if $z0 == 0 goto label2;

        r3 = staticinvoke <infoFlow.HelpTree: java.lang.String getMethodSignature(soot.Unit)>(r0);

        $z4 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("<java.lang.Object: void <init>()>");

        if $z4 == 0 goto label1;

        return 0;

     label1:
        return 1;

     label2:
        $z1 = r0 instanceof soot.jimple.AssignStmt;

        if $z1 == 0 goto label4;

        $r2 = (soot.jimple.AssignStmt) r0;

        r4 = interfaceinvoke $r2.<soot.jimple.AssignStmt: soot.Value getRightOp()>();

        $z2 = r4 instanceof soot.jimple.InvokeExpr;

        if $z2 == 0 goto label4;

        r1 = staticinvoke <infoFlow.HelpTree: java.lang.String getMethodSignature(soot.Unit)>(r0);

        $z3 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("<java.lang.Object: void <init>()>");

        if $z3 == 0 goto label3;

        return 0;

     label3:
        return 1;

     label4:
        return 0;
    }

    public boolean IfNonAnalysis(soot.Unit)
    {
        infoFlow.HelpTree r0;
        soot.Unit r1;
        java.lang.String r2;
        boolean $z0, $z1;
        java.util.Map $r3;

        r0 := @this: infoFlow.HelpTree;

        r1 := @parameter0: soot.Unit;

        $z0 = staticinvoke <infoFlow.HelpTree: boolean isInvoke(soot.Unit)>(r1);

        if $z0 != 0 goto label1;

        return 1;

     label1:
        r2 = staticinvoke <infoFlow.HelpTree: java.lang.String getMethodSignature(soot.Unit)>(r1);

        $r3 = r0.<infoFlow.HelpTree: java.util.Map stores>;

        $z1 = interfaceinvoke $r3.<java.util.Map: boolean containsKey(java.lang.Object)>(r2);

        if $z1 != 0 goto label2;

        return 1;

     label2:
        return 0;
    }

    public static java.lang.String getMethodSignature(soot.Unit)
    {
        soot.Unit r0;
        soot.jimple.InvokeExpr r1, $r5;
        boolean $z0, $z1;
        soot.jimple.AssignStmt $r2;
        soot.SootMethod $r3, $r6;
        java.lang.String $r4, $r7;
        soot.jimple.InvokeStmt r8;
        soot.Value r9;

        r0 := @parameter0: soot.Unit;

        $z0 = r0 instanceof soot.jimple.InvokeStmt;

        if $z0 == 0 goto label1;

        r8 = (soot.jimple.InvokeStmt) r0;

        $r5 = interfaceinvoke r8.<soot.jimple.InvokeStmt: soot.jimple.InvokeExpr getInvokeExpr()>();

        $r6 = interfaceinvoke $r5.<soot.jimple.InvokeExpr: soot.SootMethod getMethod()>();

        $r7 = virtualinvoke $r6.<soot.SootMethod: java.lang.String getSignature()>();

        return $r7;

     label1:
        $z1 = r0 instanceof soot.jimple.AssignStmt;

        if $z1 == 0 goto label2;

        $r2 = (soot.jimple.AssignStmt) r0;

        r9 = interfaceinvoke $r2.<soot.jimple.AssignStmt: soot.Value getRightOp()>();

        r1 = (soot.jimple.InvokeExpr) r9;

        $r3 = interfaceinvoke r1.<soot.jimple.InvokeExpr: soot.SootMethod getMethod()>();

        $r4 = virtualinvoke $r3.<soot.SootMethod: java.lang.String getSignature()>();

        return $r4;

     label2:
        return null;
    }

    public boolean ifModified()
    {
        infoFlow.HelpTree r0;
        boolean $z0;

        r0 := @this: infoFlow.HelpTree;

        $z0 = r0.<infoFlow.HelpTree: boolean ifModified>;

        return $z0;
    }

    public int getNodeDepth(soot.Unit)
    {
        infoFlow.HelpTree r0;
        soot.Unit r1;
        java.util.Map $r2, $r3;
        boolean $z0;
        java.lang.Object $r4;
        java.lang.Integer $r5;
        int $i0;

        r0 := @this: infoFlow.HelpTree;

        r1 := @parameter0: soot.Unit;

        $r2 = r0.<infoFlow.HelpTree: java.util.Map lowestUnwind>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        return 2147483647;

     label1:
        $r3 = r0.<infoFlow.HelpTree: java.util.Map lowestUnwind>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r5 = (java.lang.Integer) $r4;

        $i0 = virtualinvoke $r5.<java.lang.Integer: int intValue()>();

        return $i0;
    }

    public int getNodeShortest(soot.Unit)
    {
        infoFlow.HelpTree r0;
        soot.Unit r1;
        java.util.Map $r2, $r3;
        boolean $z0;
        java.lang.Object $r4;
        java.lang.Integer $r5;
        int $i0;
        java.io.PrintStream $r6;

        r0 := @this: infoFlow.HelpTree;

        r1 := @parameter0: soot.Unit;

        $r2 = r0.<infoFlow.HelpTree: java.util.Map shortestPath>;

        $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1);

        if $z0 != 0 goto label1;

        $r6 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke $r6.<java.io.PrintStream: void println(java.lang.Object)>(r1);

        return 2147483647;

     label1:
        $r3 = r0.<infoFlow.HelpTree: java.util.Map shortestPath>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1);

        $r5 = (java.lang.Integer) $r4;

        $i0 = virtualinvoke $r5.<java.lang.Integer: int intValue()>();

        return $i0;
    }

    public void printResult()
    {
        infoFlow.HelpTree r0;
        java.util.Map$Entry r1;
        java.util.Iterator r2;
        java.util.Map $r3;
        java.util.Set $r4;
        boolean $z0;
        java.lang.Object $r5, $r8, $r13;
        java.lang.StringBuilder $r6, $r11, $r12, $r14;
        java.io.PrintStream $r7;
        soot.Unit $r9;
        java.lang.String $r10, $r15;

        r0 := @this: infoFlow.HelpTree;

        $r3 = r0.<infoFlow.HelpTree: java.util.Map lowestUnwind>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Set entrySet()>();

        r2 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r1 = (java.util.Map$Entry) $r5;

        $r7 = <java.lang.System: java.io.PrintStream out>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>("Unit:");

        $r8 = interfaceinvoke r1.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r9 = (soot.Unit) $r8;

        $r10 = virtualinvoke $r9.<java.lang.Object: java.lang.String toString()>();

        $r11 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",cost:");

        $r13 = interfaceinvoke r1.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r7.<java.io.PrintStream: void println(java.lang.String)>($r15);

     label2:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return;
    }

    public void printResult2()
    {
        infoFlow.HelpTree r0;
        java.util.Map$Entry r1;
        java.util.Iterator r2;
        java.util.Map $r3;
        java.util.Set $r4;
        boolean $z0;
        java.lang.Object $r5, $r8, $r13;
        java.lang.StringBuilder $r6, $r11, $r12, $r14;
        java.io.PrintStream $r7;
        soot.Unit $r9;
        java.lang.String $r10, $r15;

        r0 := @this: infoFlow.HelpTree;

        $r3 = r0.<infoFlow.HelpTree: java.util.Map shortestPath>;

        $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Set entrySet()>();

        r2 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>();

        goto label2;

     label1:
        $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>();

        r1 = (java.util.Map$Entry) $r5;

        $r7 = <java.lang.System: java.io.PrintStream out>;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<java.lang.StringBuilder: void <init>(java.lang.String)>("Unit:");

        $r8 = interfaceinvoke r1.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r9 = (soot.Unit) $r8;

        $r10 = virtualinvoke $r9.<java.lang.Object: java.lang.String toString()>();

        $r11 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",cost:");

        $r13 = interfaceinvoke r1.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        virtualinvoke $r7.<java.io.PrintStream: void println(java.lang.String)>($r15);

     label2:
        $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return;
    }

    public soot.Unit getRoot()
    {
        infoFlow.HelpTree r0;

        r0 := @this: infoFlow.HelpTree;

        return null;
    }
}
