public class infoFlow.ProgramTree extends java.lang.Object
{
    private infoFlow.Vertex returnLeaf;
    private java.util.Set liSet;
    private infoFlow.Vertex lf;
    private java.util.Map stores;
    private java.util.Set vertexSet;
    private java.util.Set edgeSet;
    private java.util.Stack path;
    private com.microsoft.z3.InterpolationContext ictx;
    private infoFlow.Z3ScriptHandler z3Handler;
    private infoFlow.InterpolationHandler itpHandler;
    private boolean errorLocationFeasible;
    private boolean mainFunction;
    private boolean treeClosed;
    private java.util.HashMap calleeFunctions;
    private java.util.HashSet errorRootSet;
    private java.util.Queue errorRootQueue;
    private java.util.LinkedList returnPaths;
    private java.util.LinkedList errorPaths;
    private java.lang.String functionSignature;
    private java.lang.String functionName;
    private static java.util.Map functionNameInvokeCount;
    private soot.toolkits.graph.ExceptionalUnitGraph cfg;
    private java.lang.String signature;
    private infoFlow.UnitController unitController;
    private infoFlow.CoverRelation coverRelation;
    private java.util.Queue uncovered;
    private java.util.Queue errorSet;
    private int locationCounter;

    static void <clinit>()
    {
        java.util.HashMap $r0;

        $r0 = new java.util.HashMap;

        specialinvoke $r0.<java.util.HashMap: void <init>()>();

        <infoFlow.ProgramTree: java.util.Map functionNameInvokeCount> = $r0;

        return;
    }

    public void <init>(java.util.Map, java.lang.String, boolean) throws infoFlow.exception.MainFunctionNotFoundException, infoFlow.exception.ErrorLocationNotFoundException
    {
        infoFlow.ProgramTree r0;
        java.util.Map r1;
        java.lang.String r2, $r25, $r28, $r29, $r31, $r35;
        boolean z0, z1, $z2;
        java.util.HashSet $r3, $r4, $r10;
        java.util.Stack $r5;
        java.util.LinkedList $r6, $r7, $r11, $r12, $r13;
        java.lang.Object[] $r8, $r22, $r32;
        java.util.HashMap $r9;
        infoFlow.UnitController $r14;
        com.microsoft.z3.InterpolationContext $r15, $r17, $r19, $r21;
        infoFlow.Z3ScriptHandler $r16;
        infoFlow.InterpolationHandler $r18;
        infoFlow.CoverRelation $r20;
        java.lang.StringBuilder $r23, $r24, $r27, $r30, $r33, $r34;
        infoFlow.exception.MainFunctionNotFoundException $r26;

        r0 := @this: infoFlow.ProgramTree;

        r1 := @parameter0: java.util.Map;

        r2 := @parameter1: java.lang.String;

        z0 := @parameter2: boolean;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        $r3 = new java.util.HashSet;

        specialinvoke $r3.<java.util.HashSet: void <init>()>();

        r0.<infoFlow.ProgramTree: java.util.Set vertexSet> = $r3;

        $r4 = new java.util.HashSet;

        specialinvoke $r4.<java.util.HashSet: void <init>()>();

        r0.<infoFlow.ProgramTree: java.util.Set edgeSet> = $r4;

        $r5 = new java.util.Stack;

        specialinvoke $r5.<java.util.Stack: void <init>()>();

        r0.<infoFlow.ProgramTree: java.util.Stack path> = $r5;

        r0.<infoFlow.ProgramTree: boolean errorLocationFeasible> = 0;

        $r6 = new java.util.LinkedList;

        specialinvoke $r6.<java.util.LinkedList: void <init>()>();

        r0.<infoFlow.ProgramTree: java.util.Queue uncovered> = $r6;

        $r7 = new java.util.LinkedList;

        specialinvoke $r7.<java.util.LinkedList: void <init>()>();

        r0.<infoFlow.ProgramTree: java.util.Queue errorSet> = $r7;

        r0.<infoFlow.ProgramTree: int locationCounter> = 0;

        $r8 = newarray (java.lang.Object)[1];

        $r8[0] = "------->ProgramTree";

        staticinvoke <infoFlow.LogUtils: void detailln(java.lang.Object[])>($r8);

        r0.<infoFlow.ProgramTree: boolean errorLocationFeasible> = 0;

        $r9 = new java.util.HashMap;

        specialinvoke $r9.<java.util.HashMap: void <init>()>();

        r0.<infoFlow.ProgramTree: java.util.HashMap calleeFunctions> = $r9;

        $r10 = new java.util.HashSet;

        specialinvoke $r10.<java.util.HashSet: void <init>()>();

        r0.<infoFlow.ProgramTree: java.util.HashSet errorRootSet> = $r10;

        $r11 = new java.util.LinkedList;

        specialinvoke $r11.<java.util.LinkedList: void <init>()>();

        r0.<infoFlow.ProgramTree: java.util.Queue errorRootQueue> = $r11;

        $r12 = new java.util.LinkedList;

        specialinvoke $r12.<java.util.LinkedList: void <init>()>();

        r0.<infoFlow.ProgramTree: java.util.LinkedList returnPaths> = $r12;

        $r13 = new java.util.LinkedList;

        specialinvoke $r13.<java.util.LinkedList: void <init>()>();

        r0.<infoFlow.ProgramTree: java.util.LinkedList errorPaths> = $r13;

        r0.<infoFlow.ProgramTree: java.lang.String functionSignature> = r2;

        r0.<infoFlow.ProgramTree: java.util.Map stores> = r1;

        $r14 = new infoFlow.UnitController;

        specialinvoke $r14.<infoFlow.UnitController: void <init>()>();

        r0.<infoFlow.ProgramTree: infoFlow.UnitController unitController> = $r14;

        r0.<infoFlow.ProgramTree: boolean mainFunction> = z0;

        $r15 = new com.microsoft.z3.InterpolationContext;

        specialinvoke $r15.<com.microsoft.z3.InterpolationContext: void <init>()>();

        r0.<infoFlow.ProgramTree: com.microsoft.z3.InterpolationContext ictx> = $r15;

        $r16 = new infoFlow.Z3ScriptHandler;

        $r17 = r0.<infoFlow.ProgramTree: com.microsoft.z3.InterpolationContext ictx>;

        specialinvoke $r16.<infoFlow.Z3ScriptHandler: void <init>(com.microsoft.z3.InterpolationContext)>($r17);

        r0.<infoFlow.ProgramTree: infoFlow.Z3ScriptHandler z3Handler> = $r16;

        $r18 = new infoFlow.InterpolationHandler;

        $r19 = r0.<infoFlow.ProgramTree: com.microsoft.z3.InterpolationContext ictx>;

        specialinvoke $r18.<infoFlow.InterpolationHandler: void <init>(com.microsoft.z3.InterpolationContext)>($r19);

        r0.<infoFlow.ProgramTree: infoFlow.InterpolationHandler itpHandler> = $r18;

        $r20 = new infoFlow.CoverRelation;

        $r21 = r0.<infoFlow.ProgramTree: com.microsoft.z3.InterpolationContext ictx>;

        specialinvoke $r20.<infoFlow.CoverRelation: void <init>(com.microsoft.z3.InterpolationContext)>($r21);

        r0.<infoFlow.ProgramTree: infoFlow.CoverRelation coverRelation> = $r20;

        $z2 = r0.<infoFlow.ProgramTree: boolean mainFunction>;

        if $z2 == 0 goto label1;

        $r32 = newarray (java.lang.Object)[1];

        $r33 = new java.lang.StringBuilder;

        specialinvoke $r33.<java.lang.StringBuilder: void <init>(java.lang.String)>("mainFunction = ");

        $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>();

        $r32[0] = $r35;

        staticinvoke <infoFlow.LogUtils: void detailln(java.lang.Object[])>($r32);

        goto label2;

     label1:
        $r22 = newarray (java.lang.Object)[1];

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<java.lang.StringBuilder: void <init>(java.lang.String)>("setSubFunction = ");

        $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2);

        $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>();

        $r22[0] = $r25;

        staticinvoke <infoFlow.LogUtils: void detailln(java.lang.Object[])>($r22);

     label2:
        z1 = specialinvoke r0.<infoFlow.ProgramTree: boolean findMainFunction()>();

        if z1 == 0 goto label3;

        specialinvoke r0.<infoFlow.ProgramTree: void startTest()>();

        goto label4;

     label3:
        $r26 = new infoFlow.exception.MainFunctionNotFoundException;

        $r27 = new java.lang.StringBuilder;

        $r28 = r0.<infoFlow.ProgramTree: java.lang.String functionSignature>;

        $r29 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r28);

        specialinvoke $r27.<java.lang.StringBuilder: void <init>(java.lang.String)>($r29);

        $r30 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not exist in the current program");

        $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.String toString()>();

        specialinvoke $r26.<infoFlow.exception.MainFunctionNotFoundException: void <init>(java.lang.String)>($r31);

        throw $r26;

     label4:
        return;
    }

    private void startTest() throws infoFlow.exception.ErrorLocationNotFoundException, infoFlow.exception.MainFunctionNotFoundException
    {
        infoFlow.ProgramTree r0;
        java.lang.Object[] $r1, $r2;

        r0 := @this: infoFlow.ProgramTree;

        $r1 = newarray (java.lang.Object)[1];

        $r1[0] = "------------>startTest()";

        staticinvoke <infoFlow.LogUtils: void detailln(java.lang.Object[])>($r1);

        specialinvoke r0.<infoFlow.ProgramTree: void unwind()>();

        $r2 = newarray (java.lang.Object)[1];

        $r2[0] = "<-------------startTest";

        staticinvoke <infoFlow.LogUtils: void detailln(java.lang.Object[])>($r2);

        return;
    }

    private boolean findErrorLocation(infoFlow.Vertex)
    {
        infoFlow.ProgramTree r0;
        infoFlow.Vertex r1, r7, $r24, $r26, $r27, $r28, $r30, $r31;
        infoFlow.Edge r2, r8, $r25, $r29, r32;
        java.util.Iterator r3, r5, r6;
        soot.Unit r4, $r12, r33;
        java.util.Set $r9;
        boolean $z0, $z1, $z2, $z3;
        java.lang.Object $r10, $r14, $r23;
        soot.toolkits.graph.ExceptionalUnitGraph $r11, $r21;
        java.util.List $r13, $r22;
        java.lang.Object[] $r15, $r20;
        java.lang.StringBuilder $r16, $r17;
        java.lang.String $r18;
        infoFlow.UnitController $r19;

        r0 := @this: infoFlow.ProgramTree;

        r1 := @parameter0: infoFlow.Vertex;

        $r9 = virtualinvoke r1.<infoFlow.Vertex: java.util.Set getIncomingEdges()>();

        r3 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>();

        goto label7;

     label1:
        $r10 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r2 = (infoFlow.Edge) $r10;

        $r11 = r0.<infoFlow.ProgramTree: soot.toolkits.graph.ExceptionalUnitGraph cfg>;

        $r12 = virtualinvoke r2.<infoFlow.Edge: soot.Unit getUnit()>();

        $r13 = virtualinvoke $r11.<soot.toolkits.graph.ExceptionalUnitGraph: java.util.List getPredsOf(soot.Unit)>($r12);

        r5 = interfaceinvoke $r13.<java.util.List: java.util.Iterator iterator()>();

        goto label6;

     label2:
        $r14 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>();

        r4 = (soot.Unit) $r14;

        $r15 = newarray (java.lang.Object)[1];

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<java.lang.StringBuilder: void <init>(java.lang.String)>("findErrorLocation : ");

        $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4);

        $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>();

        $r15[0] = $r18;

        staticinvoke <infoFlow.LogUtils: void debugln(java.lang.Object[])>($r15);

        $r19 = r0.<infoFlow.ProgramTree: infoFlow.UnitController unitController>;

        $z2 = virtualinvoke $r19.<infoFlow.UnitController: boolean isErrorUnit(soot.Unit)>(r4);

        if $z2 == 0 goto label3;

        $r26 = new infoFlow.Vertex;

        specialinvoke $r26.<infoFlow.Vertex: void <init>()>();

        r0.<infoFlow.ProgramTree: infoFlow.Vertex lf> = $r26;

        $r27 = r0.<infoFlow.ProgramTree: infoFlow.Vertex lf>;

        virtualinvoke $r27.<infoFlow.Vertex: void setErrorLocation(boolean)>(1);

        $r28 = r0.<infoFlow.ProgramTree: infoFlow.Vertex lf>;

        virtualinvoke $r28.<infoFlow.Vertex: void setNextVertex(infoFlow.Vertex)>(r1);

        $r29 = new infoFlow.Edge;

        specialinvoke $r29.<infoFlow.Edge: void <init>(soot.Unit)>(r4);

        r32 = $r29;

        $r30 = r0.<infoFlow.ProgramTree: infoFlow.Vertex lf>;

        virtualinvoke $r30.<infoFlow.Vertex: void addIncomingEdge(infoFlow.Edge)>(r32);

        $r31 = r0.<infoFlow.ProgramTree: infoFlow.Vertex lf>;

        virtualinvoke r1.<infoFlow.Vertex: void addPreviousVertex(infoFlow.Vertex)>($r31);

        return 1;

     label3:
        $r20 = newarray (java.lang.Object)[1];

        $r20[0] = "else girdi";

        staticinvoke <infoFlow.LogUtils: void debugln(java.lang.Object[])>($r20);

        $r21 = r0.<infoFlow.ProgramTree: soot.toolkits.graph.ExceptionalUnitGraph cfg>;

        $r22 = virtualinvoke $r21.<soot.toolkits.graph.ExceptionalUnitGraph: java.util.List getPredsOf(soot.Unit)>(r4);

        r6 = interfaceinvoke $r22.<java.util.List: java.util.Iterator iterator()>();

        goto label5;

     label4:
        $r23 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        r33 = (soot.Unit) $r23;

        $r24 = new infoFlow.Vertex;

        specialinvoke $r24.<infoFlow.Vertex: void <init>()>();

        r7 = $r24;

        $r25 = new infoFlow.Edge;

        specialinvoke $r25.<infoFlow.Edge: void <init>(soot.Unit)>(r33);

        r8 = $r25;

        virtualinvoke r7.<infoFlow.Vertex: void addIncomingEdge(infoFlow.Edge)>(r8);

     label5:
        $z3 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z3 != 0 goto label4;

     label6:
        $z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>();

        if $z1 != 0 goto label2;

     label7:
        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        return 0;
    }

    private boolean findMainFunction()
    {
        infoFlow.ProgramTree r0;
        soot.Body r1, $r9;
        infoFlow.Edge r2, $r24;
        java.lang.String $r3, $r6, $r10, $r14, $r15, $r18, $r21, $r30, $r33;
        java.util.Map $r4, $r7, $r11, $r16, $r17, $r31, $r32;
        boolean $z0, $z1;
        soot.toolkits.graph.ExceptionalUnitGraph $r5, $r25;
        java.lang.Object $r8, $r12, $r27, $r34;
        soot.SootMethod $r13;
        java.lang.Integer $r19, $r35, $r36;
        infoFlow.Vertex $r22, $r23, $r29;
        java.util.List $r26;
        soot.Unit $r28;
        int $i0, $i1;

        r0 := @this: infoFlow.ProgramTree;

        $r4 = r0.<infoFlow.ProgramTree: java.util.Map stores>;

        $r3 = r0.<infoFlow.ProgramTree: java.lang.String functionSignature>;

        $z0 = interfaceinvoke $r4.<java.util.Map: boolean containsKey(java.lang.Object)>($r3);

        if $z0 == 0 goto label3;

        $r5 = new soot.toolkits.graph.ExceptionalUnitGraph;

        $r7 = r0.<infoFlow.ProgramTree: java.util.Map stores>;

        $r6 = r0.<infoFlow.ProgramTree: java.lang.String functionSignature>;

        $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>($r6);

        $r9 = (soot.Body) $r8;

        specialinvoke $r5.<soot.toolkits.graph.ExceptionalUnitGraph: void <init>(soot.Body)>($r9);

        r0.<infoFlow.ProgramTree: soot.toolkits.graph.ExceptionalUnitGraph cfg> = $r5;

        $r11 = r0.<infoFlow.ProgramTree: java.util.Map stores>;

        $r10 = r0.<infoFlow.ProgramTree: java.lang.String functionSignature>;

        $r12 = interfaceinvoke $r11.<java.util.Map: java.lang.Object get(java.lang.Object)>($r10);

        r1 = (soot.Body) $r12;

        $r13 = virtualinvoke r1.<soot.Body: soot.SootMethod getMethod()>();

        $r14 = virtualinvoke $r13.<soot.SootMethod: java.lang.String getName()>();

        r0.<infoFlow.ProgramTree: java.lang.String functionName> = $r14;

        $r16 = <infoFlow.ProgramTree: java.util.Map functionNameInvokeCount>;

        $r15 = r0.<infoFlow.ProgramTree: java.lang.String functionName>;

        $z1 = interfaceinvoke $r16.<java.util.Map: boolean containsKey(java.lang.Object)>($r15);

        if $z1 == 0 goto label1;

        $r32 = <infoFlow.ProgramTree: java.util.Map functionNameInvokeCount>;

        $r33 = r0.<infoFlow.ProgramTree: java.lang.String functionName>;

        $r31 = <infoFlow.ProgramTree: java.util.Map functionNameInvokeCount>;

        $r30 = r0.<infoFlow.ProgramTree: java.lang.String functionName>;

        $r34 = interfaceinvoke $r31.<java.util.Map: java.lang.Object get(java.lang.Object)>($r30);

        $r35 = (java.lang.Integer) $r34;

        $i0 = virtualinvoke $r35.<java.lang.Integer: int intValue()>();

        $i1 = $i0 + 1;

        $r36 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1);

        interfaceinvoke $r32.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r33, $r36);

        goto label2;

     label1:
        $r17 = <infoFlow.ProgramTree: java.util.Map functionNameInvokeCount>;

        $r18 = r0.<infoFlow.ProgramTree: java.lang.String functionName>;

        $r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0);

        interfaceinvoke $r17.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r18, $r19);

     label2:
        $r21 = r0.<infoFlow.ProgramTree: java.lang.String functionSignature>;

        r0.<infoFlow.ProgramTree: java.lang.String signature> = $r21;

        $r22 = new infoFlow.Vertex;

        specialinvoke $r22.<infoFlow.Vertex: void <init>()>();

        r0.<infoFlow.ProgramTree: infoFlow.Vertex returnLeaf> = $r22;

        $r23 = r0.<infoFlow.ProgramTree: infoFlow.Vertex returnLeaf>;

        virtualinvoke $r23.<infoFlow.Vertex: void setReturnLocation(boolean)>(1);

        $r24 = new infoFlow.Edge;

        $r25 = r0.<infoFlow.ProgramTree: soot.toolkits.graph.ExceptionalUnitGraph cfg>;

        $r26 = virtualinvoke $r25.<soot.toolkits.graph.ExceptionalUnitGraph: java.util.List getTails()>();

        $r27 = interfaceinvoke $r26.<java.util.List: java.lang.Object get(int)>(0);

        $r28 = (soot.Unit) $r27;

        specialinvoke $r24.<infoFlow.Edge: void <init>(soot.Unit)>($r28);

        r2 = $r24;

        $r29 = r0.<infoFlow.ProgramTree: infoFlow.Vertex returnLeaf>;

        virtualinvoke $r29.<infoFlow.Vertex: void addIncomingEdge(infoFlow.Edge)>(r2);

        return 1;

     label3:
        return 0;
    }

    private void unwind() throws infoFlow.exception.MainFunctionNotFoundException, infoFlow.exception.ErrorLocationNotFoundException
    {
        infoFlow.ProgramTree r0;
        boolean z0, $z2, $z3, $z4, $z5, $z7, z8;
        java.lang.Object[] $r1, $r10, $r21, $r27, $r33, $r43, $r51, $r54, $r58;
        infoFlow.Vertex $r2, $r20, r59, r60;
        java.util.Queue $r3, $r4, $r5, $r8, $r53;
        int $i0, $i1, $i2, $i3, $i4, i5, i5_1, i5_2, i5_3;
        java.lang.Object $r6, $r9, $r42, $r45, $r48;
        infoFlow.CoverRelation $r7, $r18, $r23, $r29, $r35, $r39, $r52;
        java.lang.StringBuilder $r11, $r13, $r22, $r25, $r28, $r31, $r34, $r37, $r44, $r46, $r47, $r49, $r55, $r56;
        java.util.HashSet $r12;
        java.lang.String $r14, $r17, $r26, $r32, $r38, $r50, $r57;
        infoFlow.Z3ScriptHandler $r15;
        infoFlow.InterpolationHandler $r16;
        java.util.LinkedList $r19, r61;
        java.util.Map $r24, $r30, $r36, $r40;
        java.util.Set $r41;
        java.util.Iterator r62;
        java.util.Map$Entry r63;

        r0 := @this: infoFlow.ProgramTree;

        $r1 = newarray (java.lang.Object)[1];

        $r1[0] = "----->Unwind";

        staticinvoke <infoFlow.LogUtils: void detailln(java.lang.Object[])>($r1);

        z0 = 0;

        $r3 = r0.<infoFlow.ProgramTree: java.util.Queue uncovered>;

        $r2 = r0.<infoFlow.ProgramTree: infoFlow.Vertex returnLeaf>;

        interfaceinvoke $r3.<java.util.Queue: boolean add(java.lang.Object)>($r2);

        i5 = 0;

(0)     goto label5;

     label1:
        $i0 = i5_1;

        i5_2 = i5_1 + 1;

        if $i0 <= 100 goto label2;

        $r58 = newarray (java.lang.Object)[1];

        $r58[0] = "counter break";

        staticinvoke <infoFlow.LogUtils: void fatalln(java.lang.Object[])>($r58);

(1)     goto label6;

     label2:
        $r5 = r0.<infoFlow.ProgramTree: java.util.Queue uncovered>;

        $r6 = interfaceinvoke $r5.<java.util.Queue: java.lang.Object remove()>();

        r59 = (infoFlow.Vertex) $r6;

        $r7 = r0.<infoFlow.ProgramTree: infoFlow.CoverRelation coverRelation>;

        $z3 = virtualinvoke $r7.<infoFlow.CoverRelation: boolean isCovered(infoFlow.Vertex)>(r59);

        if $z3 == 0 goto label3;

        $r54 = newarray (java.lang.Object)[1];

        $r55 = new java.lang.StringBuilder;

        specialinvoke $r55.<java.lang.StringBuilder: void <init>(java.lang.String)>("unwind -- vertex = ");

        $r56 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r59);

        $r57 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.String toString()>();

        $r54[0] = $r57;

        staticinvoke <infoFlow.LogUtils: void fatalln(java.lang.Object[])>($r54);

(2)     goto label5;

     label3:
        z8 = specialinvoke r0.<infoFlow.ProgramTree: boolean expandBFS(infoFlow.Vertex)>(r59);

(3)     if z8 == 0 goto label5;

        $r8 = r0.<infoFlow.ProgramTree: java.util.Queue errorRootQueue>;

        $r9 = interfaceinvoke $r8.<java.util.Queue: java.lang.Object remove()>();

        r60 = (infoFlow.Vertex) $r9;

        $r10 = newarray (java.lang.Object)[1];

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<java.lang.StringBuilder: void <init>(java.lang.String)>("error root # = ");

        $r12 = r0.<infoFlow.ProgramTree: java.util.HashSet errorRootSet>;

        $i1 = virtualinvoke $r12.<java.util.HashSet: int size()>();

        $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1);

        $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>();

        $r10[0] = $r14;

        staticinvoke <infoFlow.LogUtils: void infoln(java.lang.Object[])>($r10);

        $r15 = r0.<infoFlow.ProgramTree: infoFlow.Z3ScriptHandler z3Handler>;

        virtualinvoke $r15.<infoFlow.Z3ScriptHandler: void convertPathtoZ3Script(infoFlow.Vertex)>(r60);

        $r16 = r0.<infoFlow.ProgramTree: infoFlow.InterpolationHandler itpHandler>;

        $z4 = virtualinvoke $r16.<infoFlow.InterpolationHandler: boolean createInterpolant(infoFlow.Vertex)>(r60);

        r0.<infoFlow.ProgramTree: boolean errorLocationFeasible> = $z4;

        $r17 = virtualinvoke r60.<infoFlow.Vertex: java.lang.String toString()>();

        virtualinvoke r0.<infoFlow.ProgramTree: void printResult(java.lang.String)>($r17);

        $z5 = r0.<infoFlow.ProgramTree: boolean errorLocationFeasible>;

        if $z5 == 0 goto label4;

(4)     goto label6;

     label4:
        $r18 = r0.<infoFlow.ProgramTree: infoFlow.CoverRelation coverRelation>;

(5)     virtualinvoke $r18.<infoFlow.CoverRelation: void updateCover()>();

     label5:
        i5_1 = Phi(i5 #0, i5_2 #2, i5_2 #3, i5_2 #5);

        $r4 = r0.<infoFlow.ProgramTree: java.util.Queue uncovered>;

        $z2 = interfaceinvoke $r4.<java.util.Queue: boolean isEmpty()>();

(6)     if $z2 == 0 goto label1;

     label6:
        i5_3 = Phi(i5_2 #1, i5_2 #4, i5_1 #6);

        $r19 = new java.util.LinkedList;

        specialinvoke $r19.<java.util.LinkedList: void <init>()>();

        r61 = $r19;

        $r20 = r0.<infoFlow.ProgramTree: infoFlow.Vertex returnLeaf>;

        interfaceinvoke r61.<java.util.Queue: boolean add(java.lang.Object)>($r20);

        $r21 = newarray (java.lang.Object)[1];

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<java.lang.StringBuilder: void <init>(java.lang.String)>("coveringVertexMap # ");

        $r23 = r0.<infoFlow.ProgramTree: infoFlow.CoverRelation coverRelation>;

        $r24 = virtualinvoke $r23.<infoFlow.CoverRelation: java.util.Map getCoveringMap()>();

        $i2 = interfaceinvoke $r24.<java.util.Map: int size()>();

        $r25 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2);

        $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>();

        $r21[0] = $r26;

        staticinvoke <infoFlow.LogUtils: void warningln(java.lang.Object[])>($r21);

        $r27 = newarray (java.lang.Object)[1];

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<java.lang.StringBuilder: void <init>(java.lang.String)>("coveredVertexMap # ");

        $r29 = r0.<infoFlow.ProgramTree: infoFlow.CoverRelation coverRelation>;

        $r30 = virtualinvoke $r29.<infoFlow.CoverRelation: java.util.Map getCoveredByMap()>();

        $i3 = interfaceinvoke $r30.<java.util.Map: int size()>();

        $r31 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3);

        $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>();

        $r27[0] = $r32;

        staticinvoke <infoFlow.LogUtils: void warningln(java.lang.Object[])>($r27);

        $r33 = newarray (java.lang.Object)[1];

        $r34 = new java.lang.StringBuilder;

        specialinvoke $r34.<java.lang.StringBuilder: void <init>(java.lang.String)>("unitVertexMap # ");

        $r35 = r0.<infoFlow.ProgramTree: infoFlow.CoverRelation coverRelation>;

        $r36 = virtualinvoke $r35.<infoFlow.CoverRelation: java.util.Map getUnitVertexMap()>();

        $i4 = interfaceinvoke $r36.<java.util.Map: int size()>();

        $r37 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4);

        $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>();

        $r33[0] = $r38;

        staticinvoke <infoFlow.LogUtils: void warningln(java.lang.Object[])>($r33);

        $r39 = r0.<infoFlow.ProgramTree: infoFlow.CoverRelation coverRelation>;

        $r40 = virtualinvoke $r39.<infoFlow.CoverRelation: java.util.Map getUnitVertexMap()>();

        $r41 = interfaceinvoke $r40.<java.util.Map: java.util.Set entrySet()>();

        r62 = interfaceinvoke $r41.<java.util.Set: java.util.Iterator iterator()>();

        goto label8;

     label7:
        $r42 = interfaceinvoke r62.<java.util.Iterator: java.lang.Object next()>();

        r63 = (java.util.Map$Entry) $r42;

        $r43 = newarray (java.lang.Object)[1];

        $r44 = new java.lang.StringBuilder;

        specialinvoke $r44.<java.lang.StringBuilder: void <init>()>();

        $r45 = interfaceinvoke r63.<java.util.Map$Entry: java.lang.Object getKey()>();

        $r46 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r45);

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("--");

        $r48 = interfaceinvoke r63.<java.util.Map$Entry: java.lang.Object getValue()>();

        $r49 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r48);

        $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.String toString()>();

        $r43[0] = $r50;

        staticinvoke <infoFlow.LogUtils: void warningln(java.lang.Object[])>($r43);

        $r51 = newarray (java.lang.Object)[1];

        $r51[0] = "-------------";

        staticinvoke <infoFlow.LogUtils: void infoln(java.lang.Object[])>($r51);

     label8:
        $z7 = interfaceinvoke r62.<java.util.Iterator: boolean hasNext()>();

        if $z7 != 0 goto label7;

        staticinvoke <dotty.CfgConverter: void printAllPaths(java.util.Queue,java.lang.String)>(r61, "_all.dot");

        $r53 = r0.<infoFlow.ProgramTree: java.util.Queue errorSet>;

        $r52 = r0.<infoFlow.ProgramTree: infoFlow.CoverRelation coverRelation>;

        staticinvoke <dotty.CfgConverter: void printErrorPaths(java.util.Queue,java.lang.String,infoFlow.CoverRelation)>($r53, "_errors.dot", $r52);

        return;
    }

    private boolean expandBFS(infoFlow.Vertex) throws infoFlow.exception.MainFunctionNotFoundException, infoFlow.exception.ErrorLocationNotFoundException
    {
        infoFlow.ProgramTree r0;
        infoFlow.Vertex r1, r4, $r18;
        infoFlow.Edge r2, r7, $r13, $r28, $r33;
        java.util.Iterator r3, r6;
        soot.Unit r5, $r22, $r25;
        java.lang.Object[] $r8, $r36, $r43;
        java.lang.StringBuilder $r9, $r11, $r12, $r14, $r37, $r39, $r44, $r46, $r47, $r49;
        java.util.Set $r10, $r16, $r19, $r45, $r48;
        java.lang.String $r15, $r40, $r50;
        boolean $z0, $z3, $z4, $z6, $z8, z11, z11_1, z11_2, z11_3;
        java.lang.Object $r17, $r27;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6;
        java.util.Queue $r20, $r32, $r34, $r35, $r38, $r42;
        soot.toolkits.graph.ExceptionalUnitGraph $r21, $r24;
        java.util.List $r23, $r26;
        infoFlow.CoverRelation $r29;
        java.util.Map $r30;
        infoFlow.UnitController $r31;
        java.util.HashSet $r41;

        r0 := @this: infoFlow.ProgramTree;

        r1 := @parameter0: infoFlow.Vertex;

        $r8 = newarray (java.lang.Object)[1];

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<java.lang.StringBuilder: void <init>(java.lang.String)>("----->expand : w.incomingEdges");

        $r10 = virtualinvoke r1.<infoFlow.Vertex: java.util.Set getIncomingEdges()>();

        $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10);

        $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": outgoingedges");

        $r13 = virtualinvoke r1.<infoFlow.Vertex: infoFlow.Edge getOutgoingEdge()>();

        $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r13);

        $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>();

        $r8[0] = $r15;

        staticinvoke <infoFlow.LogUtils: void detailln(java.lang.Object[])>($r8);

        z11 = 0;

        $r16 = virtualinvoke r1.<infoFlow.Vertex: java.util.Set getIncomingEdges()>();

        r3 = interfaceinvoke $r16.<java.util.Set: java.util.Iterator iterator()>();

(0)     goto label5;

     label1:
        $r17 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>();

        r2 = (infoFlow.Edge) $r17;

        $r18 = new infoFlow.Vertex;

        specialinvoke $r18.<infoFlow.Vertex: void <init>()>();

        r4 = $r18;

        virtualinvoke r4.<infoFlow.Vertex: void setOutgoingEdge(infoFlow.Edge)>(r2);

        virtualinvoke r2.<infoFlow.Edge: void setSource(infoFlow.Vertex)>(r4);

        virtualinvoke r4.<infoFlow.Vertex: void setNextVertex(infoFlow.Vertex)>(r1);

        $i0 = virtualinvoke r1.<infoFlow.Vertex: int getDistance()>();

        $i1 = $i0 + 1;

        virtualinvoke r4.<infoFlow.Vertex: void setDistance(int)>($i1);

        $i2 = r0.<infoFlow.ProgramTree: int locationCounter>;

        $i3 = $i2 + 1;

        r0.<infoFlow.ProgramTree: int locationCounter> = $i3;

        virtualinvoke r4.<infoFlow.Vertex: void setLocationNumber(int)>($i3);

        virtualinvoke r1.<infoFlow.Vertex: void addPreviousVertex(infoFlow.Vertex)>(r4);

        $r19 = r0.<infoFlow.ProgramTree: java.util.Set vertexSet>;

        interfaceinvoke $r19.<java.util.Set: boolean add(java.lang.Object)>(r4);

        $r20 = r0.<infoFlow.ProgramTree: java.util.Queue uncovered>;

        interfaceinvoke $r20.<java.util.Queue: boolean add(java.lang.Object)>(r4);

        $r21 = r0.<infoFlow.ProgramTree: soot.toolkits.graph.ExceptionalUnitGraph cfg>;

        $r22 = virtualinvoke r2.<infoFlow.Edge: soot.Unit getUnit()>();

        $r23 = virtualinvoke $r21.<soot.toolkits.graph.ExceptionalUnitGraph: java.util.List getUnexceptionalPredsOf(soot.Unit)>($r22);

        $i4 = interfaceinvoke $r23.<java.util.List: int size()>();

(1)     if $i4 != 0 goto label2;

        virtualinvoke r4.<infoFlow.Vertex: void setHeadLocation(boolean)>(1);

        $z8 = virtualinvoke r2.<infoFlow.Edge: boolean isInErrorPath()>();

(2)     if $z8 == 0 goto label2;

        $r41 = r0.<infoFlow.ProgramTree: java.util.HashSet errorRootSet>;

        virtualinvoke $r41.<java.util.HashSet: boolean add(java.lang.Object)>(r4);

        $r42 = r0.<infoFlow.ProgramTree: java.util.Queue errorRootQueue>;

        interfaceinvoke $r42.<java.util.Queue: boolean add(java.lang.Object)>(r4);

(3)     z11_2 = 1;

     label2:
        z11_3 = Phi(z11_1 #1, z11_1 #2, z11_2 #3);

        $r24 = r0.<infoFlow.ProgramTree: soot.toolkits.graph.ExceptionalUnitGraph cfg>;

        $r25 = virtualinvoke r2.<infoFlow.Edge: soot.Unit getUnit()>();

        $r26 = virtualinvoke $r24.<soot.toolkits.graph.ExceptionalUnitGraph: java.util.List getPredsOf(soot.Unit)>($r25);

        r6 = interfaceinvoke $r26.<java.util.List: java.util.Iterator iterator()>();

        goto label4;

     label3:
        $r27 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>();

        r5 = (soot.Unit) $r27;

        $r28 = new infoFlow.Edge;

        specialinvoke $r28.<infoFlow.Edge: void <init>(soot.Unit)>(r5);

        r7 = $r28;

        virtualinvoke r7.<infoFlow.Edge: void setTarget(infoFlow.Vertex)>(r4);

        virtualinvoke r7.<infoFlow.Edge: void setProgramTree(infoFlow.ProgramTree)>(r0);

        virtualinvoke r4.<infoFlow.Vertex: void addIncomingEdge(infoFlow.Edge)>(r7);

        $r29 = r0.<infoFlow.ProgramTree: infoFlow.CoverRelation coverRelation>;

        virtualinvoke $r29.<infoFlow.CoverRelation: void updateUnitVertexMap(infoFlow.Edge)>(r7);

        $r31 = r0.<infoFlow.ProgramTree: infoFlow.UnitController unitController>;

        $r30 = r0.<infoFlow.ProgramTree: java.util.Map stores>;

        virtualinvoke $r31.<infoFlow.UnitController: void analyzeEdge(infoFlow.Edge,java.util.Map)>(r7, $r30);

        $z4 = virtualinvoke r7.<infoFlow.Edge: boolean isErrorEdge()>();

        if $z4 == 0 goto label4;

        $r32 = r0.<infoFlow.ProgramTree: java.util.Queue errorSet>;

        interfaceinvoke $r32.<java.util.Queue: boolean add(java.lang.Object)>(r4);

     label4:
        $z3 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>();

        if $z3 != 0 goto label3;

        $r33 = virtualinvoke r4.<infoFlow.Vertex: infoFlow.Edge getOutgoingEdge()>();

        $z6 = virtualinvoke $r33.<infoFlow.Edge: boolean isErrorEdge()>();

(4)     if $z6 == 0 goto label5;

        $r34 = r0.<infoFlow.ProgramTree: java.util.Queue uncovered>;

        interfaceinvoke $r34.<java.util.Queue: void clear()>();

        $r35 = r0.<infoFlow.ProgramTree: java.util.Queue uncovered>;

        interfaceinvoke $r35.<java.util.Queue: boolean add(java.lang.Object)>(r4);

        $r36 = newarray (java.lang.Object)[1];

        $r37 = new java.lang.StringBuilder;

        specialinvoke $r37.<java.lang.StringBuilder: void <init>(java.lang.String)>("uncvered set = ");

        $r38 = r0.<infoFlow.ProgramTree: java.util.Queue uncovered>;

        $r39 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r38);

        $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.String toString()>();

        $r36[0] = $r40;

(5)     staticinvoke <infoFlow.LogUtils: void fatalln(java.lang.Object[])>($r36);

     label5:
        z11_1 = Phi(z11 #0, z11_3 #4, z11_3 #5);

        $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>();

        if $z0 != 0 goto label1;

        $r43 = newarray (java.lang.Object)[1];

        $r44 = new java.lang.StringBuilder;

        specialinvoke $r44.<java.lang.StringBuilder: void <init>(java.lang.String)>("<-----expand : w.incomingEdge#");

        $r45 = virtualinvoke r1.<infoFlow.Vertex: java.util.Set getIncomingEdges()>();

        $i5 = interfaceinvoke $r45.<java.util.Set: int size()>();

        $r46 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5);

        $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" : w.previousVertexSet#");

        $r48 = virtualinvoke r1.<infoFlow.Vertex: java.util.Set getPreviousVertexSet()>();

        $i6 = interfaceinvoke $r48.<java.util.Set: int size()>();

        $r49 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6);

        $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.String toString()>();

        $r43[0] = $r50;

        staticinvoke <infoFlow.LogUtils: void detailln(java.lang.Object[])>($r43);

        return z11_1;
    }

    private void refine(infoFlow.Vertex)
    {
        infoFlow.ProgramTree r0;
        infoFlow.Vertex r1;

        r0 := @this: infoFlow.ProgramTree;

        r1 := @parameter0: infoFlow.Vertex;

        return;
    }

    public java.lang.String getProgramDefinition()
    {
        infoFlow.ProgramTree r0;
        java.lang.StringBuilder $r1, $r3, $r4, $r8;
        java.lang.String $r2, $r5, $r9;
        java.util.Map $r6;
        java.lang.Object $r7;

        r0 := @this: infoFlow.ProgramTree;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<java.lang.StringBuilder: void <init>(java.lang.String)>("_");

        $r2 = r0.<infoFlow.ProgramTree: java.lang.String functionName>;

        $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2);

        $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_");

        $r6 = <infoFlow.ProgramTree: java.util.Map functionNameInvokeCount>;

        $r5 = r0.<infoFlow.ProgramTree: java.lang.String functionName>;

        $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>($r5);

        $r8 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7);

        $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>();

        return $r9;
    }

    public void printResult(java.lang.String)
    {
        infoFlow.ProgramTree r0;
        java.lang.String r1;
        boolean $z0;

        r0 := @this: infoFlow.ProgramTree;

        r1 := @parameter0: java.lang.String;

        $z0 = r0.<infoFlow.ProgramTree: boolean errorLocationFeasible>;

        staticinvoke <infoFlow.LogUtils: void printResult(java.lang.String,boolean)>(r1, $z0);

        return;
    }
}
