public class toy_benchmark.ToyBenchmark4 extends java.lang.Object
{

    public void <init>()
    {
        toy_benchmark.ToyBenchmark4 r0;

        r0 := @this: toy_benchmark.ToyBenchmark4;

        specialinvoke r0.<java.lang.Object: void <init>()>();

        return;
    }

    public static void main(java.lang.String[])
    {
        java.lang.String[] r0;
        toy_benchmark.Node r1, r2, $r3, $r4, $r5, $r6, r7, r8;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, i10, i10_1, i10_2;

        r0 := @parameter0: java.lang.String[];

        i10 = 1;

        $r3 = new toy_benchmark.Node;

        specialinvoke $r3.<toy_benchmark.Node: void <init>()>();

        r1 = $r3;

        $r4 = new toy_benchmark.Node;

        specialinvoke $r4.<toy_benchmark.Node: void <init>()>();

        r7 = $r4;

        $r5 = new toy_benchmark.Node;

        specialinvoke $r5.<toy_benchmark.Node: void <init>()>();

        r2 = $r5;

        r1.<toy_benchmark.Node: toy_benchmark.Node next> = r2;

        $r6 = r1.<toy_benchmark.Node: toy_benchmark.Node next>;

        $r6.<toy_benchmark.Node: int size> = 7;

        r2.<toy_benchmark.Node: int size> = 10;

        r7.<toy_benchmark.Node: int size> = 9;

(0)     goto label4;

     label1:
        $i1 = i10_1 % 2;

        if $i1 != 0 goto label2;

        $i4 = r7.<toy_benchmark.Node: int size>;

        $i5 = $i4 + 1;

        r7.<toy_benchmark.Node: int size> = $i5;

        $i6 = r7.<toy_benchmark.Node: int size>;

        $i7 = $i6 + 1;

        r7.<toy_benchmark.Node: int size> = $i7;

        $i8 = r7.<toy_benchmark.Node: int size>;

        $i9 = $i8 + 1;

        r7.<toy_benchmark.Node: int size> = $i9;

        goto label3;

     label2:
        $i2 = r7.<toy_benchmark.Node: int size>;

        $i3 = $i2 - 1;

        r7.<toy_benchmark.Node: int size> = $i3;

     label3:
(1)     i10_2 = i10_1 + 1;

     label4:
        i10_1 = Phi(i10 #0, i10_2 #1);

        if i10_1 < 5 goto label1;

        r8 = r1;

        i0 = r8.<toy_benchmark.Node: int size>;

        staticinvoke <toy_benchmark.ErrorFunction: void Error()>();

        return;
    }
}
