Unmodeled Methods:

<android.animation.Animator: java.util.ArrayList getListeners()>
<android.animation.Animator: void removeListener(android.animation.Animator$AnimatorListener)>
<android.animation.Animator: void setTarget(java.lang.Object)>
<android.animation.AnimatorListenerAdapter: void onAnimationCancel(android.animation.Animator)>
<android.animation.AnimatorListenerAdapter: void onAnimationRepeat(android.animation.Animator)>
<android.animation.AnimatorSet$1: void onAnimationCancel(android.animation.Animator)>
<android.animation.AnimatorSet$AnimatorSetListener: void onAnimationEnd(android.animation.Animator)>
<android.animation.AnimatorSet$AnimatorSetListener: void onAnimationRepeat(android.animation.Animator)>
<android.animation.AnimatorSet$AnimatorSetListener: void onAnimationStart(android.animation.Animator)>
<android.animation.AnimatorSet$Node: void addDependency(android.animation.AnimatorSet$Dependency)>
<android.animation.AnimatorSet: android.animation.AnimatorSet$Builder play(android.animation.Animator)>
<android.animation.AnimatorSet: void playSequentially(android.animation.Animator[])>
<android.animation.AnimatorSet: void playTogether(android.animation.Animator[])>
<android.animation.AnimatorSet: void setTarget(java.lang.Object)>
<android.animation.ArgbEvaluator: java.lang.Object evaluate(float,java.lang.Object,java.lang.Object)>
<android.animation.FloatEvaluator: java.lang.Float evaluate(float,java.lang.Number,java.lang.Number)>
<android.animation.FloatKeyframeSet: float getFloatValue(float)>
<android.animation.FloatKeyframeSet: void <init>(android.animation.Keyframe$FloatKeyframe[])>
<android.animation.IntEvaluator: java.lang.Integer evaluate(float,java.lang.Integer,java.lang.Integer)>
<android.animation.IntKeyframeSet: int getIntValue(float)>
<android.animation.IntKeyframeSet: void <init>(android.animation.Keyframe$IntKeyframe[])>
<android.animation.Keyframe: android.animation.Keyframe ofFloat(float)>
<android.animation.Keyframe: android.animation.Keyframe ofFloat(float,float)>
<android.animation.Keyframe: android.animation.Keyframe ofInt(float)>
<android.animation.Keyframe: android.animation.Keyframe ofInt(float,int)>
<android.animation.KeyframeSet: android.animation.KeyframeSet ofFloat(float[])>
<android.animation.KeyframeSet: android.animation.KeyframeSet ofInt(int[])>
<android.animation.KeyframeSet: void <init>(android.animation.Keyframe[])>
<android.animation.KeyframeSet: void setEvaluator(android.animation.TypeEvaluator)>
<android.animation.ObjectAnimator: void setFloatValues(float[])>
<android.animation.ObjectAnimator: void setIntValues(int[])>
<android.animation.ObjectAnimator: void setPropertyName(java.lang.String)>
<android.animation.ObjectAnimator: void setTarget(java.lang.Object)>
<android.animation.PropertyValuesHolder$FloatPropertyValuesHolder: void setFloatValues(float[])>
<android.animation.PropertyValuesHolder$IntPropertyValuesHolder: void setIntValues(int[])>
<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofFloat(android.util.Property,float[])>
<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofFloat(java.lang.String,float[])>
<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofInt(android.util.Property,int[])>
<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofInt(java.lang.String,int[])>
<android.animation.PropertyValuesHolder: java.lang.String getPropertyName()>
<android.animation.PropertyValuesHolder: void setEvaluator(android.animation.TypeEvaluator)>
<android.animation.PropertyValuesHolder: void setFloatValues(float[])>
<android.animation.PropertyValuesHolder: void setIntValues(int[])>
<android.animation.PropertyValuesHolder: void setPropertyName(java.lang.String)>
<android.animation.ValueAnimator$1: java.util.ArrayList initialValue()>
<android.animation.ValueAnimator$2: java.util.ArrayList initialValue()>
<android.animation.ValueAnimator$3: java.util.ArrayList initialValue()>
<android.animation.ValueAnimator$4: java.util.ArrayList initialValue()>
<android.animation.ValueAnimator$5: java.util.ArrayList initialValue()>
<android.app.Activity: boolean onGenericMotionEvent(android.view.MotionEvent)>
<android.app.Activity: boolean onKeyShortcut(int,android.view.KeyEvent)>
<android.app.Activity: boolean onTouchEvent(android.view.MotionEvent)>
<android.app.Activity: boolean onTrackballEvent(android.view.MotionEvent)>
<android.app.Activity: int getTitleColor()>
<android.app.Activity: java.lang.Object onRetainNonConfigurationInstance()>
<android.app.Activity: void onApplyThemeResource(android.content.res.Resources$Theme,int,boolean)>
<android.app.Activity: void onUserInteraction()>
<android.app.ActivityManager: void <init>(android.content.Context)>
<android.app.ActivityManagerNative$1: android.app.IActivityManager create()>
<android.app.ActivityManagerNative: android.app.IActivityManager asInterface(android.os.IBinder)>
<android.app.ActivityManagerNative: android.app.IActivityManager getDefault()>
<android.app.ActivityManagerProxy: boolean finishActivity(android.os.IBinder,int,android.content.Intent)>
<android.app.ActivityManagerProxy: void <init>(android.os.IBinder)>
<android.app.Application: void onTrimMemory(int)>
<android.app.BackStackState: void <init>(android.app.FragmentManagerImpl,android.app.BackStackRecord)>
<android.app.ContextImpl: int getThemeResId()>
<android.app.DownloadManager: void <init>(android.content.ContentResolver,java.lang.String)>
<android.app.FragmentManagerImpl: android.app.Fragment getFragment(android.os.Bundle,java.lang.String)>
<android.app.FragmentManagerImpl: boolean dispatchContextItemSelected(android.view.MenuItem)>
<android.app.FragmentManagerImpl: boolean dispatchPrepareOptionsMenu(android.view.Menu)>
<android.app.FragmentManagerImpl: boolean execPendingActions()>
<android.app.FragmentManagerImpl: int transitToStyleIndex(int,boolean)>
<android.app.FragmentManagerImpl: void <init>(android.app.Activity)>
<android.app.FragmentManagerImpl: void dispatchActivityCreated()>
<android.app.FragmentManagerImpl: void dispatchConfigurationChanged(android.content.res.Configuration)>
<android.app.FragmentManagerImpl: void dispatchCreate()>
<android.app.FragmentManagerImpl: void dispatchLowMemory()>
<android.app.FragmentManagerImpl: void dispatchOptionsMenuClosed(android.view.Menu)>
<android.app.FragmentManagerImpl: void dispatchResume()>
<android.app.FragmentManagerImpl: void dispatchStop()>
<android.app.FragmentManagerImpl: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<android.app.FragmentManagerImpl: void performPendingDeferredStart(android.app.Fragment)>
<android.app.FragmentManagerImpl: void putFragment(android.os.Bundle,java.lang.String,android.app.Fragment)>
<android.app.FragmentState: android.app.Fragment instantiate(android.app.Activity)>
<android.app.FragmentState: void <init>(android.app.Fragment)>
<android.app.ISearchManager$Stub: android.app.ISearchManager asInterface(android.os.IBinder)>
<android.app.IWallpaperManager$Stub: android.app.IWallpaperManager asInterface(android.os.IBinder)>
<android.app.NotificationManager: void <init>(android.content.Context)>
<android.app.SearchManager: void <init>(android.content.Context)>
<android.app.StatusBarManager: android.app.StatusBarManager createInstance(android.content.Context)>
<android.app.UiModeManager: android.app.UiModeManager createInstance()>
<android.app.admin.DevicePolicyManager: void <init>(android.content.Context)>
<android.content.ClipboardManager: void <init>(android.content.Context)>
<android.content.ContentResolver: void <init>(android.content.Context)>
<android.content.Context: java.lang.Object droidsafeGetSystemService(java.lang.String)>
<android.content.ContextWrapper: void attachBaseContext(android.content.Context)>
<android.content.IntentFilter: java.lang.String getCategory(int)>
<android.content.res.Configuration: boolean isLayoutSizeAtLeast(int)>
<android.content.res.Configuration: void setToDefaults()>
<android.content.res.Resources$Theme: void applyStyle(int,boolean)>
<android.content.res.Resources$Theme: void setTo(android.content.res.Resources$Theme)>
<android.content.res.Resources: android.content.res.Resources$Theme newTheme()>
<android.content.res.Resources: android.content.res.XmlResourceParser getAnimation(int)>
<android.content.res.Resources: int selectDefaultTheme(int,int)>
<android.content.res.TypedArray: android.util.TypedValue peekValue(int)>
<android.graphics.Rect: int getSumTaintInt()>
<android.graphics.drawable.ShapeDrawable: void <init>(android.graphics.drawable.ShapeDrawable$ShapeState)>
<android.hardware.usb.UsbManager: void <init>(android.content.Context)>
<android.media.AudioManager: void <init>(android.content.Context)>
<android.net.ThrottleManager: android.net.ThrottleManager createInstance()>
<android.net.Uri$Part: android.net.Uri$Part nonNull(android.net.Uri$Part)>
<android.nfc.NfcActivityManager: void <init>(android.nfc.NfcAdapter)>
<android.nfc.NfcAdapter: android.nfc.NfcAdapter getNfcAdapter(android.content.Context)>
<android.nfc.NfcManager: void <init>(android.content.Context)>
<android.os.Binder: java.lang.String getInterfaceDescriptor()>
<android.os.Binder: void dump(java.io.FileDescriptor,java.lang.String[])>
<android.os.IMessenger$Stub: android.os.IMessenger asInterface(android.os.IBinder)>
<android.os.Parcel: android.os.ParcelFileDescriptor readFileDescriptor()>
<android.os.ServiceManager: android.os.IBinder getService(java.lang.String)>
<android.os.ServiceManagerNative: android.os.IServiceManager asInterface(android.os.IBinder)>
<android.os.ServiceManagerProxy: android.os.IBinder getService(java.lang.String)>
<android.os.ServiceManagerProxy: void <init>(android.os.IBinder)>
<android.print.PrintManager: void <init>(android.content.Context,android.print.IPrintManager,int,int)>
<android.telephony.TelephonyManager: void <init>(android.content.Context)>
<android.util.EventLog: int writeEvent(int,java.lang.Object[])>
<android.util.FinitePool: android.util.Poolable acquire()>
<android.util.FinitePool: void release(android.util.Poolable)>
<android.util.FloatProperty: void <init>(java.lang.String)>
<android.util.Log: int println_native(int,int,java.lang.String,java.lang.String)>
<android.util.LogWriter: void <init>(int,java.lang.String,int)>
<android.util.Pools: android.util.Pool finitePool(android.util.PoolableManager,int)>
<android.util.Pools: android.util.Pool synchronizedPool(android.util.Pool)>
<android.util.Property: void <init>(java.lang.Class,java.lang.String)>
<android.util.Singleton: java.lang.Object get()>
<android.util.Slog: int e(java.lang.String,java.lang.String)>
<android.util.SynchronizedPool: android.util.Poolable acquire()>
<android.util.SynchronizedPool: void <init>(android.util.Pool)>
<android.util.SynchronizedPool: void release(android.util.Poolable)>
<android.util.XmlPullAttributes: void <init>(org.xmlpull.v1.XmlPullParser)>
<android.view.ContextThemeWrapper: void attachBaseContext(android.content.Context)>
<android.view.ContextThemeWrapper: void onApplyThemeResource(android.content.res.Resources$Theme,int,boolean)>
<android.view.DragEvent: android.view.DragEvent obtain(int,float,float,java.lang.Object,android.content.ClipDescription,android.content.ClipData,boolean)>
<android.view.IWindowManager$Stub$Proxy: boolean canStatusBarHide()>
<android.view.IWindowManager$Stub$Proxy: boolean hasNavigationBar()>
<android.view.IWindowManager$Stub: android.view.IWindowManager asInterface(android.os.IBinder)>
<android.view.InputEventConsistencyVerifier: boolean isInstrumentationEnabled()>
<android.view.InputEventConsistencyVerifier: void <init>(java.lang.Object,int)>
<android.view.InputEventConsistencyVerifier: void <init>(java.lang.Object,int,java.lang.String)>
<android.view.LayoutInflater: void <init>(android.content.Context)>
<android.view.MotionEvent: int getFlags()>
<android.view.View: int getResolvedLayoutDirection()>
<android.view.View: void onCloseSystemDialogs(java.lang.String)>
<android.view.ViewConfiguration: int getScaledWindowTouchSlop()>
<android.view.ViewGroup: boolean onRequestFocusInDescendants(int,android.graphics.Rect)>
<android.view.ViewGroup: void droidsafeCallbackHook()>
<android.view.ViewGroup: void onAnimationEnd()>
<android.view.ViewGroup: void onAnimationStart()>
<android.view.Window: android.content.res.TypedArray getWindowStyle()>
<android.view.Window: boolean shouldCloseOnTouch(android.content.Context,android.view.MotionEvent)>
<android.view.Window: int getFeatures()>
<android.view.WindowImpl: android.os.Bundle saveHierarchyState()>
<android.view.WindowImpl: android.view.View peekDecorView()>
<android.view.WindowImpl: boolean superDispatchGenericMotionEvent(android.view.MotionEvent)>
<android.view.WindowImpl: boolean superDispatchKeyEvent(android.view.KeyEvent)>
<android.view.WindowImpl: boolean superDispatchKeyShortcutEvent(android.view.KeyEvent)>
<android.view.WindowImpl: boolean superDispatchTouchEvent(android.view.MotionEvent)>
<android.view.WindowImpl: boolean superDispatchTrackballEvent(android.view.MotionEvent)>
<android.view.WindowImpl: void <init>(android.content.Context)>
<android.view.WindowImpl: void invalidatePanelMenu(int)>
<android.view.WindowImpl: void onConfigurationChanged(android.content.res.Configuration)>
<android.view.WindowImpl: void restoreHierarchyState(android.os.Bundle)>
<android.view.WindowImpl: void setTitle(java.lang.CharSequence)>
<android.view.WindowImpl: void setTitleColor(int)>
<android.view.WindowManagerImpl: android.view.WindowManagerImpl getDefault()>
<android.view.accessibility.AccessibilityManager: android.view.accessibility.AccessibilityManager getInstance(android.content.Context)>
<android.view.accessibility.AccessibilityManager: void <init>(android.content.Context)>
<android.view.animation.AccelerateDecelerateInterpolator: void <init>(android.content.Context,android.util.AttributeSet)>
<android.view.animation.AnticipateInterpolator: void <init>(android.content.Context,android.util.AttributeSet)>
<android.view.animation.AnticipateOvershootInterpolator: void <init>(android.content.Context,android.util.AttributeSet)>
<android.view.animation.BounceInterpolator: void <init>(android.content.Context,android.util.AttributeSet)>
<android.view.animation.CycleInterpolator: void <init>(android.content.Context,android.util.AttributeSet)>
<android.view.animation.LinearInterpolator: void <init>(android.content.Context,android.util.AttributeSet)>
<android.view.animation.OvershootInterpolator: void <init>(android.content.Context,android.util.AttributeSet)>
<android.view.inputmethod.InputMethodManager: android.view.inputmethod.InputMethodManager getInstance(android.content.Context)>
<android.view.inputmethod.InputMethodManager: android.view.inputmethod.InputMethodManager getInstance(android.os.Looper)>
<android.view.textservice.TextServicesManager: android.view.textservice.TextServicesManager getInstance()>
<android.widget.RelativeLayout$DependencyGraph$Node$1: android.widget.RelativeLayout$DependencyGraph$Node newInstance()>
<android.widget.RelativeLayout$DependencyGraph$Node$1: void onAcquired(android.widget.RelativeLayout$DependencyGraph$Node)>
<android.widget.RelativeLayout$DependencyGraph$Node$1: void onReleased(android.widget.RelativeLayout$DependencyGraph$Node)>
<android.widget.RelativeLayout$DependencyGraph$Node: android.widget.RelativeLayout$DependencyGraph$Node acquire(android.view.View)>
<android.widget.RelativeLayout$DependencyGraph$Node: android.widget.RelativeLayout$DependencyGraph$Node getNextPoolable()>
<android.widget.RelativeLayout$DependencyGraph$Node: boolean isPooled()>
<android.widget.RelativeLayout$DependencyGraph$Node: void setNextPoolable(android.widget.RelativeLayout$DependencyGraph$Node)>
<android.widget.RelativeLayout$DependencyGraph$Node: void setPooled(boolean)>
<android.widget.RelativeLayout: android.widget.RelativeLayout$LayoutParams getRelatedViewParams(int[],int)>
<android.widget.RelativeLayout: boolean positionChildHorizontal(android.view.View,android.widget.RelativeLayout$LayoutParams,int,boolean)>
<android.widget.RelativeLayout: boolean positionChildVertical(android.view.View,android.widget.RelativeLayout$LayoutParams,int,boolean)>
<android.widget.RelativeLayout: void alignBaseline(android.view.View,android.widget.RelativeLayout$LayoutParams)>
<android.widget.RelativeLayout: void applyHorizontalSizeRules(android.widget.RelativeLayout$LayoutParams,int)>
<android.widget.RelativeLayout: void applyVerticalSizeRules(android.widget.RelativeLayout$LayoutParams,int)>
<android.widget.RelativeLayout: void centerHorizontal(android.view.View,android.widget.RelativeLayout$LayoutParams,int)>
<android.widget.RelativeLayout: void centerVertical(android.view.View,android.widget.RelativeLayout$LayoutParams,int)>
<android.widget.RelativeLayout: void measureChild(android.view.View,android.widget.RelativeLayout$LayoutParams,int,int)>
<android.widget.RelativeLayout: void measureChildHorizontal(android.view.View,android.widget.RelativeLayout$LayoutParams,int,int)>
<com.android.internal.app.ActionBarImpl: void <init>(android.app.Activity)>
<com.android.internal.app.ActionBarImpl: void dispatchMenuVisibilityChanged(boolean)>
<com.android.internal.app.ActionBarImpl: void onConfigurationChanged(android.content.res.Configuration)>
<com.android.internal.app.ActionBarImpl: void setShowHideAnimationEnabled(boolean)>
<com.android.internal.os.BinderInternal: android.os.IBinder getContextObject()>
<com.android.internal.policy.PolicyManager: android.view.LayoutInflater makeNewLayoutInflater(android.content.Context)>
<com.android.internal.policy.PolicyManager: android.view.Window makeNewWindow(android.content.Context)>
<com.android.internal.util.ArrayUtils: int idealByteArraySize(int)>
<com.android.internal.util.ArrayUtils: int idealIntArraySize(int)>
<com.android.internal.view.menu.ContextMenuBuilder: void <init>(android.content.Context)>
<com.android.internal.view.menu.MenuBuilder: android.content.Context getContext()>
<com.android.internal.view.menu.MenuBuilder: com.android.internal.view.menu.MenuBuilder setHeaderTitleInt(java.lang.CharSequence)>
<com.android.internal.view.menu.MenuBuilder: void <init>(android.content.Context)>
<com.android.internal.view.menu.MenuBuilder: void setHeaderInternal(int,java.lang.CharSequence,int,android.graphics.drawable.Drawable,android.view.View)>
<com.android.internal.view.menu.MenuBuilder: void startDispatchingItemsChanged()>
<com.android.internal.view.menu.MenuBuilder: void stopDispatchingItemsChanged()>
<com.android.internal.view.menu.MenuItemImpl: void setMenuInfo(android.view.ContextMenu$ContextMenuInfo)>
<com.android.internal.view.menu.SubMenuBuilder: void <init>(android.content.Context,com.android.internal.view.menu.MenuBuilder,com.android.internal.view.menu.MenuItemImpl)>
<com.google.android.collect.Maps: java.util.HashMap newHashMap()>
<dalvik.system.CloseGuard: dalvik.system.CloseGuard get()>
<dalvik.system.CloseGuard: void open(java.lang.String)>
<dalvik.system.VMStack: java.lang.ClassLoader getCallingClassLoader()>
<droidsafe.concrete.DroidSafeContentResolver: void <init>(android.content.Context)>
<droidsafe.helpers.DSOnlyType: void <init>(java.lang.String,int)>
<droidsafe.runtime.DroidSafeAndroidRuntime: void modelApplication(android.app.Application)>
<java.io.File: boolean isAbsolute()>
<java.io.FileDescriptor: boolean valid()>
<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)>
<java.lang.BootClassLoader: java.lang.BootClassLoader getInstance()>
<java.lang.Class: void droidsafeSetLoader(java.lang.ClassLoader)>
<java.lang.Object: boolean getTaintBoolean()>
<java.lang.Object: char getTaintChar()>
<java.lang.Object: float getTaintFloat()>
<java.lang.Object: int getTaintInt()>
<java.lang.Object: java.lang.Object$DSTaintObject getTaint()>
<java.lang.Object: void addTaint(boolean)>
<java.lang.Object: void addTaint(double)>
<java.lang.Object: void addTaint(java.lang.Object$DSTaintObject)>
<java.lang.ThreadGroup: boolean isDaemon()>
<java.lang.ThreadGroup: boolean isDestroyed()>
<java.lang.ThreadGroup: int getMaxPriority()>
<java.lang.ThreadGroup: void <init>(java.lang.ThreadGroup,java.lang.String)>
<java.lang.ThreadGroup: void setDaemon(boolean)>
<java.lang.ThreadGroup: void setMaxPriority(int)>
<java.lang.ThreadLocal$Values: void inheritValues(java.lang.ThreadLocal$Values)>
<java.lang.ThreadLocal: java.lang.Object initialValue()>
<java.util.AbstractCollection: boolean addElementAt(int,java.lang.Object)>
<java.util.AbstractCollection: int getIndexOf(java.lang.Object)>
<java.util.AbstractCollection: java.lang.Object getElementAt(int)>
<java.util.AbstractCollection: java.lang.Object removeElementAt(int)>
<java.util.AbstractCollection: java.lang.Object removeFirstElement()>
<java.util.AbstractCollection: java.util.Iterator getIterator()>
<java.util.AbstractCollection: void incrementCapacity(int)>
<java.util.AbstractCollection: void requestCapacity(int)>
<java.util.AbstractCollection: void setElementAt(int,java.lang.Object)>
<java.util.AbstractMap: void requestCapacity(int)>
<java.util.WeakHashMap: java.util.WeakHashMap$Entry[] newEntryArray(int)>
<libcore.io.BlockGuardOs: java.io.FileDescriptor open(java.lang.String,int,int)>
<libcore.io.BlockGuardOs: void <init>(libcore.io.Os)>
<libcore.io.ErrnoException: void <init>(java.lang.String,int)>
<libcore.io.ForwardingOs: java.lang.String strerror(int)>
<libcore.io.ForwardingOs: libcore.io.StructStat fstat(java.io.FileDescriptor)>
<libcore.io.ForwardingOs: void <init>(libcore.io.Os)>
<libcore.io.IoBridge: java.io.FileDescriptor open(java.lang.String,int)>
<libcore.io.IoUtils: void close(java.io.FileDescriptor)>
<libcore.io.OsConstants: boolean S_ISDIR(int)>
<libcore.io.OsConstants: java.lang.String errnoName(int)>
<libcore.io.Posix: java.io.FileDescriptor open(java.lang.String,int,int)>
<libcore.io.Posix: java.lang.String strerror(int)>
<libcore.io.Posix: libcore.io.StructStat fstat(java.io.FileDescriptor)>
<libcore.util.CollectionUtils: java.lang.Iterable dereferenceIterable(java.lang.Iterable,boolean)>
<sun.misc.Unsafe: void <init>()>


Methods overriding a system method that are not called from model: 


Errors in PTA for reachable methods:

